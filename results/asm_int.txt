
----------------------------------------------------------------------
Interpreter

code size        =    119K bytes
total space      =    119K bytes
wasted space     =      0K bytes

# of codelets    =    271
avg codelet size =    452 bytes


----------------------------------------------------------------------
slow signature handler  [0x00007f8f8f722520, 0x00007f8f8f7226e0]  448 bytes

Loaded disassembler from /home/gezr/dev/jdk-11+28/lib/server/hsdis-amd64.so
[Disassembling for mach='i386:x86-64']
  0x00007f8f8f722520: mov    %rsp,%rcx
  0x00007f8f8f722523: sub    $0x70,%rsp
  0x00007f8f8f722527: callq  0x00007f8f8f722531
  0x00007f8f8f72252c: jmpq   0x00007f8f8f7225c9
  0x00007f8f8f722531: mov    %r14,%rdx
  0x00007f8f8f722534: mov    %rbx,%rsi
  0x00007f8f8f722537: lea    0x8(%rsp),%rax
  0x00007f8f8f72253c: mov    %r13,-0x40(%rbp)
  0x00007f8f8f722540: mov    %r15,%rdi
  0x00007f8f8f722543: vzeroupper 
  0x00007f8f8f722546: mov    %rbp,0x330(%r15)
  0x00007f8f8f72254d: mov    %rax,0x320(%r15)
  0x00007f8f8f722554: test   $0xf,%esp
  0x00007f8f8f72255a: je     0x00007f8f8f722572
  0x00007f8f8f722560: sub    $0x8,%rsp
  0x00007f8f8f722564: callq  0x00007f8fad0253c0 = InterpreterRuntime::slow_signature_handler(JavaThread*, Method*, long*, long*)
  0x00007f8f8f722569: add    $0x8,%rsp
  0x00007f8f8f72256d: jmpq   0x00007f8f8f722577
  0x00007f8f8f722572: callq  0x00007f8fad0253c0 = InterpreterRuntime::slow_signature_handler(JavaThread*, Method*, long*, long*)
  0x00007f8f8f722577: movabs $0x0,%r10
  0x00007f8f8f722581: mov    %r10,0x320(%r15)
  0x00007f8f8f722588: movabs $0x0,%r10
  0x00007f8f8f722592: mov    %r10,0x330(%r15)
  0x00007f8f8f722599: movabs $0x0,%r10
  0x00007f8f8f7225a3: mov    %r10,0x328(%r15)
  0x00007f8f8f7225aa: vzeroupper 
  0x00007f8f8f7225ad: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7225b5: je     0x00007f8f8f7225c0
  0x00007f8f8f7225bb: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7225c0: mov    -0x40(%rbp),%r13
  0x00007f8f8f7225c4: mov    -0x38(%rbp),%r14
  0x00007f8f8f7225c8: retq   
  0x00007f8f8f7225c9: mov    0x28(%rsp),%ecx
  0x00007f8f8f7225cd: test   $0x1,%ecx
  0x00007f8f8f7225d3: jne    0x00007f8f8f7225e4
  0x00007f8f8f7225d9: vmovss 0x30(%rsp),%xmm0
  0x00007f8f8f7225df: jmpq   0x00007f8f8f7225ea
  0x00007f8f8f7225e4: vmovsd 0x30(%rsp),%xmm0
  0x00007f8f8f7225ea: test   $0x2,%ecx
  0x00007f8f8f7225f0: jne    0x00007f8f8f722601
  0x00007f8f8f7225f6: vmovss 0x38(%rsp),%xmm1
  0x00007f8f8f7225fc: jmpq   0x00007f8f8f722607
  0x00007f8f8f722601: vmovsd 0x38(%rsp),%xmm1
  0x00007f8f8f722607: test   $0x4,%ecx
  0x00007f8f8f72260d: jne    0x00007f8f8f72261e
  0x00007f8f8f722613: vmovss 0x40(%rsp),%xmm2
  0x00007f8f8f722619: jmpq   0x00007f8f8f722624
  0x00007f8f8f72261e: vmovsd 0x40(%rsp),%xmm2
  0x00007f8f8f722624: test   $0x8,%ecx
  0x00007f8f8f72262a: jne    0x00007f8f8f72263b
  0x00007f8f8f722630: vmovss 0x48(%rsp),%xmm3
  0x00007f8f8f722636: jmpq   0x00007f8f8f722641
  0x00007f8f8f72263b: vmovsd 0x48(%rsp),%xmm3
  0x00007f8f8f722641: test   $0x10,%ecx
  0x00007f8f8f722647: jne    0x00007f8f8f722658
  0x00007f8f8f72264d: vmovss 0x50(%rsp),%xmm4
  0x00007f8f8f722653: jmpq   0x00007f8f8f72265e
  0x00007f8f8f722658: vmovsd 0x50(%rsp),%xmm4
  0x00007f8f8f72265e: test   $0x20,%ecx
  0x00007f8f8f722664: jne    0x00007f8f8f722675
  0x00007f8f8f72266a: vmovss 0x58(%rsp),%xmm5
  0x00007f8f8f722670: jmpq   0x00007f8f8f72267b
  0x00007f8f8f722675: vmovsd 0x58(%rsp),%xmm5
  0x00007f8f8f72267b: test   $0x40,%ecx
  0x00007f8f8f722681: jne    0x00007f8f8f722692
  0x00007f8f8f722687: vmovss 0x60(%rsp),%xmm6
  0x00007f8f8f72268d: jmpq   0x00007f8f8f722698
  0x00007f8f8f722692: vmovsd 0x60(%rsp),%xmm6
  0x00007f8f8f722698: test   $0x80,%ecx
  0x00007f8f8f72269e: jne    0x00007f8f8f7226af
  0x00007f8f8f7226a4: vmovss 0x68(%rsp),%xmm7
  0x00007f8f8f7226aa: jmpq   0x00007f8f8f7226b5
  0x00007f8f8f7226af: vmovsd 0x68(%rsp),%xmm7
  0x00007f8f8f7226b5: mov    0x20(%rbx),%ecx
  0x00007f8f8f7226b8: test   $0x8,%ecx
  0x00007f8f8f7226be: cmove  (%rsp),%rsi
  0x00007f8f8f7226c3: mov    0x8(%rsp),%rdx
  0x00007f8f8f7226c8: mov    0x10(%rsp),%rcx
  0x00007f8f8f7226cd: mov    0x18(%rsp),%r8
  0x00007f8f8f7226d2: mov    0x20(%rsp),%r9
  0x00007f8f8f7226d7: add    $0x70,%rsp
  0x00007f8f8f7226db: retq   
  0x00007f8f8f7226dc: nopl   0x0(%rax)

----------------------------------------------------------------------
error exits  [0x00007f8f8f722700, 0x00007f8f8f722800]  256 bytes

  0x00007f8f8f722700: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f722705: sub    $0x80,%rsp
  0x00007f8f8f72270c: mov    %rax,0x78(%rsp)
  0x00007f8f8f722711: mov    %rcx,0x70(%rsp)
  0x00007f8f8f722716: mov    %rdx,0x68(%rsp)
  0x00007f8f8f72271b: mov    %rbx,0x60(%rsp)
  0x00007f8f8f722720: mov    %rbp,0x50(%rsp)
  0x00007f8f8f722725: mov    %rsi,0x48(%rsp)
  0x00007f8f8f72272a: mov    %rdi,0x40(%rsp)
  0x00007f8f8f72272f: mov    %r8,0x38(%rsp)
  0x00007f8f8f722734: mov    %r9,0x30(%rsp)
  0x00007f8f8f722739: mov    %r10,0x28(%rsp)
  0x00007f8f8f72273e: mov    %r11,0x20(%rsp)
  0x00007f8f8f722743: mov    %r12,0x18(%rsp)
  0x00007f8f8f722748: mov    %r13,0x10(%rsp)
  0x00007f8f8f72274d: mov    %r14,0x8(%rsp)
  0x00007f8f8f722752: mov    %r15,(%rsp)
  0x00007f8f8f722756: movabs $0x7f8fad6abaeb,%rdi
  0x00007f8f8f722760: movabs $0x7f8f8f722700,%rsi
  0x00007f8f8f72276a: mov    %rsp,%rdx
  0x00007f8f8f72276d: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f722771: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f722776: hlt    
  0x00007f8f8f722777: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f72277c: sub    $0x80,%rsp
  0x00007f8f8f722783: mov    %rax,0x78(%rsp)
  0x00007f8f8f722788: mov    %rcx,0x70(%rsp)
  0x00007f8f8f72278d: mov    %rdx,0x68(%rsp)
  0x00007f8f8f722792: mov    %rbx,0x60(%rsp)
  0x00007f8f8f722797: mov    %rbp,0x50(%rsp)
  0x00007f8f8f72279c: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7227a1: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7227a6: mov    %r8,0x38(%rsp)
  0x00007f8f8f7227ab: mov    %r9,0x30(%rsp)
  0x00007f8f8f7227b0: mov    %r10,0x28(%rsp)
  0x00007f8f8f7227b5: mov    %r11,0x20(%rsp)
  0x00007f8f8f7227ba: mov    %r12,0x18(%rsp)
  0x00007f8f8f7227bf: mov    %r13,0x10(%rsp)
  0x00007f8f8f7227c4: mov    %r14,0x8(%rsp)
  0x00007f8f8f7227c9: mov    %r15,(%rsp)
  0x00007f8f8f7227cd: movabs $0x7f8fad6ab380,%rdi
  0x00007f8f8f7227d7: movabs $0x7f8f8f722777,%rsi
  0x00007f8f8f7227e1: mov    %rsp,%rdx
  0x00007f8f8f7227e4: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f7227e8: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f7227ed: hlt    
  0x00007f8f8f7227ee: xchg   %ax,%ax
  0x00007f8f8f7227f0: add    %al,(%rax)
  0x00007f8f8f7227f2: add    %al,(%rax)
  0x00007f8f8f7227f4: add    %al,(%rax)
  0x00007f8f8f7227f6: add    %al,(%rax)
  0x00007f8f8f7227f8: add    %al,(%rax)
  0x00007f8f8f7227fa: add    %al,(%rax)
  0x00007f8f8f7227fc: add    %al,(%rax)
  0x00007f8f8f7227fe: add    %al,(%rax)

----------------------------------------------------------------------
return entry points  [0x00007f8f8f722820, 0x00007f8f8f723360]  2880 bytes

  0x00007f8f8f722820: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722824: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f72282c: mov    -0x40(%rbp),%r13
  0x00007f8f8f722830: mov    -0x38(%rbp),%r14
  0x00007f8f8f722834: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722839: mov    -0x30(%rbp),%rbx
  0x00007f8f8f72283d: shl    $0x2,%ecx
  0x00007f8f8f722840: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722844: and    $0xff,%ebx
  0x00007f8f8f72284a: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f72284e: movzbl 0x1(%r13),%ebx
  0x00007f8f8f722853: inc    %r13
  0x00007f8f8f722856: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f722860: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722864: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722868: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722870: mov    -0x40(%rbp),%r13
  0x00007f8f8f722874: mov    -0x38(%rbp),%r14
  0x00007f8f8f722878: movzwl 0x1(%r13),%ecx
  0x00007f8f8f72287d: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722881: shl    $0x2,%ecx
  0x00007f8f8f722884: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722888: and    $0xff,%ebx
  0x00007f8f8f72288e: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722892: movzbl 0x1(%r13),%ebx
  0x00007f8f8f722897: inc    %r13
  0x00007f8f8f72289a: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f7228a4: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7228a8: mov    -0x10(%rbp),%rsp
  0x00007f8f8f7228ac: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7228b4: mov    -0x40(%rbp),%r13
  0x00007f8f8f7228b8: mov    -0x38(%rbp),%r14
  0x00007f8f8f7228bc: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7228c1: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7228c5: shl    $0x2,%ecx
  0x00007f8f8f7228c8: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f7228cc: and    $0xff,%ebx
  0x00007f8f8f7228d2: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f7228d6: movzbl 0x1(%r13),%ebx
  0x00007f8f8f7228db: inc    %r13
  0x00007f8f8f7228de: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f7228e8: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7228ec: mov    -0x10(%rbp),%rsp
  0x00007f8f8f7228f0: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7228f8: mov    -0x40(%rbp),%r13
  0x00007f8f8f7228fc: mov    -0x38(%rbp),%r14
  0x00007f8f8f722900: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722905: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722909: shl    $0x2,%ecx
  0x00007f8f8f72290c: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722910: and    $0xff,%ebx
  0x00007f8f8f722916: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f72291a: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72291f: inc    %r13
  0x00007f8f8f722922: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72292c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722930: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722934: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f72293c: mov    -0x40(%rbp),%r13
  0x00007f8f8f722940: mov    -0x38(%rbp),%r14
  0x00007f8f8f722944: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722949: mov    -0x30(%rbp),%rbx
  0x00007f8f8f72294d: shl    $0x2,%ecx
  0x00007f8f8f722950: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722954: and    $0xff,%ebx
  0x00007f8f8f72295a: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f72295e: movzbl 0x1(%r13),%ebx
  0x00007f8f8f722963: inc    %r13
  0x00007f8f8f722966: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f722970: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722974: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722978: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722980: mov    -0x40(%rbp),%r13
  0x00007f8f8f722984: mov    -0x38(%rbp),%r14
  0x00007f8f8f722988: mov    -0x28(%rbp),%rbx
  0x00007f8f8f72298c: test   %rbx,%rbx
  0x00007f8f8f72298f: je     0x00007f8f8f722a25
  0x00007f8f8f722995: cmpb   $0xba,0x0(%r13)
  0x00007f8f8f72299a: je     0x00007f8f8f7229bb
  0x00007f8f8f7229a0: cmpb   $0xe9,0x0(%r13)
  0x00007f8f8f7229a5: je     0x00007f8f8f7229bb
  0x00007f8f8f7229ab: mov    -0x18(%rbp),%rcx
  0x00007f8f8f7229af: cmpw   $0x121,0x28(%rcx)
  0x00007f8f8f7229b5: jne    0x00007f8f8f722a25
  0x00007f8f8f7229bb: mov    %rax,%rcx
  0x00007f8f8f7229be: test   %rcx,%rcx
  0x00007f8f8f7229c1: jne    0x00007f8f8f7229cd
  0x00007f8f8f7229c3: orq    $0x1,-0x8(%rbx)
  0x00007f8f8f7229cb: jmp    0x00007f8f8f722a25
  0x00007f8f8f7229cd: mov    0x8(%rcx),%ecx
  0x00007f8f8f7229d0: movabs $0x800000000,%r12
  0x00007f8f8f7229da: add    %r12,%rcx
  0x00007f8f8f7229dd: xor    %r12,%r12
  0x00007f8f8f7229e0: xor    -0x8(%rbx),%rcx
  0x00007f8f8f7229e4: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f7229eb: je     0x00007f8f8f722a25
  0x00007f8f8f7229ed: test   $0x2,%rcx
  0x00007f8f8f7229f4: jne    0x00007f8f8f722a25
  0x00007f8f8f7229f6: cmpq   $0x0,-0x8(%rbx)
  0x00007f8f8f7229fe: je     0x00007f8f8f722a21
  0x00007f8f8f722a00: cmpq   $0x1,-0x8(%rbx)
  0x00007f8f8f722a08: je     0x00007f8f8f722a21
  0x00007f8f8f722a0a: xor    -0x8(%rbx),%rcx
  0x00007f8f8f722a0e: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f722a15: je     0x00007f8f8f722a25
  0x00007f8f8f722a17: orq    $0x2,-0x8(%rbx)
  0x00007f8f8f722a1f: jmp    0x00007f8f8f722a25
  0x00007f8f8f722a21: mov    %rcx,-0x8(%rbx)
  0x00007f8f8f722a25: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722a2a: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722a2e: shl    $0x2,%ecx
  0x00007f8f8f722a31: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722a35: and    $0xff,%ebx
  0x00007f8f8f722a3b: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722a3f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f722a44: inc    %r13
  0x00007f8f8f722a47: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f722a51: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722a55: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722a59: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722a61: mov    -0x40(%rbp),%r13
  0x00007f8f8f722a65: mov    -0x38(%rbp),%r14
  0x00007f8f8f722a69: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722a6e: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722a72: shl    $0x2,%ecx
  0x00007f8f8f722a75: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722a79: and    $0xff,%ebx
  0x00007f8f8f722a7f: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722a83: movzbl 0x2(%r13),%ebx
  0x00007f8f8f722a88: add    $0x2,%r13
  0x00007f8f8f722a8c: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f722a96: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722a9a: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722a9e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722aa6: mov    -0x40(%rbp),%r13
  0x00007f8f8f722aaa: mov    -0x38(%rbp),%r14
  0x00007f8f8f722aae: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722ab3: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722ab7: shl    $0x2,%ecx
  0x00007f8f8f722aba: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722abe: and    $0xff,%ebx
  0x00007f8f8f722ac4: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722ac8: movzbl 0x2(%r13),%ebx
  0x00007f8f8f722acd: add    $0x2,%r13
  0x00007f8f8f722ad1: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f722adb: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722adf: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722ae3: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722aeb: mov    -0x40(%rbp),%r13
  0x00007f8f8f722aef: mov    -0x38(%rbp),%r14
  0x00007f8f8f722af3: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722af8: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722afc: shl    $0x2,%ecx
  0x00007f8f8f722aff: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722b03: and    $0xff,%ebx
  0x00007f8f8f722b09: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722b0d: movzbl 0x2(%r13),%ebx
  0x00007f8f8f722b12: add    $0x2,%r13
  0x00007f8f8f722b16: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f722b20: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722b24: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722b28: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722b30: mov    -0x40(%rbp),%r13
  0x00007f8f8f722b34: mov    -0x38(%rbp),%r14
  0x00007f8f8f722b38: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722b3d: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722b41: shl    $0x2,%ecx
  0x00007f8f8f722b44: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722b48: and    $0xff,%ebx
  0x00007f8f8f722b4e: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722b52: movzbl 0x2(%r13),%ebx
  0x00007f8f8f722b57: add    $0x2,%r13
  0x00007f8f8f722b5b: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f722b65: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722b69: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722b6d: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722b75: mov    -0x40(%rbp),%r13
  0x00007f8f8f722b79: mov    -0x38(%rbp),%r14
  0x00007f8f8f722b7d: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722b82: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722b86: shl    $0x2,%ecx
  0x00007f8f8f722b89: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722b8d: and    $0xff,%ebx
  0x00007f8f8f722b93: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722b97: movzbl 0x2(%r13),%ebx
  0x00007f8f8f722b9c: add    $0x2,%r13
  0x00007f8f8f722ba0: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f722baa: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722bae: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722bb2: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722bba: mov    -0x40(%rbp),%r13
  0x00007f8f8f722bbe: mov    -0x38(%rbp),%r14
  0x00007f8f8f722bc2: mov    -0x28(%rbp),%rbx
  0x00007f8f8f722bc6: test   %rbx,%rbx
  0x00007f8f8f722bc9: je     0x00007f8f8f722c5f
  0x00007f8f8f722bcf: cmpb   $0xba,0x0(%r13)
  0x00007f8f8f722bd4: je     0x00007f8f8f722bf5
  0x00007f8f8f722bda: cmpb   $0xe9,0x0(%r13)
  0x00007f8f8f722bdf: je     0x00007f8f8f722bf5
  0x00007f8f8f722be5: mov    -0x18(%rbp),%rcx
  0x00007f8f8f722be9: cmpw   $0x121,0x28(%rcx)
  0x00007f8f8f722bef: jne    0x00007f8f8f722c5f
  0x00007f8f8f722bf5: mov    %rax,%rcx
  0x00007f8f8f722bf8: test   %rcx,%rcx
  0x00007f8f8f722bfb: jne    0x00007f8f8f722c07
  0x00007f8f8f722bfd: orq    $0x1,-0x8(%rbx)
  0x00007f8f8f722c05: jmp    0x00007f8f8f722c5f
  0x00007f8f8f722c07: mov    0x8(%rcx),%ecx
  0x00007f8f8f722c0a: movabs $0x800000000,%r12
  0x00007f8f8f722c14: add    %r12,%rcx
  0x00007f8f8f722c17: xor    %r12,%r12
  0x00007f8f8f722c1a: xor    -0x8(%rbx),%rcx
  0x00007f8f8f722c1e: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f722c25: je     0x00007f8f8f722c5f
  0x00007f8f8f722c27: test   $0x2,%rcx
  0x00007f8f8f722c2e: jne    0x00007f8f8f722c5f
  0x00007f8f8f722c30: cmpq   $0x0,-0x8(%rbx)
  0x00007f8f8f722c38: je     0x00007f8f8f722c5b
  0x00007f8f8f722c3a: cmpq   $0x1,-0x8(%rbx)
  0x00007f8f8f722c42: je     0x00007f8f8f722c5b
  0x00007f8f8f722c44: xor    -0x8(%rbx),%rcx
  0x00007f8f8f722c48: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f722c4f: je     0x00007f8f8f722c5f
  0x00007f8f8f722c51: orq    $0x2,-0x8(%rbx)
  0x00007f8f8f722c59: jmp    0x00007f8f8f722c5f
  0x00007f8f8f722c5b: mov    %rcx,-0x8(%rbx)
  0x00007f8f8f722c5f: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722c64: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722c68: shl    $0x2,%ecx
  0x00007f8f8f722c6b: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722c6f: and    $0xff,%ebx
  0x00007f8f8f722c75: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722c79: movzbl 0x2(%r13),%ebx
  0x00007f8f8f722c7e: add    $0x2,%r13
  0x00007f8f8f722c82: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f722c8c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722c90: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722c94: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722c9c: mov    -0x40(%rbp),%r13
  0x00007f8f8f722ca0: mov    -0x38(%rbp),%r14
  0x00007f8f8f722ca4: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722ca9: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722cad: shl    $0x2,%ecx
  0x00007f8f8f722cb0: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722cb4: and    $0xff,%ebx
  0x00007f8f8f722cba: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722cbe: movzbl 0x3(%r13),%ebx
  0x00007f8f8f722cc3: add    $0x3,%r13
  0x00007f8f8f722cc7: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f722cd1: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722cd5: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722cd9: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722ce1: mov    -0x40(%rbp),%r13
  0x00007f8f8f722ce5: mov    -0x38(%rbp),%r14
  0x00007f8f8f722ce9: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722cee: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722cf2: shl    $0x2,%ecx
  0x00007f8f8f722cf5: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722cf9: and    $0xff,%ebx
  0x00007f8f8f722cff: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722d03: movzbl 0x3(%r13),%ebx
  0x00007f8f8f722d08: add    $0x3,%r13
  0x00007f8f8f722d0c: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f722d16: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722d1a: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722d1e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722d26: mov    -0x40(%rbp),%r13
  0x00007f8f8f722d2a: mov    -0x38(%rbp),%r14
  0x00007f8f8f722d2e: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722d33: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722d37: shl    $0x2,%ecx
  0x00007f8f8f722d3a: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722d3e: and    $0xff,%ebx
  0x00007f8f8f722d44: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722d48: movzbl 0x3(%r13),%ebx
  0x00007f8f8f722d4d: add    $0x3,%r13
  0x00007f8f8f722d51: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f722d5b: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722d5f: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722d63: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722d6b: mov    -0x40(%rbp),%r13
  0x00007f8f8f722d6f: mov    -0x38(%rbp),%r14
  0x00007f8f8f722d73: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722d78: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722d7c: shl    $0x2,%ecx
  0x00007f8f8f722d7f: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722d83: and    $0xff,%ebx
  0x00007f8f8f722d89: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722d8d: movzbl 0x3(%r13),%ebx
  0x00007f8f8f722d92: add    $0x3,%r13
  0x00007f8f8f722d96: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f722da0: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722da4: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722da8: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722db0: mov    -0x40(%rbp),%r13
  0x00007f8f8f722db4: mov    -0x38(%rbp),%r14
  0x00007f8f8f722db8: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722dbd: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722dc1: shl    $0x2,%ecx
  0x00007f8f8f722dc4: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722dc8: and    $0xff,%ebx
  0x00007f8f8f722dce: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722dd2: movzbl 0x3(%r13),%ebx
  0x00007f8f8f722dd7: add    $0x3,%r13
  0x00007f8f8f722ddb: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f722de5: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722de9: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722ded: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722df5: mov    -0x40(%rbp),%r13
  0x00007f8f8f722df9: mov    -0x38(%rbp),%r14
  0x00007f8f8f722dfd: mov    -0x28(%rbp),%rbx
  0x00007f8f8f722e01: test   %rbx,%rbx
  0x00007f8f8f722e04: je     0x00007f8f8f722e9a
  0x00007f8f8f722e0a: cmpb   $0xba,0x0(%r13)
  0x00007f8f8f722e0f: je     0x00007f8f8f722e30
  0x00007f8f8f722e15: cmpb   $0xe9,0x0(%r13)
  0x00007f8f8f722e1a: je     0x00007f8f8f722e30
  0x00007f8f8f722e20: mov    -0x18(%rbp),%rcx
  0x00007f8f8f722e24: cmpw   $0x121,0x28(%rcx)
  0x00007f8f8f722e2a: jne    0x00007f8f8f722e9a
  0x00007f8f8f722e30: mov    %rax,%rcx
  0x00007f8f8f722e33: test   %rcx,%rcx
  0x00007f8f8f722e36: jne    0x00007f8f8f722e42
  0x00007f8f8f722e38: orq    $0x1,-0x8(%rbx)
  0x00007f8f8f722e40: jmp    0x00007f8f8f722e9a
  0x00007f8f8f722e42: mov    0x8(%rcx),%ecx
  0x00007f8f8f722e45: movabs $0x800000000,%r12
  0x00007f8f8f722e4f: add    %r12,%rcx
  0x00007f8f8f722e52: xor    %r12,%r12
  0x00007f8f8f722e55: xor    -0x8(%rbx),%rcx
  0x00007f8f8f722e59: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f722e60: je     0x00007f8f8f722e9a
  0x00007f8f8f722e62: test   $0x2,%rcx
  0x00007f8f8f722e69: jne    0x00007f8f8f722e9a
  0x00007f8f8f722e6b: cmpq   $0x0,-0x8(%rbx)
  0x00007f8f8f722e73: je     0x00007f8f8f722e96
  0x00007f8f8f722e75: cmpq   $0x1,-0x8(%rbx)
  0x00007f8f8f722e7d: je     0x00007f8f8f722e96
  0x00007f8f8f722e7f: xor    -0x8(%rbx),%rcx
  0x00007f8f8f722e83: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f722e8a: je     0x00007f8f8f722e9a
  0x00007f8f8f722e8c: orq    $0x2,-0x8(%rbx)
  0x00007f8f8f722e94: jmp    0x00007f8f8f722e9a
  0x00007f8f8f722e96: mov    %rcx,-0x8(%rbx)
  0x00007f8f8f722e9a: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722e9f: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722ea3: shl    $0x2,%ecx
  0x00007f8f8f722ea6: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722eaa: and    $0xff,%ebx
  0x00007f8f8f722eb0: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722eb4: movzbl 0x3(%r13),%ebx
  0x00007f8f8f722eb9: add    $0x3,%r13
  0x00007f8f8f722ebd: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f722ec7: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722ecb: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722ecf: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722ed7: mov    -0x40(%rbp),%r13
  0x00007f8f8f722edb: mov    -0x38(%rbp),%r14
  0x00007f8f8f722edf: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722ee4: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722ee8: shl    $0x2,%ecx
  0x00007f8f8f722eeb: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722eef: and    $0xff,%ebx
  0x00007f8f8f722ef5: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722ef9: movzbl 0x4(%r13),%ebx
  0x00007f8f8f722efe: add    $0x4,%r13
  0x00007f8f8f722f02: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f722f0c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722f10: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722f14: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722f1c: mov    -0x40(%rbp),%r13
  0x00007f8f8f722f20: mov    -0x38(%rbp),%r14
  0x00007f8f8f722f24: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722f29: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722f2d: shl    $0x2,%ecx
  0x00007f8f8f722f30: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722f34: and    $0xff,%ebx
  0x00007f8f8f722f3a: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722f3e: movzbl 0x4(%r13),%ebx
  0x00007f8f8f722f43: add    $0x4,%r13
  0x00007f8f8f722f47: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f722f51: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722f55: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722f59: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722f61: mov    -0x40(%rbp),%r13
  0x00007f8f8f722f65: mov    -0x38(%rbp),%r14
  0x00007f8f8f722f69: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722f6e: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722f72: shl    $0x2,%ecx
  0x00007f8f8f722f75: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722f79: and    $0xff,%ebx
  0x00007f8f8f722f7f: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722f83: movzbl 0x4(%r13),%ebx
  0x00007f8f8f722f88: add    $0x4,%r13
  0x00007f8f8f722f8c: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f722f96: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722f9a: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722f9e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722fa6: mov    -0x40(%rbp),%r13
  0x00007f8f8f722faa: mov    -0x38(%rbp),%r14
  0x00007f8f8f722fae: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722fb3: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722fb7: shl    $0x2,%ecx
  0x00007f8f8f722fba: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f722fbe: and    $0xff,%ebx
  0x00007f8f8f722fc4: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f722fc8: movzbl 0x4(%r13),%ebx
  0x00007f8f8f722fcd: add    $0x4,%r13
  0x00007f8f8f722fd1: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f722fdb: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f722fdf: mov    -0x10(%rbp),%rsp
  0x00007f8f8f722fe3: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f722feb: mov    -0x40(%rbp),%r13
  0x00007f8f8f722fef: mov    -0x38(%rbp),%r14
  0x00007f8f8f722ff3: movzwl 0x1(%r13),%ecx
  0x00007f8f8f722ff8: mov    -0x30(%rbp),%rbx
  0x00007f8f8f722ffc: shl    $0x2,%ecx
  0x00007f8f8f722fff: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723003: and    $0xff,%ebx
  0x00007f8f8f723009: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f72300d: movzbl 0x4(%r13),%ebx
  0x00007f8f8f723012: add    $0x4,%r13
  0x00007f8f8f723016: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f723020: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723024: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723028: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723030: mov    -0x40(%rbp),%r13
  0x00007f8f8f723034: mov    -0x38(%rbp),%r14
  0x00007f8f8f723038: mov    -0x28(%rbp),%rbx
  0x00007f8f8f72303c: test   %rbx,%rbx
  0x00007f8f8f72303f: je     0x00007f8f8f7230d5
  0x00007f8f8f723045: cmpb   $0xba,0x0(%r13)
  0x00007f8f8f72304a: je     0x00007f8f8f72306b
  0x00007f8f8f723050: cmpb   $0xe9,0x0(%r13)
  0x00007f8f8f723055: je     0x00007f8f8f72306b
  0x00007f8f8f72305b: mov    -0x18(%rbp),%rcx
  0x00007f8f8f72305f: cmpw   $0x121,0x28(%rcx)
  0x00007f8f8f723065: jne    0x00007f8f8f7230d5
  0x00007f8f8f72306b: mov    %rax,%rcx
  0x00007f8f8f72306e: test   %rcx,%rcx
  0x00007f8f8f723071: jne    0x00007f8f8f72307d
  0x00007f8f8f723073: orq    $0x1,-0x8(%rbx)
  0x00007f8f8f72307b: jmp    0x00007f8f8f7230d5
  0x00007f8f8f72307d: mov    0x8(%rcx),%ecx
  0x00007f8f8f723080: movabs $0x800000000,%r12
  0x00007f8f8f72308a: add    %r12,%rcx
  0x00007f8f8f72308d: xor    %r12,%r12
  0x00007f8f8f723090: xor    -0x8(%rbx),%rcx
  0x00007f8f8f723094: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f72309b: je     0x00007f8f8f7230d5
  0x00007f8f8f72309d: test   $0x2,%rcx
  0x00007f8f8f7230a4: jne    0x00007f8f8f7230d5
  0x00007f8f8f7230a6: cmpq   $0x0,-0x8(%rbx)
  0x00007f8f8f7230ae: je     0x00007f8f8f7230d1
  0x00007f8f8f7230b0: cmpq   $0x1,-0x8(%rbx)
  0x00007f8f8f7230b8: je     0x00007f8f8f7230d1
  0x00007f8f8f7230ba: xor    -0x8(%rbx),%rcx
  0x00007f8f8f7230be: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f7230c5: je     0x00007f8f8f7230d5
  0x00007f8f8f7230c7: orq    $0x2,-0x8(%rbx)
  0x00007f8f8f7230cf: jmp    0x00007f8f8f7230d5
  0x00007f8f8f7230d1: mov    %rcx,-0x8(%rbx)
  0x00007f8f8f7230d5: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7230da: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7230de: shl    $0x2,%ecx
  0x00007f8f8f7230e1: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f7230e5: and    $0xff,%ebx
  0x00007f8f8f7230eb: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f7230ef: movzbl 0x4(%r13),%ebx
  0x00007f8f8f7230f4: add    $0x4,%r13
  0x00007f8f8f7230f8: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f723102: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723106: mov    -0x10(%rbp),%rsp
  0x00007f8f8f72310a: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723112: mov    -0x40(%rbp),%r13
  0x00007f8f8f723116: mov    -0x38(%rbp),%r14
  0x00007f8f8f72311a: movzwl 0x1(%r13),%ecx
  0x00007f8f8f72311f: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723123: shl    $0x2,%ecx
  0x00007f8f8f723126: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f72312a: and    $0xff,%ebx
  0x00007f8f8f723130: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723134: movzbl 0x5(%r13),%ebx
  0x00007f8f8f723139: add    $0x5,%r13
  0x00007f8f8f72313d: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f723147: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72314b: mov    -0x10(%rbp),%rsp
  0x00007f8f8f72314f: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723157: mov    -0x40(%rbp),%r13
  0x00007f8f8f72315b: mov    -0x38(%rbp),%r14
  0x00007f8f8f72315f: movzwl 0x1(%r13),%ecx
  0x00007f8f8f723164: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723168: shl    $0x2,%ecx
  0x00007f8f8f72316b: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f72316f: and    $0xff,%ebx
  0x00007f8f8f723175: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723179: movzbl 0x5(%r13),%ebx
  0x00007f8f8f72317e: add    $0x5,%r13
  0x00007f8f8f723182: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72318c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723190: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723194: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f72319c: mov    -0x40(%rbp),%r13
  0x00007f8f8f7231a0: mov    -0x38(%rbp),%r14
  0x00007f8f8f7231a4: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7231a9: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7231ad: shl    $0x2,%ecx
  0x00007f8f8f7231b0: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f7231b4: and    $0xff,%ebx
  0x00007f8f8f7231ba: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f7231be: movzbl 0x5(%r13),%ebx
  0x00007f8f8f7231c3: add    $0x5,%r13
  0x00007f8f8f7231c7: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f7231d1: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7231d5: mov    -0x10(%rbp),%rsp
  0x00007f8f8f7231d9: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7231e1: mov    -0x40(%rbp),%r13
  0x00007f8f8f7231e5: mov    -0x38(%rbp),%r14
  0x00007f8f8f7231e9: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7231ee: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7231f2: shl    $0x2,%ecx
  0x00007f8f8f7231f5: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f7231f9: and    $0xff,%ebx
  0x00007f8f8f7231ff: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723203: movzbl 0x5(%r13),%ebx
  0x00007f8f8f723208: add    $0x5,%r13
  0x00007f8f8f72320c: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f723216: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72321a: mov    -0x10(%rbp),%rsp
  0x00007f8f8f72321e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723226: mov    -0x40(%rbp),%r13
  0x00007f8f8f72322a: mov    -0x38(%rbp),%r14
  0x00007f8f8f72322e: movzwl 0x1(%r13),%ecx
  0x00007f8f8f723233: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723237: shl    $0x2,%ecx
  0x00007f8f8f72323a: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f72323e: and    $0xff,%ebx
  0x00007f8f8f723244: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723248: movzbl 0x5(%r13),%ebx
  0x00007f8f8f72324d: add    $0x5,%r13
  0x00007f8f8f723251: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72325b: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72325f: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723263: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f72326b: mov    -0x40(%rbp),%r13
  0x00007f8f8f72326f: mov    -0x38(%rbp),%r14
  0x00007f8f8f723273: mov    -0x28(%rbp),%rbx
  0x00007f8f8f723277: test   %rbx,%rbx
  0x00007f8f8f72327a: je     0x00007f8f8f723310
  0x00007f8f8f723280: cmpb   $0xba,0x0(%r13)
  0x00007f8f8f723285: je     0x00007f8f8f7232a6
  0x00007f8f8f72328b: cmpb   $0xe9,0x0(%r13)
  0x00007f8f8f723290: je     0x00007f8f8f7232a6
  0x00007f8f8f723296: mov    -0x18(%rbp),%rcx
  0x00007f8f8f72329a: cmpw   $0x121,0x28(%rcx)
  0x00007f8f8f7232a0: jne    0x00007f8f8f723310
  0x00007f8f8f7232a6: mov    %rax,%rcx
  0x00007f8f8f7232a9: test   %rcx,%rcx
  0x00007f8f8f7232ac: jne    0x00007f8f8f7232b8
  0x00007f8f8f7232ae: orq    $0x1,-0x8(%rbx)
  0x00007f8f8f7232b6: jmp    0x00007f8f8f723310
  0x00007f8f8f7232b8: mov    0x8(%rcx),%ecx
  0x00007f8f8f7232bb: movabs $0x800000000,%r12
  0x00007f8f8f7232c5: add    %r12,%rcx
  0x00007f8f8f7232c8: xor    %r12,%r12
  0x00007f8f8f7232cb: xor    -0x8(%rbx),%rcx
  0x00007f8f8f7232cf: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f7232d6: je     0x00007f8f8f723310
  0x00007f8f8f7232d8: test   $0x2,%rcx
  0x00007f8f8f7232df: jne    0x00007f8f8f723310
  0x00007f8f8f7232e1: cmpq   $0x0,-0x8(%rbx)
  0x00007f8f8f7232e9: je     0x00007f8f8f72330c
  0x00007f8f8f7232eb: cmpq   $0x1,-0x8(%rbx)
  0x00007f8f8f7232f3: je     0x00007f8f8f72330c
  0x00007f8f8f7232f5: xor    -0x8(%rbx),%rcx
  0x00007f8f8f7232f9: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f723300: je     0x00007f8f8f723310
  0x00007f8f8f723302: orq    $0x2,-0x8(%rbx)
  0x00007f8f8f72330a: jmp    0x00007f8f8f723310
  0x00007f8f8f72330c: mov    %rcx,-0x8(%rbx)
  0x00007f8f8f723310: movzwl 0x1(%r13),%ecx
  0x00007f8f8f723315: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723319: shl    $0x2,%ecx
  0x00007f8f8f72331c: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723320: and    $0xff,%ebx
  0x00007f8f8f723326: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f72332a: movzbl 0x5(%r13),%ebx
  0x00007f8f8f72332f: add    $0x5,%r13
  0x00007f8f8f723333: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f72333d: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723341: nopl   0x0(%rax)
  0x00007f8f8f723348: add    %al,(%rax)
  0x00007f8f8f72334a: add    %al,(%rax)
  0x00007f8f8f72334c: add    %al,(%rax)
  0x00007f8f8f72334e: add    %al,(%rax)
  0x00007f8f8f723350: add    %al,(%rax)
  0x00007f8f8f723352: add    %al,(%rax)
  0x00007f8f8f723354: add    %al,(%rax)
  0x00007f8f8f723356: add    %al,(%rax)
  0x00007f8f8f723358: add    %al,(%rax)
  0x00007f8f8f72335a: add    %al,(%rax)
  0x00007f8f8f72335c: add    %al,(%rax)
  0x00007f8f8f72335e: add    %al,(%rax)

----------------------------------------------------------------------
invoke return entry points  [0x00007f8f8f723380, 0x00007f8f8f723d80]  2560 bytes

  0x00007f8f8f723380: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723384: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f72338c: mov    -0x40(%rbp),%r13
  0x00007f8f8f723390: mov    -0x38(%rbp),%r14
  0x00007f8f8f723394: movzwl 0x1(%r13),%ecx
  0x00007f8f8f723399: mov    -0x30(%rbp),%rbx
  0x00007f8f8f72339d: shl    $0x2,%ecx
  0x00007f8f8f7233a0: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f7233a4: and    $0xff,%ebx
  0x00007f8f8f7233aa: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f7233ae: movzbl 0x3(%r13),%ebx
  0x00007f8f8f7233b3: add    $0x3,%r13
  0x00007f8f8f7233b7: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f7233c1: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7233c5: mov    -0x10(%rbp),%rsp
  0x00007f8f8f7233c9: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7233d1: mov    -0x40(%rbp),%r13
  0x00007f8f8f7233d5: mov    -0x38(%rbp),%r14
  0x00007f8f8f7233d9: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7233de: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7233e2: shl    $0x2,%ecx
  0x00007f8f8f7233e5: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f7233e9: and    $0xff,%ebx
  0x00007f8f8f7233ef: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f7233f3: movzbl 0x5(%r13),%ebx
  0x00007f8f8f7233f8: add    $0x5,%r13
  0x00007f8f8f7233fc: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f723406: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72340a: mov    -0x10(%rbp),%rsp
  0x00007f8f8f72340e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723416: mov    -0x40(%rbp),%r13
  0x00007f8f8f72341a: mov    -0x38(%rbp),%r14
  0x00007f8f8f72341e: mov    0x1(%r13),%ecx
  0x00007f8f8f723422: not    %ecx
  0x00007f8f8f723424: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723428: shl    $0x2,%ecx
  0x00007f8f8f72342b: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f72342f: and    $0xff,%ebx
  0x00007f8f8f723435: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723439: movzbl 0x5(%r13),%ebx
  0x00007f8f8f72343e: add    $0x5,%r13
  0x00007f8f8f723442: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72344c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723450: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723454: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f72345c: mov    -0x40(%rbp),%r13
  0x00007f8f8f723460: mov    -0x38(%rbp),%r14
  0x00007f8f8f723464: movzwl 0x1(%r13),%ecx
  0x00007f8f8f723469: mov    -0x30(%rbp),%rbx
  0x00007f8f8f72346d: shl    $0x2,%ecx
  0x00007f8f8f723470: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723474: and    $0xff,%ebx
  0x00007f8f8f72347a: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f72347e: movzbl 0x3(%r13),%ebx
  0x00007f8f8f723483: add    $0x3,%r13
  0x00007f8f8f723487: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f723491: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723495: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723499: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7234a1: mov    -0x40(%rbp),%r13
  0x00007f8f8f7234a5: mov    -0x38(%rbp),%r14
  0x00007f8f8f7234a9: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7234ae: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7234b2: shl    $0x2,%ecx
  0x00007f8f8f7234b5: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f7234b9: and    $0xff,%ebx
  0x00007f8f8f7234bf: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f7234c3: movzbl 0x5(%r13),%ebx
  0x00007f8f8f7234c8: add    $0x5,%r13
  0x00007f8f8f7234cc: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f7234d6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7234da: mov    -0x10(%rbp),%rsp
  0x00007f8f8f7234de: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7234e6: mov    -0x40(%rbp),%r13
  0x00007f8f8f7234ea: mov    -0x38(%rbp),%r14
  0x00007f8f8f7234ee: mov    0x1(%r13),%ecx
  0x00007f8f8f7234f2: not    %ecx
  0x00007f8f8f7234f4: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7234f8: shl    $0x2,%ecx
  0x00007f8f8f7234fb: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f7234ff: and    $0xff,%ebx
  0x00007f8f8f723505: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723509: movzbl 0x5(%r13),%ebx
  0x00007f8f8f72350e: add    $0x5,%r13
  0x00007f8f8f723512: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72351c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723520: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723524: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f72352c: mov    -0x40(%rbp),%r13
  0x00007f8f8f723530: mov    -0x38(%rbp),%r14
  0x00007f8f8f723534: movzwl 0x1(%r13),%ecx
  0x00007f8f8f723539: mov    -0x30(%rbp),%rbx
  0x00007f8f8f72353d: shl    $0x2,%ecx
  0x00007f8f8f723540: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723544: and    $0xff,%ebx
  0x00007f8f8f72354a: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f72354e: movzbl 0x3(%r13),%ebx
  0x00007f8f8f723553: add    $0x3,%r13
  0x00007f8f8f723557: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f723561: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723565: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723569: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723571: mov    -0x40(%rbp),%r13
  0x00007f8f8f723575: mov    -0x38(%rbp),%r14
  0x00007f8f8f723579: movzwl 0x1(%r13),%ecx
  0x00007f8f8f72357e: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723582: shl    $0x2,%ecx
  0x00007f8f8f723585: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723589: and    $0xff,%ebx
  0x00007f8f8f72358f: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723593: movzbl 0x5(%r13),%ebx
  0x00007f8f8f723598: add    $0x5,%r13
  0x00007f8f8f72359c: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f7235a6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7235aa: mov    -0x10(%rbp),%rsp
  0x00007f8f8f7235ae: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7235b6: mov    -0x40(%rbp),%r13
  0x00007f8f8f7235ba: mov    -0x38(%rbp),%r14
  0x00007f8f8f7235be: mov    0x1(%r13),%ecx
  0x00007f8f8f7235c2: not    %ecx
  0x00007f8f8f7235c4: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7235c8: shl    $0x2,%ecx
  0x00007f8f8f7235cb: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f7235cf: and    $0xff,%ebx
  0x00007f8f8f7235d5: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f7235d9: movzbl 0x5(%r13),%ebx
  0x00007f8f8f7235de: add    $0x5,%r13
  0x00007f8f8f7235e2: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f7235ec: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7235f0: mov    -0x10(%rbp),%rsp
  0x00007f8f8f7235f4: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7235fc: mov    -0x40(%rbp),%r13
  0x00007f8f8f723600: mov    -0x38(%rbp),%r14
  0x00007f8f8f723604: movzwl 0x1(%r13),%ecx
  0x00007f8f8f723609: mov    -0x30(%rbp),%rbx
  0x00007f8f8f72360d: shl    $0x2,%ecx
  0x00007f8f8f723610: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723614: and    $0xff,%ebx
  0x00007f8f8f72361a: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f72361e: movzbl 0x3(%r13),%ebx
  0x00007f8f8f723623: add    $0x3,%r13
  0x00007f8f8f723627: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f723631: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723635: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723639: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723641: mov    -0x40(%rbp),%r13
  0x00007f8f8f723645: mov    -0x38(%rbp),%r14
  0x00007f8f8f723649: movzwl 0x1(%r13),%ecx
  0x00007f8f8f72364e: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723652: shl    $0x2,%ecx
  0x00007f8f8f723655: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723659: and    $0xff,%ebx
  0x00007f8f8f72365f: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723663: movzbl 0x5(%r13),%ebx
  0x00007f8f8f723668: add    $0x5,%r13
  0x00007f8f8f72366c: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f723676: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72367a: mov    -0x10(%rbp),%rsp
  0x00007f8f8f72367e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723686: mov    -0x40(%rbp),%r13
  0x00007f8f8f72368a: mov    -0x38(%rbp),%r14
  0x00007f8f8f72368e: mov    0x1(%r13),%ecx
  0x00007f8f8f723692: not    %ecx
  0x00007f8f8f723694: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723698: shl    $0x2,%ecx
  0x00007f8f8f72369b: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f72369f: and    $0xff,%ebx
  0x00007f8f8f7236a5: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f7236a9: movzbl 0x5(%r13),%ebx
  0x00007f8f8f7236ae: add    $0x5,%r13
  0x00007f8f8f7236b2: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f7236bc: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7236c0: mov    -0x10(%rbp),%rsp
  0x00007f8f8f7236c4: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7236cc: mov    -0x40(%rbp),%r13
  0x00007f8f8f7236d0: mov    -0x38(%rbp),%r14
  0x00007f8f8f7236d4: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7236d9: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7236dd: shl    $0x2,%ecx
  0x00007f8f8f7236e0: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f7236e4: and    $0xff,%ebx
  0x00007f8f8f7236ea: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f7236ee: movzbl 0x3(%r13),%ebx
  0x00007f8f8f7236f3: add    $0x3,%r13
  0x00007f8f8f7236f7: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f723701: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723705: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723709: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723711: mov    -0x40(%rbp),%r13
  0x00007f8f8f723715: mov    -0x38(%rbp),%r14
  0x00007f8f8f723719: movzwl 0x1(%r13),%ecx
  0x00007f8f8f72371e: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723722: shl    $0x2,%ecx
  0x00007f8f8f723725: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723729: and    $0xff,%ebx
  0x00007f8f8f72372f: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723733: movzbl 0x5(%r13),%ebx
  0x00007f8f8f723738: add    $0x5,%r13
  0x00007f8f8f72373c: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f723746: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72374a: mov    -0x10(%rbp),%rsp
  0x00007f8f8f72374e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723756: mov    -0x40(%rbp),%r13
  0x00007f8f8f72375a: mov    -0x38(%rbp),%r14
  0x00007f8f8f72375e: mov    0x1(%r13),%ecx
  0x00007f8f8f723762: not    %ecx
  0x00007f8f8f723764: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723768: shl    $0x2,%ecx
  0x00007f8f8f72376b: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f72376f: and    $0xff,%ebx
  0x00007f8f8f723775: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723779: movzbl 0x5(%r13),%ebx
  0x00007f8f8f72377e: add    $0x5,%r13
  0x00007f8f8f723782: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72378c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723790: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723794: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f72379c: mov    -0x40(%rbp),%r13
  0x00007f8f8f7237a0: mov    -0x38(%rbp),%r14
  0x00007f8f8f7237a4: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7237a9: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7237ad: shl    $0x2,%ecx
  0x00007f8f8f7237b0: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f7237b4: and    $0xff,%ebx
  0x00007f8f8f7237ba: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f7237be: movzbl 0x3(%r13),%ebx
  0x00007f8f8f7237c3: add    $0x3,%r13
  0x00007f8f8f7237c7: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f7237d1: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7237d5: mov    -0x10(%rbp),%rsp
  0x00007f8f8f7237d9: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7237e1: mov    -0x40(%rbp),%r13
  0x00007f8f8f7237e5: mov    -0x38(%rbp),%r14
  0x00007f8f8f7237e9: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7237ee: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7237f2: shl    $0x2,%ecx
  0x00007f8f8f7237f5: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f7237f9: and    $0xff,%ebx
  0x00007f8f8f7237ff: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723803: movzbl 0x5(%r13),%ebx
  0x00007f8f8f723808: add    $0x5,%r13
  0x00007f8f8f72380c: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f723816: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72381a: mov    -0x10(%rbp),%rsp
  0x00007f8f8f72381e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723826: mov    -0x40(%rbp),%r13
  0x00007f8f8f72382a: mov    -0x38(%rbp),%r14
  0x00007f8f8f72382e: mov    0x1(%r13),%ecx
  0x00007f8f8f723832: not    %ecx
  0x00007f8f8f723834: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723838: shl    $0x2,%ecx
  0x00007f8f8f72383b: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f72383f: and    $0xff,%ebx
  0x00007f8f8f723845: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723849: movzbl 0x5(%r13),%ebx
  0x00007f8f8f72384e: add    $0x5,%r13
  0x00007f8f8f723852: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72385c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723860: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723864: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f72386c: mov    -0x40(%rbp),%r13
  0x00007f8f8f723870: mov    -0x38(%rbp),%r14
  0x00007f8f8f723874: movzwl 0x1(%r13),%ecx
  0x00007f8f8f723879: mov    -0x30(%rbp),%rbx
  0x00007f8f8f72387d: shl    $0x2,%ecx
  0x00007f8f8f723880: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723884: and    $0xff,%ebx
  0x00007f8f8f72388a: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f72388e: movzbl 0x3(%r13),%ebx
  0x00007f8f8f723893: add    $0x3,%r13
  0x00007f8f8f723897: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f7238a1: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7238a5: mov    -0x10(%rbp),%rsp
  0x00007f8f8f7238a9: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7238b1: mov    -0x40(%rbp),%r13
  0x00007f8f8f7238b5: mov    -0x38(%rbp),%r14
  0x00007f8f8f7238b9: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7238be: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7238c2: shl    $0x2,%ecx
  0x00007f8f8f7238c5: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f7238c9: and    $0xff,%ebx
  0x00007f8f8f7238cf: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f7238d3: movzbl 0x5(%r13),%ebx
  0x00007f8f8f7238d8: add    $0x5,%r13
  0x00007f8f8f7238dc: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f7238e6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7238ea: mov    -0x10(%rbp),%rsp
  0x00007f8f8f7238ee: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7238f6: mov    -0x40(%rbp),%r13
  0x00007f8f8f7238fa: mov    -0x38(%rbp),%r14
  0x00007f8f8f7238fe: mov    0x1(%r13),%ecx
  0x00007f8f8f723902: not    %ecx
  0x00007f8f8f723904: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723908: shl    $0x2,%ecx
  0x00007f8f8f72390b: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f72390f: and    $0xff,%ebx
  0x00007f8f8f723915: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723919: movzbl 0x5(%r13),%ebx
  0x00007f8f8f72391e: add    $0x5,%r13
  0x00007f8f8f723922: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72392c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723930: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723934: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f72393c: mov    -0x40(%rbp),%r13
  0x00007f8f8f723940: mov    -0x38(%rbp),%r14
  0x00007f8f8f723944: movzwl 0x1(%r13),%ecx
  0x00007f8f8f723949: mov    -0x30(%rbp),%rbx
  0x00007f8f8f72394d: shl    $0x2,%ecx
  0x00007f8f8f723950: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723954: and    $0xff,%ebx
  0x00007f8f8f72395a: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f72395e: movzbl 0x3(%r13),%ebx
  0x00007f8f8f723963: add    $0x3,%r13
  0x00007f8f8f723967: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f723971: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723975: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723979: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723981: mov    -0x40(%rbp),%r13
  0x00007f8f8f723985: mov    -0x38(%rbp),%r14
  0x00007f8f8f723989: movzwl 0x1(%r13),%ecx
  0x00007f8f8f72398e: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723992: shl    $0x2,%ecx
  0x00007f8f8f723995: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723999: and    $0xff,%ebx
  0x00007f8f8f72399f: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f7239a3: movzbl 0x5(%r13),%ebx
  0x00007f8f8f7239a8: add    $0x5,%r13
  0x00007f8f8f7239ac: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f7239b6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7239ba: mov    -0x10(%rbp),%rsp
  0x00007f8f8f7239be: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7239c6: mov    -0x40(%rbp),%r13
  0x00007f8f8f7239ca: mov    -0x38(%rbp),%r14
  0x00007f8f8f7239ce: mov    0x1(%r13),%ecx
  0x00007f8f8f7239d2: not    %ecx
  0x00007f8f8f7239d4: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7239d8: shl    $0x2,%ecx
  0x00007f8f8f7239db: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f7239df: and    $0xff,%ebx
  0x00007f8f8f7239e5: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f7239e9: movzbl 0x5(%r13),%ebx
  0x00007f8f8f7239ee: add    $0x5,%r13
  0x00007f8f8f7239f2: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f7239fc: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723a00: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723a04: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723a0c: mov    -0x40(%rbp),%r13
  0x00007f8f8f723a10: mov    -0x38(%rbp),%r14
  0x00007f8f8f723a14: mov    -0x28(%rbp),%rbx
  0x00007f8f8f723a18: test   %rbx,%rbx
  0x00007f8f8f723a1b: je     0x00007f8f8f723ab1
  0x00007f8f8f723a21: cmpb   $0xba,0x0(%r13)
  0x00007f8f8f723a26: je     0x00007f8f8f723a47
  0x00007f8f8f723a2c: cmpb   $0xe9,0x0(%r13)
  0x00007f8f8f723a31: je     0x00007f8f8f723a47
  0x00007f8f8f723a37: mov    -0x18(%rbp),%rcx
  0x00007f8f8f723a3b: cmpw   $0x121,0x28(%rcx)
  0x00007f8f8f723a41: jne    0x00007f8f8f723ab1
  0x00007f8f8f723a47: mov    %rax,%rcx
  0x00007f8f8f723a4a: test   %rcx,%rcx
  0x00007f8f8f723a4d: jne    0x00007f8f8f723a59
  0x00007f8f8f723a4f: orq    $0x1,-0x8(%rbx)
  0x00007f8f8f723a57: jmp    0x00007f8f8f723ab1
  0x00007f8f8f723a59: mov    0x8(%rcx),%ecx
  0x00007f8f8f723a5c: movabs $0x800000000,%r12
  0x00007f8f8f723a66: add    %r12,%rcx
  0x00007f8f8f723a69: xor    %r12,%r12
  0x00007f8f8f723a6c: xor    -0x8(%rbx),%rcx
  0x00007f8f8f723a70: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f723a77: je     0x00007f8f8f723ab1
  0x00007f8f8f723a79: test   $0x2,%rcx
  0x00007f8f8f723a80: jne    0x00007f8f8f723ab1
  0x00007f8f8f723a82: cmpq   $0x0,-0x8(%rbx)
  0x00007f8f8f723a8a: je     0x00007f8f8f723aad
  0x00007f8f8f723a8c: cmpq   $0x1,-0x8(%rbx)
  0x00007f8f8f723a94: je     0x00007f8f8f723aad
  0x00007f8f8f723a96: xor    -0x8(%rbx),%rcx
  0x00007f8f8f723a9a: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f723aa1: je     0x00007f8f8f723ab1
  0x00007f8f8f723aa3: orq    $0x2,-0x8(%rbx)
  0x00007f8f8f723aab: jmp    0x00007f8f8f723ab1
  0x00007f8f8f723aad: mov    %rcx,-0x8(%rbx)
  0x00007f8f8f723ab1: movzwl 0x1(%r13),%ecx
  0x00007f8f8f723ab6: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723aba: shl    $0x2,%ecx
  0x00007f8f8f723abd: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723ac1: and    $0xff,%ebx
  0x00007f8f8f723ac7: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723acb: movzbl 0x3(%r13),%ebx
  0x00007f8f8f723ad0: add    $0x3,%r13
  0x00007f8f8f723ad4: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f723ade: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723ae2: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723ae6: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723aee: mov    -0x40(%rbp),%r13
  0x00007f8f8f723af2: mov    -0x38(%rbp),%r14
  0x00007f8f8f723af6: mov    -0x28(%rbp),%rbx
  0x00007f8f8f723afa: test   %rbx,%rbx
  0x00007f8f8f723afd: je     0x00007f8f8f723b93
  0x00007f8f8f723b03: cmpb   $0xba,0x0(%r13)
  0x00007f8f8f723b08: je     0x00007f8f8f723b29
  0x00007f8f8f723b0e: cmpb   $0xe9,0x0(%r13)
  0x00007f8f8f723b13: je     0x00007f8f8f723b29
  0x00007f8f8f723b19: mov    -0x18(%rbp),%rcx
  0x00007f8f8f723b1d: cmpw   $0x121,0x28(%rcx)
  0x00007f8f8f723b23: jne    0x00007f8f8f723b93
  0x00007f8f8f723b29: mov    %rax,%rcx
  0x00007f8f8f723b2c: test   %rcx,%rcx
  0x00007f8f8f723b2f: jne    0x00007f8f8f723b3b
  0x00007f8f8f723b31: orq    $0x1,-0x8(%rbx)
  0x00007f8f8f723b39: jmp    0x00007f8f8f723b93
  0x00007f8f8f723b3b: mov    0x8(%rcx),%ecx
  0x00007f8f8f723b3e: movabs $0x800000000,%r12
  0x00007f8f8f723b48: add    %r12,%rcx
  0x00007f8f8f723b4b: xor    %r12,%r12
  0x00007f8f8f723b4e: xor    -0x8(%rbx),%rcx
  0x00007f8f8f723b52: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f723b59: je     0x00007f8f8f723b93
  0x00007f8f8f723b5b: test   $0x2,%rcx
  0x00007f8f8f723b62: jne    0x00007f8f8f723b93
  0x00007f8f8f723b64: cmpq   $0x0,-0x8(%rbx)
  0x00007f8f8f723b6c: je     0x00007f8f8f723b8f
  0x00007f8f8f723b6e: cmpq   $0x1,-0x8(%rbx)
  0x00007f8f8f723b76: je     0x00007f8f8f723b8f
  0x00007f8f8f723b78: xor    -0x8(%rbx),%rcx
  0x00007f8f8f723b7c: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f723b83: je     0x00007f8f8f723b93
  0x00007f8f8f723b85: orq    $0x2,-0x8(%rbx)
  0x00007f8f8f723b8d: jmp    0x00007f8f8f723b93
  0x00007f8f8f723b8f: mov    %rcx,-0x8(%rbx)
  0x00007f8f8f723b93: movzwl 0x1(%r13),%ecx
  0x00007f8f8f723b98: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723b9c: shl    $0x2,%ecx
  0x00007f8f8f723b9f: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723ba3: and    $0xff,%ebx
  0x00007f8f8f723ba9: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723bad: movzbl 0x5(%r13),%ebx
  0x00007f8f8f723bb2: add    $0x5,%r13
  0x00007f8f8f723bb6: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f723bc0: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723bc4: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723bc8: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723bd0: mov    -0x40(%rbp),%r13
  0x00007f8f8f723bd4: mov    -0x38(%rbp),%r14
  0x00007f8f8f723bd8: mov    -0x28(%rbp),%rbx
  0x00007f8f8f723bdc: test   %rbx,%rbx
  0x00007f8f8f723bdf: je     0x00007f8f8f723c75
  0x00007f8f8f723be5: cmpb   $0xba,0x0(%r13)
  0x00007f8f8f723bea: je     0x00007f8f8f723c0b
  0x00007f8f8f723bf0: cmpb   $0xe9,0x0(%r13)
  0x00007f8f8f723bf5: je     0x00007f8f8f723c0b
  0x00007f8f8f723bfb: mov    -0x18(%rbp),%rcx
  0x00007f8f8f723bff: cmpw   $0x121,0x28(%rcx)
  0x00007f8f8f723c05: jne    0x00007f8f8f723c75
  0x00007f8f8f723c0b: mov    %rax,%rcx
  0x00007f8f8f723c0e: test   %rcx,%rcx
  0x00007f8f8f723c11: jne    0x00007f8f8f723c1d
  0x00007f8f8f723c13: orq    $0x1,-0x8(%rbx)
  0x00007f8f8f723c1b: jmp    0x00007f8f8f723c75
  0x00007f8f8f723c1d: mov    0x8(%rcx),%ecx
  0x00007f8f8f723c20: movabs $0x800000000,%r12
  0x00007f8f8f723c2a: add    %r12,%rcx
  0x00007f8f8f723c2d: xor    %r12,%r12
  0x00007f8f8f723c30: xor    -0x8(%rbx),%rcx
  0x00007f8f8f723c34: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f723c3b: je     0x00007f8f8f723c75
  0x00007f8f8f723c3d: test   $0x2,%rcx
  0x00007f8f8f723c44: jne    0x00007f8f8f723c75
  0x00007f8f8f723c46: cmpq   $0x0,-0x8(%rbx)
  0x00007f8f8f723c4e: je     0x00007f8f8f723c71
  0x00007f8f8f723c50: cmpq   $0x1,-0x8(%rbx)
  0x00007f8f8f723c58: je     0x00007f8f8f723c71
  0x00007f8f8f723c5a: xor    -0x8(%rbx),%rcx
  0x00007f8f8f723c5e: test   $0xfffffffffffffffc,%rcx
  0x00007f8f8f723c65: je     0x00007f8f8f723c75
  0x00007f8f8f723c67: orq    $0x2,-0x8(%rbx)
  0x00007f8f8f723c6f: jmp    0x00007f8f8f723c75
  0x00007f8f8f723c71: mov    %rcx,-0x8(%rbx)
  0x00007f8f8f723c75: mov    0x1(%r13),%ecx
  0x00007f8f8f723c79: not    %ecx
  0x00007f8f8f723c7b: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723c7f: shl    $0x2,%ecx
  0x00007f8f8f723c82: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723c86: and    $0xff,%ebx
  0x00007f8f8f723c8c: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723c90: movzbl 0x5(%r13),%ebx
  0x00007f8f8f723c95: add    $0x5,%r13
  0x00007f8f8f723c99: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f723ca3: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723ca7: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723cab: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723cb3: mov    -0x40(%rbp),%r13
  0x00007f8f8f723cb7: mov    -0x38(%rbp),%r14
  0x00007f8f8f723cbb: movzwl 0x1(%r13),%ecx
  0x00007f8f8f723cc0: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723cc4: shl    $0x2,%ecx
  0x00007f8f8f723cc7: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723ccb: and    $0xff,%ebx
  0x00007f8f8f723cd1: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723cd5: movzbl 0x3(%r13),%ebx
  0x00007f8f8f723cda: add    $0x3,%r13
  0x00007f8f8f723cde: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f723ce8: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723cec: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723cf0: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723cf8: mov    -0x40(%rbp),%r13
  0x00007f8f8f723cfc: mov    -0x38(%rbp),%r14
  0x00007f8f8f723d00: movzwl 0x1(%r13),%ecx
  0x00007f8f8f723d05: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723d09: shl    $0x2,%ecx
  0x00007f8f8f723d0c: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723d10: and    $0xff,%ebx
  0x00007f8f8f723d16: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723d1a: movzbl 0x5(%r13),%ebx
  0x00007f8f8f723d1f: add    $0x5,%r13
  0x00007f8f8f723d23: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f723d2d: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723d31: mov    -0x10(%rbp),%rsp
  0x00007f8f8f723d35: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723d3d: mov    -0x40(%rbp),%r13
  0x00007f8f8f723d41: mov    -0x38(%rbp),%r14
  0x00007f8f8f723d45: mov    0x1(%r13),%ecx
  0x00007f8f8f723d49: not    %ecx
  0x00007f8f8f723d4b: mov    -0x30(%rbp),%rbx
  0x00007f8f8f723d4f: shl    $0x2,%ecx
  0x00007f8f8f723d52: mov    0x40(%rbx,%rcx,8),%ebx
  0x00007f8f8f723d56: and    $0xff,%ebx
  0x00007f8f8f723d5c: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f723d60: movzbl 0x5(%r13),%ebx
  0x00007f8f8f723d65: add    $0x5,%r13
  0x00007f8f8f723d69: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f723d73: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f723d77: nop
  0x00007f8f8f723d78: add    %al,(%rax)
  0x00007f8f8f723d7a: add    %al,(%rax)
  0x00007f8f8f723d7c: add    %al,(%rax)
  0x00007f8f8f723d7e: add    %al,(%rax)

----------------------------------------------------------------------
earlyret entry points  [0x00007f8f8f723da0, 0x00007f8f8f726860]  10944 bytes

  0x00007f8f8f723da0: mov    -0x40(%rbp),%r13
  0x00007f8f8f723da4: mov    -0x38(%rbp),%r14
  0x00007f8f8f723da8: mov    -0x48(%rbp),%rsp
  0x00007f8f8f723dac: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f723db4: mov    0x4b0(%r15),%rcx
  0x00007f8f8f723dbb: movl   $0xb,0x78(%rcx)
  0x00007f8f8f723dc2: movl   $0x0,0x80(%rcx)
  0x00007f8f8f723dcc: movl   $0xb,0x78(%rcx)
  0x00007f8f8f723dd3: movabs $0x0,%r10
  0x00007f8f8f723ddd: mov    %r10,0x80(%rcx)
  0x00007f8f8f723de4: mov    0x4b0(%r15),%rcx
  0x00007f8f8f723deb: movl   $0x0,0x74(%rcx)
  0x00007f8f8f723df2: mov    0x3dd(%r15),%bl
  0x00007f8f8f723df9: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f723e01: mov    -0x18(%rbp),%rcx
  0x00007f8f8f723e05: mov    0x20(%rcx),%ecx
  0x00007f8f8f723e08: test   $0x20,%ecx
  0x00007f8f8f723e0e: je     0x00007f8f8f723f12
  0x00007f8f8f723e14: test   $0xff,%bl
  0x00007f8f8f723e17: jne    0x00007f8f8f72401d
  0x00007f8f8f723e1d: lea    -0x58(%rbp),%rsi
  0x00007f8f8f723e21: mov    0x8(%rsi),%rax
  0x00007f8f8f723e25: test   %rax,%rax
  0x00007f8f8f723e28: jne    0x00007f8f8f723e33
  0x00007f8f8f723e2e: jmpq   0x00007f8f8f723f12
  0x00007f8f8f723e33: mov    %r13,-0x40(%rbp)
  0x00007f8f8f723e37: lea    (%rsi),%rax
  0x00007f8f8f723e3a: mov    0x8(%rsi),%rcx
  0x00007f8f8f723e3e: movq   $0x0,0x8(%rsi)
  0x00007f8f8f723e46: mov    (%rcx),%rdx
  0x00007f8f8f723e49: and    $0x7,%rdx
  0x00007f8f8f723e4d: cmp    $0x5,%rdx
  0x00007f8f8f723e51: je     0x00007f8f8f723f0e
  0x00007f8f8f723e57: mov    (%rax),%rdx
  0x00007f8f8f723e5a: test   %rdx,%rdx
  0x00007f8f8f723e5d: je     0x00007f8f8f723f0e
  0x00007f8f8f723e63: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f723e68: je     0x00007f8f8f723f0e
  0x00007f8f8f723e6e: mov    %rcx,0x8(%rsi)
  0x00007f8f8f723e72: callq  0x00007f8f8f723e7c
  0x00007f8f8f723e77: jmpq   0x00007f8f8f723f0e
  0x00007f8f8f723e7c: lea    0x8(%rsp),%rax
  0x00007f8f8f723e81: mov    %r13,-0x40(%rbp)
  0x00007f8f8f723e85: mov    %r15,%rdi
  0x00007f8f8f723e88: vzeroupper 
  0x00007f8f8f723e8b: mov    %rbp,0x330(%r15)
  0x00007f8f8f723e92: mov    %rax,0x320(%r15)
  0x00007f8f8f723e99: test   $0xf,%esp
  0x00007f8f8f723e9f: je     0x00007f8f8f723eb7
  0x00007f8f8f723ea5: sub    $0x8,%rsp
  0x00007f8f8f723ea9: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f723eae: add    $0x8,%rsp
  0x00007f8f8f723eb2: jmpq   0x00007f8f8f723ebc
  0x00007f8f8f723eb7: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f723ebc: movabs $0x0,%r10
  0x00007f8f8f723ec6: mov    %r10,0x320(%r15)
  0x00007f8f8f723ecd: movabs $0x0,%r10
  0x00007f8f8f723ed7: mov    %r10,0x330(%r15)
  0x00007f8f8f723ede: movabs $0x0,%r10
  0x00007f8f8f723ee8: mov    %r10,0x328(%r15)
  0x00007f8f8f723eef: vzeroupper 
  0x00007f8f8f723ef2: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f723efa: je     0x00007f8f8f723f05
  0x00007f8f8f723f00: jmpq   0x00007f8f8f71a780
  0x00007f8f8f723f05: mov    -0x40(%rbp),%r13
  0x00007f8f8f723f09: mov    -0x38(%rbp),%r14
  0x00007f8f8f723f0d: retq   
  0x00007f8f8f723f0e: mov    -0x40(%rbp),%r13
  0x00007f8f8f723f12: mov    -0x48(%rbp),%rsi
  0x00007f8f8f723f16: lea    -0x48(%rbp),%rbx
  0x00007f8f8f723f1a: jmpq   0x00007f8f8f724018
  0x00007f8f8f723f1f: mov    %rsi,%rsi
  0x00007f8f8f723f22: mov    %r13,-0x40(%rbp)
  0x00007f8f8f723f26: lea    (%rsi),%rax
  0x00007f8f8f723f29: mov    0x8(%rsi),%rcx
  0x00007f8f8f723f2d: movq   $0x0,0x8(%rsi)
  0x00007f8f8f723f35: mov    (%rcx),%rdx
  0x00007f8f8f723f38: and    $0x7,%rdx
  0x00007f8f8f723f3c: cmp    $0x5,%rdx
  0x00007f8f8f723f40: je     0x00007f8f8f723ffd
  0x00007f8f8f723f46: mov    (%rax),%rdx
  0x00007f8f8f723f49: test   %rdx,%rdx
  0x00007f8f8f723f4c: je     0x00007f8f8f723ffd
  0x00007f8f8f723f52: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f723f57: je     0x00007f8f8f723ffd
  0x00007f8f8f723f5d: mov    %rcx,0x8(%rsi)
  0x00007f8f8f723f61: callq  0x00007f8f8f723f6b
  0x00007f8f8f723f66: jmpq   0x00007f8f8f723ffd
  0x00007f8f8f723f6b: lea    0x8(%rsp),%rax
  0x00007f8f8f723f70: mov    %r13,-0x40(%rbp)
  0x00007f8f8f723f74: mov    %r15,%rdi
  0x00007f8f8f723f77: vzeroupper 
  0x00007f8f8f723f7a: mov    %rbp,0x330(%r15)
  0x00007f8f8f723f81: mov    %rax,0x320(%r15)
  0x00007f8f8f723f88: test   $0xf,%esp
  0x00007f8f8f723f8e: je     0x00007f8f8f723fa6
  0x00007f8f8f723f94: sub    $0x8,%rsp
  0x00007f8f8f723f98: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f723f9d: add    $0x8,%rsp
  0x00007f8f8f723fa1: jmpq   0x00007f8f8f723fab
  0x00007f8f8f723fa6: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f723fab: movabs $0x0,%r10
  0x00007f8f8f723fb5: mov    %r10,0x320(%r15)
  0x00007f8f8f723fbc: movabs $0x0,%r10
  0x00007f8f8f723fc6: mov    %r10,0x330(%r15)
  0x00007f8f8f723fcd: movabs $0x0,%r10
  0x00007f8f8f723fd7: mov    %r10,0x328(%r15)
  0x00007f8f8f723fde: vzeroupper 
  0x00007f8f8f723fe1: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f723fe9: je     0x00007f8f8f723ff4
  0x00007f8f8f723fef: jmpq   0x00007f8f8f71a780
  0x00007f8f8f723ff4: mov    -0x40(%rbp),%r13
  0x00007f8f8f723ff8: mov    -0x38(%rbp),%r14
  0x00007f8f8f723ffc: retq   
  0x00007f8f8f723ffd: mov    -0x40(%rbp),%r13
  0x00007f8f8f724001: jmpq   0x00007f8f8f723f12
  0x00007f8f8f724006: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f72400e: jne    0x00007f8f8f723f1f
  0x00007f8f8f724014: add    $0x10,%rsi
  0x00007f8f8f724018: cmp    %rbx,%rsi
  0x00007f8f8f72401b: jne    0x00007f8f8f724006
  0x00007f8f8f72401d: cmpb   $0x0,0x1e493163(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f724024: je     0x00007f8f8f724054
  0x00007f8f8f72402a: mov    -0x18(%rbp),%rsi
  0x00007f8f8f72402e: mov    %r15,%rdi
  0x00007f8f8f724031: test   $0xf,%esp
  0x00007f8f8f724037: je     0x00007f8f8f72404f
  0x00007f8f8f72403d: sub    $0x8,%rsp
  0x00007f8f8f724041: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f724046: add    $0x8,%rsp
  0x00007f8f8f72404a: jmpq   0x00007f8f8f724054
  0x00007f8f8f72404f: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f724054: mov    -0x8(%rbp),%rbx
  0x00007f8f8f724058: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f724063: je     0x00007f8f8f7241af
  0x00007f8f8f724069: cmp    0x418(%r15),%rbx
  0x00007f8f8f724070: jle    0x00007f8f8f7241af
  0x00007f8f8f724076: mov    %r15,%rdi
  0x00007f8f8f724079: test   $0xf,%esp
  0x00007f8f8f72407f: je     0x00007f8f8f724097
  0x00007f8f8f724085: sub    $0x8,%rsp
  0x00007f8f8f724089: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f72408e: add    $0x8,%rsp
  0x00007f8f8f724092: jmpq   0x00007f8f8f72409c
  0x00007f8f8f724097: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f72409c: callq  0x00007f8f8f7240a6
  0x00007f8f8f7240a1: jmpq   0x00007f8f8f724138
  0x00007f8f8f7240a6: lea    0x8(%rsp),%rax
  0x00007f8f8f7240ab: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7240af: mov    %r15,%rdi
  0x00007f8f8f7240b2: vzeroupper 
  0x00007f8f8f7240b5: mov    %rbp,0x330(%r15)
  0x00007f8f8f7240bc: mov    %rax,0x320(%r15)
  0x00007f8f8f7240c3: test   $0xf,%esp
  0x00007f8f8f7240c9: je     0x00007f8f8f7240e1
  0x00007f8f8f7240cf: sub    $0x8,%rsp
  0x00007f8f8f7240d3: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f7240d8: add    $0x8,%rsp
  0x00007f8f8f7240dc: jmpq   0x00007f8f8f7240e6
  0x00007f8f8f7240e1: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f7240e6: movabs $0x0,%r10
  0x00007f8f8f7240f0: mov    %r10,0x320(%r15)
  0x00007f8f8f7240f7: movabs $0x0,%r10
  0x00007f8f8f724101: mov    %r10,0x330(%r15)
  0x00007f8f8f724108: movabs $0x0,%r10
  0x00007f8f8f724112: mov    %r10,0x328(%r15)
  0x00007f8f8f724119: vzeroupper 
  0x00007f8f8f72411c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f724124: je     0x00007f8f8f72412f
  0x00007f8f8f72412a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72412f: mov    -0x40(%rbp),%r13
  0x00007f8f8f724133: mov    -0x38(%rbp),%r14
  0x00007f8f8f724137: retq   
  0x00007f8f8f724138: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f72413d: sub    $0x80,%rsp
  0x00007f8f8f724144: mov    %rax,0x78(%rsp)
  0x00007f8f8f724149: mov    %rcx,0x70(%rsp)
  0x00007f8f8f72414e: mov    %rdx,0x68(%rsp)
  0x00007f8f8f724153: mov    %rbx,0x60(%rsp)
  0x00007f8f8f724158: mov    %rbp,0x50(%rsp)
  0x00007f8f8f72415d: mov    %rsi,0x48(%rsp)
  0x00007f8f8f724162: mov    %rdi,0x40(%rsp)
  0x00007f8f8f724167: mov    %r8,0x38(%rsp)
  0x00007f8f8f72416c: mov    %r9,0x30(%rsp)
  0x00007f8f8f724171: mov    %r10,0x28(%rsp)
  0x00007f8f8f724176: mov    %r11,0x20(%rsp)
  0x00007f8f8f72417b: mov    %r12,0x18(%rsp)
  0x00007f8f8f724180: mov    %r13,0x10(%rsp)
  0x00007f8f8f724185: mov    %r14,0x8(%rsp)
  0x00007f8f8f72418a: mov    %r15,(%rsp)
  0x00007f8f8f72418e: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f724198: movabs $0x7f8f8f724138,%rsi
  0x00007f8f8f7241a2: mov    %rsp,%rdx
  0x00007f8f8f7241a5: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f7241a9: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f7241ae: hlt    
  0x00007f8f8f7241af: leaveq 
  0x00007f8f8f7241b0: pop    %rsi
  0x00007f8f8f7241b1: mov    %rbx,%rsp
  0x00007f8f8f7241b4: jmpq   *%rsi
  0x00007f8f8f7241b6: mov    -0x40(%rbp),%r13
  0x00007f8f8f7241ba: mov    -0x38(%rbp),%r14
  0x00007f8f8f7241be: mov    -0x48(%rbp),%rsp
  0x00007f8f8f7241c2: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7241ca: mov    0x4b0(%r15),%rcx
  0x00007f8f8f7241d1: vmovsd 0x80(%rcx),%xmm0
  0x00007f8f8f7241d9: movl   $0xb,0x78(%rcx)
  0x00007f8f8f7241e0: movl   $0x0,0x80(%rcx)
  0x00007f8f8f7241ea: movl   $0xb,0x78(%rcx)
  0x00007f8f8f7241f1: movabs $0x0,%r10
  0x00007f8f8f7241fb: mov    %r10,0x80(%rcx)
  0x00007f8f8f724202: mov    0x4b0(%r15),%rcx
  0x00007f8f8f724209: movl   $0x0,0x74(%rcx)
  0x00007f8f8f724210: mov    0x3dd(%r15),%bl
  0x00007f8f8f724217: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f72421f: mov    -0x18(%rbp),%rcx
  0x00007f8f8f724223: mov    0x20(%rcx),%ecx
  0x00007f8f8f724226: test   $0x20,%ecx
  0x00007f8f8f72422c: je     0x00007f8f8f72434b
  0x00007f8f8f724232: test   $0xff,%bl
  0x00007f8f8f724235: jne    0x00007f8f8f724468
  0x00007f8f8f72423b: sub    $0x10,%rsp
  0x00007f8f8f72423f: vmovsd %xmm0,(%rsp)
  0x00007f8f8f724244: lea    -0x58(%rbp),%rsi
  0x00007f8f8f724248: mov    0x8(%rsi),%rax
  0x00007f8f8f72424c: test   %rax,%rax
  0x00007f8f8f72424f: jne    0x00007f8f8f724263
  0x00007f8f8f724255: vmovsd (%rsp),%xmm0
  0x00007f8f8f72425a: add    $0x10,%rsp
  0x00007f8f8f72425e: jmpq   0x00007f8f8f72434b
  0x00007f8f8f724263: mov    %r13,-0x40(%rbp)
  0x00007f8f8f724267: lea    (%rsi),%rax
  0x00007f8f8f72426a: mov    0x8(%rsi),%rcx
  0x00007f8f8f72426e: movq   $0x0,0x8(%rsi)
  0x00007f8f8f724276: mov    (%rcx),%rdx
  0x00007f8f8f724279: and    $0x7,%rdx
  0x00007f8f8f72427d: cmp    $0x5,%rdx
  0x00007f8f8f724281: je     0x00007f8f8f72433e
  0x00007f8f8f724287: mov    (%rax),%rdx
  0x00007f8f8f72428a: test   %rdx,%rdx
  0x00007f8f8f72428d: je     0x00007f8f8f72433e
  0x00007f8f8f724293: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f724298: je     0x00007f8f8f72433e
  0x00007f8f8f72429e: mov    %rcx,0x8(%rsi)
  0x00007f8f8f7242a2: callq  0x00007f8f8f7242ac
  0x00007f8f8f7242a7: jmpq   0x00007f8f8f72433e
  0x00007f8f8f7242ac: lea    0x8(%rsp),%rax
  0x00007f8f8f7242b1: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7242b5: mov    %r15,%rdi
  0x00007f8f8f7242b8: vzeroupper 
  0x00007f8f8f7242bb: mov    %rbp,0x330(%r15)
  0x00007f8f8f7242c2: mov    %rax,0x320(%r15)
  0x00007f8f8f7242c9: test   $0xf,%esp
  0x00007f8f8f7242cf: je     0x00007f8f8f7242e7
  0x00007f8f8f7242d5: sub    $0x8,%rsp
  0x00007f8f8f7242d9: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7242de: add    $0x8,%rsp
  0x00007f8f8f7242e2: jmpq   0x00007f8f8f7242ec
  0x00007f8f8f7242e7: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7242ec: movabs $0x0,%r10
  0x00007f8f8f7242f6: mov    %r10,0x320(%r15)
  0x00007f8f8f7242fd: movabs $0x0,%r10
  0x00007f8f8f724307: mov    %r10,0x330(%r15)
  0x00007f8f8f72430e: movabs $0x0,%r10
  0x00007f8f8f724318: mov    %r10,0x328(%r15)
  0x00007f8f8f72431f: vzeroupper 
  0x00007f8f8f724322: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72432a: je     0x00007f8f8f724335
  0x00007f8f8f724330: jmpq   0x00007f8f8f71a780
  0x00007f8f8f724335: mov    -0x40(%rbp),%r13
  0x00007f8f8f724339: mov    -0x38(%rbp),%r14
  0x00007f8f8f72433d: retq   
  0x00007f8f8f72433e: mov    -0x40(%rbp),%r13
  0x00007f8f8f724342: vmovsd (%rsp),%xmm0
  0x00007f8f8f724347: add    $0x10,%rsp
  0x00007f8f8f72434b: mov    -0x48(%rbp),%rsi
  0x00007f8f8f72434f: lea    -0x48(%rbp),%rbx
  0x00007f8f8f724353: jmpq   0x00007f8f8f724463
  0x00007f8f8f724358: sub    $0x10,%rsp
  0x00007f8f8f72435c: vmovsd %xmm0,(%rsp)
  0x00007f8f8f724361: mov    %rsi,%rsi
  0x00007f8f8f724364: mov    %r13,-0x40(%rbp)
  0x00007f8f8f724368: lea    (%rsi),%rax
  0x00007f8f8f72436b: mov    0x8(%rsi),%rcx
  0x00007f8f8f72436f: movq   $0x0,0x8(%rsi)
  0x00007f8f8f724377: mov    (%rcx),%rdx
  0x00007f8f8f72437a: and    $0x7,%rdx
  0x00007f8f8f72437e: cmp    $0x5,%rdx
  0x00007f8f8f724382: je     0x00007f8f8f72443f
  0x00007f8f8f724388: mov    (%rax),%rdx
  0x00007f8f8f72438b: test   %rdx,%rdx
  0x00007f8f8f72438e: je     0x00007f8f8f72443f
  0x00007f8f8f724394: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f724399: je     0x00007f8f8f72443f
  0x00007f8f8f72439f: mov    %rcx,0x8(%rsi)
  0x00007f8f8f7243a3: callq  0x00007f8f8f7243ad
  0x00007f8f8f7243a8: jmpq   0x00007f8f8f72443f
  0x00007f8f8f7243ad: lea    0x8(%rsp),%rax
  0x00007f8f8f7243b2: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7243b6: mov    %r15,%rdi
  0x00007f8f8f7243b9: vzeroupper 
  0x00007f8f8f7243bc: mov    %rbp,0x330(%r15)
  0x00007f8f8f7243c3: mov    %rax,0x320(%r15)
  0x00007f8f8f7243ca: test   $0xf,%esp
  0x00007f8f8f7243d0: je     0x00007f8f8f7243e8
  0x00007f8f8f7243d6: sub    $0x8,%rsp
  0x00007f8f8f7243da: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7243df: add    $0x8,%rsp
  0x00007f8f8f7243e3: jmpq   0x00007f8f8f7243ed
  0x00007f8f8f7243e8: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7243ed: movabs $0x0,%r10
  0x00007f8f8f7243f7: mov    %r10,0x320(%r15)
  0x00007f8f8f7243fe: movabs $0x0,%r10
  0x00007f8f8f724408: mov    %r10,0x330(%r15)
  0x00007f8f8f72440f: movabs $0x0,%r10
  0x00007f8f8f724419: mov    %r10,0x328(%r15)
  0x00007f8f8f724420: vzeroupper 
  0x00007f8f8f724423: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72442b: je     0x00007f8f8f724436
  0x00007f8f8f724431: jmpq   0x00007f8f8f71a780
  0x00007f8f8f724436: mov    -0x40(%rbp),%r13
  0x00007f8f8f72443a: mov    -0x38(%rbp),%r14
  0x00007f8f8f72443e: retq   
  0x00007f8f8f72443f: mov    -0x40(%rbp),%r13
  0x00007f8f8f724443: vmovsd (%rsp),%xmm0
  0x00007f8f8f724448: add    $0x10,%rsp
  0x00007f8f8f72444c: jmpq   0x00007f8f8f72434b
  0x00007f8f8f724451: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f724459: jne    0x00007f8f8f724358
  0x00007f8f8f72445f: add    $0x10,%rsi
  0x00007f8f8f724463: cmp    %rbx,%rsi
  0x00007f8f8f724466: jne    0x00007f8f8f724451
  0x00007f8f8f724468: cmpb   $0x0,0x1e492d18(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f72446f: je     0x00007f8f8f7244b1
  0x00007f8f8f724475: sub    $0x10,%rsp
  0x00007f8f8f724479: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72447e: mov    -0x18(%rbp),%rsi
  0x00007f8f8f724482: mov    %r15,%rdi
  0x00007f8f8f724485: test   $0xf,%esp
  0x00007f8f8f72448b: je     0x00007f8f8f7244a3
  0x00007f8f8f724491: sub    $0x8,%rsp
  0x00007f8f8f724495: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f72449a: add    $0x8,%rsp
  0x00007f8f8f72449e: jmpq   0x00007f8f8f7244a8
  0x00007f8f8f7244a3: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f7244a8: vmovsd (%rsp),%xmm0
  0x00007f8f8f7244ad: add    $0x10,%rsp
  0x00007f8f8f7244b1: mov    -0x8(%rbp),%rbx
  0x00007f8f8f7244b5: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f7244c0: je     0x00007f8f8f72460c
  0x00007f8f8f7244c6: cmp    0x418(%r15),%rbx
  0x00007f8f8f7244cd: jle    0x00007f8f8f72460c
  0x00007f8f8f7244d3: mov    %r15,%rdi
  0x00007f8f8f7244d6: test   $0xf,%esp
  0x00007f8f8f7244dc: je     0x00007f8f8f7244f4
  0x00007f8f8f7244e2: sub    $0x8,%rsp
  0x00007f8f8f7244e6: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f7244eb: add    $0x8,%rsp
  0x00007f8f8f7244ef: jmpq   0x00007f8f8f7244f9
  0x00007f8f8f7244f4: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f7244f9: callq  0x00007f8f8f724503
  0x00007f8f8f7244fe: jmpq   0x00007f8f8f724595
  0x00007f8f8f724503: lea    0x8(%rsp),%rax
  0x00007f8f8f724508: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72450c: mov    %r15,%rdi
  0x00007f8f8f72450f: vzeroupper 
  0x00007f8f8f724512: mov    %rbp,0x330(%r15)
  0x00007f8f8f724519: mov    %rax,0x320(%r15)
  0x00007f8f8f724520: test   $0xf,%esp
  0x00007f8f8f724526: je     0x00007f8f8f72453e
  0x00007f8f8f72452c: sub    $0x8,%rsp
  0x00007f8f8f724530: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f724535: add    $0x8,%rsp
  0x00007f8f8f724539: jmpq   0x00007f8f8f724543
  0x00007f8f8f72453e: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f724543: movabs $0x0,%r10
  0x00007f8f8f72454d: mov    %r10,0x320(%r15)
  0x00007f8f8f724554: movabs $0x0,%r10
  0x00007f8f8f72455e: mov    %r10,0x330(%r15)
  0x00007f8f8f724565: movabs $0x0,%r10
  0x00007f8f8f72456f: mov    %r10,0x328(%r15)
  0x00007f8f8f724576: vzeroupper 
  0x00007f8f8f724579: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f724581: je     0x00007f8f8f72458c
  0x00007f8f8f724587: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72458c: mov    -0x40(%rbp),%r13
  0x00007f8f8f724590: mov    -0x38(%rbp),%r14
  0x00007f8f8f724594: retq   
  0x00007f8f8f724595: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f72459a: sub    $0x80,%rsp
  0x00007f8f8f7245a1: mov    %rax,0x78(%rsp)
  0x00007f8f8f7245a6: mov    %rcx,0x70(%rsp)
  0x00007f8f8f7245ab: mov    %rdx,0x68(%rsp)
  0x00007f8f8f7245b0: mov    %rbx,0x60(%rsp)
  0x00007f8f8f7245b5: mov    %rbp,0x50(%rsp)
  0x00007f8f8f7245ba: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7245bf: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7245c4: mov    %r8,0x38(%rsp)
  0x00007f8f8f7245c9: mov    %r9,0x30(%rsp)
  0x00007f8f8f7245ce: mov    %r10,0x28(%rsp)
  0x00007f8f8f7245d3: mov    %r11,0x20(%rsp)
  0x00007f8f8f7245d8: mov    %r12,0x18(%rsp)
  0x00007f8f8f7245dd: mov    %r13,0x10(%rsp)
  0x00007f8f8f7245e2: mov    %r14,0x8(%rsp)
  0x00007f8f8f7245e7: mov    %r15,(%rsp)
  0x00007f8f8f7245eb: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f7245f5: movabs $0x7f8f8f724595,%rsi
  0x00007f8f8f7245ff: mov    %rsp,%rdx
  0x00007f8f8f724602: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f724606: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f72460b: hlt    
  0x00007f8f8f72460c: leaveq 
  0x00007f8f8f72460d: pop    %rsi
  0x00007f8f8f72460e: mov    %rbx,%rsp
  0x00007f8f8f724611: jmpq   *%rsi
  0x00007f8f8f724613: mov    -0x40(%rbp),%r13
  0x00007f8f8f724617: mov    -0x38(%rbp),%r14
  0x00007f8f8f72461b: mov    -0x48(%rbp),%rsp
  0x00007f8f8f72461f: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f724627: mov    0x4b0(%r15),%rcx
  0x00007f8f8f72462e: vmovss 0x80(%rcx),%xmm0
  0x00007f8f8f724636: movl   $0xb,0x78(%rcx)
  0x00007f8f8f72463d: movl   $0x0,0x80(%rcx)
  0x00007f8f8f724647: movl   $0xb,0x78(%rcx)
  0x00007f8f8f72464e: movabs $0x0,%r10
  0x00007f8f8f724658: mov    %r10,0x80(%rcx)
  0x00007f8f8f72465f: mov    0x4b0(%r15),%rcx
  0x00007f8f8f724666: movl   $0x0,0x74(%rcx)
  0x00007f8f8f72466d: mov    0x3dd(%r15),%bl
  0x00007f8f8f724674: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f72467c: mov    -0x18(%rbp),%rcx
  0x00007f8f8f724680: mov    0x20(%rcx),%ecx
  0x00007f8f8f724683: test   $0x20,%ecx
  0x00007f8f8f724689: je     0x00007f8f8f7247a8
  0x00007f8f8f72468f: test   $0xff,%bl
  0x00007f8f8f724692: jne    0x00007f8f8f7248c5
  0x00007f8f8f724698: sub    $0x8,%rsp
  0x00007f8f8f72469c: vmovss %xmm0,(%rsp)
  0x00007f8f8f7246a1: lea    -0x58(%rbp),%rsi
  0x00007f8f8f7246a5: mov    0x8(%rsi),%rax
  0x00007f8f8f7246a9: test   %rax,%rax
  0x00007f8f8f7246ac: jne    0x00007f8f8f7246c0
  0x00007f8f8f7246b2: vmovss (%rsp),%xmm0
  0x00007f8f8f7246b7: add    $0x8,%rsp
  0x00007f8f8f7246bb: jmpq   0x00007f8f8f7247a8
  0x00007f8f8f7246c0: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7246c4: lea    (%rsi),%rax
  0x00007f8f8f7246c7: mov    0x8(%rsi),%rcx
  0x00007f8f8f7246cb: movq   $0x0,0x8(%rsi)
  0x00007f8f8f7246d3: mov    (%rcx),%rdx
  0x00007f8f8f7246d6: and    $0x7,%rdx
  0x00007f8f8f7246da: cmp    $0x5,%rdx
  0x00007f8f8f7246de: je     0x00007f8f8f72479b
  0x00007f8f8f7246e4: mov    (%rax),%rdx
  0x00007f8f8f7246e7: test   %rdx,%rdx
  0x00007f8f8f7246ea: je     0x00007f8f8f72479b
  0x00007f8f8f7246f0: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f7246f5: je     0x00007f8f8f72479b
  0x00007f8f8f7246fb: mov    %rcx,0x8(%rsi)
  0x00007f8f8f7246ff: callq  0x00007f8f8f724709
  0x00007f8f8f724704: jmpq   0x00007f8f8f72479b
  0x00007f8f8f724709: lea    0x8(%rsp),%rax
  0x00007f8f8f72470e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f724712: mov    %r15,%rdi
  0x00007f8f8f724715: vzeroupper 
  0x00007f8f8f724718: mov    %rbp,0x330(%r15)
  0x00007f8f8f72471f: mov    %rax,0x320(%r15)
  0x00007f8f8f724726: test   $0xf,%esp
  0x00007f8f8f72472c: je     0x00007f8f8f724744
  0x00007f8f8f724732: sub    $0x8,%rsp
  0x00007f8f8f724736: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72473b: add    $0x8,%rsp
  0x00007f8f8f72473f: jmpq   0x00007f8f8f724749
  0x00007f8f8f724744: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f724749: movabs $0x0,%r10
  0x00007f8f8f724753: mov    %r10,0x320(%r15)
  0x00007f8f8f72475a: movabs $0x0,%r10
  0x00007f8f8f724764: mov    %r10,0x330(%r15)
  0x00007f8f8f72476b: movabs $0x0,%r10
  0x00007f8f8f724775: mov    %r10,0x328(%r15)
  0x00007f8f8f72477c: vzeroupper 
  0x00007f8f8f72477f: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f724787: je     0x00007f8f8f724792
  0x00007f8f8f72478d: jmpq   0x00007f8f8f71a780
  0x00007f8f8f724792: mov    -0x40(%rbp),%r13
  0x00007f8f8f724796: mov    -0x38(%rbp),%r14
  0x00007f8f8f72479a: retq   
  0x00007f8f8f72479b: mov    -0x40(%rbp),%r13
  0x00007f8f8f72479f: vmovss (%rsp),%xmm0
  0x00007f8f8f7247a4: add    $0x8,%rsp
  0x00007f8f8f7247a8: mov    -0x48(%rbp),%rsi
  0x00007f8f8f7247ac: lea    -0x48(%rbp),%rbx
  0x00007f8f8f7247b0: jmpq   0x00007f8f8f7248c0
  0x00007f8f8f7247b5: sub    $0x8,%rsp
  0x00007f8f8f7247b9: vmovss %xmm0,(%rsp)
  0x00007f8f8f7247be: mov    %rsi,%rsi
  0x00007f8f8f7247c1: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7247c5: lea    (%rsi),%rax
  0x00007f8f8f7247c8: mov    0x8(%rsi),%rcx
  0x00007f8f8f7247cc: movq   $0x0,0x8(%rsi)
  0x00007f8f8f7247d4: mov    (%rcx),%rdx
  0x00007f8f8f7247d7: and    $0x7,%rdx
  0x00007f8f8f7247db: cmp    $0x5,%rdx
  0x00007f8f8f7247df: je     0x00007f8f8f72489c
  0x00007f8f8f7247e5: mov    (%rax),%rdx
  0x00007f8f8f7247e8: test   %rdx,%rdx
  0x00007f8f8f7247eb: je     0x00007f8f8f72489c
  0x00007f8f8f7247f1: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f7247f6: je     0x00007f8f8f72489c
  0x00007f8f8f7247fc: mov    %rcx,0x8(%rsi)
  0x00007f8f8f724800: callq  0x00007f8f8f72480a
  0x00007f8f8f724805: jmpq   0x00007f8f8f72489c
  0x00007f8f8f72480a: lea    0x8(%rsp),%rax
  0x00007f8f8f72480f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f724813: mov    %r15,%rdi
  0x00007f8f8f724816: vzeroupper 
  0x00007f8f8f724819: mov    %rbp,0x330(%r15)
  0x00007f8f8f724820: mov    %rax,0x320(%r15)
  0x00007f8f8f724827: test   $0xf,%esp
  0x00007f8f8f72482d: je     0x00007f8f8f724845
  0x00007f8f8f724833: sub    $0x8,%rsp
  0x00007f8f8f724837: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72483c: add    $0x8,%rsp
  0x00007f8f8f724840: jmpq   0x00007f8f8f72484a
  0x00007f8f8f724845: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72484a: movabs $0x0,%r10
  0x00007f8f8f724854: mov    %r10,0x320(%r15)
  0x00007f8f8f72485b: movabs $0x0,%r10
  0x00007f8f8f724865: mov    %r10,0x330(%r15)
  0x00007f8f8f72486c: movabs $0x0,%r10
  0x00007f8f8f724876: mov    %r10,0x328(%r15)
  0x00007f8f8f72487d: vzeroupper 
  0x00007f8f8f724880: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f724888: je     0x00007f8f8f724893
  0x00007f8f8f72488e: jmpq   0x00007f8f8f71a780
  0x00007f8f8f724893: mov    -0x40(%rbp),%r13
  0x00007f8f8f724897: mov    -0x38(%rbp),%r14
  0x00007f8f8f72489b: retq   
  0x00007f8f8f72489c: mov    -0x40(%rbp),%r13
  0x00007f8f8f7248a0: vmovss (%rsp),%xmm0
  0x00007f8f8f7248a5: add    $0x8,%rsp
  0x00007f8f8f7248a9: jmpq   0x00007f8f8f7247a8
  0x00007f8f8f7248ae: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f7248b6: jne    0x00007f8f8f7247b5
  0x00007f8f8f7248bc: add    $0x10,%rsi
  0x00007f8f8f7248c0: cmp    %rbx,%rsi
  0x00007f8f8f7248c3: jne    0x00007f8f8f7248ae
  0x00007f8f8f7248c5: cmpb   $0x0,0x1e4928bb(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f7248cc: je     0x00007f8f8f72490e
  0x00007f8f8f7248d2: sub    $0x8,%rsp
  0x00007f8f8f7248d6: vmovss %xmm0,(%rsp)
  0x00007f8f8f7248db: mov    -0x18(%rbp),%rsi
  0x00007f8f8f7248df: mov    %r15,%rdi
  0x00007f8f8f7248e2: test   $0xf,%esp
  0x00007f8f8f7248e8: je     0x00007f8f8f724900
  0x00007f8f8f7248ee: sub    $0x8,%rsp
  0x00007f8f8f7248f2: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f7248f7: add    $0x8,%rsp
  0x00007f8f8f7248fb: jmpq   0x00007f8f8f724905
  0x00007f8f8f724900: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f724905: vmovss (%rsp),%xmm0
  0x00007f8f8f72490a: add    $0x8,%rsp
  0x00007f8f8f72490e: mov    -0x8(%rbp),%rbx
  0x00007f8f8f724912: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f72491d: je     0x00007f8f8f724a69
  0x00007f8f8f724923: cmp    0x418(%r15),%rbx
  0x00007f8f8f72492a: jle    0x00007f8f8f724a69
  0x00007f8f8f724930: mov    %r15,%rdi
  0x00007f8f8f724933: test   $0xf,%esp
  0x00007f8f8f724939: je     0x00007f8f8f724951
  0x00007f8f8f72493f: sub    $0x8,%rsp
  0x00007f8f8f724943: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f724948: add    $0x8,%rsp
  0x00007f8f8f72494c: jmpq   0x00007f8f8f724956
  0x00007f8f8f724951: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f724956: callq  0x00007f8f8f724960
  0x00007f8f8f72495b: jmpq   0x00007f8f8f7249f2
  0x00007f8f8f724960: lea    0x8(%rsp),%rax
  0x00007f8f8f724965: mov    %r13,-0x40(%rbp)
  0x00007f8f8f724969: mov    %r15,%rdi
  0x00007f8f8f72496c: vzeroupper 
  0x00007f8f8f72496f: mov    %rbp,0x330(%r15)
  0x00007f8f8f724976: mov    %rax,0x320(%r15)
  0x00007f8f8f72497d: test   $0xf,%esp
  0x00007f8f8f724983: je     0x00007f8f8f72499b
  0x00007f8f8f724989: sub    $0x8,%rsp
  0x00007f8f8f72498d: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f724992: add    $0x8,%rsp
  0x00007f8f8f724996: jmpq   0x00007f8f8f7249a0
  0x00007f8f8f72499b: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f7249a0: movabs $0x0,%r10
  0x00007f8f8f7249aa: mov    %r10,0x320(%r15)
  0x00007f8f8f7249b1: movabs $0x0,%r10
  0x00007f8f8f7249bb: mov    %r10,0x330(%r15)
  0x00007f8f8f7249c2: movabs $0x0,%r10
  0x00007f8f8f7249cc: mov    %r10,0x328(%r15)
  0x00007f8f8f7249d3: vzeroupper 
  0x00007f8f8f7249d6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7249de: je     0x00007f8f8f7249e9
  0x00007f8f8f7249e4: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7249e9: mov    -0x40(%rbp),%r13
  0x00007f8f8f7249ed: mov    -0x38(%rbp),%r14
  0x00007f8f8f7249f1: retq   
  0x00007f8f8f7249f2: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f7249f7: sub    $0x80,%rsp
  0x00007f8f8f7249fe: mov    %rax,0x78(%rsp)
  0x00007f8f8f724a03: mov    %rcx,0x70(%rsp)
  0x00007f8f8f724a08: mov    %rdx,0x68(%rsp)
  0x00007f8f8f724a0d: mov    %rbx,0x60(%rsp)
  0x00007f8f8f724a12: mov    %rbp,0x50(%rsp)
  0x00007f8f8f724a17: mov    %rsi,0x48(%rsp)
  0x00007f8f8f724a1c: mov    %rdi,0x40(%rsp)
  0x00007f8f8f724a21: mov    %r8,0x38(%rsp)
  0x00007f8f8f724a26: mov    %r9,0x30(%rsp)
  0x00007f8f8f724a2b: mov    %r10,0x28(%rsp)
  0x00007f8f8f724a30: mov    %r11,0x20(%rsp)
  0x00007f8f8f724a35: mov    %r12,0x18(%rsp)
  0x00007f8f8f724a3a: mov    %r13,0x10(%rsp)
  0x00007f8f8f724a3f: mov    %r14,0x8(%rsp)
  0x00007f8f8f724a44: mov    %r15,(%rsp)
  0x00007f8f8f724a48: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f724a52: movabs $0x7f8f8f7249f2,%rsi
  0x00007f8f8f724a5c: mov    %rsp,%rdx
  0x00007f8f8f724a5f: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f724a63: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f724a68: hlt    
  0x00007f8f8f724a69: leaveq 
  0x00007f8f8f724a6a: pop    %rsi
  0x00007f8f8f724a6b: mov    %rbx,%rsp
  0x00007f8f8f724a6e: jmpq   *%rsi
  0x00007f8f8f724a70: mov    -0x40(%rbp),%r13
  0x00007f8f8f724a74: mov    -0x38(%rbp),%r14
  0x00007f8f8f724a78: mov    -0x48(%rbp),%rsp
  0x00007f8f8f724a7c: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f724a84: mov    0x4b0(%r15),%rcx
  0x00007f8f8f724a8b: mov    0x80(%rcx),%rax
  0x00007f8f8f724a92: movl   $0xb,0x78(%rcx)
  0x00007f8f8f724a99: movl   $0x0,0x80(%rcx)
  0x00007f8f8f724aa3: movl   $0xb,0x78(%rcx)
  0x00007f8f8f724aaa: movabs $0x0,%r10
  0x00007f8f8f724ab4: mov    %r10,0x80(%rcx)
  0x00007f8f8f724abb: mov    0x4b0(%r15),%rcx
  0x00007f8f8f724ac2: movl   $0x0,0x74(%rcx)
  0x00007f8f8f724ac9: mov    0x3dd(%r15),%bl
  0x00007f8f8f724ad0: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f724ad8: mov    -0x18(%rbp),%rcx
  0x00007f8f8f724adc: mov    0x20(%rcx),%ecx
  0x00007f8f8f724adf: test   $0x20,%ecx
  0x00007f8f8f724ae5: je     0x00007f8f8f724c10
  0x00007f8f8f724aeb: test   $0xff,%bl
  0x00007f8f8f724aee: jne    0x00007f8f8f724d3a
  0x00007f8f8f724af4: sub    $0x10,%rsp
  0x00007f8f8f724af8: mov    %rax,(%rsp)
  0x00007f8f8f724afc: movabs $0x0,%r10
  0x00007f8f8f724b06: mov    %r10,0x8(%rsp)
  0x00007f8f8f724b0b: lea    -0x58(%rbp),%rsi
  0x00007f8f8f724b0f: mov    0x8(%rsi),%rax
  0x00007f8f8f724b13: test   %rax,%rax
  0x00007f8f8f724b16: jne    0x00007f8f8f724b29
  0x00007f8f8f724b1c: mov    (%rsp),%rax
  0x00007f8f8f724b20: add    $0x10,%rsp
  0x00007f8f8f724b24: jmpq   0x00007f8f8f724c10
  0x00007f8f8f724b29: mov    %r13,-0x40(%rbp)
  0x00007f8f8f724b2d: lea    (%rsi),%rax
  0x00007f8f8f724b30: mov    0x8(%rsi),%rcx
  0x00007f8f8f724b34: movq   $0x0,0x8(%rsi)
  0x00007f8f8f724b3c: mov    (%rcx),%rdx
  0x00007f8f8f724b3f: and    $0x7,%rdx
  0x00007f8f8f724b43: cmp    $0x5,%rdx
  0x00007f8f8f724b47: je     0x00007f8f8f724c04
  0x00007f8f8f724b4d: mov    (%rax),%rdx
  0x00007f8f8f724b50: test   %rdx,%rdx
  0x00007f8f8f724b53: je     0x00007f8f8f724c04
  0x00007f8f8f724b59: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f724b5e: je     0x00007f8f8f724c04
  0x00007f8f8f724b64: mov    %rcx,0x8(%rsi)
  0x00007f8f8f724b68: callq  0x00007f8f8f724b72
  0x00007f8f8f724b6d: jmpq   0x00007f8f8f724c04
  0x00007f8f8f724b72: lea    0x8(%rsp),%rax
  0x00007f8f8f724b77: mov    %r13,-0x40(%rbp)
  0x00007f8f8f724b7b: mov    %r15,%rdi
  0x00007f8f8f724b7e: vzeroupper 
  0x00007f8f8f724b81: mov    %rbp,0x330(%r15)
  0x00007f8f8f724b88: mov    %rax,0x320(%r15)
  0x00007f8f8f724b8f: test   $0xf,%esp
  0x00007f8f8f724b95: je     0x00007f8f8f724bad
  0x00007f8f8f724b9b: sub    $0x8,%rsp
  0x00007f8f8f724b9f: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f724ba4: add    $0x8,%rsp
  0x00007f8f8f724ba8: jmpq   0x00007f8f8f724bb2
  0x00007f8f8f724bad: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f724bb2: movabs $0x0,%r10
  0x00007f8f8f724bbc: mov    %r10,0x320(%r15)
  0x00007f8f8f724bc3: movabs $0x0,%r10
  0x00007f8f8f724bcd: mov    %r10,0x330(%r15)
  0x00007f8f8f724bd4: movabs $0x0,%r10
  0x00007f8f8f724bde: mov    %r10,0x328(%r15)
  0x00007f8f8f724be5: vzeroupper 
  0x00007f8f8f724be8: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f724bf0: je     0x00007f8f8f724bfb
  0x00007f8f8f724bf6: jmpq   0x00007f8f8f71a780
  0x00007f8f8f724bfb: mov    -0x40(%rbp),%r13
  0x00007f8f8f724bff: mov    -0x38(%rbp),%r14
  0x00007f8f8f724c03: retq   
  0x00007f8f8f724c04: mov    -0x40(%rbp),%r13
  0x00007f8f8f724c08: mov    (%rsp),%rax
  0x00007f8f8f724c0c: add    $0x10,%rsp
  0x00007f8f8f724c10: mov    -0x48(%rbp),%rsi
  0x00007f8f8f724c14: lea    -0x48(%rbp),%rbx
  0x00007f8f8f724c18: jmpq   0x00007f8f8f724d35
  0x00007f8f8f724c1d: sub    $0x10,%rsp
  0x00007f8f8f724c21: mov    %rax,(%rsp)
  0x00007f8f8f724c25: movabs $0x0,%r10
  0x00007f8f8f724c2f: mov    %r10,0x8(%rsp)
  0x00007f8f8f724c34: mov    %rsi,%rsi
  0x00007f8f8f724c37: mov    %r13,-0x40(%rbp)
  0x00007f8f8f724c3b: lea    (%rsi),%rax
  0x00007f8f8f724c3e: mov    0x8(%rsi),%rcx
  0x00007f8f8f724c42: movq   $0x0,0x8(%rsi)
  0x00007f8f8f724c4a: mov    (%rcx),%rdx
  0x00007f8f8f724c4d: and    $0x7,%rdx
  0x00007f8f8f724c51: cmp    $0x5,%rdx
  0x00007f8f8f724c55: je     0x00007f8f8f724d12
  0x00007f8f8f724c5b: mov    (%rax),%rdx
  0x00007f8f8f724c5e: test   %rdx,%rdx
  0x00007f8f8f724c61: je     0x00007f8f8f724d12
  0x00007f8f8f724c67: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f724c6c: je     0x00007f8f8f724d12
  0x00007f8f8f724c72: mov    %rcx,0x8(%rsi)
  0x00007f8f8f724c76: callq  0x00007f8f8f724c80
  0x00007f8f8f724c7b: jmpq   0x00007f8f8f724d12
  0x00007f8f8f724c80: lea    0x8(%rsp),%rax
  0x00007f8f8f724c85: mov    %r13,-0x40(%rbp)
  0x00007f8f8f724c89: mov    %r15,%rdi
  0x00007f8f8f724c8c: vzeroupper 
  0x00007f8f8f724c8f: mov    %rbp,0x330(%r15)
  0x00007f8f8f724c96: mov    %rax,0x320(%r15)
  0x00007f8f8f724c9d: test   $0xf,%esp
  0x00007f8f8f724ca3: je     0x00007f8f8f724cbb
  0x00007f8f8f724ca9: sub    $0x8,%rsp
  0x00007f8f8f724cad: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f724cb2: add    $0x8,%rsp
  0x00007f8f8f724cb6: jmpq   0x00007f8f8f724cc0
  0x00007f8f8f724cbb: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f724cc0: movabs $0x0,%r10
  0x00007f8f8f724cca: mov    %r10,0x320(%r15)
  0x00007f8f8f724cd1: movabs $0x0,%r10
  0x00007f8f8f724cdb: mov    %r10,0x330(%r15)
  0x00007f8f8f724ce2: movabs $0x0,%r10
  0x00007f8f8f724cec: mov    %r10,0x328(%r15)
  0x00007f8f8f724cf3: vzeroupper 
  0x00007f8f8f724cf6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f724cfe: je     0x00007f8f8f724d09
  0x00007f8f8f724d04: jmpq   0x00007f8f8f71a780
  0x00007f8f8f724d09: mov    -0x40(%rbp),%r13
  0x00007f8f8f724d0d: mov    -0x38(%rbp),%r14
  0x00007f8f8f724d11: retq   
  0x00007f8f8f724d12: mov    -0x40(%rbp),%r13
  0x00007f8f8f724d16: mov    (%rsp),%rax
  0x00007f8f8f724d1a: add    $0x10,%rsp
  0x00007f8f8f724d1e: jmpq   0x00007f8f8f724c10
  0x00007f8f8f724d23: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f724d2b: jne    0x00007f8f8f724c1d
  0x00007f8f8f724d31: add    $0x10,%rsi
  0x00007f8f8f724d35: cmp    %rbx,%rsi
  0x00007f8f8f724d38: jne    0x00007f8f8f724d23
  0x00007f8f8f724d3a: cmpb   $0x0,0x1e492446(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f724d41: je     0x00007f8f8f724d90
  0x00007f8f8f724d47: sub    $0x10,%rsp
  0x00007f8f8f724d4b: mov    %rax,(%rsp)
  0x00007f8f8f724d4f: movabs $0x0,%r10
  0x00007f8f8f724d59: mov    %r10,0x8(%rsp)
  0x00007f8f8f724d5e: mov    -0x18(%rbp),%rsi
  0x00007f8f8f724d62: mov    %r15,%rdi
  0x00007f8f8f724d65: test   $0xf,%esp
  0x00007f8f8f724d6b: je     0x00007f8f8f724d83
  0x00007f8f8f724d71: sub    $0x8,%rsp
  0x00007f8f8f724d75: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f724d7a: add    $0x8,%rsp
  0x00007f8f8f724d7e: jmpq   0x00007f8f8f724d88
  0x00007f8f8f724d83: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f724d88: mov    (%rsp),%rax
  0x00007f8f8f724d8c: add    $0x10,%rsp
  0x00007f8f8f724d90: mov    -0x8(%rbp),%rbx
  0x00007f8f8f724d94: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f724d9f: je     0x00007f8f8f724eeb
  0x00007f8f8f724da5: cmp    0x418(%r15),%rbx
  0x00007f8f8f724dac: jle    0x00007f8f8f724eeb
  0x00007f8f8f724db2: mov    %r15,%rdi
  0x00007f8f8f724db5: test   $0xf,%esp
  0x00007f8f8f724dbb: je     0x00007f8f8f724dd3
  0x00007f8f8f724dc1: sub    $0x8,%rsp
  0x00007f8f8f724dc5: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f724dca: add    $0x8,%rsp
  0x00007f8f8f724dce: jmpq   0x00007f8f8f724dd8
  0x00007f8f8f724dd3: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f724dd8: callq  0x00007f8f8f724de2
  0x00007f8f8f724ddd: jmpq   0x00007f8f8f724e74
  0x00007f8f8f724de2: lea    0x8(%rsp),%rax
  0x00007f8f8f724de7: mov    %r13,-0x40(%rbp)
  0x00007f8f8f724deb: mov    %r15,%rdi
  0x00007f8f8f724dee: vzeroupper 
  0x00007f8f8f724df1: mov    %rbp,0x330(%r15)
  0x00007f8f8f724df8: mov    %rax,0x320(%r15)
  0x00007f8f8f724dff: test   $0xf,%esp
  0x00007f8f8f724e05: je     0x00007f8f8f724e1d
  0x00007f8f8f724e0b: sub    $0x8,%rsp
  0x00007f8f8f724e0f: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f724e14: add    $0x8,%rsp
  0x00007f8f8f724e18: jmpq   0x00007f8f8f724e22
  0x00007f8f8f724e1d: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f724e22: movabs $0x0,%r10
  0x00007f8f8f724e2c: mov    %r10,0x320(%r15)
  0x00007f8f8f724e33: movabs $0x0,%r10
  0x00007f8f8f724e3d: mov    %r10,0x330(%r15)
  0x00007f8f8f724e44: movabs $0x0,%r10
  0x00007f8f8f724e4e: mov    %r10,0x328(%r15)
  0x00007f8f8f724e55: vzeroupper 
  0x00007f8f8f724e58: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f724e60: je     0x00007f8f8f724e6b
  0x00007f8f8f724e66: jmpq   0x00007f8f8f71a780
  0x00007f8f8f724e6b: mov    -0x40(%rbp),%r13
  0x00007f8f8f724e6f: mov    -0x38(%rbp),%r14
  0x00007f8f8f724e73: retq   
  0x00007f8f8f724e74: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f724e79: sub    $0x80,%rsp
  0x00007f8f8f724e80: mov    %rax,0x78(%rsp)
  0x00007f8f8f724e85: mov    %rcx,0x70(%rsp)
  0x00007f8f8f724e8a: mov    %rdx,0x68(%rsp)
  0x00007f8f8f724e8f: mov    %rbx,0x60(%rsp)
  0x00007f8f8f724e94: mov    %rbp,0x50(%rsp)
  0x00007f8f8f724e99: mov    %rsi,0x48(%rsp)
  0x00007f8f8f724e9e: mov    %rdi,0x40(%rsp)
  0x00007f8f8f724ea3: mov    %r8,0x38(%rsp)
  0x00007f8f8f724ea8: mov    %r9,0x30(%rsp)
  0x00007f8f8f724ead: mov    %r10,0x28(%rsp)
  0x00007f8f8f724eb2: mov    %r11,0x20(%rsp)
  0x00007f8f8f724eb7: mov    %r12,0x18(%rsp)
  0x00007f8f8f724ebc: mov    %r13,0x10(%rsp)
  0x00007f8f8f724ec1: mov    %r14,0x8(%rsp)
  0x00007f8f8f724ec6: mov    %r15,(%rsp)
  0x00007f8f8f724eca: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f724ed4: movabs $0x7f8f8f724e74,%rsi
  0x00007f8f8f724ede: mov    %rsp,%rdx
  0x00007f8f8f724ee1: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f724ee5: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f724eea: hlt    
  0x00007f8f8f724eeb: leaveq 
  0x00007f8f8f724eec: pop    %rsi
  0x00007f8f8f724eed: mov    %rbx,%rsp
  0x00007f8f8f724ef0: jmpq   *%rsi
  0x00007f8f8f724ef2: mov    -0x40(%rbp),%r13
  0x00007f8f8f724ef6: mov    -0x38(%rbp),%r14
  0x00007f8f8f724efa: mov    -0x48(%rbp),%rsp
  0x00007f8f8f724efe: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f724f06: mov    0x4b0(%r15),%rcx
  0x00007f8f8f724f0d: mov    0x80(%rcx),%eax
  0x00007f8f8f724f13: movl   $0xb,0x78(%rcx)
  0x00007f8f8f724f1a: movl   $0x0,0x80(%rcx)
  0x00007f8f8f724f24: movl   $0xb,0x78(%rcx)
  0x00007f8f8f724f2b: movabs $0x0,%r10
  0x00007f8f8f724f35: mov    %r10,0x80(%rcx)
  0x00007f8f8f724f3c: mov    0x4b0(%r15),%rcx
  0x00007f8f8f724f43: movl   $0x0,0x74(%rcx)
  0x00007f8f8f724f4a: mov    0x3dd(%r15),%bl
  0x00007f8f8f724f51: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f724f59: mov    -0x18(%rbp),%rcx
  0x00007f8f8f724f5d: mov    0x20(%rcx),%ecx
  0x00007f8f8f724f60: test   $0x20,%ecx
  0x00007f8f8f724f66: je     0x00007f8f8f725079
  0x00007f8f8f724f6c: test   $0xff,%bl
  0x00007f8f8f724f6f: jne    0x00007f8f8f72518c
  0x00007f8f8f724f75: push   %rax
  0x00007f8f8f724f76: lea    -0x58(%rbp),%rsi
  0x00007f8f8f724f7a: mov    0x8(%rsi),%rax
  0x00007f8f8f724f7e: test   %rax,%rax
  0x00007f8f8f724f81: jne    0x00007f8f8f724f93
  0x00007f8f8f724f87: mov    (%rsp),%eax
  0x00007f8f8f724f8a: add    $0x8,%rsp
  0x00007f8f8f724f8e: jmpq   0x00007f8f8f725079
  0x00007f8f8f724f93: mov    %r13,-0x40(%rbp)
  0x00007f8f8f724f97: lea    (%rsi),%rax
  0x00007f8f8f724f9a: mov    0x8(%rsi),%rcx
  0x00007f8f8f724f9e: movq   $0x0,0x8(%rsi)
  0x00007f8f8f724fa6: mov    (%rcx),%rdx
  0x00007f8f8f724fa9: and    $0x7,%rdx
  0x00007f8f8f724fad: cmp    $0x5,%rdx
  0x00007f8f8f724fb1: je     0x00007f8f8f72506e
  0x00007f8f8f724fb7: mov    (%rax),%rdx
  0x00007f8f8f724fba: test   %rdx,%rdx
  0x00007f8f8f724fbd: je     0x00007f8f8f72506e
  0x00007f8f8f724fc3: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f724fc8: je     0x00007f8f8f72506e
  0x00007f8f8f724fce: mov    %rcx,0x8(%rsi)
  0x00007f8f8f724fd2: callq  0x00007f8f8f724fdc
  0x00007f8f8f724fd7: jmpq   0x00007f8f8f72506e
  0x00007f8f8f724fdc: lea    0x8(%rsp),%rax
  0x00007f8f8f724fe1: mov    %r13,-0x40(%rbp)
  0x00007f8f8f724fe5: mov    %r15,%rdi
  0x00007f8f8f724fe8: vzeroupper 
  0x00007f8f8f724feb: mov    %rbp,0x330(%r15)
  0x00007f8f8f724ff2: mov    %rax,0x320(%r15)
  0x00007f8f8f724ff9: test   $0xf,%esp
  0x00007f8f8f724fff: je     0x00007f8f8f725017
  0x00007f8f8f725005: sub    $0x8,%rsp
  0x00007f8f8f725009: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72500e: add    $0x8,%rsp
  0x00007f8f8f725012: jmpq   0x00007f8f8f72501c
  0x00007f8f8f725017: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72501c: movabs $0x0,%r10
  0x00007f8f8f725026: mov    %r10,0x320(%r15)
  0x00007f8f8f72502d: movabs $0x0,%r10
  0x00007f8f8f725037: mov    %r10,0x330(%r15)
  0x00007f8f8f72503e: movabs $0x0,%r10
  0x00007f8f8f725048: mov    %r10,0x328(%r15)
  0x00007f8f8f72504f: vzeroupper 
  0x00007f8f8f725052: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72505a: je     0x00007f8f8f725065
  0x00007f8f8f725060: jmpq   0x00007f8f8f71a780
  0x00007f8f8f725065: mov    -0x40(%rbp),%r13
  0x00007f8f8f725069: mov    -0x38(%rbp),%r14
  0x00007f8f8f72506d: retq   
  0x00007f8f8f72506e: mov    -0x40(%rbp),%r13
  0x00007f8f8f725072: mov    (%rsp),%eax
  0x00007f8f8f725075: add    $0x8,%rsp
  0x00007f8f8f725079: mov    -0x48(%rbp),%rsi
  0x00007f8f8f72507d: lea    -0x48(%rbp),%rbx
  0x00007f8f8f725081: jmpq   0x00007f8f8f725187
  0x00007f8f8f725086: push   %rax
  0x00007f8f8f725087: mov    %rsi,%rsi
  0x00007f8f8f72508a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72508e: lea    (%rsi),%rax
  0x00007f8f8f725091: mov    0x8(%rsi),%rcx
  0x00007f8f8f725095: movq   $0x0,0x8(%rsi)
  0x00007f8f8f72509d: mov    (%rcx),%rdx
  0x00007f8f8f7250a0: and    $0x7,%rdx
  0x00007f8f8f7250a4: cmp    $0x5,%rdx
  0x00007f8f8f7250a8: je     0x00007f8f8f725165
  0x00007f8f8f7250ae: mov    (%rax),%rdx
  0x00007f8f8f7250b1: test   %rdx,%rdx
  0x00007f8f8f7250b4: je     0x00007f8f8f725165
  0x00007f8f8f7250ba: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f7250bf: je     0x00007f8f8f725165
  0x00007f8f8f7250c5: mov    %rcx,0x8(%rsi)
  0x00007f8f8f7250c9: callq  0x00007f8f8f7250d3
  0x00007f8f8f7250ce: jmpq   0x00007f8f8f725165
  0x00007f8f8f7250d3: lea    0x8(%rsp),%rax
  0x00007f8f8f7250d8: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7250dc: mov    %r15,%rdi
  0x00007f8f8f7250df: vzeroupper 
  0x00007f8f8f7250e2: mov    %rbp,0x330(%r15)
  0x00007f8f8f7250e9: mov    %rax,0x320(%r15)
  0x00007f8f8f7250f0: test   $0xf,%esp
  0x00007f8f8f7250f6: je     0x00007f8f8f72510e
  0x00007f8f8f7250fc: sub    $0x8,%rsp
  0x00007f8f8f725100: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f725105: add    $0x8,%rsp
  0x00007f8f8f725109: jmpq   0x00007f8f8f725113
  0x00007f8f8f72510e: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f725113: movabs $0x0,%r10
  0x00007f8f8f72511d: mov    %r10,0x320(%r15)
  0x00007f8f8f725124: movabs $0x0,%r10
  0x00007f8f8f72512e: mov    %r10,0x330(%r15)
  0x00007f8f8f725135: movabs $0x0,%r10
  0x00007f8f8f72513f: mov    %r10,0x328(%r15)
  0x00007f8f8f725146: vzeroupper 
  0x00007f8f8f725149: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f725151: je     0x00007f8f8f72515c
  0x00007f8f8f725157: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72515c: mov    -0x40(%rbp),%r13
  0x00007f8f8f725160: mov    -0x38(%rbp),%r14
  0x00007f8f8f725164: retq   
  0x00007f8f8f725165: mov    -0x40(%rbp),%r13
  0x00007f8f8f725169: mov    (%rsp),%eax
  0x00007f8f8f72516c: add    $0x8,%rsp
  0x00007f8f8f725170: jmpq   0x00007f8f8f725079
  0x00007f8f8f725175: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f72517d: jne    0x00007f8f8f725086
  0x00007f8f8f725183: add    $0x10,%rsi
  0x00007f8f8f725187: cmp    %rbx,%rsi
  0x00007f8f8f72518a: jne    0x00007f8f8f725175
  0x00007f8f8f72518c: cmpb   $0x0,0x1e491ff4(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f725193: je     0x00007f8f8f7251cb
  0x00007f8f8f725199: push   %rax
  0x00007f8f8f72519a: mov    -0x18(%rbp),%rsi
  0x00007f8f8f72519e: mov    %r15,%rdi
  0x00007f8f8f7251a1: test   $0xf,%esp
  0x00007f8f8f7251a7: je     0x00007f8f8f7251bf
  0x00007f8f8f7251ad: sub    $0x8,%rsp
  0x00007f8f8f7251b1: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f7251b6: add    $0x8,%rsp
  0x00007f8f8f7251ba: jmpq   0x00007f8f8f7251c4
  0x00007f8f8f7251bf: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f7251c4: mov    (%rsp),%eax
  0x00007f8f8f7251c7: add    $0x8,%rsp
  0x00007f8f8f7251cb: mov    -0x8(%rbp),%rbx
  0x00007f8f8f7251cf: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f7251da: je     0x00007f8f8f725326
  0x00007f8f8f7251e0: cmp    0x418(%r15),%rbx
  0x00007f8f8f7251e7: jle    0x00007f8f8f725326
  0x00007f8f8f7251ed: mov    %r15,%rdi
  0x00007f8f8f7251f0: test   $0xf,%esp
  0x00007f8f8f7251f6: je     0x00007f8f8f72520e
  0x00007f8f8f7251fc: sub    $0x8,%rsp
  0x00007f8f8f725200: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f725205: add    $0x8,%rsp
  0x00007f8f8f725209: jmpq   0x00007f8f8f725213
  0x00007f8f8f72520e: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f725213: callq  0x00007f8f8f72521d
  0x00007f8f8f725218: jmpq   0x00007f8f8f7252af
  0x00007f8f8f72521d: lea    0x8(%rsp),%rax
  0x00007f8f8f725222: mov    %r13,-0x40(%rbp)
  0x00007f8f8f725226: mov    %r15,%rdi
  0x00007f8f8f725229: vzeroupper 
  0x00007f8f8f72522c: mov    %rbp,0x330(%r15)
  0x00007f8f8f725233: mov    %rax,0x320(%r15)
  0x00007f8f8f72523a: test   $0xf,%esp
  0x00007f8f8f725240: je     0x00007f8f8f725258
  0x00007f8f8f725246: sub    $0x8,%rsp
  0x00007f8f8f72524a: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f72524f: add    $0x8,%rsp
  0x00007f8f8f725253: jmpq   0x00007f8f8f72525d
  0x00007f8f8f725258: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f72525d: movabs $0x0,%r10
  0x00007f8f8f725267: mov    %r10,0x320(%r15)
  0x00007f8f8f72526e: movabs $0x0,%r10
  0x00007f8f8f725278: mov    %r10,0x330(%r15)
  0x00007f8f8f72527f: movabs $0x0,%r10
  0x00007f8f8f725289: mov    %r10,0x328(%r15)
  0x00007f8f8f725290: vzeroupper 
  0x00007f8f8f725293: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72529b: je     0x00007f8f8f7252a6
  0x00007f8f8f7252a1: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7252a6: mov    -0x40(%rbp),%r13
  0x00007f8f8f7252aa: mov    -0x38(%rbp),%r14
  0x00007f8f8f7252ae: retq   
  0x00007f8f8f7252af: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f7252b4: sub    $0x80,%rsp
  0x00007f8f8f7252bb: mov    %rax,0x78(%rsp)
  0x00007f8f8f7252c0: mov    %rcx,0x70(%rsp)
  0x00007f8f8f7252c5: mov    %rdx,0x68(%rsp)
  0x00007f8f8f7252ca: mov    %rbx,0x60(%rsp)
  0x00007f8f8f7252cf: mov    %rbp,0x50(%rsp)
  0x00007f8f8f7252d4: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7252d9: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7252de: mov    %r8,0x38(%rsp)
  0x00007f8f8f7252e3: mov    %r9,0x30(%rsp)
  0x00007f8f8f7252e8: mov    %r10,0x28(%rsp)
  0x00007f8f8f7252ed: mov    %r11,0x20(%rsp)
  0x00007f8f8f7252f2: mov    %r12,0x18(%rsp)
  0x00007f8f8f7252f7: mov    %r13,0x10(%rsp)
  0x00007f8f8f7252fc: mov    %r14,0x8(%rsp)
  0x00007f8f8f725301: mov    %r15,(%rsp)
  0x00007f8f8f725305: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f72530f: movabs $0x7f8f8f7252af,%rsi
  0x00007f8f8f725319: mov    %rsp,%rdx
  0x00007f8f8f72531c: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f725320: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f725325: hlt    
  0x00007f8f8f725326: leaveq 
  0x00007f8f8f725327: pop    %rsi
  0x00007f8f8f725328: mov    %rbx,%rsp
  0x00007f8f8f72532b: jmpq   *%rsi
  0x00007f8f8f72532d: mov    -0x40(%rbp),%r13
  0x00007f8f8f725331: mov    -0x38(%rbp),%r14
  0x00007f8f8f725335: mov    -0x48(%rbp),%rsp
  0x00007f8f8f725339: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f725341: mov    0x4b0(%r15),%rcx
  0x00007f8f8f725348: mov    0x88(%rcx),%rax
  0x00007f8f8f72534f: movq   $0x0,0x88(%rcx)
  0x00007f8f8f72535a: movl   $0xb,0x78(%rcx)
  0x00007f8f8f725361: movl   $0x0,0x80(%rcx)
  0x00007f8f8f72536b: movl   $0xb,0x78(%rcx)
  0x00007f8f8f725372: movabs $0x0,%r10
  0x00007f8f8f72537c: mov    %r10,0x80(%rcx)
  0x00007f8f8f725383: mov    0x4b0(%r15),%rcx
  0x00007f8f8f72538a: movl   $0x0,0x74(%rcx)
  0x00007f8f8f725391: mov    0x3dd(%r15),%bl
  0x00007f8f8f725398: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f7253a0: mov    -0x18(%rbp),%rcx
  0x00007f8f8f7253a4: mov    0x20(%rcx),%ecx
  0x00007f8f8f7253a7: test   $0x20,%ecx
  0x00007f8f8f7253ad: je     0x00007f8f8f7254b4
  0x00007f8f8f7253b3: test   $0xff,%bl
  0x00007f8f8f7253b6: jne    0x00007f8f8f7255c1
  0x00007f8f8f7253bc: push   %rax
  0x00007f8f8f7253bd: lea    -0x58(%rbp),%rsi
  0x00007f8f8f7253c1: mov    0x8(%rsi),%rax
  0x00007f8f8f7253c5: test   %rax,%rax
  0x00007f8f8f7253c8: jne    0x00007f8f8f7253d4
  0x00007f8f8f7253ce: pop    %rax
  0x00007f8f8f7253cf: jmpq   0x00007f8f8f7254b4
  0x00007f8f8f7253d4: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7253d8: lea    (%rsi),%rax
  0x00007f8f8f7253db: mov    0x8(%rsi),%rcx
  0x00007f8f8f7253df: movq   $0x0,0x8(%rsi)
  0x00007f8f8f7253e7: mov    (%rcx),%rdx
  0x00007f8f8f7253ea: and    $0x7,%rdx
  0x00007f8f8f7253ee: cmp    $0x5,%rdx
  0x00007f8f8f7253f2: je     0x00007f8f8f7254af
  0x00007f8f8f7253f8: mov    (%rax),%rdx
  0x00007f8f8f7253fb: test   %rdx,%rdx
  0x00007f8f8f7253fe: je     0x00007f8f8f7254af
  0x00007f8f8f725404: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f725409: je     0x00007f8f8f7254af
  0x00007f8f8f72540f: mov    %rcx,0x8(%rsi)
  0x00007f8f8f725413: callq  0x00007f8f8f72541d
  0x00007f8f8f725418: jmpq   0x00007f8f8f7254af
  0x00007f8f8f72541d: lea    0x8(%rsp),%rax
  0x00007f8f8f725422: mov    %r13,-0x40(%rbp)
  0x00007f8f8f725426: mov    %r15,%rdi
  0x00007f8f8f725429: vzeroupper 
  0x00007f8f8f72542c: mov    %rbp,0x330(%r15)
  0x00007f8f8f725433: mov    %rax,0x320(%r15)
  0x00007f8f8f72543a: test   $0xf,%esp
  0x00007f8f8f725440: je     0x00007f8f8f725458
  0x00007f8f8f725446: sub    $0x8,%rsp
  0x00007f8f8f72544a: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72544f: add    $0x8,%rsp
  0x00007f8f8f725453: jmpq   0x00007f8f8f72545d
  0x00007f8f8f725458: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72545d: movabs $0x0,%r10
  0x00007f8f8f725467: mov    %r10,0x320(%r15)
  0x00007f8f8f72546e: movabs $0x0,%r10
  0x00007f8f8f725478: mov    %r10,0x330(%r15)
  0x00007f8f8f72547f: movabs $0x0,%r10
  0x00007f8f8f725489: mov    %r10,0x328(%r15)
  0x00007f8f8f725490: vzeroupper 
  0x00007f8f8f725493: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72549b: je     0x00007f8f8f7254a6
  0x00007f8f8f7254a1: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7254a6: mov    -0x40(%rbp),%r13
  0x00007f8f8f7254aa: mov    -0x38(%rbp),%r14
  0x00007f8f8f7254ae: retq   
  0x00007f8f8f7254af: mov    -0x40(%rbp),%r13
  0x00007f8f8f7254b3: pop    %rax
  0x00007f8f8f7254b4: mov    -0x48(%rbp),%rsi
  0x00007f8f8f7254b8: lea    -0x48(%rbp),%rbx
  0x00007f8f8f7254bc: jmpq   0x00007f8f8f7255bc
  0x00007f8f8f7254c1: push   %rax
  0x00007f8f8f7254c2: mov    %rsi,%rsi
  0x00007f8f8f7254c5: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7254c9: lea    (%rsi),%rax
  0x00007f8f8f7254cc: mov    0x8(%rsi),%rcx
  0x00007f8f8f7254d0: movq   $0x0,0x8(%rsi)
  0x00007f8f8f7254d8: mov    (%rcx),%rdx
  0x00007f8f8f7254db: and    $0x7,%rdx
  0x00007f8f8f7254df: cmp    $0x5,%rdx
  0x00007f8f8f7254e3: je     0x00007f8f8f7255a0
  0x00007f8f8f7254e9: mov    (%rax),%rdx
  0x00007f8f8f7254ec: test   %rdx,%rdx
  0x00007f8f8f7254ef: je     0x00007f8f8f7255a0
  0x00007f8f8f7254f5: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f7254fa: je     0x00007f8f8f7255a0
  0x00007f8f8f725500: mov    %rcx,0x8(%rsi)
  0x00007f8f8f725504: callq  0x00007f8f8f72550e
  0x00007f8f8f725509: jmpq   0x00007f8f8f7255a0
  0x00007f8f8f72550e: lea    0x8(%rsp),%rax
  0x00007f8f8f725513: mov    %r13,-0x40(%rbp)
  0x00007f8f8f725517: mov    %r15,%rdi
  0x00007f8f8f72551a: vzeroupper 
  0x00007f8f8f72551d: mov    %rbp,0x330(%r15)
  0x00007f8f8f725524: mov    %rax,0x320(%r15)
  0x00007f8f8f72552b: test   $0xf,%esp
  0x00007f8f8f725531: je     0x00007f8f8f725549
  0x00007f8f8f725537: sub    $0x8,%rsp
  0x00007f8f8f72553b: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f725540: add    $0x8,%rsp
  0x00007f8f8f725544: jmpq   0x00007f8f8f72554e
  0x00007f8f8f725549: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72554e: movabs $0x0,%r10
  0x00007f8f8f725558: mov    %r10,0x320(%r15)
  0x00007f8f8f72555f: movabs $0x0,%r10
  0x00007f8f8f725569: mov    %r10,0x330(%r15)
  0x00007f8f8f725570: movabs $0x0,%r10
  0x00007f8f8f72557a: mov    %r10,0x328(%r15)
  0x00007f8f8f725581: vzeroupper 
  0x00007f8f8f725584: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72558c: je     0x00007f8f8f725597
  0x00007f8f8f725592: jmpq   0x00007f8f8f71a780
  0x00007f8f8f725597: mov    -0x40(%rbp),%r13
  0x00007f8f8f72559b: mov    -0x38(%rbp),%r14
  0x00007f8f8f72559f: retq   
  0x00007f8f8f7255a0: mov    -0x40(%rbp),%r13
  0x00007f8f8f7255a4: pop    %rax
  0x00007f8f8f7255a5: jmpq   0x00007f8f8f7254b4
  0x00007f8f8f7255aa: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f7255b2: jne    0x00007f8f8f7254c1
  0x00007f8f8f7255b8: add    $0x10,%rsi
  0x00007f8f8f7255bc: cmp    %rbx,%rsi
  0x00007f8f8f7255bf: jne    0x00007f8f8f7255aa
  0x00007f8f8f7255c1: cmpb   $0x0,0x1e491bbf(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f7255c8: je     0x00007f8f8f7255fa
  0x00007f8f8f7255ce: push   %rax
  0x00007f8f8f7255cf: mov    -0x18(%rbp),%rsi
  0x00007f8f8f7255d3: mov    %r15,%rdi
  0x00007f8f8f7255d6: test   $0xf,%esp
  0x00007f8f8f7255dc: je     0x00007f8f8f7255f4
  0x00007f8f8f7255e2: sub    $0x8,%rsp
  0x00007f8f8f7255e6: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f7255eb: add    $0x8,%rsp
  0x00007f8f8f7255ef: jmpq   0x00007f8f8f7255f9
  0x00007f8f8f7255f4: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f7255f9: pop    %rax
  0x00007f8f8f7255fa: mov    -0x8(%rbp),%rbx
  0x00007f8f8f7255fe: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f725609: je     0x00007f8f8f725755
  0x00007f8f8f72560f: cmp    0x418(%r15),%rbx
  0x00007f8f8f725616: jle    0x00007f8f8f725755
  0x00007f8f8f72561c: mov    %r15,%rdi
  0x00007f8f8f72561f: test   $0xf,%esp
  0x00007f8f8f725625: je     0x00007f8f8f72563d
  0x00007f8f8f72562b: sub    $0x8,%rsp
  0x00007f8f8f72562f: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f725634: add    $0x8,%rsp
  0x00007f8f8f725638: jmpq   0x00007f8f8f725642
  0x00007f8f8f72563d: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f725642: callq  0x00007f8f8f72564c
  0x00007f8f8f725647: jmpq   0x00007f8f8f7256de
  0x00007f8f8f72564c: lea    0x8(%rsp),%rax
  0x00007f8f8f725651: mov    %r13,-0x40(%rbp)
  0x00007f8f8f725655: mov    %r15,%rdi
  0x00007f8f8f725658: vzeroupper 
  0x00007f8f8f72565b: mov    %rbp,0x330(%r15)
  0x00007f8f8f725662: mov    %rax,0x320(%r15)
  0x00007f8f8f725669: test   $0xf,%esp
  0x00007f8f8f72566f: je     0x00007f8f8f725687
  0x00007f8f8f725675: sub    $0x8,%rsp
  0x00007f8f8f725679: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f72567e: add    $0x8,%rsp
  0x00007f8f8f725682: jmpq   0x00007f8f8f72568c
  0x00007f8f8f725687: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f72568c: movabs $0x0,%r10
  0x00007f8f8f725696: mov    %r10,0x320(%r15)
  0x00007f8f8f72569d: movabs $0x0,%r10
  0x00007f8f8f7256a7: mov    %r10,0x330(%r15)
  0x00007f8f8f7256ae: movabs $0x0,%r10
  0x00007f8f8f7256b8: mov    %r10,0x328(%r15)
  0x00007f8f8f7256bf: vzeroupper 
  0x00007f8f8f7256c2: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7256ca: je     0x00007f8f8f7256d5
  0x00007f8f8f7256d0: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7256d5: mov    -0x40(%rbp),%r13
  0x00007f8f8f7256d9: mov    -0x38(%rbp),%r14
  0x00007f8f8f7256dd: retq   
  0x00007f8f8f7256de: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f7256e3: sub    $0x80,%rsp
  0x00007f8f8f7256ea: mov    %rax,0x78(%rsp)
  0x00007f8f8f7256ef: mov    %rcx,0x70(%rsp)
  0x00007f8f8f7256f4: mov    %rdx,0x68(%rsp)
  0x00007f8f8f7256f9: mov    %rbx,0x60(%rsp)
  0x00007f8f8f7256fe: mov    %rbp,0x50(%rsp)
  0x00007f8f8f725703: mov    %rsi,0x48(%rsp)
  0x00007f8f8f725708: mov    %rdi,0x40(%rsp)
  0x00007f8f8f72570d: mov    %r8,0x38(%rsp)
  0x00007f8f8f725712: mov    %r9,0x30(%rsp)
  0x00007f8f8f725717: mov    %r10,0x28(%rsp)
  0x00007f8f8f72571c: mov    %r11,0x20(%rsp)
  0x00007f8f8f725721: mov    %r12,0x18(%rsp)
  0x00007f8f8f725726: mov    %r13,0x10(%rsp)
  0x00007f8f8f72572b: mov    %r14,0x8(%rsp)
  0x00007f8f8f725730: mov    %r15,(%rsp)
  0x00007f8f8f725734: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f72573e: movabs $0x7f8f8f7256de,%rsi
  0x00007f8f8f725748: mov    %rsp,%rdx
  0x00007f8f8f72574b: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f72574f: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f725754: hlt    
  0x00007f8f8f725755: leaveq 
  0x00007f8f8f725756: pop    %rsi
  0x00007f8f8f725757: mov    %rbx,%rsp
  0x00007f8f8f72575a: jmpq   *%rsi
  0x00007f8f8f72575c: mov    -0x40(%rbp),%r13
  0x00007f8f8f725760: mov    -0x38(%rbp),%r14
  0x00007f8f8f725764: mov    -0x48(%rbp),%rsp
  0x00007f8f8f725768: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f725770: mov    0x4b0(%r15),%rcx
  0x00007f8f8f725777: mov    0x80(%rcx),%eax
  0x00007f8f8f72577d: movl   $0xb,0x78(%rcx)
  0x00007f8f8f725784: movl   $0x0,0x80(%rcx)
  0x00007f8f8f72578e: movl   $0xb,0x78(%rcx)
  0x00007f8f8f725795: movabs $0x0,%r10
  0x00007f8f8f72579f: mov    %r10,0x80(%rcx)
  0x00007f8f8f7257a6: mov    0x4b0(%r15),%rcx
  0x00007f8f8f7257ad: movl   $0x0,0x74(%rcx)
  0x00007f8f8f7257b4: mov    0x3dd(%r15),%bl
  0x00007f8f8f7257bb: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f7257c3: mov    -0x18(%rbp),%rcx
  0x00007f8f8f7257c7: mov    0x20(%rcx),%ecx
  0x00007f8f8f7257ca: test   $0x20,%ecx
  0x00007f8f8f7257d0: je     0x00007f8f8f7258e3
  0x00007f8f8f7257d6: test   $0xff,%bl
  0x00007f8f8f7257d9: jne    0x00007f8f8f7259f6
  0x00007f8f8f7257df: push   %rax
  0x00007f8f8f7257e0: lea    -0x58(%rbp),%rsi
  0x00007f8f8f7257e4: mov    0x8(%rsi),%rax
  0x00007f8f8f7257e8: test   %rax,%rax
  0x00007f8f8f7257eb: jne    0x00007f8f8f7257fd
  0x00007f8f8f7257f1: mov    (%rsp),%eax
  0x00007f8f8f7257f4: add    $0x8,%rsp
  0x00007f8f8f7257f8: jmpq   0x00007f8f8f7258e3
  0x00007f8f8f7257fd: mov    %r13,-0x40(%rbp)
  0x00007f8f8f725801: lea    (%rsi),%rax
  0x00007f8f8f725804: mov    0x8(%rsi),%rcx
  0x00007f8f8f725808: movq   $0x0,0x8(%rsi)
  0x00007f8f8f725810: mov    (%rcx),%rdx
  0x00007f8f8f725813: and    $0x7,%rdx
  0x00007f8f8f725817: cmp    $0x5,%rdx
  0x00007f8f8f72581b: je     0x00007f8f8f7258d8
  0x00007f8f8f725821: mov    (%rax),%rdx
  0x00007f8f8f725824: test   %rdx,%rdx
  0x00007f8f8f725827: je     0x00007f8f8f7258d8
  0x00007f8f8f72582d: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f725832: je     0x00007f8f8f7258d8
  0x00007f8f8f725838: mov    %rcx,0x8(%rsi)
  0x00007f8f8f72583c: callq  0x00007f8f8f725846
  0x00007f8f8f725841: jmpq   0x00007f8f8f7258d8
  0x00007f8f8f725846: lea    0x8(%rsp),%rax
  0x00007f8f8f72584b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72584f: mov    %r15,%rdi
  0x00007f8f8f725852: vzeroupper 
  0x00007f8f8f725855: mov    %rbp,0x330(%r15)
  0x00007f8f8f72585c: mov    %rax,0x320(%r15)
  0x00007f8f8f725863: test   $0xf,%esp
  0x00007f8f8f725869: je     0x00007f8f8f725881
  0x00007f8f8f72586f: sub    $0x8,%rsp
  0x00007f8f8f725873: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f725878: add    $0x8,%rsp
  0x00007f8f8f72587c: jmpq   0x00007f8f8f725886
  0x00007f8f8f725881: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f725886: movabs $0x0,%r10
  0x00007f8f8f725890: mov    %r10,0x320(%r15)
  0x00007f8f8f725897: movabs $0x0,%r10
  0x00007f8f8f7258a1: mov    %r10,0x330(%r15)
  0x00007f8f8f7258a8: movabs $0x0,%r10
  0x00007f8f8f7258b2: mov    %r10,0x328(%r15)
  0x00007f8f8f7258b9: vzeroupper 
  0x00007f8f8f7258bc: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7258c4: je     0x00007f8f8f7258cf
  0x00007f8f8f7258ca: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7258cf: mov    -0x40(%rbp),%r13
  0x00007f8f8f7258d3: mov    -0x38(%rbp),%r14
  0x00007f8f8f7258d7: retq   
  0x00007f8f8f7258d8: mov    -0x40(%rbp),%r13
  0x00007f8f8f7258dc: mov    (%rsp),%eax
  0x00007f8f8f7258df: add    $0x8,%rsp
  0x00007f8f8f7258e3: mov    -0x48(%rbp),%rsi
  0x00007f8f8f7258e7: lea    -0x48(%rbp),%rbx
  0x00007f8f8f7258eb: jmpq   0x00007f8f8f7259f1
  0x00007f8f8f7258f0: push   %rax
  0x00007f8f8f7258f1: mov    %rsi,%rsi
  0x00007f8f8f7258f4: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7258f8: lea    (%rsi),%rax
  0x00007f8f8f7258fb: mov    0x8(%rsi),%rcx
  0x00007f8f8f7258ff: movq   $0x0,0x8(%rsi)
  0x00007f8f8f725907: mov    (%rcx),%rdx
  0x00007f8f8f72590a: and    $0x7,%rdx
  0x00007f8f8f72590e: cmp    $0x5,%rdx
  0x00007f8f8f725912: je     0x00007f8f8f7259cf
  0x00007f8f8f725918: mov    (%rax),%rdx
  0x00007f8f8f72591b: test   %rdx,%rdx
  0x00007f8f8f72591e: je     0x00007f8f8f7259cf
  0x00007f8f8f725924: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f725929: je     0x00007f8f8f7259cf
  0x00007f8f8f72592f: mov    %rcx,0x8(%rsi)
  0x00007f8f8f725933: callq  0x00007f8f8f72593d
  0x00007f8f8f725938: jmpq   0x00007f8f8f7259cf
  0x00007f8f8f72593d: lea    0x8(%rsp),%rax
  0x00007f8f8f725942: mov    %r13,-0x40(%rbp)
  0x00007f8f8f725946: mov    %r15,%rdi
  0x00007f8f8f725949: vzeroupper 
  0x00007f8f8f72594c: mov    %rbp,0x330(%r15)
  0x00007f8f8f725953: mov    %rax,0x320(%r15)
  0x00007f8f8f72595a: test   $0xf,%esp
  0x00007f8f8f725960: je     0x00007f8f8f725978
  0x00007f8f8f725966: sub    $0x8,%rsp
  0x00007f8f8f72596a: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72596f: add    $0x8,%rsp
  0x00007f8f8f725973: jmpq   0x00007f8f8f72597d
  0x00007f8f8f725978: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72597d: movabs $0x0,%r10
  0x00007f8f8f725987: mov    %r10,0x320(%r15)
  0x00007f8f8f72598e: movabs $0x0,%r10
  0x00007f8f8f725998: mov    %r10,0x330(%r15)
  0x00007f8f8f72599f: movabs $0x0,%r10
  0x00007f8f8f7259a9: mov    %r10,0x328(%r15)
  0x00007f8f8f7259b0: vzeroupper 
  0x00007f8f8f7259b3: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7259bb: je     0x00007f8f8f7259c6
  0x00007f8f8f7259c1: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7259c6: mov    -0x40(%rbp),%r13
  0x00007f8f8f7259ca: mov    -0x38(%rbp),%r14
  0x00007f8f8f7259ce: retq   
  0x00007f8f8f7259cf: mov    -0x40(%rbp),%r13
  0x00007f8f8f7259d3: mov    (%rsp),%eax
  0x00007f8f8f7259d6: add    $0x8,%rsp
  0x00007f8f8f7259da: jmpq   0x00007f8f8f7258e3
  0x00007f8f8f7259df: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f7259e7: jne    0x00007f8f8f7258f0
  0x00007f8f8f7259ed: add    $0x10,%rsi
  0x00007f8f8f7259f1: cmp    %rbx,%rsi
  0x00007f8f8f7259f4: jne    0x00007f8f8f7259df
  0x00007f8f8f7259f6: cmpb   $0x0,0x1e49178a(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f7259fd: je     0x00007f8f8f725a35
  0x00007f8f8f725a03: push   %rax
  0x00007f8f8f725a04: mov    -0x18(%rbp),%rsi
  0x00007f8f8f725a08: mov    %r15,%rdi
  0x00007f8f8f725a0b: test   $0xf,%esp
  0x00007f8f8f725a11: je     0x00007f8f8f725a29
  0x00007f8f8f725a17: sub    $0x8,%rsp
  0x00007f8f8f725a1b: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f725a20: add    $0x8,%rsp
  0x00007f8f8f725a24: jmpq   0x00007f8f8f725a2e
  0x00007f8f8f725a29: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f725a2e: mov    (%rsp),%eax
  0x00007f8f8f725a31: add    $0x8,%rsp
  0x00007f8f8f725a35: mov    -0x8(%rbp),%rbx
  0x00007f8f8f725a39: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f725a44: je     0x00007f8f8f725b90
  0x00007f8f8f725a4a: cmp    0x418(%r15),%rbx
  0x00007f8f8f725a51: jle    0x00007f8f8f725b90
  0x00007f8f8f725a57: mov    %r15,%rdi
  0x00007f8f8f725a5a: test   $0xf,%esp
  0x00007f8f8f725a60: je     0x00007f8f8f725a78
  0x00007f8f8f725a66: sub    $0x8,%rsp
  0x00007f8f8f725a6a: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f725a6f: add    $0x8,%rsp
  0x00007f8f8f725a73: jmpq   0x00007f8f8f725a7d
  0x00007f8f8f725a78: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f725a7d: callq  0x00007f8f8f725a87
  0x00007f8f8f725a82: jmpq   0x00007f8f8f725b19
  0x00007f8f8f725a87: lea    0x8(%rsp),%rax
  0x00007f8f8f725a8c: mov    %r13,-0x40(%rbp)
  0x00007f8f8f725a90: mov    %r15,%rdi
  0x00007f8f8f725a93: vzeroupper 
  0x00007f8f8f725a96: mov    %rbp,0x330(%r15)
  0x00007f8f8f725a9d: mov    %rax,0x320(%r15)
  0x00007f8f8f725aa4: test   $0xf,%esp
  0x00007f8f8f725aaa: je     0x00007f8f8f725ac2
  0x00007f8f8f725ab0: sub    $0x8,%rsp
  0x00007f8f8f725ab4: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f725ab9: add    $0x8,%rsp
  0x00007f8f8f725abd: jmpq   0x00007f8f8f725ac7
  0x00007f8f8f725ac2: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f725ac7: movabs $0x0,%r10
  0x00007f8f8f725ad1: mov    %r10,0x320(%r15)
  0x00007f8f8f725ad8: movabs $0x0,%r10
  0x00007f8f8f725ae2: mov    %r10,0x330(%r15)
  0x00007f8f8f725ae9: movabs $0x0,%r10
  0x00007f8f8f725af3: mov    %r10,0x328(%r15)
  0x00007f8f8f725afa: vzeroupper 
  0x00007f8f8f725afd: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f725b05: je     0x00007f8f8f725b10
  0x00007f8f8f725b0b: jmpq   0x00007f8f8f71a780
  0x00007f8f8f725b10: mov    -0x40(%rbp),%r13
  0x00007f8f8f725b14: mov    -0x38(%rbp),%r14
  0x00007f8f8f725b18: retq   
  0x00007f8f8f725b19: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f725b1e: sub    $0x80,%rsp
  0x00007f8f8f725b25: mov    %rax,0x78(%rsp)
  0x00007f8f8f725b2a: mov    %rcx,0x70(%rsp)
  0x00007f8f8f725b2f: mov    %rdx,0x68(%rsp)
  0x00007f8f8f725b34: mov    %rbx,0x60(%rsp)
  0x00007f8f8f725b39: mov    %rbp,0x50(%rsp)
  0x00007f8f8f725b3e: mov    %rsi,0x48(%rsp)
  0x00007f8f8f725b43: mov    %rdi,0x40(%rsp)
  0x00007f8f8f725b48: mov    %r8,0x38(%rsp)
  0x00007f8f8f725b4d: mov    %r9,0x30(%rsp)
  0x00007f8f8f725b52: mov    %r10,0x28(%rsp)
  0x00007f8f8f725b57: mov    %r11,0x20(%rsp)
  0x00007f8f8f725b5c: mov    %r12,0x18(%rsp)
  0x00007f8f8f725b61: mov    %r13,0x10(%rsp)
  0x00007f8f8f725b66: mov    %r14,0x8(%rsp)
  0x00007f8f8f725b6b: mov    %r15,(%rsp)
  0x00007f8f8f725b6f: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f725b79: movabs $0x7f8f8f725b19,%rsi
  0x00007f8f8f725b83: mov    %rsp,%rdx
  0x00007f8f8f725b86: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f725b8a: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f725b8f: hlt    
  0x00007f8f8f725b90: leaveq 
  0x00007f8f8f725b91: pop    %rsi
  0x00007f8f8f725b92: mov    %rbx,%rsp
  0x00007f8f8f725b95: jmpq   *%rsi
  0x00007f8f8f725b97: mov    -0x40(%rbp),%r13
  0x00007f8f8f725b9b: mov    -0x38(%rbp),%r14
  0x00007f8f8f725b9f: mov    -0x48(%rbp),%rsp
  0x00007f8f8f725ba3: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f725bab: mov    0x4b0(%r15),%rcx
  0x00007f8f8f725bb2: mov    0x80(%rcx),%eax
  0x00007f8f8f725bb8: movl   $0xb,0x78(%rcx)
  0x00007f8f8f725bbf: movl   $0x0,0x80(%rcx)
  0x00007f8f8f725bc9: movl   $0xb,0x78(%rcx)
  0x00007f8f8f725bd0: movabs $0x0,%r10
  0x00007f8f8f725bda: mov    %r10,0x80(%rcx)
  0x00007f8f8f725be1: mov    0x4b0(%r15),%rcx
  0x00007f8f8f725be8: movl   $0x0,0x74(%rcx)
  0x00007f8f8f725bef: mov    0x3dd(%r15),%bl
  0x00007f8f8f725bf6: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f725bfe: mov    -0x18(%rbp),%rcx
  0x00007f8f8f725c02: mov    0x20(%rcx),%ecx
  0x00007f8f8f725c05: test   $0x20,%ecx
  0x00007f8f8f725c0b: je     0x00007f8f8f725d1e
  0x00007f8f8f725c11: test   $0xff,%bl
  0x00007f8f8f725c14: jne    0x00007f8f8f725e31
  0x00007f8f8f725c1a: push   %rax
  0x00007f8f8f725c1b: lea    -0x58(%rbp),%rsi
  0x00007f8f8f725c1f: mov    0x8(%rsi),%rax
  0x00007f8f8f725c23: test   %rax,%rax
  0x00007f8f8f725c26: jne    0x00007f8f8f725c38
  0x00007f8f8f725c2c: mov    (%rsp),%eax
  0x00007f8f8f725c2f: add    $0x8,%rsp
  0x00007f8f8f725c33: jmpq   0x00007f8f8f725d1e
  0x00007f8f8f725c38: mov    %r13,-0x40(%rbp)
  0x00007f8f8f725c3c: lea    (%rsi),%rax
  0x00007f8f8f725c3f: mov    0x8(%rsi),%rcx
  0x00007f8f8f725c43: movq   $0x0,0x8(%rsi)
  0x00007f8f8f725c4b: mov    (%rcx),%rdx
  0x00007f8f8f725c4e: and    $0x7,%rdx
  0x00007f8f8f725c52: cmp    $0x5,%rdx
  0x00007f8f8f725c56: je     0x00007f8f8f725d13
  0x00007f8f8f725c5c: mov    (%rax),%rdx
  0x00007f8f8f725c5f: test   %rdx,%rdx
  0x00007f8f8f725c62: je     0x00007f8f8f725d13
  0x00007f8f8f725c68: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f725c6d: je     0x00007f8f8f725d13
  0x00007f8f8f725c73: mov    %rcx,0x8(%rsi)
  0x00007f8f8f725c77: callq  0x00007f8f8f725c81
  0x00007f8f8f725c7c: jmpq   0x00007f8f8f725d13
  0x00007f8f8f725c81: lea    0x8(%rsp),%rax
  0x00007f8f8f725c86: mov    %r13,-0x40(%rbp)
  0x00007f8f8f725c8a: mov    %r15,%rdi
  0x00007f8f8f725c8d: vzeroupper 
  0x00007f8f8f725c90: mov    %rbp,0x330(%r15)
  0x00007f8f8f725c97: mov    %rax,0x320(%r15)
  0x00007f8f8f725c9e: test   $0xf,%esp
  0x00007f8f8f725ca4: je     0x00007f8f8f725cbc
  0x00007f8f8f725caa: sub    $0x8,%rsp
  0x00007f8f8f725cae: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f725cb3: add    $0x8,%rsp
  0x00007f8f8f725cb7: jmpq   0x00007f8f8f725cc1
  0x00007f8f8f725cbc: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f725cc1: movabs $0x0,%r10
  0x00007f8f8f725ccb: mov    %r10,0x320(%r15)
  0x00007f8f8f725cd2: movabs $0x0,%r10
  0x00007f8f8f725cdc: mov    %r10,0x330(%r15)
  0x00007f8f8f725ce3: movabs $0x0,%r10
  0x00007f8f8f725ced: mov    %r10,0x328(%r15)
  0x00007f8f8f725cf4: vzeroupper 
  0x00007f8f8f725cf7: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f725cff: je     0x00007f8f8f725d0a
  0x00007f8f8f725d05: jmpq   0x00007f8f8f71a780
  0x00007f8f8f725d0a: mov    -0x40(%rbp),%r13
  0x00007f8f8f725d0e: mov    -0x38(%rbp),%r14
  0x00007f8f8f725d12: retq   
  0x00007f8f8f725d13: mov    -0x40(%rbp),%r13
  0x00007f8f8f725d17: mov    (%rsp),%eax
  0x00007f8f8f725d1a: add    $0x8,%rsp
  0x00007f8f8f725d1e: mov    -0x48(%rbp),%rsi
  0x00007f8f8f725d22: lea    -0x48(%rbp),%rbx
  0x00007f8f8f725d26: jmpq   0x00007f8f8f725e2c
  0x00007f8f8f725d2b: push   %rax
  0x00007f8f8f725d2c: mov    %rsi,%rsi
  0x00007f8f8f725d2f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f725d33: lea    (%rsi),%rax
  0x00007f8f8f725d36: mov    0x8(%rsi),%rcx
  0x00007f8f8f725d3a: movq   $0x0,0x8(%rsi)
  0x00007f8f8f725d42: mov    (%rcx),%rdx
  0x00007f8f8f725d45: and    $0x7,%rdx
  0x00007f8f8f725d49: cmp    $0x5,%rdx
  0x00007f8f8f725d4d: je     0x00007f8f8f725e0a
  0x00007f8f8f725d53: mov    (%rax),%rdx
  0x00007f8f8f725d56: test   %rdx,%rdx
  0x00007f8f8f725d59: je     0x00007f8f8f725e0a
  0x00007f8f8f725d5f: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f725d64: je     0x00007f8f8f725e0a
  0x00007f8f8f725d6a: mov    %rcx,0x8(%rsi)
  0x00007f8f8f725d6e: callq  0x00007f8f8f725d78
  0x00007f8f8f725d73: jmpq   0x00007f8f8f725e0a
  0x00007f8f8f725d78: lea    0x8(%rsp),%rax
  0x00007f8f8f725d7d: mov    %r13,-0x40(%rbp)
  0x00007f8f8f725d81: mov    %r15,%rdi
  0x00007f8f8f725d84: vzeroupper 
  0x00007f8f8f725d87: mov    %rbp,0x330(%r15)
  0x00007f8f8f725d8e: mov    %rax,0x320(%r15)
  0x00007f8f8f725d95: test   $0xf,%esp
  0x00007f8f8f725d9b: je     0x00007f8f8f725db3
  0x00007f8f8f725da1: sub    $0x8,%rsp
  0x00007f8f8f725da5: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f725daa: add    $0x8,%rsp
  0x00007f8f8f725dae: jmpq   0x00007f8f8f725db8
  0x00007f8f8f725db3: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f725db8: movabs $0x0,%r10
  0x00007f8f8f725dc2: mov    %r10,0x320(%r15)
  0x00007f8f8f725dc9: movabs $0x0,%r10
  0x00007f8f8f725dd3: mov    %r10,0x330(%r15)
  0x00007f8f8f725dda: movabs $0x0,%r10
  0x00007f8f8f725de4: mov    %r10,0x328(%r15)
  0x00007f8f8f725deb: vzeroupper 
  0x00007f8f8f725dee: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f725df6: je     0x00007f8f8f725e01
  0x00007f8f8f725dfc: jmpq   0x00007f8f8f71a780
  0x00007f8f8f725e01: mov    -0x40(%rbp),%r13
  0x00007f8f8f725e05: mov    -0x38(%rbp),%r14
  0x00007f8f8f725e09: retq   
  0x00007f8f8f725e0a: mov    -0x40(%rbp),%r13
  0x00007f8f8f725e0e: mov    (%rsp),%eax
  0x00007f8f8f725e11: add    $0x8,%rsp
  0x00007f8f8f725e15: jmpq   0x00007f8f8f725d1e
  0x00007f8f8f725e1a: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f725e22: jne    0x00007f8f8f725d2b
  0x00007f8f8f725e28: add    $0x10,%rsi
  0x00007f8f8f725e2c: cmp    %rbx,%rsi
  0x00007f8f8f725e2f: jne    0x00007f8f8f725e1a
  0x00007f8f8f725e31: cmpb   $0x0,0x1e49134f(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f725e38: je     0x00007f8f8f725e70
  0x00007f8f8f725e3e: push   %rax
  0x00007f8f8f725e3f: mov    -0x18(%rbp),%rsi
  0x00007f8f8f725e43: mov    %r15,%rdi
  0x00007f8f8f725e46: test   $0xf,%esp
  0x00007f8f8f725e4c: je     0x00007f8f8f725e64
  0x00007f8f8f725e52: sub    $0x8,%rsp
  0x00007f8f8f725e56: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f725e5b: add    $0x8,%rsp
  0x00007f8f8f725e5f: jmpq   0x00007f8f8f725e69
  0x00007f8f8f725e64: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f725e69: mov    (%rsp),%eax
  0x00007f8f8f725e6c: add    $0x8,%rsp
  0x00007f8f8f725e70: mov    -0x8(%rbp),%rbx
  0x00007f8f8f725e74: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f725e7f: je     0x00007f8f8f725fcb
  0x00007f8f8f725e85: cmp    0x418(%r15),%rbx
  0x00007f8f8f725e8c: jle    0x00007f8f8f725fcb
  0x00007f8f8f725e92: mov    %r15,%rdi
  0x00007f8f8f725e95: test   $0xf,%esp
  0x00007f8f8f725e9b: je     0x00007f8f8f725eb3
  0x00007f8f8f725ea1: sub    $0x8,%rsp
  0x00007f8f8f725ea5: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f725eaa: add    $0x8,%rsp
  0x00007f8f8f725eae: jmpq   0x00007f8f8f725eb8
  0x00007f8f8f725eb3: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f725eb8: callq  0x00007f8f8f725ec2
  0x00007f8f8f725ebd: jmpq   0x00007f8f8f725f54
  0x00007f8f8f725ec2: lea    0x8(%rsp),%rax
  0x00007f8f8f725ec7: mov    %r13,-0x40(%rbp)
  0x00007f8f8f725ecb: mov    %r15,%rdi
  0x00007f8f8f725ece: vzeroupper 
  0x00007f8f8f725ed1: mov    %rbp,0x330(%r15)
  0x00007f8f8f725ed8: mov    %rax,0x320(%r15)
  0x00007f8f8f725edf: test   $0xf,%esp
  0x00007f8f8f725ee5: je     0x00007f8f8f725efd
  0x00007f8f8f725eeb: sub    $0x8,%rsp
  0x00007f8f8f725eef: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f725ef4: add    $0x8,%rsp
  0x00007f8f8f725ef8: jmpq   0x00007f8f8f725f02
  0x00007f8f8f725efd: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f725f02: movabs $0x0,%r10
  0x00007f8f8f725f0c: mov    %r10,0x320(%r15)
  0x00007f8f8f725f13: movabs $0x0,%r10
  0x00007f8f8f725f1d: mov    %r10,0x330(%r15)
  0x00007f8f8f725f24: movabs $0x0,%r10
  0x00007f8f8f725f2e: mov    %r10,0x328(%r15)
  0x00007f8f8f725f35: vzeroupper 
  0x00007f8f8f725f38: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f725f40: je     0x00007f8f8f725f4b
  0x00007f8f8f725f46: jmpq   0x00007f8f8f71a780
  0x00007f8f8f725f4b: mov    -0x40(%rbp),%r13
  0x00007f8f8f725f4f: mov    -0x38(%rbp),%r14
  0x00007f8f8f725f53: retq   
  0x00007f8f8f725f54: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f725f59: sub    $0x80,%rsp
  0x00007f8f8f725f60: mov    %rax,0x78(%rsp)
  0x00007f8f8f725f65: mov    %rcx,0x70(%rsp)
  0x00007f8f8f725f6a: mov    %rdx,0x68(%rsp)
  0x00007f8f8f725f6f: mov    %rbx,0x60(%rsp)
  0x00007f8f8f725f74: mov    %rbp,0x50(%rsp)
  0x00007f8f8f725f79: mov    %rsi,0x48(%rsp)
  0x00007f8f8f725f7e: mov    %rdi,0x40(%rsp)
  0x00007f8f8f725f83: mov    %r8,0x38(%rsp)
  0x00007f8f8f725f88: mov    %r9,0x30(%rsp)
  0x00007f8f8f725f8d: mov    %r10,0x28(%rsp)
  0x00007f8f8f725f92: mov    %r11,0x20(%rsp)
  0x00007f8f8f725f97: mov    %r12,0x18(%rsp)
  0x00007f8f8f725f9c: mov    %r13,0x10(%rsp)
  0x00007f8f8f725fa1: mov    %r14,0x8(%rsp)
  0x00007f8f8f725fa6: mov    %r15,(%rsp)
  0x00007f8f8f725faa: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f725fb4: movabs $0x7f8f8f725f54,%rsi
  0x00007f8f8f725fbe: mov    %rsp,%rdx
  0x00007f8f8f725fc1: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f725fc5: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f725fca: hlt    
  0x00007f8f8f725fcb: leaveq 
  0x00007f8f8f725fcc: pop    %rsi
  0x00007f8f8f725fcd: mov    %rbx,%rsp
  0x00007f8f8f725fd0: jmpq   *%rsi
  0x00007f8f8f725fd2: mov    -0x40(%rbp),%r13
  0x00007f8f8f725fd6: mov    -0x38(%rbp),%r14
  0x00007f8f8f725fda: mov    -0x48(%rbp),%rsp
  0x00007f8f8f725fde: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f725fe6: mov    0x4b0(%r15),%rcx
  0x00007f8f8f725fed: mov    0x80(%rcx),%eax
  0x00007f8f8f725ff3: movl   $0xb,0x78(%rcx)
  0x00007f8f8f725ffa: movl   $0x0,0x80(%rcx)
  0x00007f8f8f726004: movl   $0xb,0x78(%rcx)
  0x00007f8f8f72600b: movabs $0x0,%r10
  0x00007f8f8f726015: mov    %r10,0x80(%rcx)
  0x00007f8f8f72601c: mov    0x4b0(%r15),%rcx
  0x00007f8f8f726023: movl   $0x0,0x74(%rcx)
  0x00007f8f8f72602a: mov    0x3dd(%r15),%bl
  0x00007f8f8f726031: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f726039: mov    -0x18(%rbp),%rcx
  0x00007f8f8f72603d: mov    0x20(%rcx),%ecx
  0x00007f8f8f726040: test   $0x20,%ecx
  0x00007f8f8f726046: je     0x00007f8f8f726159
  0x00007f8f8f72604c: test   $0xff,%bl
  0x00007f8f8f72604f: jne    0x00007f8f8f72626c
  0x00007f8f8f726055: push   %rax
  0x00007f8f8f726056: lea    -0x58(%rbp),%rsi
  0x00007f8f8f72605a: mov    0x8(%rsi),%rax
  0x00007f8f8f72605e: test   %rax,%rax
  0x00007f8f8f726061: jne    0x00007f8f8f726073
  0x00007f8f8f726067: mov    (%rsp),%eax
  0x00007f8f8f72606a: add    $0x8,%rsp
  0x00007f8f8f72606e: jmpq   0x00007f8f8f726159
  0x00007f8f8f726073: mov    %r13,-0x40(%rbp)
  0x00007f8f8f726077: lea    (%rsi),%rax
  0x00007f8f8f72607a: mov    0x8(%rsi),%rcx
  0x00007f8f8f72607e: movq   $0x0,0x8(%rsi)
  0x00007f8f8f726086: mov    (%rcx),%rdx
  0x00007f8f8f726089: and    $0x7,%rdx
  0x00007f8f8f72608d: cmp    $0x5,%rdx
  0x00007f8f8f726091: je     0x00007f8f8f72614e
  0x00007f8f8f726097: mov    (%rax),%rdx
  0x00007f8f8f72609a: test   %rdx,%rdx
  0x00007f8f8f72609d: je     0x00007f8f8f72614e
  0x00007f8f8f7260a3: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f7260a8: je     0x00007f8f8f72614e
  0x00007f8f8f7260ae: mov    %rcx,0x8(%rsi)
  0x00007f8f8f7260b2: callq  0x00007f8f8f7260bc
  0x00007f8f8f7260b7: jmpq   0x00007f8f8f72614e
  0x00007f8f8f7260bc: lea    0x8(%rsp),%rax
  0x00007f8f8f7260c1: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7260c5: mov    %r15,%rdi
  0x00007f8f8f7260c8: vzeroupper 
  0x00007f8f8f7260cb: mov    %rbp,0x330(%r15)
  0x00007f8f8f7260d2: mov    %rax,0x320(%r15)
  0x00007f8f8f7260d9: test   $0xf,%esp
  0x00007f8f8f7260df: je     0x00007f8f8f7260f7
  0x00007f8f8f7260e5: sub    $0x8,%rsp
  0x00007f8f8f7260e9: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7260ee: add    $0x8,%rsp
  0x00007f8f8f7260f2: jmpq   0x00007f8f8f7260fc
  0x00007f8f8f7260f7: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7260fc: movabs $0x0,%r10
  0x00007f8f8f726106: mov    %r10,0x320(%r15)
  0x00007f8f8f72610d: movabs $0x0,%r10
  0x00007f8f8f726117: mov    %r10,0x330(%r15)
  0x00007f8f8f72611e: movabs $0x0,%r10
  0x00007f8f8f726128: mov    %r10,0x328(%r15)
  0x00007f8f8f72612f: vzeroupper 
  0x00007f8f8f726132: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72613a: je     0x00007f8f8f726145
  0x00007f8f8f726140: jmpq   0x00007f8f8f71a780
  0x00007f8f8f726145: mov    -0x40(%rbp),%r13
  0x00007f8f8f726149: mov    -0x38(%rbp),%r14
  0x00007f8f8f72614d: retq   
  0x00007f8f8f72614e: mov    -0x40(%rbp),%r13
  0x00007f8f8f726152: mov    (%rsp),%eax
  0x00007f8f8f726155: add    $0x8,%rsp
  0x00007f8f8f726159: mov    -0x48(%rbp),%rsi
  0x00007f8f8f72615d: lea    -0x48(%rbp),%rbx
  0x00007f8f8f726161: jmpq   0x00007f8f8f726267
  0x00007f8f8f726166: push   %rax
  0x00007f8f8f726167: mov    %rsi,%rsi
  0x00007f8f8f72616a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72616e: lea    (%rsi),%rax
  0x00007f8f8f726171: mov    0x8(%rsi),%rcx
  0x00007f8f8f726175: movq   $0x0,0x8(%rsi)
  0x00007f8f8f72617d: mov    (%rcx),%rdx
  0x00007f8f8f726180: and    $0x7,%rdx
  0x00007f8f8f726184: cmp    $0x5,%rdx
  0x00007f8f8f726188: je     0x00007f8f8f726245
  0x00007f8f8f72618e: mov    (%rax),%rdx
  0x00007f8f8f726191: test   %rdx,%rdx
  0x00007f8f8f726194: je     0x00007f8f8f726245
  0x00007f8f8f72619a: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f72619f: je     0x00007f8f8f726245
  0x00007f8f8f7261a5: mov    %rcx,0x8(%rsi)
  0x00007f8f8f7261a9: callq  0x00007f8f8f7261b3
  0x00007f8f8f7261ae: jmpq   0x00007f8f8f726245
  0x00007f8f8f7261b3: lea    0x8(%rsp),%rax
  0x00007f8f8f7261b8: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7261bc: mov    %r15,%rdi
  0x00007f8f8f7261bf: vzeroupper 
  0x00007f8f8f7261c2: mov    %rbp,0x330(%r15)
  0x00007f8f8f7261c9: mov    %rax,0x320(%r15)
  0x00007f8f8f7261d0: test   $0xf,%esp
  0x00007f8f8f7261d6: je     0x00007f8f8f7261ee
  0x00007f8f8f7261dc: sub    $0x8,%rsp
  0x00007f8f8f7261e0: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7261e5: add    $0x8,%rsp
  0x00007f8f8f7261e9: jmpq   0x00007f8f8f7261f3
  0x00007f8f8f7261ee: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7261f3: movabs $0x0,%r10
  0x00007f8f8f7261fd: mov    %r10,0x320(%r15)
  0x00007f8f8f726204: movabs $0x0,%r10
  0x00007f8f8f72620e: mov    %r10,0x330(%r15)
  0x00007f8f8f726215: movabs $0x0,%r10
  0x00007f8f8f72621f: mov    %r10,0x328(%r15)
  0x00007f8f8f726226: vzeroupper 
  0x00007f8f8f726229: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f726231: je     0x00007f8f8f72623c
  0x00007f8f8f726237: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72623c: mov    -0x40(%rbp),%r13
  0x00007f8f8f726240: mov    -0x38(%rbp),%r14
  0x00007f8f8f726244: retq   
  0x00007f8f8f726245: mov    -0x40(%rbp),%r13
  0x00007f8f8f726249: mov    (%rsp),%eax
  0x00007f8f8f72624c: add    $0x8,%rsp
  0x00007f8f8f726250: jmpq   0x00007f8f8f726159
  0x00007f8f8f726255: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f72625d: jne    0x00007f8f8f726166
  0x00007f8f8f726263: add    $0x10,%rsi
  0x00007f8f8f726267: cmp    %rbx,%rsi
  0x00007f8f8f72626a: jne    0x00007f8f8f726255
  0x00007f8f8f72626c: cmpb   $0x0,0x1e490f14(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f726273: je     0x00007f8f8f7262ab
  0x00007f8f8f726279: push   %rax
  0x00007f8f8f72627a: mov    -0x18(%rbp),%rsi
  0x00007f8f8f72627e: mov    %r15,%rdi
  0x00007f8f8f726281: test   $0xf,%esp
  0x00007f8f8f726287: je     0x00007f8f8f72629f
  0x00007f8f8f72628d: sub    $0x8,%rsp
  0x00007f8f8f726291: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f726296: add    $0x8,%rsp
  0x00007f8f8f72629a: jmpq   0x00007f8f8f7262a4
  0x00007f8f8f72629f: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f7262a4: mov    (%rsp),%eax
  0x00007f8f8f7262a7: add    $0x8,%rsp
  0x00007f8f8f7262ab: mov    -0x8(%rbp),%rbx
  0x00007f8f8f7262af: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f7262ba: je     0x00007f8f8f726406
  0x00007f8f8f7262c0: cmp    0x418(%r15),%rbx
  0x00007f8f8f7262c7: jle    0x00007f8f8f726406
  0x00007f8f8f7262cd: mov    %r15,%rdi
  0x00007f8f8f7262d0: test   $0xf,%esp
  0x00007f8f8f7262d6: je     0x00007f8f8f7262ee
  0x00007f8f8f7262dc: sub    $0x8,%rsp
  0x00007f8f8f7262e0: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f7262e5: add    $0x8,%rsp
  0x00007f8f8f7262e9: jmpq   0x00007f8f8f7262f3
  0x00007f8f8f7262ee: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f7262f3: callq  0x00007f8f8f7262fd
  0x00007f8f8f7262f8: jmpq   0x00007f8f8f72638f
  0x00007f8f8f7262fd: lea    0x8(%rsp),%rax
  0x00007f8f8f726302: mov    %r13,-0x40(%rbp)
  0x00007f8f8f726306: mov    %r15,%rdi
  0x00007f8f8f726309: vzeroupper 
  0x00007f8f8f72630c: mov    %rbp,0x330(%r15)
  0x00007f8f8f726313: mov    %rax,0x320(%r15)
  0x00007f8f8f72631a: test   $0xf,%esp
  0x00007f8f8f726320: je     0x00007f8f8f726338
  0x00007f8f8f726326: sub    $0x8,%rsp
  0x00007f8f8f72632a: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f72632f: add    $0x8,%rsp
  0x00007f8f8f726333: jmpq   0x00007f8f8f72633d
  0x00007f8f8f726338: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f72633d: movabs $0x0,%r10
  0x00007f8f8f726347: mov    %r10,0x320(%r15)
  0x00007f8f8f72634e: movabs $0x0,%r10
  0x00007f8f8f726358: mov    %r10,0x330(%r15)
  0x00007f8f8f72635f: movabs $0x0,%r10
  0x00007f8f8f726369: mov    %r10,0x328(%r15)
  0x00007f8f8f726370: vzeroupper 
  0x00007f8f8f726373: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72637b: je     0x00007f8f8f726386
  0x00007f8f8f726381: jmpq   0x00007f8f8f71a780
  0x00007f8f8f726386: mov    -0x40(%rbp),%r13
  0x00007f8f8f72638a: mov    -0x38(%rbp),%r14
  0x00007f8f8f72638e: retq   
  0x00007f8f8f72638f: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f726394: sub    $0x80,%rsp
  0x00007f8f8f72639b: mov    %rax,0x78(%rsp)
  0x00007f8f8f7263a0: mov    %rcx,0x70(%rsp)
  0x00007f8f8f7263a5: mov    %rdx,0x68(%rsp)
  0x00007f8f8f7263aa: mov    %rbx,0x60(%rsp)
  0x00007f8f8f7263af: mov    %rbp,0x50(%rsp)
  0x00007f8f8f7263b4: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7263b9: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7263be: mov    %r8,0x38(%rsp)
  0x00007f8f8f7263c3: mov    %r9,0x30(%rsp)
  0x00007f8f8f7263c8: mov    %r10,0x28(%rsp)
  0x00007f8f8f7263cd: mov    %r11,0x20(%rsp)
  0x00007f8f8f7263d2: mov    %r12,0x18(%rsp)
  0x00007f8f8f7263d7: mov    %r13,0x10(%rsp)
  0x00007f8f8f7263dc: mov    %r14,0x8(%rsp)
  0x00007f8f8f7263e1: mov    %r15,(%rsp)
  0x00007f8f8f7263e5: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f7263ef: movabs $0x7f8f8f72638f,%rsi
  0x00007f8f8f7263f9: mov    %rsp,%rdx
  0x00007f8f8f7263fc: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f726400: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f726405: hlt    
  0x00007f8f8f726406: leaveq 
  0x00007f8f8f726407: pop    %rsi
  0x00007f8f8f726408: mov    %rbx,%rsp
  0x00007f8f8f72640b: jmpq   *%rsi
  0x00007f8f8f72640d: mov    -0x40(%rbp),%r13
  0x00007f8f8f726411: mov    -0x38(%rbp),%r14
  0x00007f8f8f726415: mov    -0x48(%rbp),%rsp
  0x00007f8f8f726419: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f726421: mov    0x4b0(%r15),%rcx
  0x00007f8f8f726428: mov    0x80(%rcx),%eax
  0x00007f8f8f72642e: movl   $0xb,0x78(%rcx)
  0x00007f8f8f726435: movl   $0x0,0x80(%rcx)
  0x00007f8f8f72643f: movl   $0xb,0x78(%rcx)
  0x00007f8f8f726446: movabs $0x0,%r10
  0x00007f8f8f726450: mov    %r10,0x80(%rcx)
  0x00007f8f8f726457: mov    0x4b0(%r15),%rcx
  0x00007f8f8f72645e: movl   $0x0,0x74(%rcx)
  0x00007f8f8f726465: mov    0x3dd(%r15),%bl
  0x00007f8f8f72646c: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f726474: mov    -0x18(%rbp),%rcx
  0x00007f8f8f726478: mov    0x20(%rcx),%ecx
  0x00007f8f8f72647b: test   $0x20,%ecx
  0x00007f8f8f726481: je     0x00007f8f8f726594
  0x00007f8f8f726487: test   $0xff,%bl
  0x00007f8f8f72648a: jne    0x00007f8f8f7266a7
  0x00007f8f8f726490: push   %rax
  0x00007f8f8f726491: lea    -0x58(%rbp),%rsi
  0x00007f8f8f726495: mov    0x8(%rsi),%rax
  0x00007f8f8f726499: test   %rax,%rax
  0x00007f8f8f72649c: jne    0x00007f8f8f7264ae
  0x00007f8f8f7264a2: mov    (%rsp),%eax
  0x00007f8f8f7264a5: add    $0x8,%rsp
  0x00007f8f8f7264a9: jmpq   0x00007f8f8f726594
  0x00007f8f8f7264ae: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7264b2: lea    (%rsi),%rax
  0x00007f8f8f7264b5: mov    0x8(%rsi),%rcx
  0x00007f8f8f7264b9: movq   $0x0,0x8(%rsi)
  0x00007f8f8f7264c1: mov    (%rcx),%rdx
  0x00007f8f8f7264c4: and    $0x7,%rdx
  0x00007f8f8f7264c8: cmp    $0x5,%rdx
  0x00007f8f8f7264cc: je     0x00007f8f8f726589
  0x00007f8f8f7264d2: mov    (%rax),%rdx
  0x00007f8f8f7264d5: test   %rdx,%rdx
  0x00007f8f8f7264d8: je     0x00007f8f8f726589
  0x00007f8f8f7264de: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f7264e3: je     0x00007f8f8f726589
  0x00007f8f8f7264e9: mov    %rcx,0x8(%rsi)
  0x00007f8f8f7264ed: callq  0x00007f8f8f7264f7
  0x00007f8f8f7264f2: jmpq   0x00007f8f8f726589
  0x00007f8f8f7264f7: lea    0x8(%rsp),%rax
  0x00007f8f8f7264fc: mov    %r13,-0x40(%rbp)
  0x00007f8f8f726500: mov    %r15,%rdi
  0x00007f8f8f726503: vzeroupper 
  0x00007f8f8f726506: mov    %rbp,0x330(%r15)
  0x00007f8f8f72650d: mov    %rax,0x320(%r15)
  0x00007f8f8f726514: test   $0xf,%esp
  0x00007f8f8f72651a: je     0x00007f8f8f726532
  0x00007f8f8f726520: sub    $0x8,%rsp
  0x00007f8f8f726524: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f726529: add    $0x8,%rsp
  0x00007f8f8f72652d: jmpq   0x00007f8f8f726537
  0x00007f8f8f726532: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f726537: movabs $0x0,%r10
  0x00007f8f8f726541: mov    %r10,0x320(%r15)
  0x00007f8f8f726548: movabs $0x0,%r10
  0x00007f8f8f726552: mov    %r10,0x330(%r15)
  0x00007f8f8f726559: movabs $0x0,%r10
  0x00007f8f8f726563: mov    %r10,0x328(%r15)
  0x00007f8f8f72656a: vzeroupper 
  0x00007f8f8f72656d: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f726575: je     0x00007f8f8f726580
  0x00007f8f8f72657b: jmpq   0x00007f8f8f71a780
  0x00007f8f8f726580: mov    -0x40(%rbp),%r13
  0x00007f8f8f726584: mov    -0x38(%rbp),%r14
  0x00007f8f8f726588: retq   
  0x00007f8f8f726589: mov    -0x40(%rbp),%r13
  0x00007f8f8f72658d: mov    (%rsp),%eax
  0x00007f8f8f726590: add    $0x8,%rsp
  0x00007f8f8f726594: mov    -0x48(%rbp),%rsi
  0x00007f8f8f726598: lea    -0x48(%rbp),%rbx
  0x00007f8f8f72659c: jmpq   0x00007f8f8f7266a2
  0x00007f8f8f7265a1: push   %rax
  0x00007f8f8f7265a2: mov    %rsi,%rsi
  0x00007f8f8f7265a5: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7265a9: lea    (%rsi),%rax
  0x00007f8f8f7265ac: mov    0x8(%rsi),%rcx
  0x00007f8f8f7265b0: movq   $0x0,0x8(%rsi)
  0x00007f8f8f7265b8: mov    (%rcx),%rdx
  0x00007f8f8f7265bb: and    $0x7,%rdx
  0x00007f8f8f7265bf: cmp    $0x5,%rdx
  0x00007f8f8f7265c3: je     0x00007f8f8f726680
  0x00007f8f8f7265c9: mov    (%rax),%rdx
  0x00007f8f8f7265cc: test   %rdx,%rdx
  0x00007f8f8f7265cf: je     0x00007f8f8f726680
  0x00007f8f8f7265d5: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f7265da: je     0x00007f8f8f726680
  0x00007f8f8f7265e0: mov    %rcx,0x8(%rsi)
  0x00007f8f8f7265e4: callq  0x00007f8f8f7265ee
  0x00007f8f8f7265e9: jmpq   0x00007f8f8f726680
  0x00007f8f8f7265ee: lea    0x8(%rsp),%rax
  0x00007f8f8f7265f3: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7265f7: mov    %r15,%rdi
  0x00007f8f8f7265fa: vzeroupper 
  0x00007f8f8f7265fd: mov    %rbp,0x330(%r15)
  0x00007f8f8f726604: mov    %rax,0x320(%r15)
  0x00007f8f8f72660b: test   $0xf,%esp
  0x00007f8f8f726611: je     0x00007f8f8f726629
  0x00007f8f8f726617: sub    $0x8,%rsp
  0x00007f8f8f72661b: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f726620: add    $0x8,%rsp
  0x00007f8f8f726624: jmpq   0x00007f8f8f72662e
  0x00007f8f8f726629: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72662e: movabs $0x0,%r10
  0x00007f8f8f726638: mov    %r10,0x320(%r15)
  0x00007f8f8f72663f: movabs $0x0,%r10
  0x00007f8f8f726649: mov    %r10,0x330(%r15)
  0x00007f8f8f726650: movabs $0x0,%r10
  0x00007f8f8f72665a: mov    %r10,0x328(%r15)
  0x00007f8f8f726661: vzeroupper 
  0x00007f8f8f726664: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72666c: je     0x00007f8f8f726677
  0x00007f8f8f726672: jmpq   0x00007f8f8f71a780
  0x00007f8f8f726677: mov    -0x40(%rbp),%r13
  0x00007f8f8f72667b: mov    -0x38(%rbp),%r14
  0x00007f8f8f72667f: retq   
  0x00007f8f8f726680: mov    -0x40(%rbp),%r13
  0x00007f8f8f726684: mov    (%rsp),%eax
  0x00007f8f8f726687: add    $0x8,%rsp
  0x00007f8f8f72668b: jmpq   0x00007f8f8f726594
  0x00007f8f8f726690: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f726698: jne    0x00007f8f8f7265a1
  0x00007f8f8f72669e: add    $0x10,%rsi
  0x00007f8f8f7266a2: cmp    %rbx,%rsi
  0x00007f8f8f7266a5: jne    0x00007f8f8f726690
  0x00007f8f8f7266a7: cmpb   $0x0,0x1e490ad9(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f7266ae: je     0x00007f8f8f7266e6
  0x00007f8f8f7266b4: push   %rax
  0x00007f8f8f7266b5: mov    -0x18(%rbp),%rsi
  0x00007f8f8f7266b9: mov    %r15,%rdi
  0x00007f8f8f7266bc: test   $0xf,%esp
  0x00007f8f8f7266c2: je     0x00007f8f8f7266da
  0x00007f8f8f7266c8: sub    $0x8,%rsp
  0x00007f8f8f7266cc: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f7266d1: add    $0x8,%rsp
  0x00007f8f8f7266d5: jmpq   0x00007f8f8f7266df
  0x00007f8f8f7266da: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f7266df: mov    (%rsp),%eax
  0x00007f8f8f7266e2: add    $0x8,%rsp
  0x00007f8f8f7266e6: mov    -0x8(%rbp),%rbx
  0x00007f8f8f7266ea: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f7266f5: je     0x00007f8f8f726841
  0x00007f8f8f7266fb: cmp    0x418(%r15),%rbx
  0x00007f8f8f726702: jle    0x00007f8f8f726841
  0x00007f8f8f726708: mov    %r15,%rdi
  0x00007f8f8f72670b: test   $0xf,%esp
  0x00007f8f8f726711: je     0x00007f8f8f726729
  0x00007f8f8f726717: sub    $0x8,%rsp
  0x00007f8f8f72671b: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f726720: add    $0x8,%rsp
  0x00007f8f8f726724: jmpq   0x00007f8f8f72672e
  0x00007f8f8f726729: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f72672e: callq  0x00007f8f8f726738
  0x00007f8f8f726733: jmpq   0x00007f8f8f7267ca
  0x00007f8f8f726738: lea    0x8(%rsp),%rax
  0x00007f8f8f72673d: mov    %r13,-0x40(%rbp)
  0x00007f8f8f726741: mov    %r15,%rdi
  0x00007f8f8f726744: vzeroupper 
  0x00007f8f8f726747: mov    %rbp,0x330(%r15)
  0x00007f8f8f72674e: mov    %rax,0x320(%r15)
  0x00007f8f8f726755: test   $0xf,%esp
  0x00007f8f8f72675b: je     0x00007f8f8f726773
  0x00007f8f8f726761: sub    $0x8,%rsp
  0x00007f8f8f726765: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f72676a: add    $0x8,%rsp
  0x00007f8f8f72676e: jmpq   0x00007f8f8f726778
  0x00007f8f8f726773: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f726778: movabs $0x0,%r10
  0x00007f8f8f726782: mov    %r10,0x320(%r15)
  0x00007f8f8f726789: movabs $0x0,%r10
  0x00007f8f8f726793: mov    %r10,0x330(%r15)
  0x00007f8f8f72679a: movabs $0x0,%r10
  0x00007f8f8f7267a4: mov    %r10,0x328(%r15)
  0x00007f8f8f7267ab: vzeroupper 
  0x00007f8f8f7267ae: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7267b6: je     0x00007f8f8f7267c1
  0x00007f8f8f7267bc: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7267c1: mov    -0x40(%rbp),%r13
  0x00007f8f8f7267c5: mov    -0x38(%rbp),%r14
  0x00007f8f8f7267c9: retq   
  0x00007f8f8f7267ca: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f7267cf: sub    $0x80,%rsp
  0x00007f8f8f7267d6: mov    %rax,0x78(%rsp)
  0x00007f8f8f7267db: mov    %rcx,0x70(%rsp)
  0x00007f8f8f7267e0: mov    %rdx,0x68(%rsp)
  0x00007f8f8f7267e5: mov    %rbx,0x60(%rsp)
  0x00007f8f8f7267ea: mov    %rbp,0x50(%rsp)
  0x00007f8f8f7267ef: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7267f4: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7267f9: mov    %r8,0x38(%rsp)
  0x00007f8f8f7267fe: mov    %r9,0x30(%rsp)
  0x00007f8f8f726803: mov    %r10,0x28(%rsp)
  0x00007f8f8f726808: mov    %r11,0x20(%rsp)
  0x00007f8f8f72680d: mov    %r12,0x18(%rsp)
  0x00007f8f8f726812: mov    %r13,0x10(%rsp)
  0x00007f8f8f726817: mov    %r14,0x8(%rsp)
  0x00007f8f8f72681c: mov    %r15,(%rsp)
  0x00007f8f8f726820: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f72682a: movabs $0x7f8f8f7267ca,%rsi
  0x00007f8f8f726834: mov    %rsp,%rdx
  0x00007f8f8f726837: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f72683b: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f726840: hlt    
  0x00007f8f8f726841: leaveq 
  0x00007f8f8f726842: pop    %rsi
  0x00007f8f8f726843: mov    %rbx,%rsp
  0x00007f8f8f726846: jmpq   *%rsi
  0x00007f8f8f726848: add    %al,(%rax)
  0x00007f8f8f72684a: add    %al,(%rax)
  0x00007f8f8f72684c: add    %al,(%rax)
  0x00007f8f8f72684e: add    %al,(%rax)
  0x00007f8f8f726850: add    %al,(%rax)
  0x00007f8f8f726852: add    %al,(%rax)
  0x00007f8f8f726854: add    %al,(%rax)
  0x00007f8f8f726856: add    %al,(%rax)
  0x00007f8f8f726858: add    %al,(%rax)
  0x00007f8f8f72685a: add    %al,(%rax)
  0x00007f8f8f72685c: add    %al,(%rax)
  0x00007f8f8f72685e: add    %al,(%rax)

----------------------------------------------------------------------
result handlers for native calls  [0x00007f8f8f726880, 0x00007f8f8f7268a0]  32 bytes

  0x00007f8f8f726880: and    $0xff,%eax
  0x00007f8f8f726886: setne  %al
  0x00007f8f8f726889: retq   
  0x00007f8f8f72688a: movzwl %ax,%eax
  0x00007f8f8f72688d: retq   
  0x00007f8f8f72688e: movsbl %al,%eax
  0x00007f8f8f726891: retq   
  0x00007f8f8f726892: movswl %ax,%eax
  0x00007f8f8f726895: retq   
  0x00007f8f8f726896: retq   
  0x00007f8f8f726897: retq   
  0x00007f8f8f726898: retq   
  0x00007f8f8f726899: retq   
  0x00007f8f8f72689a: retq   
  0x00007f8f8f72689b: mov    0x10(%rbp),%rax
  0x00007f8f8f72689f: retq   

----------------------------------------------------------------------
safepoint entry points  [0x00007f8f8f7268c0, 0x00007f8f8f726fe0]  1824 bytes

  0x00007f8f8f7268c0: callq  0x00007f8f8f7268ca
  0x00007f8f8f7268c5: jmpq   0x00007f8f8f72695c
  0x00007f8f8f7268ca: lea    0x8(%rsp),%rax
  0x00007f8f8f7268cf: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7268d3: mov    %r15,%rdi
  0x00007f8f8f7268d6: vzeroupper 
  0x00007f8f8f7268d9: mov    %rbp,0x330(%r15)
  0x00007f8f8f7268e0: mov    %rax,0x320(%r15)
  0x00007f8f8f7268e7: test   $0xf,%esp
  0x00007f8f8f7268ed: je     0x00007f8f8f726905
  0x00007f8f8f7268f3: sub    $0x8,%rsp
  0x00007f8f8f7268f7: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f7268fc: add    $0x8,%rsp
  0x00007f8f8f726900: jmpq   0x00007f8f8f72690a
  0x00007f8f8f726905: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f72690a: movabs $0x0,%r10
  0x00007f8f8f726914: mov    %r10,0x320(%r15)
  0x00007f8f8f72691b: movabs $0x0,%r10
  0x00007f8f8f726925: mov    %r10,0x330(%r15)
  0x00007f8f8f72692c: movabs $0x0,%r10
  0x00007f8f8f726936: mov    %r10,0x328(%r15)
  0x00007f8f8f72693d: vzeroupper 
  0x00007f8f8f726940: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f726948: je     0x00007f8f8f726953
  0x00007f8f8f72694e: jmpq   0x00007f8f8f71a780
  0x00007f8f8f726953: mov    -0x40(%rbp),%r13
  0x00007f8f8f726957: mov    -0x38(%rbp),%r14
  0x00007f8f8f72695b: retq   
  0x00007f8f8f72695c: movzbl 0x0(%r13),%ebx
  0x00007f8f8f726961: movabs $0x7f8fadbe2580,%r10
  0x00007f8f8f72696b: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72696f: sub    $0x10,%rsp
  0x00007f8f8f726973: vmovsd %xmm0,(%rsp)
  0x00007f8f8f726978: callq  0x00007f8f8f726982
  0x00007f8f8f72697d: jmpq   0x00007f8f8f726a14
  0x00007f8f8f726982: lea    0x8(%rsp),%rax
  0x00007f8f8f726987: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72698b: mov    %r15,%rdi
  0x00007f8f8f72698e: vzeroupper 
  0x00007f8f8f726991: mov    %rbp,0x330(%r15)
  0x00007f8f8f726998: mov    %rax,0x320(%r15)
  0x00007f8f8f72699f: test   $0xf,%esp
  0x00007f8f8f7269a5: je     0x00007f8f8f7269bd
  0x00007f8f8f7269ab: sub    $0x8,%rsp
  0x00007f8f8f7269af: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f7269b4: add    $0x8,%rsp
  0x00007f8f8f7269b8: jmpq   0x00007f8f8f7269c2
  0x00007f8f8f7269bd: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f7269c2: movabs $0x0,%r10
  0x00007f8f8f7269cc: mov    %r10,0x320(%r15)
  0x00007f8f8f7269d3: movabs $0x0,%r10
  0x00007f8f8f7269dd: mov    %r10,0x330(%r15)
  0x00007f8f8f7269e4: movabs $0x0,%r10
  0x00007f8f8f7269ee: mov    %r10,0x328(%r15)
  0x00007f8f8f7269f5: vzeroupper 
  0x00007f8f8f7269f8: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f726a00: je     0x00007f8f8f726a0b
  0x00007f8f8f726a06: jmpq   0x00007f8f8f71a780
  0x00007f8f8f726a0b: mov    -0x40(%rbp),%r13
  0x00007f8f8f726a0f: mov    -0x38(%rbp),%r14
  0x00007f8f8f726a13: retq   
  0x00007f8f8f726a14: movzbl 0x0(%r13),%ebx
  0x00007f8f8f726a19: movabs $0x7f8fadbe2580,%r10
  0x00007f8f8f726a23: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f726a27: sub    $0x8,%rsp
  0x00007f8f8f726a2b: vmovss %xmm0,(%rsp)
  0x00007f8f8f726a30: callq  0x00007f8f8f726a3a
  0x00007f8f8f726a35: jmpq   0x00007f8f8f726acc
  0x00007f8f8f726a3a: lea    0x8(%rsp),%rax
  0x00007f8f8f726a3f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f726a43: mov    %r15,%rdi
  0x00007f8f8f726a46: vzeroupper 
  0x00007f8f8f726a49: mov    %rbp,0x330(%r15)
  0x00007f8f8f726a50: mov    %rax,0x320(%r15)
  0x00007f8f8f726a57: test   $0xf,%esp
  0x00007f8f8f726a5d: je     0x00007f8f8f726a75
  0x00007f8f8f726a63: sub    $0x8,%rsp
  0x00007f8f8f726a67: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726a6c: add    $0x8,%rsp
  0x00007f8f8f726a70: jmpq   0x00007f8f8f726a7a
  0x00007f8f8f726a75: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726a7a: movabs $0x0,%r10
  0x00007f8f8f726a84: mov    %r10,0x320(%r15)
  0x00007f8f8f726a8b: movabs $0x0,%r10
  0x00007f8f8f726a95: mov    %r10,0x330(%r15)
  0x00007f8f8f726a9c: movabs $0x0,%r10
  0x00007f8f8f726aa6: mov    %r10,0x328(%r15)
  0x00007f8f8f726aad: vzeroupper 
  0x00007f8f8f726ab0: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f726ab8: je     0x00007f8f8f726ac3
  0x00007f8f8f726abe: jmpq   0x00007f8f8f71a780
  0x00007f8f8f726ac3: mov    -0x40(%rbp),%r13
  0x00007f8f8f726ac7: mov    -0x38(%rbp),%r14
  0x00007f8f8f726acb: retq   
  0x00007f8f8f726acc: movzbl 0x0(%r13),%ebx
  0x00007f8f8f726ad1: movabs $0x7f8fadbe2580,%r10
  0x00007f8f8f726adb: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f726adf: sub    $0x10,%rsp
  0x00007f8f8f726ae3: mov    %rax,(%rsp)
  0x00007f8f8f726ae7: movabs $0x0,%r10
  0x00007f8f8f726af1: mov    %r10,0x8(%rsp)
  0x00007f8f8f726af6: callq  0x00007f8f8f726b00
  0x00007f8f8f726afb: jmpq   0x00007f8f8f726b92
  0x00007f8f8f726b00: lea    0x8(%rsp),%rax
  0x00007f8f8f726b05: mov    %r13,-0x40(%rbp)
  0x00007f8f8f726b09: mov    %r15,%rdi
  0x00007f8f8f726b0c: vzeroupper 
  0x00007f8f8f726b0f: mov    %rbp,0x330(%r15)
  0x00007f8f8f726b16: mov    %rax,0x320(%r15)
  0x00007f8f8f726b1d: test   $0xf,%esp
  0x00007f8f8f726b23: je     0x00007f8f8f726b3b
  0x00007f8f8f726b29: sub    $0x8,%rsp
  0x00007f8f8f726b2d: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726b32: add    $0x8,%rsp
  0x00007f8f8f726b36: jmpq   0x00007f8f8f726b40
  0x00007f8f8f726b3b: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726b40: movabs $0x0,%r10
  0x00007f8f8f726b4a: mov    %r10,0x320(%r15)
  0x00007f8f8f726b51: movabs $0x0,%r10
  0x00007f8f8f726b5b: mov    %r10,0x330(%r15)
  0x00007f8f8f726b62: movabs $0x0,%r10
  0x00007f8f8f726b6c: mov    %r10,0x328(%r15)
  0x00007f8f8f726b73: vzeroupper 
  0x00007f8f8f726b76: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f726b7e: je     0x00007f8f8f726b89
  0x00007f8f8f726b84: jmpq   0x00007f8f8f71a780
  0x00007f8f8f726b89: mov    -0x40(%rbp),%r13
  0x00007f8f8f726b8d: mov    -0x38(%rbp),%r14
  0x00007f8f8f726b91: retq   
  0x00007f8f8f726b92: movzbl 0x0(%r13),%ebx
  0x00007f8f8f726b97: movabs $0x7f8fadbe2580,%r10
  0x00007f8f8f726ba1: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f726ba5: push   %rax
  0x00007f8f8f726ba6: callq  0x00007f8f8f726bb0
  0x00007f8f8f726bab: jmpq   0x00007f8f8f726c42
  0x00007f8f8f726bb0: lea    0x8(%rsp),%rax
  0x00007f8f8f726bb5: mov    %r13,-0x40(%rbp)
  0x00007f8f8f726bb9: mov    %r15,%rdi
  0x00007f8f8f726bbc: vzeroupper 
  0x00007f8f8f726bbf: mov    %rbp,0x330(%r15)
  0x00007f8f8f726bc6: mov    %rax,0x320(%r15)
  0x00007f8f8f726bcd: test   $0xf,%esp
  0x00007f8f8f726bd3: je     0x00007f8f8f726beb
  0x00007f8f8f726bd9: sub    $0x8,%rsp
  0x00007f8f8f726bdd: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726be2: add    $0x8,%rsp
  0x00007f8f8f726be6: jmpq   0x00007f8f8f726bf0
  0x00007f8f8f726beb: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726bf0: movabs $0x0,%r10
  0x00007f8f8f726bfa: mov    %r10,0x320(%r15)
  0x00007f8f8f726c01: movabs $0x0,%r10
  0x00007f8f8f726c0b: mov    %r10,0x330(%r15)
  0x00007f8f8f726c12: movabs $0x0,%r10
  0x00007f8f8f726c1c: mov    %r10,0x328(%r15)
  0x00007f8f8f726c23: vzeroupper 
  0x00007f8f8f726c26: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f726c2e: je     0x00007f8f8f726c39
  0x00007f8f8f726c34: jmpq   0x00007f8f8f71a780
  0x00007f8f8f726c39: mov    -0x40(%rbp),%r13
  0x00007f8f8f726c3d: mov    -0x38(%rbp),%r14
  0x00007f8f8f726c41: retq   
  0x00007f8f8f726c42: movzbl 0x0(%r13),%ebx
  0x00007f8f8f726c47: movabs $0x7f8fadbe2580,%r10
  0x00007f8f8f726c51: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f726c55: push   %rax
  0x00007f8f8f726c56: callq  0x00007f8f8f726c60
  0x00007f8f8f726c5b: jmpq   0x00007f8f8f726cf2
  0x00007f8f8f726c60: lea    0x8(%rsp),%rax
  0x00007f8f8f726c65: mov    %r13,-0x40(%rbp)
  0x00007f8f8f726c69: mov    %r15,%rdi
  0x00007f8f8f726c6c: vzeroupper 
  0x00007f8f8f726c6f: mov    %rbp,0x330(%r15)
  0x00007f8f8f726c76: mov    %rax,0x320(%r15)
  0x00007f8f8f726c7d: test   $0xf,%esp
  0x00007f8f8f726c83: je     0x00007f8f8f726c9b
  0x00007f8f8f726c89: sub    $0x8,%rsp
  0x00007f8f8f726c8d: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726c92: add    $0x8,%rsp
  0x00007f8f8f726c96: jmpq   0x00007f8f8f726ca0
  0x00007f8f8f726c9b: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726ca0: movabs $0x0,%r10
  0x00007f8f8f726caa: mov    %r10,0x320(%r15)
  0x00007f8f8f726cb1: movabs $0x0,%r10
  0x00007f8f8f726cbb: mov    %r10,0x330(%r15)
  0x00007f8f8f726cc2: movabs $0x0,%r10
  0x00007f8f8f726ccc: mov    %r10,0x328(%r15)
  0x00007f8f8f726cd3: vzeroupper 
  0x00007f8f8f726cd6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f726cde: je     0x00007f8f8f726ce9
  0x00007f8f8f726ce4: jmpq   0x00007f8f8f71a780
  0x00007f8f8f726ce9: mov    -0x40(%rbp),%r13
  0x00007f8f8f726ced: mov    -0x38(%rbp),%r14
  0x00007f8f8f726cf1: retq   
  0x00007f8f8f726cf2: movzbl 0x0(%r13),%ebx
  0x00007f8f8f726cf7: movabs $0x7f8fadbe2580,%r10
  0x00007f8f8f726d01: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f726d05: push   %rax
  0x00007f8f8f726d06: callq  0x00007f8f8f726d10
  0x00007f8f8f726d0b: jmpq   0x00007f8f8f726da2
  0x00007f8f8f726d10: lea    0x8(%rsp),%rax
  0x00007f8f8f726d15: mov    %r13,-0x40(%rbp)
  0x00007f8f8f726d19: mov    %r15,%rdi
  0x00007f8f8f726d1c: vzeroupper 
  0x00007f8f8f726d1f: mov    %rbp,0x330(%r15)
  0x00007f8f8f726d26: mov    %rax,0x320(%r15)
  0x00007f8f8f726d2d: test   $0xf,%esp
  0x00007f8f8f726d33: je     0x00007f8f8f726d4b
  0x00007f8f8f726d39: sub    $0x8,%rsp
  0x00007f8f8f726d3d: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726d42: add    $0x8,%rsp
  0x00007f8f8f726d46: jmpq   0x00007f8f8f726d50
  0x00007f8f8f726d4b: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726d50: movabs $0x0,%r10
  0x00007f8f8f726d5a: mov    %r10,0x320(%r15)
  0x00007f8f8f726d61: movabs $0x0,%r10
  0x00007f8f8f726d6b: mov    %r10,0x330(%r15)
  0x00007f8f8f726d72: movabs $0x0,%r10
  0x00007f8f8f726d7c: mov    %r10,0x328(%r15)
  0x00007f8f8f726d83: vzeroupper 
  0x00007f8f8f726d86: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f726d8e: je     0x00007f8f8f726d99
  0x00007f8f8f726d94: jmpq   0x00007f8f8f71a780
  0x00007f8f8f726d99: mov    -0x40(%rbp),%r13
  0x00007f8f8f726d9d: mov    -0x38(%rbp),%r14
  0x00007f8f8f726da1: retq   
  0x00007f8f8f726da2: movzbl 0x0(%r13),%ebx
  0x00007f8f8f726da7: movabs $0x7f8fadbe2580,%r10
  0x00007f8f8f726db1: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f726db5: push   %rax
  0x00007f8f8f726db6: callq  0x00007f8f8f726dc0
  0x00007f8f8f726dbb: jmpq   0x00007f8f8f726e52
  0x00007f8f8f726dc0: lea    0x8(%rsp),%rax
  0x00007f8f8f726dc5: mov    %r13,-0x40(%rbp)
  0x00007f8f8f726dc9: mov    %r15,%rdi
  0x00007f8f8f726dcc: vzeroupper 
  0x00007f8f8f726dcf: mov    %rbp,0x330(%r15)
  0x00007f8f8f726dd6: mov    %rax,0x320(%r15)
  0x00007f8f8f726ddd: test   $0xf,%esp
  0x00007f8f8f726de3: je     0x00007f8f8f726dfb
  0x00007f8f8f726de9: sub    $0x8,%rsp
  0x00007f8f8f726ded: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726df2: add    $0x8,%rsp
  0x00007f8f8f726df6: jmpq   0x00007f8f8f726e00
  0x00007f8f8f726dfb: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726e00: movabs $0x0,%r10
  0x00007f8f8f726e0a: mov    %r10,0x320(%r15)
  0x00007f8f8f726e11: movabs $0x0,%r10
  0x00007f8f8f726e1b: mov    %r10,0x330(%r15)
  0x00007f8f8f726e22: movabs $0x0,%r10
  0x00007f8f8f726e2c: mov    %r10,0x328(%r15)
  0x00007f8f8f726e33: vzeroupper 
  0x00007f8f8f726e36: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f726e3e: je     0x00007f8f8f726e49
  0x00007f8f8f726e44: jmpq   0x00007f8f8f71a780
  0x00007f8f8f726e49: mov    -0x40(%rbp),%r13
  0x00007f8f8f726e4d: mov    -0x38(%rbp),%r14
  0x00007f8f8f726e51: retq   
  0x00007f8f8f726e52: movzbl 0x0(%r13),%ebx
  0x00007f8f8f726e57: movabs $0x7f8fadbe2580,%r10
  0x00007f8f8f726e61: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f726e65: push   %rax
  0x00007f8f8f726e66: callq  0x00007f8f8f726e70
  0x00007f8f8f726e6b: jmpq   0x00007f8f8f726f02
  0x00007f8f8f726e70: lea    0x8(%rsp),%rax
  0x00007f8f8f726e75: mov    %r13,-0x40(%rbp)
  0x00007f8f8f726e79: mov    %r15,%rdi
  0x00007f8f8f726e7c: vzeroupper 
  0x00007f8f8f726e7f: mov    %rbp,0x330(%r15)
  0x00007f8f8f726e86: mov    %rax,0x320(%r15)
  0x00007f8f8f726e8d: test   $0xf,%esp
  0x00007f8f8f726e93: je     0x00007f8f8f726eab
  0x00007f8f8f726e99: sub    $0x8,%rsp
  0x00007f8f8f726e9d: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726ea2: add    $0x8,%rsp
  0x00007f8f8f726ea6: jmpq   0x00007f8f8f726eb0
  0x00007f8f8f726eab: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726eb0: movabs $0x0,%r10
  0x00007f8f8f726eba: mov    %r10,0x320(%r15)
  0x00007f8f8f726ec1: movabs $0x0,%r10
  0x00007f8f8f726ecb: mov    %r10,0x330(%r15)
  0x00007f8f8f726ed2: movabs $0x0,%r10
  0x00007f8f8f726edc: mov    %r10,0x328(%r15)
  0x00007f8f8f726ee3: vzeroupper 
  0x00007f8f8f726ee6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f726eee: je     0x00007f8f8f726ef9
  0x00007f8f8f726ef4: jmpq   0x00007f8f8f71a780
  0x00007f8f8f726ef9: mov    -0x40(%rbp),%r13
  0x00007f8f8f726efd: mov    -0x38(%rbp),%r14
  0x00007f8f8f726f01: retq   
  0x00007f8f8f726f02: movzbl 0x0(%r13),%ebx
  0x00007f8f8f726f07: movabs $0x7f8fadbe2580,%r10
  0x00007f8f8f726f11: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f726f15: push   %rax
  0x00007f8f8f726f16: callq  0x00007f8f8f726f20
  0x00007f8f8f726f1b: jmpq   0x00007f8f8f726fb2
  0x00007f8f8f726f20: lea    0x8(%rsp),%rax
  0x00007f8f8f726f25: mov    %r13,-0x40(%rbp)
  0x00007f8f8f726f29: mov    %r15,%rdi
  0x00007f8f8f726f2c: vzeroupper 
  0x00007f8f8f726f2f: mov    %rbp,0x330(%r15)
  0x00007f8f8f726f36: mov    %rax,0x320(%r15)
  0x00007f8f8f726f3d: test   $0xf,%esp
  0x00007f8f8f726f43: je     0x00007f8f8f726f5b
  0x00007f8f8f726f49: sub    $0x8,%rsp
  0x00007f8f8f726f4d: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726f52: add    $0x8,%rsp
  0x00007f8f8f726f56: jmpq   0x00007f8f8f726f60
  0x00007f8f8f726f5b: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f726f60: movabs $0x0,%r10
  0x00007f8f8f726f6a: mov    %r10,0x320(%r15)
  0x00007f8f8f726f71: movabs $0x0,%r10
  0x00007f8f8f726f7b: mov    %r10,0x330(%r15)
  0x00007f8f8f726f82: movabs $0x0,%r10
  0x00007f8f8f726f8c: mov    %r10,0x328(%r15)
  0x00007f8f8f726f93: vzeroupper 
  0x00007f8f8f726f96: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f726f9e: je     0x00007f8f8f726fa9
  0x00007f8f8f726fa4: jmpq   0x00007f8f8f71a780
  0x00007f8f8f726fa9: mov    -0x40(%rbp),%r13
  0x00007f8f8f726fad: mov    -0x38(%rbp),%r14
  0x00007f8f8f726fb1: retq   
  0x00007f8f8f726fb2: movzbl 0x0(%r13),%ebx
  0x00007f8f8f726fb7: movabs $0x7f8fadbe2580,%r10
  0x00007f8f8f726fc1: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f726fc5: data16 xchg %ax,%ax
  0x00007f8f8f726fc8: add    %al,(%rax)
  0x00007f8f8f726fca: add    %al,(%rax)
  0x00007f8f8f726fcc: add    %al,(%rax)
  0x00007f8f8f726fce: add    %al,(%rax)
  0x00007f8f8f726fd0: add    %al,(%rax)
  0x00007f8f8f726fd2: add    %al,(%rax)
  0x00007f8f8f726fd4: add    %al,(%rax)
  0x00007f8f8f726fd6: add    %al,(%rax)
  0x00007f8f8f726fd8: add    %al,(%rax)
  0x00007f8f8f726fda: add    %al,(%rax)
  0x00007f8f8f726fdc: add    %al,(%rax)
  0x00007f8f8f726fde: add    %al,(%rax)

----------------------------------------------------------------------
exception handling  [0x00007f8f8f727000, 0x00007f8f8f728040]  4160 bytes

  0x00007f8f8f727000: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f727008: mov    -0x40(%rbp),%r13
  0x00007f8f8f72700c: mov    -0x38(%rbp),%r14
  0x00007f8f8f727010: xor    %r12,%r12
  0x00007f8f8f727013: mov    %rax,%rsi
  0x00007f8f8f727016: mov    -0x48(%rbp),%rsp
  0x00007f8f8f72701a: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f727022: callq  0x00007f8f8f72702c
  0x00007f8f8f727027: jmpq   0x00007f8f8f7270d6
  0x00007f8f8f72702c: lea    0x8(%rsp),%rax
  0x00007f8f8f727031: mov    %r13,-0x40(%rbp)
  0x00007f8f8f727035: mov    %r15,%rdi
  0x00007f8f8f727038: vzeroupper 
  0x00007f8f8f72703b: mov    %rbp,0x330(%r15)
  0x00007f8f8f727042: mov    %rax,0x320(%r15)
  0x00007f8f8f727049: test   $0xf,%esp
  0x00007f8f8f72704f: je     0x00007f8f8f727067
  0x00007f8f8f727055: sub    $0x8,%rsp
  0x00007f8f8f727059: callq  0x00007f8fad029d00 = InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*)
  0x00007f8f8f72705e: add    $0x8,%rsp
  0x00007f8f8f727062: jmpq   0x00007f8f8f72706c
  0x00007f8f8f727067: callq  0x00007f8fad029d00 = InterpreterRuntime::exception_handler_for_exception(JavaThread*, oopDesc*)
  0x00007f8f8f72706c: movabs $0x0,%r10
  0x00007f8f8f727076: mov    %r10,0x320(%r15)
  0x00007f8f8f72707d: movabs $0x0,%r10
  0x00007f8f8f727087: mov    %r10,0x330(%r15)
  0x00007f8f8f72708e: movabs $0x0,%r10
  0x00007f8f8f727098: mov    %r10,0x328(%r15)
  0x00007f8f8f72709f: vzeroupper 
  0x00007f8f8f7270a2: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7270aa: je     0x00007f8f8f7270b5
  0x00007f8f8f7270b0: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7270b5: mov    0x380(%r15),%rdx
  0x00007f8f8f7270bc: movabs $0x0,%r10
  0x00007f8f8f7270c6: mov    %r10,0x380(%r15)
  0x00007f8f8f7270cd: mov    -0x40(%rbp),%r13
  0x00007f8f8f7270d1: mov    -0x38(%rbp),%r14
  0x00007f8f8f7270d5: retq   
  0x00007f8f8f7270d6: push   %rdx
  0x00007f8f8f7270d7: jmpq   *%rax
  0x00007f8f8f7270d9: mov    -0x48(%rbp),%rsp
  0x00007f8f8f7270dd: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7270e5: mov    0x44c(%r15),%edx
  0x00007f8f8f7270ec: or     $0x2,%edx
  0x00007f8f8f7270ef: mov    %edx,0x44c(%r15)
  0x00007f8f8f7270f6: mov    0x8(%rbp),%rsi
  0x00007f8f8f7270fa: mov    %rsi,%rdi
  0x00007f8f8f7270fd: test   $0xf,%esp
  0x00007f8f8f727103: je     0x00007f8f8f72711b
  0x00007f8f8f727109: sub    $0x8,%rsp
  0x00007f8f8f72710d: callq  0x00007f8fad030460 = InterpreterRuntime::interpreter_contains(unsigned char*)
  0x00007f8f8f727112: add    $0x8,%rsp
  0x00007f8f8f727116: jmpq   0x00007f8f8f727120
  0x00007f8f8f72711b: callq  0x00007f8fad030460 = InterpreterRuntime::interpreter_contains(unsigned char*)
  0x00007f8f8f727120: test   %eax,%eax
  0x00007f8f8f727122: jne    0x00007f8f8f72753d
  0x00007f8f8f727128: mov    -0x18(%rbp),%rax
  0x00007f8f8f72712c: mov    0x8(%rax),%rax
  0x00007f8f8f727130: movzwl 0x34(%rax),%eax
  0x00007f8f8f727134: shl    $0x3,%eax
  0x00007f8f8f727137: mov    -0x38(%rbp),%r14
  0x00007f8f8f72713b: sub    %rax,%r14
  0x00007f8f8f72713e: add    $0x8,%r14
  0x00007f8f8f727142: mov    %r14,%rdx
  0x00007f8f8f727145: mov    %rax,%rsi
  0x00007f8f8f727148: mov    %r15,%rdi
  0x00007f8f8f72714b: test   $0xf,%esp
  0x00007f8f8f727151: je     0x00007f8f8f727169
  0x00007f8f8f727157: sub    $0x8,%rsp
  0x00007f8f8f72715b: callq  0x00007f8face62cf0 = Deoptimization::popframe_preserve_args(JavaThread*, int, void*)
  0x00007f8f8f727160: add    $0x8,%rsp
  0x00007f8f8f727164: jmpq   0x00007f8f8f72716e
  0x00007f8f8f727169: callq  0x00007f8face62cf0 = Deoptimization::popframe_preserve_args(JavaThread*, int, void*)
  0x00007f8f8f72716e: mov    0x3dd(%r15),%bl
  0x00007f8f8f727175: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f72717d: mov    -0x18(%rbp),%rcx
  0x00007f8f8f727181: mov    0x20(%rcx),%ecx
  0x00007f8f8f727184: test   $0x20,%ecx
  0x00007f8f8f72718a: je     0x00007f8f8f72728e
  0x00007f8f8f727190: test   $0xff,%bl
  0x00007f8f8f727193: jne    0x00007f8f8f727399
  0x00007f8f8f727199: lea    -0x58(%rbp),%rsi
  0x00007f8f8f72719d: mov    0x8(%rsi),%rax
  0x00007f8f8f7271a1: test   %rax,%rax
  0x00007f8f8f7271a4: jne    0x00007f8f8f7271af
  0x00007f8f8f7271aa: jmpq   0x00007f8f8f72728e
  0x00007f8f8f7271af: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7271b3: lea    (%rsi),%rax
  0x00007f8f8f7271b6: mov    0x8(%rsi),%rcx
  0x00007f8f8f7271ba: movq   $0x0,0x8(%rsi)
  0x00007f8f8f7271c2: mov    (%rcx),%rdx
  0x00007f8f8f7271c5: and    $0x7,%rdx
  0x00007f8f8f7271c9: cmp    $0x5,%rdx
  0x00007f8f8f7271cd: je     0x00007f8f8f72728a
  0x00007f8f8f7271d3: mov    (%rax),%rdx
  0x00007f8f8f7271d6: test   %rdx,%rdx
  0x00007f8f8f7271d9: je     0x00007f8f8f72728a
  0x00007f8f8f7271df: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f7271e4: je     0x00007f8f8f72728a
  0x00007f8f8f7271ea: mov    %rcx,0x8(%rsi)
  0x00007f8f8f7271ee: callq  0x00007f8f8f7271f8
  0x00007f8f8f7271f3: jmpq   0x00007f8f8f72728a
  0x00007f8f8f7271f8: lea    0x8(%rsp),%rax
  0x00007f8f8f7271fd: mov    %r13,-0x40(%rbp)
  0x00007f8f8f727201: mov    %r15,%rdi
  0x00007f8f8f727204: vzeroupper 
  0x00007f8f8f727207: mov    %rbp,0x330(%r15)
  0x00007f8f8f72720e: mov    %rax,0x320(%r15)
  0x00007f8f8f727215: test   $0xf,%esp
  0x00007f8f8f72721b: je     0x00007f8f8f727233
  0x00007f8f8f727221: sub    $0x8,%rsp
  0x00007f8f8f727225: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72722a: add    $0x8,%rsp
  0x00007f8f8f72722e: jmpq   0x00007f8f8f727238
  0x00007f8f8f727233: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f727238: movabs $0x0,%r10
  0x00007f8f8f727242: mov    %r10,0x320(%r15)
  0x00007f8f8f727249: movabs $0x0,%r10
  0x00007f8f8f727253: mov    %r10,0x330(%r15)
  0x00007f8f8f72725a: movabs $0x0,%r10
  0x00007f8f8f727264: mov    %r10,0x328(%r15)
  0x00007f8f8f72726b: vzeroupper 
  0x00007f8f8f72726e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f727276: je     0x00007f8f8f727281
  0x00007f8f8f72727c: jmpq   0x00007f8f8f71a780
  0x00007f8f8f727281: mov    -0x40(%rbp),%r13
  0x00007f8f8f727285: mov    -0x38(%rbp),%r14
  0x00007f8f8f727289: retq   
  0x00007f8f8f72728a: mov    -0x40(%rbp),%r13
  0x00007f8f8f72728e: mov    -0x48(%rbp),%rsi
  0x00007f8f8f727292: lea    -0x48(%rbp),%rbx
  0x00007f8f8f727296: jmpq   0x00007f8f8f727394
  0x00007f8f8f72729b: mov    %rsi,%rsi
  0x00007f8f8f72729e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7272a2: lea    (%rsi),%rax
  0x00007f8f8f7272a5: mov    0x8(%rsi),%rcx
  0x00007f8f8f7272a9: movq   $0x0,0x8(%rsi)
  0x00007f8f8f7272b1: mov    (%rcx),%rdx
  0x00007f8f8f7272b4: and    $0x7,%rdx
  0x00007f8f8f7272b8: cmp    $0x5,%rdx
  0x00007f8f8f7272bc: je     0x00007f8f8f727379
  0x00007f8f8f7272c2: mov    (%rax),%rdx
  0x00007f8f8f7272c5: test   %rdx,%rdx
  0x00007f8f8f7272c8: je     0x00007f8f8f727379
  0x00007f8f8f7272ce: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f7272d3: je     0x00007f8f8f727379
  0x00007f8f8f7272d9: mov    %rcx,0x8(%rsi)
  0x00007f8f8f7272dd: callq  0x00007f8f8f7272e7
  0x00007f8f8f7272e2: jmpq   0x00007f8f8f727379
  0x00007f8f8f7272e7: lea    0x8(%rsp),%rax
  0x00007f8f8f7272ec: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7272f0: mov    %r15,%rdi
  0x00007f8f8f7272f3: vzeroupper 
  0x00007f8f8f7272f6: mov    %rbp,0x330(%r15)
  0x00007f8f8f7272fd: mov    %rax,0x320(%r15)
  0x00007f8f8f727304: test   $0xf,%esp
  0x00007f8f8f72730a: je     0x00007f8f8f727322
  0x00007f8f8f727310: sub    $0x8,%rsp
  0x00007f8f8f727314: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f727319: add    $0x8,%rsp
  0x00007f8f8f72731d: jmpq   0x00007f8f8f727327
  0x00007f8f8f727322: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f727327: movabs $0x0,%r10
  0x00007f8f8f727331: mov    %r10,0x320(%r15)
  0x00007f8f8f727338: movabs $0x0,%r10
  0x00007f8f8f727342: mov    %r10,0x330(%r15)
  0x00007f8f8f727349: movabs $0x0,%r10
  0x00007f8f8f727353: mov    %r10,0x328(%r15)
  0x00007f8f8f72735a: vzeroupper 
  0x00007f8f8f72735d: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f727365: je     0x00007f8f8f727370
  0x00007f8f8f72736b: jmpq   0x00007f8f8f71a780
  0x00007f8f8f727370: mov    -0x40(%rbp),%r13
  0x00007f8f8f727374: mov    -0x38(%rbp),%r14
  0x00007f8f8f727378: retq   
  0x00007f8f8f727379: mov    -0x40(%rbp),%r13
  0x00007f8f8f72737d: jmpq   0x00007f8f8f72728e
  0x00007f8f8f727382: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f72738a: jne    0x00007f8f8f72729b
  0x00007f8f8f727390: add    $0x10,%rsi
  0x00007f8f8f727394: cmp    %rbx,%rsi
  0x00007f8f8f727397: jne    0x00007f8f8f727382
  0x00007f8f8f727399: cmpb   $0x0,0x1e48fde7(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f7273a0: je     0x00007f8f8f7273d0
  0x00007f8f8f7273a6: mov    -0x18(%rbp),%rsi
  0x00007f8f8f7273aa: mov    %r15,%rdi
  0x00007f8f8f7273ad: test   $0xf,%esp
  0x00007f8f8f7273b3: je     0x00007f8f8f7273cb
  0x00007f8f8f7273b9: sub    $0x8,%rsp
  0x00007f8f8f7273bd: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f7273c2: add    $0x8,%rsp
  0x00007f8f8f7273c6: jmpq   0x00007f8f8f7273d0
  0x00007f8f8f7273cb: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f7273d0: mov    -0x8(%rbp),%rbx
  0x00007f8f8f7273d4: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f7273df: je     0x00007f8f8f72752b
  0x00007f8f8f7273e5: cmp    0x418(%r15),%rbx
  0x00007f8f8f7273ec: jle    0x00007f8f8f72752b
  0x00007f8f8f7273f2: mov    %r15,%rdi
  0x00007f8f8f7273f5: test   $0xf,%esp
  0x00007f8f8f7273fb: je     0x00007f8f8f727413
  0x00007f8f8f727401: sub    $0x8,%rsp
  0x00007f8f8f727405: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f72740a: add    $0x8,%rsp
  0x00007f8f8f72740e: jmpq   0x00007f8f8f727418
  0x00007f8f8f727413: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f727418: callq  0x00007f8f8f727422
  0x00007f8f8f72741d: jmpq   0x00007f8f8f7274b4
  0x00007f8f8f727422: lea    0x8(%rsp),%rax
  0x00007f8f8f727427: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72742b: mov    %r15,%rdi
  0x00007f8f8f72742e: vzeroupper 
  0x00007f8f8f727431: mov    %rbp,0x330(%r15)
  0x00007f8f8f727438: mov    %rax,0x320(%r15)
  0x00007f8f8f72743f: test   $0xf,%esp
  0x00007f8f8f727445: je     0x00007f8f8f72745d
  0x00007f8f8f72744b: sub    $0x8,%rsp
  0x00007f8f8f72744f: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f727454: add    $0x8,%rsp
  0x00007f8f8f727458: jmpq   0x00007f8f8f727462
  0x00007f8f8f72745d: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f727462: movabs $0x0,%r10
  0x00007f8f8f72746c: mov    %r10,0x320(%r15)
  0x00007f8f8f727473: movabs $0x0,%r10
  0x00007f8f8f72747d: mov    %r10,0x330(%r15)
  0x00007f8f8f727484: movabs $0x0,%r10
  0x00007f8f8f72748e: mov    %r10,0x328(%r15)
  0x00007f8f8f727495: vzeroupper 
  0x00007f8f8f727498: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7274a0: je     0x00007f8f8f7274ab
  0x00007f8f8f7274a6: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7274ab: mov    -0x40(%rbp),%r13
  0x00007f8f8f7274af: mov    -0x38(%rbp),%r14
  0x00007f8f8f7274b3: retq   
  0x00007f8f8f7274b4: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f7274b9: sub    $0x80,%rsp
  0x00007f8f8f7274c0: mov    %rax,0x78(%rsp)
  0x00007f8f8f7274c5: mov    %rcx,0x70(%rsp)
  0x00007f8f8f7274ca: mov    %rdx,0x68(%rsp)
  0x00007f8f8f7274cf: mov    %rbx,0x60(%rsp)
  0x00007f8f8f7274d4: mov    %rbp,0x50(%rsp)
  0x00007f8f8f7274d9: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7274de: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7274e3: mov    %r8,0x38(%rsp)
  0x00007f8f8f7274e8: mov    %r9,0x30(%rsp)
  0x00007f8f8f7274ed: mov    %r10,0x28(%rsp)
  0x00007f8f8f7274f2: mov    %r11,0x20(%rsp)
  0x00007f8f8f7274f7: mov    %r12,0x18(%rsp)
  0x00007f8f8f7274fc: mov    %r13,0x10(%rsp)
  0x00007f8f8f727501: mov    %r14,0x8(%rsp)
  0x00007f8f8f727506: mov    %r15,(%rsp)
  0x00007f8f8f72750a: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f727514: movabs $0x7f8f8f7274b4,%rsi
  0x00007f8f8f72751e: mov    %rsp,%rdx
  0x00007f8f8f727521: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f727525: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f72752a: hlt    
  0x00007f8f8f72752b: leaveq 
  0x00007f8f8f72752c: pop    %rdx
  0x00007f8f8f72752d: mov    %rbx,%rsp
  0x00007f8f8f727530: movl   $0x4,0x44c(%r15)
  0x00007f8f8f72753b: jmpq   *%rdx
  0x00007f8f8f72753d: mov    0x3dd(%r15),%bl
  0x00007f8f8f727544: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f72754c: mov    -0x18(%rbp),%rcx
  0x00007f8f8f727550: mov    0x20(%rcx),%ecx
  0x00007f8f8f727553: test   $0x20,%ecx
  0x00007f8f8f727559: je     0x00007f8f8f72765d
  0x00007f8f8f72755f: test   $0xff,%bl
  0x00007f8f8f727562: jne    0x00007f8f8f727768
  0x00007f8f8f727568: lea    -0x58(%rbp),%rsi
  0x00007f8f8f72756c: mov    0x8(%rsi),%rax
  0x00007f8f8f727570: test   %rax,%rax
  0x00007f8f8f727573: jne    0x00007f8f8f72757e
  0x00007f8f8f727579: jmpq   0x00007f8f8f72765d
  0x00007f8f8f72757e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f727582: lea    (%rsi),%rax
  0x00007f8f8f727585: mov    0x8(%rsi),%rcx
  0x00007f8f8f727589: movq   $0x0,0x8(%rsi)
  0x00007f8f8f727591: mov    (%rcx),%rdx
  0x00007f8f8f727594: and    $0x7,%rdx
  0x00007f8f8f727598: cmp    $0x5,%rdx
  0x00007f8f8f72759c: je     0x00007f8f8f727659
  0x00007f8f8f7275a2: mov    (%rax),%rdx
  0x00007f8f8f7275a5: test   %rdx,%rdx
  0x00007f8f8f7275a8: je     0x00007f8f8f727659
  0x00007f8f8f7275ae: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f7275b3: je     0x00007f8f8f727659
  0x00007f8f8f7275b9: mov    %rcx,0x8(%rsi)
  0x00007f8f8f7275bd: callq  0x00007f8f8f7275c7
  0x00007f8f8f7275c2: jmpq   0x00007f8f8f727659
  0x00007f8f8f7275c7: lea    0x8(%rsp),%rax
  0x00007f8f8f7275cc: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7275d0: mov    %r15,%rdi
  0x00007f8f8f7275d3: vzeroupper 
  0x00007f8f8f7275d6: mov    %rbp,0x330(%r15)
  0x00007f8f8f7275dd: mov    %rax,0x320(%r15)
  0x00007f8f8f7275e4: test   $0xf,%esp
  0x00007f8f8f7275ea: je     0x00007f8f8f727602
  0x00007f8f8f7275f0: sub    $0x8,%rsp
  0x00007f8f8f7275f4: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7275f9: add    $0x8,%rsp
  0x00007f8f8f7275fd: jmpq   0x00007f8f8f727607
  0x00007f8f8f727602: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f727607: movabs $0x0,%r10
  0x00007f8f8f727611: mov    %r10,0x320(%r15)
  0x00007f8f8f727618: movabs $0x0,%r10
  0x00007f8f8f727622: mov    %r10,0x330(%r15)
  0x00007f8f8f727629: movabs $0x0,%r10
  0x00007f8f8f727633: mov    %r10,0x328(%r15)
  0x00007f8f8f72763a: vzeroupper 
  0x00007f8f8f72763d: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f727645: je     0x00007f8f8f727650
  0x00007f8f8f72764b: jmpq   0x00007f8f8f71a780
  0x00007f8f8f727650: mov    -0x40(%rbp),%r13
  0x00007f8f8f727654: mov    -0x38(%rbp),%r14
  0x00007f8f8f727658: retq   
  0x00007f8f8f727659: mov    -0x40(%rbp),%r13
  0x00007f8f8f72765d: mov    -0x48(%rbp),%rsi
  0x00007f8f8f727661: lea    -0x48(%rbp),%rbx
  0x00007f8f8f727665: jmpq   0x00007f8f8f727763
  0x00007f8f8f72766a: mov    %rsi,%rsi
  0x00007f8f8f72766d: mov    %r13,-0x40(%rbp)
  0x00007f8f8f727671: lea    (%rsi),%rax
  0x00007f8f8f727674: mov    0x8(%rsi),%rcx
  0x00007f8f8f727678: movq   $0x0,0x8(%rsi)
  0x00007f8f8f727680: mov    (%rcx),%rdx
  0x00007f8f8f727683: and    $0x7,%rdx
  0x00007f8f8f727687: cmp    $0x5,%rdx
  0x00007f8f8f72768b: je     0x00007f8f8f727748
  0x00007f8f8f727691: mov    (%rax),%rdx
  0x00007f8f8f727694: test   %rdx,%rdx
  0x00007f8f8f727697: je     0x00007f8f8f727748
  0x00007f8f8f72769d: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f7276a2: je     0x00007f8f8f727748
  0x00007f8f8f7276a8: mov    %rcx,0x8(%rsi)
  0x00007f8f8f7276ac: callq  0x00007f8f8f7276b6
  0x00007f8f8f7276b1: jmpq   0x00007f8f8f727748
  0x00007f8f8f7276b6: lea    0x8(%rsp),%rax
  0x00007f8f8f7276bb: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7276bf: mov    %r15,%rdi
  0x00007f8f8f7276c2: vzeroupper 
  0x00007f8f8f7276c5: mov    %rbp,0x330(%r15)
  0x00007f8f8f7276cc: mov    %rax,0x320(%r15)
  0x00007f8f8f7276d3: test   $0xf,%esp
  0x00007f8f8f7276d9: je     0x00007f8f8f7276f1
  0x00007f8f8f7276df: sub    $0x8,%rsp
  0x00007f8f8f7276e3: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7276e8: add    $0x8,%rsp
  0x00007f8f8f7276ec: jmpq   0x00007f8f8f7276f6
  0x00007f8f8f7276f1: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7276f6: movabs $0x0,%r10
  0x00007f8f8f727700: mov    %r10,0x320(%r15)
  0x00007f8f8f727707: movabs $0x0,%r10
  0x00007f8f8f727711: mov    %r10,0x330(%r15)
  0x00007f8f8f727718: movabs $0x0,%r10
  0x00007f8f8f727722: mov    %r10,0x328(%r15)
  0x00007f8f8f727729: vzeroupper 
  0x00007f8f8f72772c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f727734: je     0x00007f8f8f72773f
  0x00007f8f8f72773a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72773f: mov    -0x40(%rbp),%r13
  0x00007f8f8f727743: mov    -0x38(%rbp),%r14
  0x00007f8f8f727747: retq   
  0x00007f8f8f727748: mov    -0x40(%rbp),%r13
  0x00007f8f8f72774c: jmpq   0x00007f8f8f72765d
  0x00007f8f8f727751: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f727759: jne    0x00007f8f8f72766a
  0x00007f8f8f72775f: add    $0x10,%rsi
  0x00007f8f8f727763: cmp    %rbx,%rsi
  0x00007f8f8f727766: jne    0x00007f8f8f727751
  0x00007f8f8f727768: cmpb   $0x0,0x1e48fa18(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f72776f: je     0x00007f8f8f72779f
  0x00007f8f8f727775: mov    -0x18(%rbp),%rsi
  0x00007f8f8f727779: mov    %r15,%rdi
  0x00007f8f8f72777c: test   $0xf,%esp
  0x00007f8f8f727782: je     0x00007f8f8f72779a
  0x00007f8f8f727788: sub    $0x8,%rsp
  0x00007f8f8f72778c: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f727791: add    $0x8,%rsp
  0x00007f8f8f727795: jmpq   0x00007f8f8f72779f
  0x00007f8f8f72779a: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f72779f: mov    -0x8(%rbp),%rbx
  0x00007f8f8f7277a3: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f7277ae: je     0x00007f8f8f7278fa
  0x00007f8f8f7277b4: cmp    0x418(%r15),%rbx
  0x00007f8f8f7277bb: jle    0x00007f8f8f7278fa
  0x00007f8f8f7277c1: mov    %r15,%rdi
  0x00007f8f8f7277c4: test   $0xf,%esp
  0x00007f8f8f7277ca: je     0x00007f8f8f7277e2
  0x00007f8f8f7277d0: sub    $0x8,%rsp
  0x00007f8f8f7277d4: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f7277d9: add    $0x8,%rsp
  0x00007f8f8f7277dd: jmpq   0x00007f8f8f7277e7
  0x00007f8f8f7277e2: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f7277e7: callq  0x00007f8f8f7277f1
  0x00007f8f8f7277ec: jmpq   0x00007f8f8f727883
  0x00007f8f8f7277f1: lea    0x8(%rsp),%rax
  0x00007f8f8f7277f6: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7277fa: mov    %r15,%rdi
  0x00007f8f8f7277fd: vzeroupper 
  0x00007f8f8f727800: mov    %rbp,0x330(%r15)
  0x00007f8f8f727807: mov    %rax,0x320(%r15)
  0x00007f8f8f72780e: test   $0xf,%esp
  0x00007f8f8f727814: je     0x00007f8f8f72782c
  0x00007f8f8f72781a: sub    $0x8,%rsp
  0x00007f8f8f72781e: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f727823: add    $0x8,%rsp
  0x00007f8f8f727827: jmpq   0x00007f8f8f727831
  0x00007f8f8f72782c: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f727831: movabs $0x0,%r10
  0x00007f8f8f72783b: mov    %r10,0x320(%r15)
  0x00007f8f8f727842: movabs $0x0,%r10
  0x00007f8f8f72784c: mov    %r10,0x330(%r15)
  0x00007f8f8f727853: movabs $0x0,%r10
  0x00007f8f8f72785d: mov    %r10,0x328(%r15)
  0x00007f8f8f727864: vzeroupper 
  0x00007f8f8f727867: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72786f: je     0x00007f8f8f72787a
  0x00007f8f8f727875: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72787a: mov    -0x40(%rbp),%r13
  0x00007f8f8f72787e: mov    -0x38(%rbp),%r14
  0x00007f8f8f727882: retq   
  0x00007f8f8f727883: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f727888: sub    $0x80,%rsp
  0x00007f8f8f72788f: mov    %rax,0x78(%rsp)
  0x00007f8f8f727894: mov    %rcx,0x70(%rsp)
  0x00007f8f8f727899: mov    %rdx,0x68(%rsp)
  0x00007f8f8f72789e: mov    %rbx,0x60(%rsp)
  0x00007f8f8f7278a3: mov    %rbp,0x50(%rsp)
  0x00007f8f8f7278a8: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7278ad: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7278b2: mov    %r8,0x38(%rsp)
  0x00007f8f8f7278b7: mov    %r9,0x30(%rsp)
  0x00007f8f8f7278bc: mov    %r10,0x28(%rsp)
  0x00007f8f8f7278c1: mov    %r11,0x20(%rsp)
  0x00007f8f8f7278c6: mov    %r12,0x18(%rsp)
  0x00007f8f8f7278cb: mov    %r13,0x10(%rsp)
  0x00007f8f8f7278d0: mov    %r14,0x8(%rsp)
  0x00007f8f8f7278d5: mov    %r15,(%rsp)
  0x00007f8f8f7278d9: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f7278e3: movabs $0x7f8f8f727883,%rsi
  0x00007f8f8f7278ed: mov    %rsp,%rdx
  0x00007f8f8f7278f0: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f7278f4: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f7278f9: hlt    
  0x00007f8f8f7278fa: leaveq 
  0x00007f8f8f7278fb: pop    %rdx
  0x00007f8f8f7278fc: mov    %rbx,%rsp
  0x00007f8f8f7278ff: mov    %rsp,%rsi
  0x00007f8f8f727902: mov    -0x10(%rbp),%rdx
  0x00007f8f8f727906: vzeroupper 
  0x00007f8f8f727909: mov    %rbp,0x330(%r15)
  0x00007f8f8f727910: movabs $0x7f8f8f727906,%r10
  0x00007f8f8f72791a: mov    %r10,0x328(%r15)
  0x00007f8f8f727921: mov    %rsp,0x320(%r15)
  0x00007f8f8f727928: mov    %r15,%rdi
  0x00007f8f8f72792b: test   $0xf,%esp
  0x00007f8f8f727931: je     0x00007f8f8f727949
  0x00007f8f8f727937: sub    $0x8,%rsp
  0x00007f8f8f72793b: callq  0x00007f8fad030d00 = InterpreterRuntime::popframe_move_outgoing_args(JavaThread*, void*, void*)
  0x00007f8f8f727940: add    $0x8,%rsp
  0x00007f8f8f727944: jmpq   0x00007f8f8f72794e
  0x00007f8f8f727949: callq  0x00007f8fad030d00 = InterpreterRuntime::popframe_move_outgoing_args(JavaThread*, void*, void*)
  0x00007f8f8f72794e: movabs $0x0,%r10
  0x00007f8f8f727958: mov    %r10,0x320(%r15)
  0x00007f8f8f72795f: movabs $0x0,%r10
  0x00007f8f8f727969: mov    %r10,0x330(%r15)
  0x00007f8f8f727970: movabs $0x0,%r10
  0x00007f8f8f72797a: mov    %r10,0x328(%r15)
  0x00007f8f8f727981: vzeroupper 
  0x00007f8f8f727984: mov    -0x10(%rbp),%rsp
  0x00007f8f8f727988: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f727990: mov    -0x40(%rbp),%r13
  0x00007f8f8f727994: mov    -0x38(%rbp),%r14
  0x00007f8f8f727998: push   %rax
  0x00007f8f8f727999: push   %rbx
  0x00007f8f8f72799a: mov    -0x18(%rbp),%rbx
  0x00007f8f8f72799e: mov    0x10(%rbx),%rax
  0x00007f8f8f7279a2: test   %rax,%rax
  0x00007f8f8f7279a5: je     0x00007f8f8f7279e2
  0x00007f8f8f7279ab: mov    %r13,%rsi
  0x00007f8f8f7279ae: mov    %rbx,%rdi
  0x00007f8f8f7279b1: test   $0xf,%esp
  0x00007f8f8f7279b7: je     0x00007f8f8f7279cf
  0x00007f8f8f7279bd: sub    $0x8,%rsp
  0x00007f8f8f7279c1: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7279c6: add    $0x8,%rsp
  0x00007f8f8f7279ca: jmpq   0x00007f8f8f7279d4
  0x00007f8f8f7279cf: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7279d4: mov    0x10(%rbx),%rbx
  0x00007f8f8f7279d8: add    $0x138,%rbx
  0x00007f8f8f7279df: add    %rbx,%rax
  0x00007f8f8f7279e2: mov    %rax,-0x28(%rbp)
  0x00007f8f8f7279e6: pop    %rbx
  0x00007f8f8f7279e7: pop    %rax
  0x00007f8f8f7279e8: movl   $0x0,0x44c(%r15)
  0x00007f8f8f7279f3: cmpb   $0xb8,0x0(%r13)
  0x00007f8f8f7279f8: jne    0x00007f8f8f727acb
  0x00007f8f8f7279fe: mov    -0x18(%rbp),%rdx
  0x00007f8f8f727a02: mov    (%r14),%rax
  0x00007f8f8f727a05: callq  0x00007f8f8f727a0f
  0x00007f8f8f727a0a: jmpq   0x00007f8f8f727abf
  0x00007f8f8f727a0f: mov    %r13,%rcx
  0x00007f8f8f727a12: mov    %rax,%rsi
  0x00007f8f8f727a15: lea    0x8(%rsp),%rax
  0x00007f8f8f727a1a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f727a1e: mov    %r15,%rdi
  0x00007f8f8f727a21: vzeroupper 
  0x00007f8f8f727a24: mov    %rbp,0x330(%r15)
  0x00007f8f8f727a2b: mov    %rax,0x320(%r15)
  0x00007f8f8f727a32: test   $0xf,%esp
  0x00007f8f8f727a38: je     0x00007f8f8f727a50
  0x00007f8f8f727a3e: sub    $0x8,%rsp
  0x00007f8f8f727a42: callq  0x00007f8fad031120 = InterpreterRuntime::member_name_arg_or_null(JavaThread*, unsigned char*, Method*, unsigned char*)
  0x00007f8f8f727a47: add    $0x8,%rsp
  0x00007f8f8f727a4b: jmpq   0x00007f8f8f727a55
  0x00007f8f8f727a50: callq  0x00007f8fad031120 = InterpreterRuntime::member_name_arg_or_null(JavaThread*, unsigned char*, Method*, unsigned char*)
  0x00007f8f8f727a55: movabs $0x0,%r10
  0x00007f8f8f727a5f: mov    %r10,0x320(%r15)
  0x00007f8f8f727a66: movabs $0x0,%r10
  0x00007f8f8f727a70: mov    %r10,0x330(%r15)
  0x00007f8f8f727a77: movabs $0x0,%r10
  0x00007f8f8f727a81: mov    %r10,0x328(%r15)
  0x00007f8f8f727a88: vzeroupper 
  0x00007f8f8f727a8b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f727a93: je     0x00007f8f8f727a9e
  0x00007f8f8f727a99: jmpq   0x00007f8f8f71a780
  0x00007f8f8f727a9e: mov    0x380(%r15),%rax
  0x00007f8f8f727aa5: movabs $0x0,%r10
  0x00007f8f8f727aaf: mov    %r10,0x380(%r15)
  0x00007f8f8f727ab6: mov    -0x40(%rbp),%r13
  0x00007f8f8f727aba: mov    -0x38(%rbp),%r14
  0x00007f8f8f727abe: retq   
  0x00007f8f8f727abf: test   %rax,%rax
  0x00007f8f8f727ac2: je     0x00007f8f8f727acb
  0x00007f8f8f727ac8: mov    %rax,(%rbx)
  0x00007f8f8f727acb: movzbl 0x0(%r13),%ebx
  0x00007f8f8f727ad0: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f727ada: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f727ade: pop    %rax
  0x00007f8f8f727adf: mov    %rax,0x380(%r15)
  0x00007f8f8f727ae6: mov    0x3dd(%r15),%bl
  0x00007f8f8f727aed: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f727af5: mov    -0x18(%rbp),%rcx
  0x00007f8f8f727af9: mov    0x20(%rcx),%ecx
  0x00007f8f8f727afc: test   $0x20,%ecx
  0x00007f8f8f727b02: je     0x00007f8f8f727ca2
  0x00007f8f8f727b08: test   $0xff,%bl
  0x00007f8f8f727b0b: jne    0x00007f8f8f727e49
  0x00007f8f8f727b11: lea    -0x58(%rbp),%rsi
  0x00007f8f8f727b15: mov    0x8(%rsi),%rax
  0x00007f8f8f727b19: test   %rax,%rax
  0x00007f8f8f727b1c: jne    0x00007f8f8f727bc3
  0x00007f8f8f727b22: callq  0x00007f8f8f727b2c
  0x00007f8f8f727b27: jmpq   0x00007f8f8f727bbe
  0x00007f8f8f727b2c: lea    0x8(%rsp),%rax
  0x00007f8f8f727b31: mov    %r13,-0x40(%rbp)
  0x00007f8f8f727b35: mov    %r15,%rdi
  0x00007f8f8f727b38: vzeroupper 
  0x00007f8f8f727b3b: mov    %rbp,0x330(%r15)
  0x00007f8f8f727b42: mov    %rax,0x320(%r15)
  0x00007f8f8f727b49: test   $0xf,%esp
  0x00007f8f8f727b4f: je     0x00007f8f8f727b67
  0x00007f8f8f727b55: sub    $0x8,%rsp
  0x00007f8f8f727b59: callq  0x00007f8fad02c8b0 = InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f727b5e: add    $0x8,%rsp
  0x00007f8f8f727b62: jmpq   0x00007f8f8f727b6c
  0x00007f8f8f727b67: callq  0x00007f8fad02c8b0 = InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f727b6c: movabs $0x0,%r10
  0x00007f8f8f727b76: mov    %r10,0x320(%r15)
  0x00007f8f8f727b7d: movabs $0x0,%r10
  0x00007f8f8f727b87: mov    %r10,0x330(%r15)
  0x00007f8f8f727b8e: movabs $0x0,%r10
  0x00007f8f8f727b98: mov    %r10,0x328(%r15)
  0x00007f8f8f727b9f: vzeroupper 
  0x00007f8f8f727ba2: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f727baa: je     0x00007f8f8f727bb5
  0x00007f8f8f727bb0: jmpq   0x00007f8f8f71a780
  0x00007f8f8f727bb5: mov    -0x40(%rbp),%r13
  0x00007f8f8f727bb9: mov    -0x38(%rbp),%r14
  0x00007f8f8f727bbd: retq   
  0x00007f8f8f727bbe: jmpq   0x00007f8f8f727ca2
  0x00007f8f8f727bc3: mov    %r13,-0x40(%rbp)
  0x00007f8f8f727bc7: lea    (%rsi),%rax
  0x00007f8f8f727bca: mov    0x8(%rsi),%rcx
  0x00007f8f8f727bce: movq   $0x0,0x8(%rsi)
  0x00007f8f8f727bd6: mov    (%rcx),%rdx
  0x00007f8f8f727bd9: and    $0x7,%rdx
  0x00007f8f8f727bdd: cmp    $0x5,%rdx
  0x00007f8f8f727be1: je     0x00007f8f8f727c9e
  0x00007f8f8f727be7: mov    (%rax),%rdx
  0x00007f8f8f727bea: test   %rdx,%rdx
  0x00007f8f8f727bed: je     0x00007f8f8f727c9e
  0x00007f8f8f727bf3: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f727bf8: je     0x00007f8f8f727c9e
  0x00007f8f8f727bfe: mov    %rcx,0x8(%rsi)
  0x00007f8f8f727c02: callq  0x00007f8f8f727c0c
  0x00007f8f8f727c07: jmpq   0x00007f8f8f727c9e
  0x00007f8f8f727c0c: lea    0x8(%rsp),%rax
  0x00007f8f8f727c11: mov    %r13,-0x40(%rbp)
  0x00007f8f8f727c15: mov    %r15,%rdi
  0x00007f8f8f727c18: vzeroupper 
  0x00007f8f8f727c1b: mov    %rbp,0x330(%r15)
  0x00007f8f8f727c22: mov    %rax,0x320(%r15)
  0x00007f8f8f727c29: test   $0xf,%esp
  0x00007f8f8f727c2f: je     0x00007f8f8f727c47
  0x00007f8f8f727c35: sub    $0x8,%rsp
  0x00007f8f8f727c39: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f727c3e: add    $0x8,%rsp
  0x00007f8f8f727c42: jmpq   0x00007f8f8f727c4c
  0x00007f8f8f727c47: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f727c4c: movabs $0x0,%r10
  0x00007f8f8f727c56: mov    %r10,0x320(%r15)
  0x00007f8f8f727c5d: movabs $0x0,%r10
  0x00007f8f8f727c67: mov    %r10,0x330(%r15)
  0x00007f8f8f727c6e: movabs $0x0,%r10
  0x00007f8f8f727c78: mov    %r10,0x328(%r15)
  0x00007f8f8f727c7f: vzeroupper 
  0x00007f8f8f727c82: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f727c8a: je     0x00007f8f8f727c95
  0x00007f8f8f727c90: jmpq   0x00007f8f8f71a780
  0x00007f8f8f727c95: mov    -0x40(%rbp),%r13
  0x00007f8f8f727c99: mov    -0x38(%rbp),%r14
  0x00007f8f8f727c9d: retq   
  0x00007f8f8f727c9e: mov    -0x40(%rbp),%r13
  0x00007f8f8f727ca2: mov    -0x48(%rbp),%rsi
  0x00007f8f8f727ca6: lea    -0x48(%rbp),%rbx
  0x00007f8f8f727caa: jmpq   0x00007f8f8f727e44
  0x00007f8f8f727caf: mov    %rsi,%rsi
  0x00007f8f8f727cb2: mov    %r13,-0x40(%rbp)
  0x00007f8f8f727cb6: lea    (%rsi),%rax
  0x00007f8f8f727cb9: mov    0x8(%rsi),%rcx
  0x00007f8f8f727cbd: movq   $0x0,0x8(%rsi)
  0x00007f8f8f727cc5: mov    (%rcx),%rdx
  0x00007f8f8f727cc8: and    $0x7,%rdx
  0x00007f8f8f727ccc: cmp    $0x5,%rdx
  0x00007f8f8f727cd0: je     0x00007f8f8f727d8d
  0x00007f8f8f727cd6: mov    (%rax),%rdx
  0x00007f8f8f727cd9: test   %rdx,%rdx
  0x00007f8f8f727cdc: je     0x00007f8f8f727d8d
  0x00007f8f8f727ce2: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f727ce7: je     0x00007f8f8f727d8d
  0x00007f8f8f727ced: mov    %rcx,0x8(%rsi)
  0x00007f8f8f727cf1: callq  0x00007f8f8f727cfb
  0x00007f8f8f727cf6: jmpq   0x00007f8f8f727d8d
  0x00007f8f8f727cfb: lea    0x8(%rsp),%rax
  0x00007f8f8f727d00: mov    %r13,-0x40(%rbp)
  0x00007f8f8f727d04: mov    %r15,%rdi
  0x00007f8f8f727d07: vzeroupper 
  0x00007f8f8f727d0a: mov    %rbp,0x330(%r15)
  0x00007f8f8f727d11: mov    %rax,0x320(%r15)
  0x00007f8f8f727d18: test   $0xf,%esp
  0x00007f8f8f727d1e: je     0x00007f8f8f727d36
  0x00007f8f8f727d24: sub    $0x8,%rsp
  0x00007f8f8f727d28: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f727d2d: add    $0x8,%rsp
  0x00007f8f8f727d31: jmpq   0x00007f8f8f727d3b
  0x00007f8f8f727d36: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f727d3b: movabs $0x0,%r10
  0x00007f8f8f727d45: mov    %r10,0x320(%r15)
  0x00007f8f8f727d4c: movabs $0x0,%r10
  0x00007f8f8f727d56: mov    %r10,0x330(%r15)
  0x00007f8f8f727d5d: movabs $0x0,%r10
  0x00007f8f8f727d67: mov    %r10,0x328(%r15)
  0x00007f8f8f727d6e: vzeroupper 
  0x00007f8f8f727d71: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f727d79: je     0x00007f8f8f727d84
  0x00007f8f8f727d7f: jmpq   0x00007f8f8f71a780
  0x00007f8f8f727d84: mov    -0x40(%rbp),%r13
  0x00007f8f8f727d88: mov    -0x38(%rbp),%r14
  0x00007f8f8f727d8c: retq   
  0x00007f8f8f727d8d: mov    -0x40(%rbp),%r13
  0x00007f8f8f727d91: callq  0x00007f8f8f727d9b
  0x00007f8f8f727d96: jmpq   0x00007f8f8f727e2d
  0x00007f8f8f727d9b: lea    0x8(%rsp),%rax
  0x00007f8f8f727da0: mov    %r13,-0x40(%rbp)
  0x00007f8f8f727da4: mov    %r15,%rdi
  0x00007f8f8f727da7: vzeroupper 
  0x00007f8f8f727daa: mov    %rbp,0x330(%r15)
  0x00007f8f8f727db1: mov    %rax,0x320(%r15)
  0x00007f8f8f727db8: test   $0xf,%esp
  0x00007f8f8f727dbe: je     0x00007f8f8f727dd6
  0x00007f8f8f727dc4: sub    $0x8,%rsp
  0x00007f8f8f727dc8: callq  0x00007f8fad02c8b0 = InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f727dcd: add    $0x8,%rsp
  0x00007f8f8f727dd1: jmpq   0x00007f8f8f727ddb
  0x00007f8f8f727dd6: callq  0x00007f8fad02c8b0 = InterpreterRuntime::new_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f727ddb: movabs $0x0,%r10
  0x00007f8f8f727de5: mov    %r10,0x320(%r15)
  0x00007f8f8f727dec: movabs $0x0,%r10
  0x00007f8f8f727df6: mov    %r10,0x330(%r15)
  0x00007f8f8f727dfd: movabs $0x0,%r10
  0x00007f8f8f727e07: mov    %r10,0x328(%r15)
  0x00007f8f8f727e0e: vzeroupper 
  0x00007f8f8f727e11: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f727e19: je     0x00007f8f8f727e24
  0x00007f8f8f727e1f: jmpq   0x00007f8f8f71a780
  0x00007f8f8f727e24: mov    -0x40(%rbp),%r13
  0x00007f8f8f727e28: mov    -0x38(%rbp),%r14
  0x00007f8f8f727e2c: retq   
  0x00007f8f8f727e2d: jmpq   0x00007f8f8f727ca2
  0x00007f8f8f727e32: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f727e3a: jne    0x00007f8f8f727caf
  0x00007f8f8f727e40: add    $0x10,%rsi
  0x00007f8f8f727e44: cmp    %rbx,%rsi
  0x00007f8f8f727e47: jne    0x00007f8f8f727e32
  0x00007f8f8f727e49: cmpb   $0x0,0x1e48f337(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f727e50: je     0x00007f8f8f727e80
  0x00007f8f8f727e56: mov    -0x18(%rbp),%rsi
  0x00007f8f8f727e5a: mov    %r15,%rdi
  0x00007f8f8f727e5d: test   $0xf,%esp
  0x00007f8f8f727e63: je     0x00007f8f8f727e7b
  0x00007f8f8f727e69: sub    $0x8,%rsp
  0x00007f8f8f727e6d: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f727e72: add    $0x8,%rsp
  0x00007f8f8f727e76: jmpq   0x00007f8f8f727e80
  0x00007f8f8f727e7b: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f727e80: mov    -0x8(%rbp),%rbx
  0x00007f8f8f727e84: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f727e8f: je     0x00007f8f8f727fdb
  0x00007f8f8f727e95: cmp    0x418(%r15),%rbx
  0x00007f8f8f727e9c: jle    0x00007f8f8f727fdb
  0x00007f8f8f727ea2: mov    %r15,%rdi
  0x00007f8f8f727ea5: test   $0xf,%esp
  0x00007f8f8f727eab: je     0x00007f8f8f727ec3
  0x00007f8f8f727eb1: sub    $0x8,%rsp
  0x00007f8f8f727eb5: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f727eba: add    $0x8,%rsp
  0x00007f8f8f727ebe: jmpq   0x00007f8f8f727ec8
  0x00007f8f8f727ec3: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f727ec8: callq  0x00007f8f8f727ed2
  0x00007f8f8f727ecd: jmpq   0x00007f8f8f727f64
  0x00007f8f8f727ed2: lea    0x8(%rsp),%rax
  0x00007f8f8f727ed7: mov    %r13,-0x40(%rbp)
  0x00007f8f8f727edb: mov    %r15,%rdi
  0x00007f8f8f727ede: vzeroupper 
  0x00007f8f8f727ee1: mov    %rbp,0x330(%r15)
  0x00007f8f8f727ee8: mov    %rax,0x320(%r15)
  0x00007f8f8f727eef: test   $0xf,%esp
  0x00007f8f8f727ef5: je     0x00007f8f8f727f0d
  0x00007f8f8f727efb: sub    $0x8,%rsp
  0x00007f8f8f727eff: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f727f04: add    $0x8,%rsp
  0x00007f8f8f727f08: jmpq   0x00007f8f8f727f12
  0x00007f8f8f727f0d: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f727f12: movabs $0x0,%r10
  0x00007f8f8f727f1c: mov    %r10,0x320(%r15)
  0x00007f8f8f727f23: movabs $0x0,%r10
  0x00007f8f8f727f2d: mov    %r10,0x330(%r15)
  0x00007f8f8f727f34: movabs $0x0,%r10
  0x00007f8f8f727f3e: mov    %r10,0x328(%r15)
  0x00007f8f8f727f45: vzeroupper 
  0x00007f8f8f727f48: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f727f50: je     0x00007f8f8f727f5b
  0x00007f8f8f727f56: jmpq   0x00007f8f8f71a780
  0x00007f8f8f727f5b: mov    -0x40(%rbp),%r13
  0x00007f8f8f727f5f: mov    -0x38(%rbp),%r14
  0x00007f8f8f727f63: retq   
  0x00007f8f8f727f64: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f727f69: sub    $0x80,%rsp
  0x00007f8f8f727f70: mov    %rax,0x78(%rsp)
  0x00007f8f8f727f75: mov    %rcx,0x70(%rsp)
  0x00007f8f8f727f7a: mov    %rdx,0x68(%rsp)
  0x00007f8f8f727f7f: mov    %rbx,0x60(%rsp)
  0x00007f8f8f727f84: mov    %rbp,0x50(%rsp)
  0x00007f8f8f727f89: mov    %rsi,0x48(%rsp)
  0x00007f8f8f727f8e: mov    %rdi,0x40(%rsp)
  0x00007f8f8f727f93: mov    %r8,0x38(%rsp)
  0x00007f8f8f727f98: mov    %r9,0x30(%rsp)
  0x00007f8f8f727f9d: mov    %r10,0x28(%rsp)
  0x00007f8f8f727fa2: mov    %r11,0x20(%rsp)
  0x00007f8f8f727fa7: mov    %r12,0x18(%rsp)
  0x00007f8f8f727fac: mov    %r13,0x10(%rsp)
  0x00007f8f8f727fb1: mov    %r14,0x8(%rsp)
  0x00007f8f8f727fb6: mov    %r15,(%rsp)
  0x00007f8f8f727fba: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f727fc4: movabs $0x7f8f8f727f64,%rsi
  0x00007f8f8f727fce: mov    %rsp,%rdx
  0x00007f8f8f727fd1: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f727fd5: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f727fda: hlt    
  0x00007f8f8f727fdb: leaveq 
  0x00007f8f8f727fdc: pop    %rdx
  0x00007f8f8f727fdd: mov    %rbx,%rsp
  0x00007f8f8f727fe0: mov    0x380(%r15),%rax
  0x00007f8f8f727fe7: movabs $0x0,%r10
  0x00007f8f8f727ff1: mov    %r10,0x380(%r15)
  0x00007f8f8f727ff8: push   %rax
  0x00007f8f8f727ff9: push   %rdx
  0x00007f8f8f727ffa: mov    %rdx,%rsi
  0x00007f8f8f727ffd: mov    %r15,%rdi
  0x00007f8f8f728000: test   $0xf,%esp
  0x00007f8f8f728006: je     0x00007f8f8f72801e
  0x00007f8f8f72800c: sub    $0x8,%rsp
  0x00007f8f8f728010: callq  0x00007f8fad48bec0 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x00007f8f8f728015: add    $0x8,%rsp
  0x00007f8f8f728019: jmpq   0x00007f8f8f728023
  0x00007f8f8f72801e: callq  0x00007f8fad48bec0 = SharedRuntime::exception_handler_for_return_address(JavaThread*, unsigned char*)
  0x00007f8f8f728023: mov    %rax,%rbx
  0x00007f8f8f728026: pop    %rdx
  0x00007f8f8f728027: pop    %rax
  0x00007f8f8f728028: jmpq   *%rbx
  0x00007f8f8f72802a: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f728030: add    %al,(%rax)
  0x00007f8f8f728032: add    %al,(%rax)
  0x00007f8f8f728034: add    %al,(%rax)
  0x00007f8f8f728036: add    %al,(%rax)
  0x00007f8f8f728038: add    %al,(%rax)
  0x00007f8f8f72803a: add    %al,(%rax)
  0x00007f8f8f72803c: add    %al,(%rax)
  0x00007f8f8f72803e: add    %al,(%rax)

----------------------------------------------------------------------
throw exception entrypoints  [0x00007f8f8f728060, 0x00007f8f8f728500]  1184 bytes

  0x00007f8f8f728060: mov    -0x48(%rbp),%rsp
  0x00007f8f8f728064: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f72806c: callq  0x00007f8f8f728076
  0x00007f8f8f728071: jmpq   0x00007f8f8f72810b
  0x00007f8f8f728076: mov    %rbx,%rdx
  0x00007f8f8f728079: lea    0x8(%rsp),%rax
  0x00007f8f8f72807e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f728082: mov    %r15,%rdi
  0x00007f8f8f728085: vzeroupper 
  0x00007f8f8f728088: mov    %rbp,0x330(%r15)
  0x00007f8f8f72808f: mov    %rax,0x320(%r15)
  0x00007f8f8f728096: test   $0xf,%esp
  0x00007f8f8f72809c: je     0x00007f8f8f7280b4
  0x00007f8f8f7280a2: sub    $0x8,%rsp
  0x00007f8f8f7280a6: callq  0x00007f8fad029760 = InterpreterRuntime::throw_ArrayIndexOutOfBoundsException(JavaThread*, arrayOopDesc*, int)
  0x00007f8f8f7280ab: add    $0x8,%rsp
  0x00007f8f8f7280af: jmpq   0x00007f8f8f7280b9
  0x00007f8f8f7280b4: callq  0x00007f8fad029760 = InterpreterRuntime::throw_ArrayIndexOutOfBoundsException(JavaThread*, arrayOopDesc*, int)
  0x00007f8f8f7280b9: movabs $0x0,%r10
  0x00007f8f8f7280c3: mov    %r10,0x320(%r15)
  0x00007f8f8f7280ca: movabs $0x0,%r10
  0x00007f8f8f7280d4: mov    %r10,0x330(%r15)
  0x00007f8f8f7280db: movabs $0x0,%r10
  0x00007f8f8f7280e5: mov    %r10,0x328(%r15)
  0x00007f8f8f7280ec: vzeroupper 
  0x00007f8f8f7280ef: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7280f7: je     0x00007f8f8f728102
  0x00007f8f8f7280fd: jmpq   0x00007f8f8f71a780
  0x00007f8f8f728102: mov    -0x40(%rbp),%r13
  0x00007f8f8f728106: mov    -0x38(%rbp),%r14
  0x00007f8f8f72810a: retq   
  0x00007f8f8f72810b: pop    %rdx
  0x00007f8f8f72810c: mov    -0x48(%rbp),%rsp
  0x00007f8f8f728110: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f728118: movabs $0x7f8fad6abb79,%rsi
  0x00007f8f8f728122: callq  0x00007f8f8f72812c
  0x00007f8f8f728127: jmpq   0x00007f8f8f7281d6
  0x00007f8f8f72812c: lea    0x8(%rsp),%rax
  0x00007f8f8f728131: mov    %r13,-0x40(%rbp)
  0x00007f8f8f728135: mov    %r15,%rdi
  0x00007f8f8f728138: vzeroupper 
  0x00007f8f8f72813b: mov    %rbp,0x330(%r15)
  0x00007f8f8f728142: mov    %rax,0x320(%r15)
  0x00007f8f8f728149: test   $0xf,%esp
  0x00007f8f8f72814f: je     0x00007f8f8f728167
  0x00007f8f8f728155: sub    $0x8,%rsp
  0x00007f8f8f728159: callq  0x00007f8fad029460 = InterpreterRuntime::create_klass_exception(JavaThread*, char*, oopDesc*)
  0x00007f8f8f72815e: add    $0x8,%rsp
  0x00007f8f8f728162: jmpq   0x00007f8f8f72816c
  0x00007f8f8f728167: callq  0x00007f8fad029460 = InterpreterRuntime::create_klass_exception(JavaThread*, char*, oopDesc*)
  0x00007f8f8f72816c: movabs $0x0,%r10
  0x00007f8f8f728176: mov    %r10,0x320(%r15)
  0x00007f8f8f72817d: movabs $0x0,%r10
  0x00007f8f8f728187: mov    %r10,0x330(%r15)
  0x00007f8f8f72818e: movabs $0x0,%r10
  0x00007f8f8f728198: mov    %r10,0x328(%r15)
  0x00007f8f8f72819f: vzeroupper 
  0x00007f8f8f7281a2: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7281aa: je     0x00007f8f8f7281b5
  0x00007f8f8f7281b0: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7281b5: mov    0x380(%r15),%rax
  0x00007f8f8f7281bc: movabs $0x0,%r10
  0x00007f8f8f7281c6: mov    %r10,0x380(%r15)
  0x00007f8f8f7281cd: mov    -0x40(%rbp),%r13
  0x00007f8f8f7281d1: mov    -0x38(%rbp),%r14
  0x00007f8f8f7281d5: retq   
  0x00007f8f8f7281d6: jmpq   0x00007f8f8f727013
  0x00007f8f8f7281db: mov    -0x48(%rbp),%rsp
  0x00007f8f8f7281df: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7281e7: movabs $0x7f8fad6abb97,%rsi
  0x00007f8f8f7281f1: movabs $0x7f8fad64311c,%rdx
  0x00007f8f8f7281fb: callq  0x00007f8f8f728205
  0x00007f8f8f728200: jmpq   0x00007f8f8f7282af
  0x00007f8f8f728205: lea    0x8(%rsp),%rax
  0x00007f8f8f72820a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72820e: mov    %r15,%rdi
  0x00007f8f8f728211: vzeroupper 
  0x00007f8f8f728214: mov    %rbp,0x330(%r15)
  0x00007f8f8f72821b: mov    %rax,0x320(%r15)
  0x00007f8f8f728222: test   $0xf,%esp
  0x00007f8f8f728228: je     0x00007f8f8f728240
  0x00007f8f8f72822e: sub    $0x8,%rsp
  0x00007f8f8f728232: callq  0x00007f8fad0291d0 = InterpreterRuntime::create_exception(JavaThread*, char*, char*)
  0x00007f8f8f728237: add    $0x8,%rsp
  0x00007f8f8f72823b: jmpq   0x00007f8f8f728245
  0x00007f8f8f728240: callq  0x00007f8fad0291d0 = InterpreterRuntime::create_exception(JavaThread*, char*, char*)
  0x00007f8f8f728245: movabs $0x0,%r10
  0x00007f8f8f72824f: mov    %r10,0x320(%r15)
  0x00007f8f8f728256: movabs $0x0,%r10
  0x00007f8f8f728260: mov    %r10,0x330(%r15)
  0x00007f8f8f728267: movabs $0x0,%r10
  0x00007f8f8f728271: mov    %r10,0x328(%r15)
  0x00007f8f8f728278: vzeroupper 
  0x00007f8f8f72827b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f728283: je     0x00007f8f8f72828e
  0x00007f8f8f728289: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72828e: mov    0x380(%r15),%rax
  0x00007f8f8f728295: movabs $0x0,%r10
  0x00007f8f8f72829f: mov    %r10,0x380(%r15)
  0x00007f8f8f7282a6: mov    -0x40(%rbp),%r13
  0x00007f8f8f7282aa: mov    -0x38(%rbp),%r14
  0x00007f8f8f7282ae: retq   
  0x00007f8f8f7282af: jmpq   0x00007f8f8f727013
  0x00007f8f8f7282b4: pop    %rsi
  0x00007f8f8f7282b5: mov    -0x48(%rbp),%rsp
  0x00007f8f8f7282b9: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7282c1: callq  0x00007f8f8f7282cb
  0x00007f8f8f7282c6: jmpq   0x00007f8f8f72835d
  0x00007f8f8f7282cb: lea    0x8(%rsp),%rax
  0x00007f8f8f7282d0: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7282d4: mov    %r15,%rdi
  0x00007f8f8f7282d7: vzeroupper 
  0x00007f8f8f7282da: mov    %rbp,0x330(%r15)
  0x00007f8f8f7282e1: mov    %rax,0x320(%r15)
  0x00007f8f8f7282e8: test   $0xf,%esp
  0x00007f8f8f7282ee: je     0x00007f8f8f728306
  0x00007f8f8f7282f4: sub    $0x8,%rsp
  0x00007f8f8f7282f8: callq  0x00007f8fad029a50 = InterpreterRuntime::throw_ClassCastException(JavaThread*, oopDesc*)
  0x00007f8f8f7282fd: add    $0x8,%rsp
  0x00007f8f8f728301: jmpq   0x00007f8f8f72830b
  0x00007f8f8f728306: callq  0x00007f8fad029a50 = InterpreterRuntime::throw_ClassCastException(JavaThread*, oopDesc*)
  0x00007f8f8f72830b: movabs $0x0,%r10
  0x00007f8f8f728315: mov    %r10,0x320(%r15)
  0x00007f8f8f72831c: movabs $0x0,%r10
  0x00007f8f8f728326: mov    %r10,0x330(%r15)
  0x00007f8f8f72832d: movabs $0x0,%r10
  0x00007f8f8f728337: mov    %r10,0x328(%r15)
  0x00007f8f8f72833e: vzeroupper 
  0x00007f8f8f728341: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f728349: je     0x00007f8f8f728354
  0x00007f8f8f72834f: jmpq   0x00007f8f8f71a780
  0x00007f8f8f728354: mov    -0x40(%rbp),%r13
  0x00007f8f8f728358: mov    -0x38(%rbp),%r14
  0x00007f8f8f72835c: retq   
  0x00007f8f8f72835d: mov    -0x48(%rbp),%rsp
  0x00007f8f8f728361: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f728369: movabs $0x7f8fad6ab3d8,%rsi
  0x00007f8f8f728373: movabs $0x0,%rdx
  0x00007f8f8f72837d: callq  0x00007f8f8f728387
  0x00007f8f8f728382: jmpq   0x00007f8f8f728431
  0x00007f8f8f728387: lea    0x8(%rsp),%rax
  0x00007f8f8f72838c: mov    %r13,-0x40(%rbp)
  0x00007f8f8f728390: mov    %r15,%rdi
  0x00007f8f8f728393: vzeroupper 
  0x00007f8f8f728396: mov    %rbp,0x330(%r15)
  0x00007f8f8f72839d: mov    %rax,0x320(%r15)
  0x00007f8f8f7283a4: test   $0xf,%esp
  0x00007f8f8f7283aa: je     0x00007f8f8f7283c2
  0x00007f8f8f7283b0: sub    $0x8,%rsp
  0x00007f8f8f7283b4: callq  0x00007f8fad0291d0 = InterpreterRuntime::create_exception(JavaThread*, char*, char*)
  0x00007f8f8f7283b9: add    $0x8,%rsp
  0x00007f8f8f7283bd: jmpq   0x00007f8f8f7283c7
  0x00007f8f8f7283c2: callq  0x00007f8fad0291d0 = InterpreterRuntime::create_exception(JavaThread*, char*, char*)
  0x00007f8f8f7283c7: movabs $0x0,%r10
  0x00007f8f8f7283d1: mov    %r10,0x320(%r15)
  0x00007f8f8f7283d8: movabs $0x0,%r10
  0x00007f8f8f7283e2: mov    %r10,0x330(%r15)
  0x00007f8f8f7283e9: movabs $0x0,%r10
  0x00007f8f8f7283f3: mov    %r10,0x328(%r15)
  0x00007f8f8f7283fa: vzeroupper 
  0x00007f8f8f7283fd: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f728405: je     0x00007f8f8f728410
  0x00007f8f8f72840b: jmpq   0x00007f8f8f71a780
  0x00007f8f8f728410: mov    0x380(%r15),%rax
  0x00007f8f8f728417: movabs $0x0,%r10
  0x00007f8f8f728421: mov    %r10,0x380(%r15)
  0x00007f8f8f728428: mov    -0x40(%rbp),%r13
  0x00007f8f8f72842c: mov    -0x38(%rbp),%r14
  0x00007f8f8f728430: retq   
  0x00007f8f8f728431: jmpq   0x00007f8f8f727013
  0x00007f8f8f728436: mov    -0x40(%rbp),%r13
  0x00007f8f8f72843a: mov    -0x48(%rbp),%rsp
  0x00007f8f8f72843e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f728446: callq  0x00007f8f8f728450
  0x00007f8f8f72844b: jmpq   0x00007f8f8f7284e2
  0x00007f8f8f728450: lea    0x8(%rsp),%rax
  0x00007f8f8f728455: mov    %r13,-0x40(%rbp)
  0x00007f8f8f728459: mov    %r15,%rdi
  0x00007f8f8f72845c: vzeroupper 
  0x00007f8f8f72845f: mov    %rbp,0x330(%r15)
  0x00007f8f8f728466: mov    %rax,0x320(%r15)
  0x00007f8f8f72846d: test   $0xf,%esp
  0x00007f8f8f728473: je     0x00007f8f8f72848b
  0x00007f8f8f728479: sub    $0x8,%rsp
  0x00007f8f8f72847d: callq  0x00007f8fad028ce0 = InterpreterRuntime::throw_StackOverflowError(JavaThread*)
  0x00007f8f8f728482: add    $0x8,%rsp
  0x00007f8f8f728486: jmpq   0x00007f8f8f728490
  0x00007f8f8f72848b: callq  0x00007f8fad028ce0 = InterpreterRuntime::throw_StackOverflowError(JavaThread*)
  0x00007f8f8f728490: movabs $0x0,%r10
  0x00007f8f8f72849a: mov    %r10,0x320(%r15)
  0x00007f8f8f7284a1: movabs $0x0,%r10
  0x00007f8f8f7284ab: mov    %r10,0x330(%r15)
  0x00007f8f8f7284b2: movabs $0x0,%r10
  0x00007f8f8f7284bc: mov    %r10,0x328(%r15)
  0x00007f8f8f7284c3: vzeroupper 
  0x00007f8f8f7284c6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7284ce: je     0x00007f8f8f7284d9
  0x00007f8f8f7284d4: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7284d9: mov    -0x40(%rbp),%r13
  0x00007f8f8f7284dd: mov    -0x38(%rbp),%r14
  0x00007f8f8f7284e1: retq   
  0x00007f8f8f7284e2: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f7284e8: add    %al,(%rax)
  0x00007f8f8f7284ea: add    %al,(%rax)
  0x00007f8f8f7284ec: add    %al,(%rax)
  0x00007f8f8f7284ee: add    %al,(%rax)
  0x00007f8f8f7284f0: add    %al,(%rax)
  0x00007f8f8f7284f2: add    %al,(%rax)
  0x00007f8f8f7284f4: add    %al,(%rax)
  0x00007f8f8f7284f6: add    %al,(%rax)
  0x00007f8f8f7284f8: add    %al,(%rax)
  0x00007f8f8f7284fa: add    %al,(%rax)
  0x00007f8f8f7284fc: add    %al,(%rax)
  0x00007f8f8f7284fe: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = zerolocals)  [0x00007f8f8f728520, 0x00007f8f8f728a00]  1248 bytes

  0x00007f8f8f728520: mov    0x8(%rbx),%rdx
  0x00007f8f8f728524: movzwl 0x34(%rdx),%ecx
  0x00007f8f8f728528: movzwl 0x32(%rdx),%edx
  0x00007f8f8f72852c: sub    %ecx,%edx
  0x00007f8f8f72852e: cmp    $0x1f5,%edx
  0x00007f8f8f728534: jbe    0x00007f8f8f72855f
  0x00007f8f8f72853a: mov    %rdx,%rax
  0x00007f8f8f72853d: shl    $0x3,%rax
  0x00007f8f8f728541: add    $0x58,%rax
  0x00007f8f8f728545: add    0x410(%r15),%rax
  0x00007f8f8f72854c: cmp    %rax,%rsp
  0x00007f8f8f72854f: ja     0x00007f8f8f72855f
  0x00007f8f8f728555: pop    %rax
  0x00007f8f8f728556: mov    %r13,%rsp
  0x00007f8f8f728559: push   %rax
  0x00007f8f8f72855a: jmpq   0x00007f8f8f722100
  0x00007f8f8f72855f: pop    %rax
  0x00007f8f8f728560: lea    -0x8(%rsp,%rcx,8),%r14
  0x00007f8f8f728565: test   %edx,%edx
  0x00007f8f8f728567: jle    0x00007f8f8f728576
  0x00007f8f8f72856d: pushq  $0x0
  0x00007f8f8f728572: dec    %edx
  0x00007f8f8f728574: jg     0x00007f8f8f72856d
  0x00007f8f8f728576: push   %rax
  0x00007f8f8f728577: push   %rbp
  0x00007f8f8f728578: mov    %rsp,%rbp
  0x00007f8f8f72857b: push   %r13
  0x00007f8f8f72857d: pushq  $0x0
  0x00007f8f8f728582: mov    0x8(%rbx),%r13
  0x00007f8f8f728586: lea    0x38(%r13),%r13
  0x00007f8f8f72858a: push   %rbx
  0x00007f8f8f72858b: mov    0x8(%rbx),%rdx
  0x00007f8f8f72858f: mov    0x8(%rdx),%rdx
  0x00007f8f8f728593: mov    0x18(%rdx),%rdx
  0x00007f8f8f728597: mov    0x70(%rdx),%rdx
  0x00007f8f8f72859b: mov    (%rdx),%rdx
  0x00007f8f8f72859e: push   %rdx
  0x00007f8f8f72859f: mov    0x10(%rbx),%rdx
  0x00007f8f8f7285a3: test   %rdx,%rdx
  0x00007f8f8f7285a6: je     0x00007f8f8f7285b3
  0x00007f8f8f7285ac: add    $0x138,%rdx
  0x00007f8f8f7285b3: push   %rdx
  0x00007f8f8f7285b4: mov    0x8(%rbx),%rdx
  0x00007f8f8f7285b8: mov    0x8(%rdx),%rdx
  0x00007f8f8f7285bc: mov    0x10(%rdx),%rdx
  0x00007f8f8f7285c0: push   %rdx
  0x00007f8f8f7285c1: push   %r14
  0x00007f8f8f7285c3: push   %r13
  0x00007f8f8f7285c5: pushq  $0x0
  0x00007f8f8f7285ca: mov    %rsp,(%rsp)
  0x00007f8f8f7285ce: movb   $0x1,0x3dd(%r15)
  0x00007f8f8f7285d6: mov    -0x28(%rbp),%rax
  0x00007f8f8f7285da: test   %rax,%rax
  0x00007f8f8f7285dd: je     0x00007f8f8f728679
  0x00007f8f8f7285e3: mov    -0x4(%rax),%ecx
  0x00007f8f8f7285e6: test   %ecx,%ecx
  0x00007f8f8f7285e8: js     0x00007f8f8f728679
  0x00007f8f8f7285ee: add    %rcx,%rax
  0x00007f8f8f7285f1: mov    0x8(%rax),%rcx
  0x00007f8f8f7285f5: sub    $0x2,%rcx
  0x00007f8f8f7285f9: mov    0x10(%rax,%rcx,8),%rdx
  0x00007f8f8f7285fe: neg    %rdx
  0x00007f8f8f728601: mov    (%r14,%rdx,8),%rdx
  0x00007f8f8f728605: test   %rdx,%rdx
  0x00007f8f8f728608: jne    0x00007f8f8f728615
  0x00007f8f8f72860a: orq    $0x1,0x18(%rax,%rcx,8)
  0x00007f8f8f728613: jmp    0x00007f8f8f728673
  0x00007f8f8f728615: mov    0x8(%rdx),%edx
  0x00007f8f8f728618: movabs $0x800000000,%r12
  0x00007f8f8f728622: add    %r12,%rdx
  0x00007f8f8f728625: xor    %r12,%r12
  0x00007f8f8f728628: xor    0x18(%rax,%rcx,8),%rdx
  0x00007f8f8f72862d: test   $0xfffffffffffffffc,%rdx
  0x00007f8f8f728634: je     0x00007f8f8f728673
  0x00007f8f8f728636: test   $0x2,%rdx
  0x00007f8f8f72863d: jne    0x00007f8f8f728673
  0x00007f8f8f72863f: cmpq   $0x0,0x18(%rax,%rcx,8)
  0x00007f8f8f728648: je     0x00007f8f8f72866e
  0x00007f8f8f72864a: cmpq   $0x1,0x18(%rax,%rcx,8)
  0x00007f8f8f728653: je     0x00007f8f8f72866e
  0x00007f8f8f728655: xor    0x18(%rax,%rcx,8),%rdx
  0x00007f8f8f72865a: test   $0xfffffffffffffffc,%rdx
  0x00007f8f8f728661: je     0x00007f8f8f728673
  0x00007f8f8f728663: orq    $0x2,0x18(%rax,%rcx,8)
  0x00007f8f8f72866c: jmp    0x00007f8f8f728673
  0x00007f8f8f72866e: mov    %rdx,0x18(%rax,%rcx,8)
  0x00007f8f8f728673: sub    $0x2,%rcx
  0x00007f8f8f728677: jns    0x00007f8f8f7285f9
  0x00007f8f8f728679: mov    0x10(%rbx),%rax
  0x00007f8f8f72867d: test   %rax,%rax
  0x00007f8f8f728680: je     0x00007f8f8f7286a2
  0x00007f8f8f728682: mov    0x104(%rax),%ecx
  0x00007f8f8f728688: add    $0x8,%ecx
  0x00007f8f8f72868b: mov    %ecx,0x104(%rax)
  0x00007f8f8f728691: and    0x118(%rax),%ecx
  0x00007f8f8f728697: je     0x00007f8f8f728940
  0x00007f8f8f72869d: jmpq   0x00007f8f8f72876d
  0x00007f8f8f7286a2: mov    0x18(%rbx),%rax
  0x00007f8f8f7286a6: test   %rax,%rax
  0x00007f8f8f7286a9: jne    0x00007f8f8f72875b
  0x00007f8f8f7286af: callq  0x00007f8f8f7286b9
  0x00007f8f8f7286b4: jmpq   0x00007f8f8f72874e
  0x00007f8f8f7286b9: mov    %rbx,%rsi
  0x00007f8f8f7286bc: lea    0x8(%rsp),%rax
  0x00007f8f8f7286c1: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7286c5: mov    %r15,%rdi
  0x00007f8f8f7286c8: vzeroupper 
  0x00007f8f8f7286cb: mov    %rbp,0x330(%r15)
  0x00007f8f8f7286d2: mov    %rax,0x320(%r15)
  0x00007f8f8f7286d9: test   $0xf,%esp
  0x00007f8f8f7286df: je     0x00007f8f8f7286f7
  0x00007f8f8f7286e5: sub    $0x8,%rsp
  0x00007f8f8f7286e9: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f7286ee: add    $0x8,%rsp
  0x00007f8f8f7286f2: jmpq   0x00007f8f8f7286fc
  0x00007f8f8f7286f7: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f7286fc: movabs $0x0,%r10
  0x00007f8f8f728706: mov    %r10,0x320(%r15)
  0x00007f8f8f72870d: movabs $0x0,%r10
  0x00007f8f8f728717: mov    %r10,0x330(%r15)
  0x00007f8f8f72871e: movabs $0x0,%r10
  0x00007f8f8f728728: mov    %r10,0x328(%r15)
  0x00007f8f8f72872f: vzeroupper 
  0x00007f8f8f728732: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72873a: je     0x00007f8f8f728745
  0x00007f8f8f728740: jmpq   0x00007f8f8f71a780
  0x00007f8f8f728745: mov    -0x40(%rbp),%r13
  0x00007f8f8f728749: mov    -0x38(%rbp),%r14
  0x00007f8f8f72874d: retq   
  0x00007f8f8f72874e: mov    0x18(%rbx),%rax
  0x00007f8f8f728752: test   %rax,%rax
  0x00007f8f8f728755: je     0x00007f8f8f72876d
  0x00007f8f8f72875b: mov    0x18(%rax),%ecx
  0x00007f8f8f72875e: add    $0x8,%ecx
  0x00007f8f8f728761: mov    %ecx,0x18(%rax)
  0x00007f8f8f728764: and    0x30(%rax),%ecx
  0x00007f8f8f728767: je     0x00007f8f8f728940
  0x00007f8f8f72876d: mov    %eax,-0x1000(%rsp)
  0x00007f8f8f728774: mov    %eax,-0x2000(%rsp)
  0x00007f8f8f72877b: mov    %eax,-0x3000(%rsp)
  0x00007f8f8f728782: mov    %eax,-0x4000(%rsp)
  0x00007f8f8f728789: mov    %eax,-0x5000(%rsp)
  0x00007f8f8f728790: mov    %eax,-0x6000(%rsp)
  0x00007f8f8f728797: mov    %eax,-0x7000(%rsp)
  0x00007f8f8f72879e: mov    %eax,-0x8000(%rsp)
  0x00007f8f8f7287a5: mov    %eax,-0x9000(%rsp)
  0x00007f8f8f7287ac: mov    %eax,-0xa000(%rsp)
  0x00007f8f8f7287b3: mov    %eax,-0xb000(%rsp)
  0x00007f8f8f7287ba: mov    %eax,-0xc000(%rsp)
  0x00007f8f8f7287c1: mov    %eax,-0xd000(%rsp)
  0x00007f8f8f7287c8: mov    %eax,-0xe000(%rsp)
  0x00007f8f8f7287cf: mov    %eax,-0xf000(%rsp)
  0x00007f8f8f7287d6: mov    %eax,-0x10000(%rsp)
  0x00007f8f8f7287dd: mov    %eax,-0x11000(%rsp)
  0x00007f8f8f7287e4: mov    %eax,-0x12000(%rsp)
  0x00007f8f8f7287eb: mov    %eax,-0x13000(%rsp)
  0x00007f8f8f7287f2: mov    %eax,-0x14000(%rsp)
  0x00007f8f8f7287f9: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f728801: cmpb   $0x0,0x1e48e97f(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f728808: je     0x00007f8f8f728838
  0x00007f8f8f72880e: mov    -0x18(%rbp),%rsi
  0x00007f8f8f728812: mov    %r15,%rdi
  0x00007f8f8f728815: test   $0xf,%esp
  0x00007f8f8f72881b: je     0x00007f8f8f728833
  0x00007f8f8f728821: sub    $0x8,%rsp
  0x00007f8f8f728825: callq  0x00007f8fad48e620 = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x00007f8f8f72882a: add    $0x8,%rsp
  0x00007f8f8f72882e: jmpq   0x00007f8f8f728838
  0x00007f8f8f728833: callq  0x00007f8fad48e620 = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x00007f8f8f728838: movzbl 0x0(%r13),%ebx
  0x00007f8f8f72883d: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f728847: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72884b: callq  0x00007f8f8f728855
  0x00007f8f8f728850: jmpq   0x00007f8f8f7288e7
  0x00007f8f8f728855: lea    0x8(%rsp),%rax
  0x00007f8f8f72885a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72885e: mov    %r15,%rdi
  0x00007f8f8f728861: vzeroupper 
  0x00007f8f8f728864: mov    %rbp,0x330(%r15)
  0x00007f8f8f72886b: mov    %rax,0x320(%r15)
  0x00007f8f8f728872: test   $0xf,%esp
  0x00007f8f8f728878: je     0x00007f8f8f728890
  0x00007f8f8f72887e: sub    $0x8,%rsp
  0x00007f8f8f728882: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f728887: add    $0x8,%rsp
  0x00007f8f8f72888b: jmpq   0x00007f8f8f728895
  0x00007f8f8f728890: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f728895: movabs $0x0,%r10
  0x00007f8f8f72889f: mov    %r10,0x320(%r15)
  0x00007f8f8f7288a6: movabs $0x0,%r10
  0x00007f8f8f7288b0: mov    %r10,0x330(%r15)
  0x00007f8f8f7288b7: movabs $0x0,%r10
  0x00007f8f8f7288c1: mov    %r10,0x328(%r15)
  0x00007f8f8f7288c8: vzeroupper 
  0x00007f8f8f7288cb: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7288d3: je     0x00007f8f8f7288de
  0x00007f8f8f7288d9: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7288de: mov    -0x40(%rbp),%r13
  0x00007f8f8f7288e2: mov    -0x38(%rbp),%r14
  0x00007f8f8f7288e6: retq   
  0x00007f8f8f7288e7: push   %rax
  0x00007f8f8f7288e8: push   %rbx
  0x00007f8f8f7288e9: mov    -0x18(%rbp),%rbx
  0x00007f8f8f7288ed: mov    0x10(%rbx),%rax
  0x00007f8f8f7288f1: test   %rax,%rax
  0x00007f8f8f7288f4: je     0x00007f8f8f728931
  0x00007f8f8f7288fa: mov    %r13,%rsi
  0x00007f8f8f7288fd: mov    %rbx,%rdi
  0x00007f8f8f728900: test   $0xf,%esp
  0x00007f8f8f728906: je     0x00007f8f8f72891e
  0x00007f8f8f72890c: sub    $0x8,%rsp
  0x00007f8f8f728910: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f728915: add    $0x8,%rsp
  0x00007f8f8f728919: jmpq   0x00007f8f8f728923
  0x00007f8f8f72891e: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f728923: mov    0x10(%rbx),%rbx
  0x00007f8f8f728927: add    $0x138,%rbx
  0x00007f8f8f72892e: add    %rbx,%rax
  0x00007f8f8f728931: mov    %rax,-0x28(%rbp)
  0x00007f8f8f728935: pop    %rbx
  0x00007f8f8f728936: pop    %rax
  0x00007f8f8f728937: mov    -0x18(%rbp),%rbx
  0x00007f8f8f72893b: jmpq   0x00007f8f8f72876d
  0x00007f8f8f728940: mov    $0x0,%esi
  0x00007f8f8f728945: callq  0x00007f8f8f72894f
  0x00007f8f8f72894a: jmpq   0x00007f8f8f7289e1
  0x00007f8f8f72894f: lea    0x8(%rsp),%rax
  0x00007f8f8f728954: mov    %r13,-0x40(%rbp)
  0x00007f8f8f728958: mov    %r15,%rdi
  0x00007f8f8f72895b: vzeroupper 
  0x00007f8f8f72895e: mov    %rbp,0x330(%r15)
  0x00007f8f8f728965: mov    %rax,0x320(%r15)
  0x00007f8f8f72896c: test   $0xf,%esp
  0x00007f8f8f728972: je     0x00007f8f8f72898a
  0x00007f8f8f728978: sub    $0x8,%rsp
  0x00007f8f8f72897c: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f728981: add    $0x8,%rsp
  0x00007f8f8f728985: jmpq   0x00007f8f8f72898f
  0x00007f8f8f72898a: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f72898f: movabs $0x0,%r10
  0x00007f8f8f728999: mov    %r10,0x320(%r15)
  0x00007f8f8f7289a0: movabs $0x0,%r10
  0x00007f8f8f7289aa: mov    %r10,0x330(%r15)
  0x00007f8f8f7289b1: movabs $0x0,%r10
  0x00007f8f8f7289bb: mov    %r10,0x328(%r15)
  0x00007f8f8f7289c2: vzeroupper 
  0x00007f8f8f7289c5: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7289cd: je     0x00007f8f8f7289d8
  0x00007f8f8f7289d3: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7289d8: mov    -0x40(%rbp),%r13
  0x00007f8f8f7289dc: mov    -0x38(%rbp),%r14
  0x00007f8f8f7289e0: retq   
  0x00007f8f8f7289e1: mov    -0x18(%rbp),%rbx
  0x00007f8f8f7289e5: jmpq   0x00007f8f8f72876d
  0x00007f8f8f7289ea: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f7289f0: add    %al,(%rax)
  0x00007f8f8f7289f2: add    %al,(%rax)
  0x00007f8f8f7289f4: add    %al,(%rax)
  0x00007f8f8f7289f6: add    %al,(%rax)
  0x00007f8f8f7289f8: add    %al,(%rax)
  0x00007f8f8f7289fa: add    %al,(%rax)
  0x00007f8f8f7289fc: add    %al,(%rax)
  0x00007f8f8f7289fe: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = zerolocals_synchronized)  [0x00007f8f8f728a20, 0x00007f8f8f7290a0]  1664 bytes

  0x00007f8f8f728a20: mov    0x8(%rbx),%rdx
  0x00007f8f8f728a24: movzwl 0x34(%rdx),%ecx
  0x00007f8f8f728a28: movzwl 0x32(%rdx),%edx
  0x00007f8f8f728a2c: sub    %ecx,%edx
  0x00007f8f8f728a2e: cmp    $0x1f5,%edx
  0x00007f8f8f728a34: jbe    0x00007f8f8f728a5f
  0x00007f8f8f728a3a: mov    %rdx,%rax
  0x00007f8f8f728a3d: shl    $0x3,%rax
  0x00007f8f8f728a41: add    $0x58,%rax
  0x00007f8f8f728a45: add    0x410(%r15),%rax
  0x00007f8f8f728a4c: cmp    %rax,%rsp
  0x00007f8f8f728a4f: ja     0x00007f8f8f728a5f
  0x00007f8f8f728a55: pop    %rax
  0x00007f8f8f728a56: mov    %r13,%rsp
  0x00007f8f8f728a59: push   %rax
  0x00007f8f8f728a5a: jmpq   0x00007f8f8f722100
  0x00007f8f8f728a5f: pop    %rax
  0x00007f8f8f728a60: lea    -0x8(%rsp,%rcx,8),%r14
  0x00007f8f8f728a65: test   %edx,%edx
  0x00007f8f8f728a67: jle    0x00007f8f8f728a76
  0x00007f8f8f728a6d: pushq  $0x0
  0x00007f8f8f728a72: dec    %edx
  0x00007f8f8f728a74: jg     0x00007f8f8f728a6d
  0x00007f8f8f728a76: push   %rax
  0x00007f8f8f728a77: push   %rbp
  0x00007f8f8f728a78: mov    %rsp,%rbp
  0x00007f8f8f728a7b: push   %r13
  0x00007f8f8f728a7d: pushq  $0x0
  0x00007f8f8f728a82: mov    0x8(%rbx),%r13
  0x00007f8f8f728a86: lea    0x38(%r13),%r13
  0x00007f8f8f728a8a: push   %rbx
  0x00007f8f8f728a8b: mov    0x8(%rbx),%rdx
  0x00007f8f8f728a8f: mov    0x8(%rdx),%rdx
  0x00007f8f8f728a93: mov    0x18(%rdx),%rdx
  0x00007f8f8f728a97: mov    0x70(%rdx),%rdx
  0x00007f8f8f728a9b: mov    (%rdx),%rdx
  0x00007f8f8f728a9e: push   %rdx
  0x00007f8f8f728a9f: mov    0x10(%rbx),%rdx
  0x00007f8f8f728aa3: test   %rdx,%rdx
  0x00007f8f8f728aa6: je     0x00007f8f8f728ab3
  0x00007f8f8f728aac: add    $0x138,%rdx
  0x00007f8f8f728ab3: push   %rdx
  0x00007f8f8f728ab4: mov    0x8(%rbx),%rdx
  0x00007f8f8f728ab8: mov    0x8(%rdx),%rdx
  0x00007f8f8f728abc: mov    0x10(%rdx),%rdx
  0x00007f8f8f728ac0: push   %rdx
  0x00007f8f8f728ac1: push   %r14
  0x00007f8f8f728ac3: push   %r13
  0x00007f8f8f728ac5: pushq  $0x0
  0x00007f8f8f728aca: mov    %rsp,(%rsp)
  0x00007f8f8f728ace: movb   $0x1,0x3dd(%r15)
  0x00007f8f8f728ad6: mov    -0x28(%rbp),%rax
  0x00007f8f8f728ada: test   %rax,%rax
  0x00007f8f8f728add: je     0x00007f8f8f728b79
  0x00007f8f8f728ae3: mov    -0x4(%rax),%ecx
  0x00007f8f8f728ae6: test   %ecx,%ecx
  0x00007f8f8f728ae8: js     0x00007f8f8f728b79
  0x00007f8f8f728aee: add    %rcx,%rax
  0x00007f8f8f728af1: mov    0x8(%rax),%rcx
  0x00007f8f8f728af5: sub    $0x2,%rcx
  0x00007f8f8f728af9: mov    0x10(%rax,%rcx,8),%rdx
  0x00007f8f8f728afe: neg    %rdx
  0x00007f8f8f728b01: mov    (%r14,%rdx,8),%rdx
  0x00007f8f8f728b05: test   %rdx,%rdx
  0x00007f8f8f728b08: jne    0x00007f8f8f728b15
  0x00007f8f8f728b0a: orq    $0x1,0x18(%rax,%rcx,8)
  0x00007f8f8f728b13: jmp    0x00007f8f8f728b73
  0x00007f8f8f728b15: mov    0x8(%rdx),%edx
  0x00007f8f8f728b18: movabs $0x800000000,%r12
  0x00007f8f8f728b22: add    %r12,%rdx
  0x00007f8f8f728b25: xor    %r12,%r12
  0x00007f8f8f728b28: xor    0x18(%rax,%rcx,8),%rdx
  0x00007f8f8f728b2d: test   $0xfffffffffffffffc,%rdx
  0x00007f8f8f728b34: je     0x00007f8f8f728b73
  0x00007f8f8f728b36: test   $0x2,%rdx
  0x00007f8f8f728b3d: jne    0x00007f8f8f728b73
  0x00007f8f8f728b3f: cmpq   $0x0,0x18(%rax,%rcx,8)
  0x00007f8f8f728b48: je     0x00007f8f8f728b6e
  0x00007f8f8f728b4a: cmpq   $0x1,0x18(%rax,%rcx,8)
  0x00007f8f8f728b53: je     0x00007f8f8f728b6e
  0x00007f8f8f728b55: xor    0x18(%rax,%rcx,8),%rdx
  0x00007f8f8f728b5a: test   $0xfffffffffffffffc,%rdx
  0x00007f8f8f728b61: je     0x00007f8f8f728b73
  0x00007f8f8f728b63: orq    $0x2,0x18(%rax,%rcx,8)
  0x00007f8f8f728b6c: jmp    0x00007f8f8f728b73
  0x00007f8f8f728b6e: mov    %rdx,0x18(%rax,%rcx,8)
  0x00007f8f8f728b73: sub    $0x2,%rcx
  0x00007f8f8f728b77: jns    0x00007f8f8f728af9
  0x00007f8f8f728b79: mov    0x10(%rbx),%rax
  0x00007f8f8f728b7d: test   %rax,%rax
  0x00007f8f8f728b80: je     0x00007f8f8f728ba2
  0x00007f8f8f728b82: mov    0x104(%rax),%ecx
  0x00007f8f8f728b88: add    $0x8,%ecx
  0x00007f8f8f728b8b: mov    %ecx,0x104(%rax)
  0x00007f8f8f728b91: and    0x118(%rax),%ecx
  0x00007f8f8f728b97: je     0x00007f8f8f728ff6
  0x00007f8f8f728b9d: jmpq   0x00007f8f8f728c6d
  0x00007f8f8f728ba2: mov    0x18(%rbx),%rax
  0x00007f8f8f728ba6: test   %rax,%rax
  0x00007f8f8f728ba9: jne    0x00007f8f8f728c5b
  0x00007f8f8f728baf: callq  0x00007f8f8f728bb9
  0x00007f8f8f728bb4: jmpq   0x00007f8f8f728c4e
  0x00007f8f8f728bb9: mov    %rbx,%rsi
  0x00007f8f8f728bbc: lea    0x8(%rsp),%rax
  0x00007f8f8f728bc1: mov    %r13,-0x40(%rbp)
  0x00007f8f8f728bc5: mov    %r15,%rdi
  0x00007f8f8f728bc8: vzeroupper 
  0x00007f8f8f728bcb: mov    %rbp,0x330(%r15)
  0x00007f8f8f728bd2: mov    %rax,0x320(%r15)
  0x00007f8f8f728bd9: test   $0xf,%esp
  0x00007f8f8f728bdf: je     0x00007f8f8f728bf7
  0x00007f8f8f728be5: sub    $0x8,%rsp
  0x00007f8f8f728be9: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f728bee: add    $0x8,%rsp
  0x00007f8f8f728bf2: jmpq   0x00007f8f8f728bfc
  0x00007f8f8f728bf7: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f728bfc: movabs $0x0,%r10
  0x00007f8f8f728c06: mov    %r10,0x320(%r15)
  0x00007f8f8f728c0d: movabs $0x0,%r10
  0x00007f8f8f728c17: mov    %r10,0x330(%r15)
  0x00007f8f8f728c1e: movabs $0x0,%r10
  0x00007f8f8f728c28: mov    %r10,0x328(%r15)
  0x00007f8f8f728c2f: vzeroupper 
  0x00007f8f8f728c32: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f728c3a: je     0x00007f8f8f728c45
  0x00007f8f8f728c40: jmpq   0x00007f8f8f71a780
  0x00007f8f8f728c45: mov    -0x40(%rbp),%r13
  0x00007f8f8f728c49: mov    -0x38(%rbp),%r14
  0x00007f8f8f728c4d: retq   
  0x00007f8f8f728c4e: mov    0x18(%rbx),%rax
  0x00007f8f8f728c52: test   %rax,%rax
  0x00007f8f8f728c55: je     0x00007f8f8f728c6d
  0x00007f8f8f728c5b: mov    0x18(%rax),%ecx
  0x00007f8f8f728c5e: add    $0x8,%ecx
  0x00007f8f8f728c61: mov    %ecx,0x18(%rax)
  0x00007f8f8f728c64: and    0x30(%rax),%ecx
  0x00007f8f8f728c67: je     0x00007f8f8f728ff6
  0x00007f8f8f728c6d: mov    %eax,-0x1000(%rsp)
  0x00007f8f8f728c74: mov    %eax,-0x2000(%rsp)
  0x00007f8f8f728c7b: mov    %eax,-0x3000(%rsp)
  0x00007f8f8f728c82: mov    %eax,-0x4000(%rsp)
  0x00007f8f8f728c89: mov    %eax,-0x5000(%rsp)
  0x00007f8f8f728c90: mov    %eax,-0x6000(%rsp)
  0x00007f8f8f728c97: mov    %eax,-0x7000(%rsp)
  0x00007f8f8f728c9e: mov    %eax,-0x8000(%rsp)
  0x00007f8f8f728ca5: mov    %eax,-0x9000(%rsp)
  0x00007f8f8f728cac: mov    %eax,-0xa000(%rsp)
  0x00007f8f8f728cb3: mov    %eax,-0xb000(%rsp)
  0x00007f8f8f728cba: mov    %eax,-0xc000(%rsp)
  0x00007f8f8f728cc1: mov    %eax,-0xd000(%rsp)
  0x00007f8f8f728cc8: mov    %eax,-0xe000(%rsp)
  0x00007f8f8f728ccf: mov    %eax,-0xf000(%rsp)
  0x00007f8f8f728cd6: mov    %eax,-0x10000(%rsp)
  0x00007f8f8f728cdd: mov    %eax,-0x11000(%rsp)
  0x00007f8f8f728ce4: mov    %eax,-0x12000(%rsp)
  0x00007f8f8f728ceb: mov    %eax,-0x13000(%rsp)
  0x00007f8f8f728cf2: mov    %eax,-0x14000(%rsp)
  0x00007f8f8f728cf9: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f728d01: mov    0x20(%rbx),%eax
  0x00007f8f8f728d04: test   $0x8,%eax
  0x00007f8f8f728d09: mov    (%r14),%rax
  0x00007f8f8f728d0c: je     0x00007f8f8f728d25
  0x00007f8f8f728d12: mov    0x8(%rbx),%rax
  0x00007f8f8f728d16: mov    0x8(%rax),%rax
  0x00007f8f8f728d1a: mov    0x18(%rax),%rax
  0x00007f8f8f728d1e: mov    0x70(%rax),%rax
  0x00007f8f8f728d22: mov    (%rax),%rax
  0x00007f8f8f728d25: sub    $0x10,%rsp
  0x00007f8f8f728d29: mov    %rsp,-0x48(%rbp)
  0x00007f8f8f728d2d: mov    %rax,0x8(%rsp)
  0x00007f8f8f728d32: mov    %rsp,%rsi
  0x00007f8f8f728d35: mov    0x8(%rsi),%rcx
  0x00007f8f8f728d39: mov    (%rcx),%rax
  0x00007f8f8f728d3c: mov    %rax,%rbx
  0x00007f8f8f728d3f: and    $0x7,%rbx
  0x00007f8f8f728d43: cmp    $0x5,%rbx
  0x00007f8f8f728d47: jne    0x00007f8f8f728df2
  0x00007f8f8f728d4d: mov    0x8(%rcx),%ebx
  0x00007f8f8f728d50: movabs $0x800000000,%r12
  0x00007f8f8f728d5a: add    %r12,%rbx
  0x00007f8f8f728d5d: xor    %r12,%r12
  0x00007f8f8f728d60: mov    0xb8(%rbx),%rbx
  0x00007f8f8f728d67: or     %r15,%rbx
  0x00007f8f8f728d6a: xor    %rax,%rbx
  0x00007f8f8f728d6d: and    $0xffffffffffffff87,%rbx
  0x00007f8f8f728d71: je     0x00007f8f8f728eb7
  0x00007f8f8f728d77: test   $0x7,%rbx
  0x00007f8f8f728d7e: jne    0x00007f8f8f728dd3
  0x00007f8f8f728d80: test   $0x300,%rbx
  0x00007f8f8f728d87: jne    0x00007f8f8f728da6
  0x00007f8f8f728d89: and    $0x37f,%rax
  0x00007f8f8f728d90: mov    %rax,%rbx
  0x00007f8f8f728d93: or     %r15,%rbx
  0x00007f8f8f728d96: lock cmpxchg %rbx,(%rcx)
  0x00007f8f8f728d9b: jne    0x00007f8f8f728e1b
  0x00007f8f8f728da1: jmpq   0x00007f8f8f728eb7
  0x00007f8f8f728da6: mov    0x8(%rcx),%ebx
  0x00007f8f8f728da9: movabs $0x800000000,%r12
  0x00007f8f8f728db3: add    %r12,%rbx
  0x00007f8f8f728db6: xor    %r12,%r12
  0x00007f8f8f728db9: mov    0xb8(%rbx),%rbx
  0x00007f8f8f728dc0: or     %r15,%rbx
  0x00007f8f8f728dc3: lock cmpxchg %rbx,(%rcx)
  0x00007f8f8f728dc8: jne    0x00007f8f8f728e1b
  0x00007f8f8f728dce: jmpq   0x00007f8f8f728eb7
  0x00007f8f8f728dd3: mov    0x8(%rcx),%ebx
  0x00007f8f8f728dd6: movabs $0x800000000,%r12
  0x00007f8f8f728de0: add    %r12,%rbx
  0x00007f8f8f728de3: xor    %r12,%r12
  0x00007f8f8f728de6: mov    0xb8(%rbx),%rbx
  0x00007f8f8f728ded: lock cmpxchg %rbx,(%rcx)
  0x00007f8f8f728df2: mov    $0x1,%eax
  0x00007f8f8f728df7: or     (%rcx),%rax
  0x00007f8f8f728dfa: mov    %rax,(%rsi)
  0x00007f8f8f728dfd: lock cmpxchg %rsi,(%rcx)
  0x00007f8f8f728e02: je     0x00007f8f8f728eb7
  0x00007f8f8f728e08: sub    %rsp,%rax
  0x00007f8f8f728e0b: and    $0xfffffffffffff007,%rax
  0x00007f8f8f728e12: mov    %rax,(%rsi)
  0x00007f8f8f728e15: je     0x00007f8f8f728eb7
  0x00007f8f8f728e1b: callq  0x00007f8f8f728e25
  0x00007f8f8f728e20: jmpq   0x00007f8f8f728eb7
  0x00007f8f8f728e25: lea    0x8(%rsp),%rax
  0x00007f8f8f728e2a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f728e2e: mov    %r15,%rdi
  0x00007f8f8f728e31: vzeroupper 
  0x00007f8f8f728e34: mov    %rbp,0x330(%r15)
  0x00007f8f8f728e3b: mov    %rax,0x320(%r15)
  0x00007f8f8f728e42: test   $0xf,%esp
  0x00007f8f8f728e48: je     0x00007f8f8f728e60
  0x00007f8f8f728e4e: sub    $0x8,%rsp
  0x00007f8f8f728e52: callq  0x00007f8fad02c250 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x00007f8f8f728e57: add    $0x8,%rsp
  0x00007f8f8f728e5b: jmpq   0x00007f8f8f728e65
  0x00007f8f8f728e60: callq  0x00007f8fad02c250 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x00007f8f8f728e65: movabs $0x0,%r10
  0x00007f8f8f728e6f: mov    %r10,0x320(%r15)
  0x00007f8f8f728e76: movabs $0x0,%r10
  0x00007f8f8f728e80: mov    %r10,0x330(%r15)
  0x00007f8f8f728e87: movabs $0x0,%r10
  0x00007f8f8f728e91: mov    %r10,0x328(%r15)
  0x00007f8f8f728e98: vzeroupper 
  0x00007f8f8f728e9b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f728ea3: je     0x00007f8f8f728eae
  0x00007f8f8f728ea9: jmpq   0x00007f8f8f71a780
  0x00007f8f8f728eae: mov    -0x40(%rbp),%r13
  0x00007f8f8f728eb2: mov    -0x38(%rbp),%r14
  0x00007f8f8f728eb6: retq   
  0x00007f8f8f728eb7: cmpb   $0x0,0x1e48e2c9(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f728ebe: je     0x00007f8f8f728eee
  0x00007f8f8f728ec4: mov    -0x18(%rbp),%rsi
  0x00007f8f8f728ec8: mov    %r15,%rdi
  0x00007f8f8f728ecb: test   $0xf,%esp
  0x00007f8f8f728ed1: je     0x00007f8f8f728ee9
  0x00007f8f8f728ed7: sub    $0x8,%rsp
  0x00007f8f8f728edb: callq  0x00007f8fad48e620 = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x00007f8f8f728ee0: add    $0x8,%rsp
  0x00007f8f8f728ee4: jmpq   0x00007f8f8f728eee
  0x00007f8f8f728ee9: callq  0x00007f8fad48e620 = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x00007f8f8f728eee: movzbl 0x0(%r13),%ebx
  0x00007f8f8f728ef3: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f728efd: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f728f01: callq  0x00007f8f8f728f0b
  0x00007f8f8f728f06: jmpq   0x00007f8f8f728f9d
  0x00007f8f8f728f0b: lea    0x8(%rsp),%rax
  0x00007f8f8f728f10: mov    %r13,-0x40(%rbp)
  0x00007f8f8f728f14: mov    %r15,%rdi
  0x00007f8f8f728f17: vzeroupper 
  0x00007f8f8f728f1a: mov    %rbp,0x330(%r15)
  0x00007f8f8f728f21: mov    %rax,0x320(%r15)
  0x00007f8f8f728f28: test   $0xf,%esp
  0x00007f8f8f728f2e: je     0x00007f8f8f728f46
  0x00007f8f8f728f34: sub    $0x8,%rsp
  0x00007f8f8f728f38: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f728f3d: add    $0x8,%rsp
  0x00007f8f8f728f41: jmpq   0x00007f8f8f728f4b
  0x00007f8f8f728f46: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f728f4b: movabs $0x0,%r10
  0x00007f8f8f728f55: mov    %r10,0x320(%r15)
  0x00007f8f8f728f5c: movabs $0x0,%r10
  0x00007f8f8f728f66: mov    %r10,0x330(%r15)
  0x00007f8f8f728f6d: movabs $0x0,%r10
  0x00007f8f8f728f77: mov    %r10,0x328(%r15)
  0x00007f8f8f728f7e: vzeroupper 
  0x00007f8f8f728f81: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f728f89: je     0x00007f8f8f728f94
  0x00007f8f8f728f8f: jmpq   0x00007f8f8f71a780
  0x00007f8f8f728f94: mov    -0x40(%rbp),%r13
  0x00007f8f8f728f98: mov    -0x38(%rbp),%r14
  0x00007f8f8f728f9c: retq   
  0x00007f8f8f728f9d: push   %rax
  0x00007f8f8f728f9e: push   %rbx
  0x00007f8f8f728f9f: mov    -0x18(%rbp),%rbx
  0x00007f8f8f728fa3: mov    0x10(%rbx),%rax
  0x00007f8f8f728fa7: test   %rax,%rax
  0x00007f8f8f728faa: je     0x00007f8f8f728fe7
  0x00007f8f8f728fb0: mov    %r13,%rsi
  0x00007f8f8f728fb3: mov    %rbx,%rdi
  0x00007f8f8f728fb6: test   $0xf,%esp
  0x00007f8f8f728fbc: je     0x00007f8f8f728fd4
  0x00007f8f8f728fc2: sub    $0x8,%rsp
  0x00007f8f8f728fc6: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f728fcb: add    $0x8,%rsp
  0x00007f8f8f728fcf: jmpq   0x00007f8f8f728fd9
  0x00007f8f8f728fd4: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f728fd9: mov    0x10(%rbx),%rbx
  0x00007f8f8f728fdd: add    $0x138,%rbx
  0x00007f8f8f728fe4: add    %rbx,%rax
  0x00007f8f8f728fe7: mov    %rax,-0x28(%rbp)
  0x00007f8f8f728feb: pop    %rbx
  0x00007f8f8f728fec: pop    %rax
  0x00007f8f8f728fed: mov    -0x18(%rbp),%rbx
  0x00007f8f8f728ff1: jmpq   0x00007f8f8f728c6d
  0x00007f8f8f728ff6: mov    $0x0,%esi
  0x00007f8f8f728ffb: callq  0x00007f8f8f729005
  0x00007f8f8f729000: jmpq   0x00007f8f8f729097
  0x00007f8f8f729005: lea    0x8(%rsp),%rax
  0x00007f8f8f72900a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72900e: mov    %r15,%rdi
  0x00007f8f8f729011: vzeroupper 
  0x00007f8f8f729014: mov    %rbp,0x330(%r15)
  0x00007f8f8f72901b: mov    %rax,0x320(%r15)
  0x00007f8f8f729022: test   $0xf,%esp
  0x00007f8f8f729028: je     0x00007f8f8f729040
  0x00007f8f8f72902e: sub    $0x8,%rsp
  0x00007f8f8f729032: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f729037: add    $0x8,%rsp
  0x00007f8f8f72903b: jmpq   0x00007f8f8f729045
  0x00007f8f8f729040: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f729045: movabs $0x0,%r10
  0x00007f8f8f72904f: mov    %r10,0x320(%r15)
  0x00007f8f8f729056: movabs $0x0,%r10
  0x00007f8f8f729060: mov    %r10,0x330(%r15)
  0x00007f8f8f729067: movabs $0x0,%r10
  0x00007f8f8f729071: mov    %r10,0x328(%r15)
  0x00007f8f8f729078: vzeroupper 
  0x00007f8f8f72907b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f729083: je     0x00007f8f8f72908e
  0x00007f8f8f729089: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72908e: mov    -0x40(%rbp),%r13
  0x00007f8f8f729092: mov    -0x38(%rbp),%r14
  0x00007f8f8f729096: retq   
  0x00007f8f8f729097: mov    -0x18(%rbp),%rbx
  0x00007f8f8f72909b: jmpq   0x00007f8f8f728c6d

----------------------------------------------------------------------
method entry point (kind = abstract)  [0x00007f8f8f7290c0, 0x00007f8f8f729200]  320 bytes

  0x00007f8f8f7290c0: mov    -0x48(%rbp),%rsp
  0x00007f8f8f7290c4: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7290cc: mov    -0x40(%rbp),%r13
  0x00007f8f8f7290d0: mov    -0x38(%rbp),%r14
  0x00007f8f8f7290d4: callq  0x00007f8f8f7290de
  0x00007f8f8f7290d9: jmpq   0x00007f8f8f729173
  0x00007f8f8f7290de: mov    %rbx,%rsi
  0x00007f8f8f7290e1: lea    0x8(%rsp),%rax
  0x00007f8f8f7290e6: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7290ea: mov    %r15,%rdi
  0x00007f8f8f7290ed: vzeroupper 
  0x00007f8f8f7290f0: mov    %rbp,0x330(%r15)
  0x00007f8f8f7290f7: mov    %rax,0x320(%r15)
  0x00007f8f8f7290fe: test   $0xf,%esp
  0x00007f8f8f729104: je     0x00007f8f8f72911c
  0x00007f8f8f72910a: sub    $0x8,%rsp
  0x00007f8f8f72910e: callq  0x00007f8fad02ad50 = InterpreterRuntime::throw_AbstractMethodErrorWithMethod(JavaThread*, Method*)
  0x00007f8f8f729113: add    $0x8,%rsp
  0x00007f8f8f729117: jmpq   0x00007f8f8f729121
  0x00007f8f8f72911c: callq  0x00007f8fad02ad50 = InterpreterRuntime::throw_AbstractMethodErrorWithMethod(JavaThread*, Method*)
  0x00007f8f8f729121: movabs $0x0,%r10
  0x00007f8f8f72912b: mov    %r10,0x320(%r15)
  0x00007f8f8f729132: movabs $0x0,%r10
  0x00007f8f8f72913c: mov    %r10,0x330(%r15)
  0x00007f8f8f729143: movabs $0x0,%r10
  0x00007f8f8f72914d: mov    %r10,0x328(%r15)
  0x00007f8f8f729154: vzeroupper 
  0x00007f8f8f729157: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72915f: je     0x00007f8f8f72916a
  0x00007f8f8f729165: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72916a: mov    -0x40(%rbp),%r13
  0x00007f8f8f72916e: mov    -0x38(%rbp),%r14
  0x00007f8f8f729172: retq   
  0x00007f8f8f729173: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f729178: sub    $0x80,%rsp
  0x00007f8f8f72917f: mov    %rax,0x78(%rsp)
  0x00007f8f8f729184: mov    %rcx,0x70(%rsp)
  0x00007f8f8f729189: mov    %rdx,0x68(%rsp)
  0x00007f8f8f72918e: mov    %rbx,0x60(%rsp)
  0x00007f8f8f729193: mov    %rbp,0x50(%rsp)
  0x00007f8f8f729198: mov    %rsi,0x48(%rsp)
  0x00007f8f8f72919d: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7291a2: mov    %r8,0x38(%rsp)
  0x00007f8f8f7291a7: mov    %r9,0x30(%rsp)
  0x00007f8f8f7291ac: mov    %r10,0x28(%rsp)
  0x00007f8f8f7291b1: mov    %r11,0x20(%rsp)
  0x00007f8f8f7291b6: mov    %r12,0x18(%rsp)
  0x00007f8f8f7291bb: mov    %r13,0x10(%rsp)
  0x00007f8f8f7291c0: mov    %r14,0x8(%rsp)
  0x00007f8f8f7291c5: mov    %r15,(%rsp)
  0x00007f8f8f7291c9: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f7291d3: movabs $0x7f8f8f729173,%rsi
  0x00007f8f8f7291dd: mov    %rsp,%rdx
  0x00007f8f8f7291e0: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f7291e4: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f7291e9: hlt    
  0x00007f8f8f7291ea: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f7291f0: add    %al,(%rax)
  0x00007f8f8f7291f2: add    %al,(%rax)
  0x00007f8f8f7291f4: add    %al,(%rax)
  0x00007f8f8f7291f6: add    %al,(%rax)
  0x00007f8f8f7291f8: add    %al,(%rax)
  0x00007f8f8f7291fa: add    %al,(%rax)
  0x00007f8f8f7291fc: add    %al,(%rax)
  0x00007f8f8f7291fe: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_sin)  [0x00007f8f8f729220, 0x00007f8f8f729240]  32 bytes

  0x00007f8f8f729220: vmovsd 0x8(%rsp),%xmm0
  0x00007f8f8f729226: callq  0x00007f8f8f71c765
  0x00007f8f8f72922b: pop    %rax
  0x00007f8f8f72922c: mov    %r13,%rsp
  0x00007f8f8f72922f: jmpq   *%rax
  0x00007f8f8f729231: nopl   0x0(%rax)
  0x00007f8f8f729238: add    %al,(%rax)
  0x00007f8f8f72923a: add    %al,(%rax)
  0x00007f8f8f72923c: add    %al,(%rax)
  0x00007f8f8f72923e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_cos)  [0x00007f8f8f729260, 0x00007f8f8f729280]  32 bytes

  0x00007f8f8f729260: vmovsd 0x8(%rsp),%xmm0
  0x00007f8f8f729266: callq  0x00007f8f8f71cdfc
  0x00007f8f8f72926b: pop    %rax
  0x00007f8f8f72926c: mov    %r13,%rsp
  0x00007f8f8f72926f: jmpq   *%rax
  0x00007f8f8f729271: nopl   0x0(%rax)
  0x00007f8f8f729278: add    %al,(%rax)
  0x00007f8f8f72927a: add    %al,(%rax)
  0x00007f8f8f72927c: add    %al,(%rax)
  0x00007f8f8f72927e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_tan)  [0x00007f8f8f7292a0, 0x00007f8f8f7292c0]  32 bytes

  0x00007f8f8f7292a0: vmovsd 0x8(%rsp),%xmm0
  0x00007f8f8f7292a6: callq  0x00007f8f8f71d475
  0x00007f8f8f7292ab: pop    %rax
  0x00007f8f8f7292ac: mov    %r13,%rsp
  0x00007f8f8f7292af: jmpq   *%rax
  0x00007f8f8f7292b1: nopl   0x0(%rax)
  0x00007f8f8f7292b8: add    %al,(%rax)
  0x00007f8f8f7292ba: add    %al,(%rax)
  0x00007f8f8f7292bc: add    %al,(%rax)
  0x00007f8f8f7292be: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_abs)  [0x00007f8f8f7292e0, 0x00007f8f8f729300]  32 bytes

  0x00007f8f8f7292e0: fldl   0x8(%rsp)
  0x00007f8f8f7292e4: fabs   
  0x00007f8f8f7292e6: sub    $0x10,%rsp
  0x00007f8f8f7292ea: fstpl  (%rsp)
  0x00007f8f8f7292ed: vmovsd (%rsp),%xmm0
  0x00007f8f8f7292f2: add    $0x10,%rsp
  0x00007f8f8f7292f6: pop    %rax
  0x00007f8f8f7292f7: mov    %r13,%rsp
  0x00007f8f8f7292fa: jmpq   *%rax
  0x00007f8f8f7292fc: nopl   0x0(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_sqrt)  [0x00007f8f8f729320, 0x00007f8f8f729340]  32 bytes

  0x00007f8f8f729320: vsqrtsd 0x8(%rsp),%xmm0,%xmm0
  0x00007f8f8f729326: pop    %rax
  0x00007f8f8f729327: mov    %r13,%rsp
  0x00007f8f8f72932a: jmpq   *%rax
  0x00007f8f8f72932c: nopl   0x0(%rax)
  0x00007f8f8f729330: add    %al,(%rax)
  0x00007f8f8f729332: add    %al,(%rax)
  0x00007f8f8f729334: add    %al,(%rax)
  0x00007f8f8f729336: add    %al,(%rax)
  0x00007f8f8f729338: add    %al,(%rax)
  0x00007f8f8f72933a: add    %al,(%rax)
  0x00007f8f8f72933c: add    %al,(%rax)
  0x00007f8f8f72933e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_log)  [0x00007f8f8f729360, 0x00007f8f8f729380]  32 bytes

  0x00007f8f8f729360: vmovsd 0x8(%rsp),%xmm0
  0x00007f8f8f729366: callq  0x00007f8f8f71b126
  0x00007f8f8f72936b: pop    %rax
  0x00007f8f8f72936c: mov    %r13,%rsp
  0x00007f8f8f72936f: jmpq   *%rax
  0x00007f8f8f729371: nopl   0x0(%rax)
  0x00007f8f8f729378: add    %al,(%rax)
  0x00007f8f8f72937a: add    %al,(%rax)
  0x00007f8f8f72937c: add    %al,(%rax)
  0x00007f8f8f72937e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_log10)  [0x00007f8f8f7293a0, 0x00007f8f8f7293c0]  32 bytes

  0x00007f8f8f7293a0: vmovsd 0x8(%rsp),%xmm0
  0x00007f8f8f7293a6: callq  0x00007f8f8f71b3a2
  0x00007f8f8f7293ab: pop    %rax
  0x00007f8f8f7293ac: mov    %r13,%rsp
  0x00007f8f8f7293af: jmpq   *%rax
  0x00007f8f8f7293b1: nopl   0x0(%rax)
  0x00007f8f8f7293b8: add    %al,(%rax)
  0x00007f8f8f7293ba: add    %al,(%rax)
  0x00007f8f8f7293bc: add    %al,(%rax)
  0x00007f8f8f7293be: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_exp)  [0x00007f8f8f7293e0, 0x00007f8f8f729400]  32 bytes

  0x00007f8f8f7293e0: vmovsd 0x8(%rsp),%xmm0
  0x00007f8f8f7293e6: callq  0x00007f8f8f71adf9
  0x00007f8f8f7293eb: pop    %rax
  0x00007f8f8f7293ec: mov    %r13,%rsp
  0x00007f8f8f7293ef: jmpq   *%rax
  0x00007f8f8f7293f1: nopl   0x0(%rax)
  0x00007f8f8f7293f8: add    %al,(%rax)
  0x00007f8f8f7293fa: add    %al,(%rax)
  0x00007f8f8f7293fc: add    %al,(%rax)
  0x00007f8f8f7293fe: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_pow)  [0x00007f8f8f729420, 0x00007f8f8f729440]  32 bytes

  0x00007f8f8f729420: vmovsd 0x8(%rsp),%xmm1
  0x00007f8f8f729426: vmovsd 0x18(%rsp),%xmm0
  0x00007f8f8f72942c: callq  0x00007f8f8f71b651
  0x00007f8f8f729431: pop    %rax
  0x00007f8f8f729432: mov    %r13,%rsp
  0x00007f8f8f729435: jmpq   *%rax
  0x00007f8f8f729437: nop
  0x00007f8f8f729438: add    %al,(%rax)
  0x00007f8f8f72943a: add    %al,(%rax)
  0x00007f8f8f72943c: add    %al,(%rax)
  0x00007f8f8f72943e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_lang_math_fmaF)  [0x00007f8f8f729460, 0x00007f8f8f729480]  32 bytes

  0x00007f8f8f729460: vmovss 0x8(%rsp),%xmm0
  0x00007f8f8f729466: vmovss 0x10(%rsp),%xmm1
  0x00007f8f8f72946c: vmovss 0x18(%rsp),%xmm2
  0x00007f8f8f729472: vfmadd231ss %xmm2,%xmm1,%xmm0
  0x00007f8f8f729477: pop    %rax
  0x00007f8f8f729478: mov    %r13,%rsp
  0x00007f8f8f72947b: jmpq   *%rax
  0x00007f8f8f72947d: data16 xchg %ax,%ax

----------------------------------------------------------------------
method entry point (kind = java_lang_math_fmaD)  [0x00007f8f8f7294a0, 0x00007f8f8f7294c0]  32 bytes

  0x00007f8f8f7294a0: vmovsd 0x8(%rsp),%xmm0
  0x00007f8f8f7294a6: vmovsd 0x18(%rsp),%xmm1
  0x00007f8f8f7294ac: vmovsd 0x28(%rsp),%xmm2
  0x00007f8f8f7294b2: vfmadd231sd %xmm2,%xmm1,%xmm0
  0x00007f8f8f7294b7: pop    %rax
  0x00007f8f8f7294b8: mov    %r13,%rsp
  0x00007f8f8f7294bb: jmpq   *%rax
  0x00007f8f8f7294bd: data16 xchg %ax,%ax

----------------------------------------------------------------------
method entry point (kind = java_lang_ref_reference_get)  [0x00007f8f8f7294e0, 0x00007f8f8f729580]  160 bytes

  0x00007f8f8f7294e0: mov    0x8(%rsp),%rax
  0x00007f8f8f7294e5: test   %rax,%rax
  0x00007f8f8f7294e8: je     0x00007f8f8f72955e
  0x00007f8f8f7294ee: mov    0xc(%rax),%eax
  0x00007f8f8f7294f1: shl    $0x3,%rax
  0x00007f8f8f7294f5: cmpb   $0x0,0x30(%r15)
  0x00007f8f8f7294fa: je     0x00007f8f8f729557
  0x00007f8f8f729500: cmp    $0x0,%rax
  0x00007f8f8f729504: je     0x00007f8f8f729557
  0x00007f8f8f72950a: mov    0x38(%r15),%rbx
  0x00007f8f8f72950e: cmp    $0x0,%rbx
  0x00007f8f8f729512: je     0x00007f8f8f72952c
  0x00007f8f8f729518: sub    $0x8,%rbx
  0x00007f8f8f72951c: mov    %rbx,0x38(%r15)
  0x00007f8f8f729520: add    0x48(%r15),%rbx
  0x00007f8f8f729524: mov    %rax,(%rbx)
  0x00007f8f8f729527: jmpq   0x00007f8f8f729557
  0x00007f8f8f72952c: push   %rax
  0x00007f8f8f72952d: mov    %r15,%rsi
  0x00007f8f8f729530: mov    %rax,%rdi
  0x00007f8f8f729533: test   $0xf,%esp
  0x00007f8f8f729539: je     0x00007f8f8f729551
  0x00007f8f8f72953f: sub    $0x8,%rsp
  0x00007f8f8f729543: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f729548: add    $0x8,%rsp
  0x00007f8f8f72954c: jmpq   0x00007f8f8f729556
  0x00007f8f8f729551: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f729556: pop    %rax
  0x00007f8f8f729557: pop    %rdi
  0x00007f8f8f729558: mov    %r13,%rsp
  0x00007f8f8f72955b: jmpq   *%rdi
  0x00007f8f8f72955d: retq   
  0x00007f8f8f72955e: jmpq   0x00007f8f8f728520
  0x00007f8f8f729563: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f729568: add    %al,(%rax)
  0x00007f8f8f72956a: add    %al,(%rax)
  0x00007f8f8f72956c: add    %al,(%rax)
  0x00007f8f8f72956e: add    %al,(%rax)
  0x00007f8f8f729570: add    %al,(%rax)
  0x00007f8f8f729572: add    %al,(%rax)
  0x00007f8f8f729574: add    %al,(%rax)
  0x00007f8f8f729576: add    %al,(%rax)
  0x00007f8f8f729578: add    %al,(%rax)
  0x00007f8f8f72957a: add    %al,(%rax)
  0x00007f8f8f72957c: add    %al,(%rax)
  0x00007f8f8f72957e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = native)  [0x00007f8f8f7295a0, 0x00007f8f8f729fe0]  2624 bytes

  0x00007f8f8f7295a0: mov    0x8(%rbx),%rcx
  0x00007f8f8f7295a4: movzwl 0x34(%rcx),%ecx
  0x00007f8f8f7295a8: pop    %rax
  0x00007f8f8f7295a9: lea    -0x8(%rsp,%rcx,8),%r14
  0x00007f8f8f7295ae: pushq  $0x0
  0x00007f8f8f7295b3: pushq  $0x0
  0x00007f8f8f7295b8: push   %rax
  0x00007f8f8f7295b9: push   %rbp
  0x00007f8f8f7295ba: mov    %rsp,%rbp
  0x00007f8f8f7295bd: push   %r13
  0x00007f8f8f7295bf: pushq  $0x0
  0x00007f8f8f7295c4: mov    0x8(%rbx),%r13
  0x00007f8f8f7295c8: lea    0x38(%r13),%r13
  0x00007f8f8f7295cc: push   %rbx
  0x00007f8f8f7295cd: mov    0x8(%rbx),%rdx
  0x00007f8f8f7295d1: mov    0x8(%rdx),%rdx
  0x00007f8f8f7295d5: mov    0x18(%rdx),%rdx
  0x00007f8f8f7295d9: mov    0x70(%rdx),%rdx
  0x00007f8f8f7295dd: mov    (%rdx),%rdx
  0x00007f8f8f7295e0: push   %rdx
  0x00007f8f8f7295e1: mov    0x10(%rbx),%rdx
  0x00007f8f8f7295e5: test   %rdx,%rdx
  0x00007f8f8f7295e8: je     0x00007f8f8f7295f5
  0x00007f8f8f7295ee: add    $0x138,%rdx
  0x00007f8f8f7295f5: push   %rdx
  0x00007f8f8f7295f6: mov    0x8(%rbx),%rdx
  0x00007f8f8f7295fa: mov    0x8(%rdx),%rdx
  0x00007f8f8f7295fe: mov    0x10(%rdx),%rdx
  0x00007f8f8f729602: push   %rdx
  0x00007f8f8f729603: push   %r14
  0x00007f8f8f729605: pushq  $0x0
  0x00007f8f8f72960a: pushq  $0x0
  0x00007f8f8f72960f: mov    %rsp,(%rsp)
  0x00007f8f8f729613: movb   $0x1,0x3dd(%r15)
  0x00007f8f8f72961b: mov    0x10(%rbx),%rax
  0x00007f8f8f72961f: test   %rax,%rax
  0x00007f8f8f729622: je     0x00007f8f8f729644
  0x00007f8f8f729624: mov    0x104(%rax),%ecx
  0x00007f8f8f72962a: add    $0x8,%ecx
  0x00007f8f8f72962d: mov    %ecx,0x104(%rax)
  0x00007f8f8f729633: and    0x118(%rax),%ecx
  0x00007f8f8f729639: je     0x00007f8f8f729f32
  0x00007f8f8f72963f: jmpq   0x00007f8f8f72970f
  0x00007f8f8f729644: mov    0x18(%rbx),%rax
  0x00007f8f8f729648: test   %rax,%rax
  0x00007f8f8f72964b: jne    0x00007f8f8f7296fd
  0x00007f8f8f729651: callq  0x00007f8f8f72965b
  0x00007f8f8f729656: jmpq   0x00007f8f8f7296f0
  0x00007f8f8f72965b: mov    %rbx,%rsi
  0x00007f8f8f72965e: lea    0x8(%rsp),%rax
  0x00007f8f8f729663: mov    %r13,-0x40(%rbp)
  0x00007f8f8f729667: mov    %r15,%rdi
  0x00007f8f8f72966a: vzeroupper 
  0x00007f8f8f72966d: mov    %rbp,0x330(%r15)
  0x00007f8f8f729674: mov    %rax,0x320(%r15)
  0x00007f8f8f72967b: test   $0xf,%esp
  0x00007f8f8f729681: je     0x00007f8f8f729699
  0x00007f8f8f729687: sub    $0x8,%rsp
  0x00007f8f8f72968b: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f729690: add    $0x8,%rsp
  0x00007f8f8f729694: jmpq   0x00007f8f8f72969e
  0x00007f8f8f729699: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f72969e: movabs $0x0,%r10
  0x00007f8f8f7296a8: mov    %r10,0x320(%r15)
  0x00007f8f8f7296af: movabs $0x0,%r10
  0x00007f8f8f7296b9: mov    %r10,0x330(%r15)
  0x00007f8f8f7296c0: movabs $0x0,%r10
  0x00007f8f8f7296ca: mov    %r10,0x328(%r15)
  0x00007f8f8f7296d1: vzeroupper 
  0x00007f8f8f7296d4: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7296dc: je     0x00007f8f8f7296e7
  0x00007f8f8f7296e2: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7296e7: mov    -0x40(%rbp),%r13
  0x00007f8f8f7296eb: mov    -0x38(%rbp),%r14
  0x00007f8f8f7296ef: retq   
  0x00007f8f8f7296f0: mov    0x18(%rbx),%rax
  0x00007f8f8f7296f4: test   %rax,%rax
  0x00007f8f8f7296f7: je     0x00007f8f8f72970f
  0x00007f8f8f7296fd: mov    0x18(%rax),%ecx
  0x00007f8f8f729700: add    $0x8,%ecx
  0x00007f8f8f729703: mov    %ecx,0x18(%rax)
  0x00007f8f8f729706: and    0x30(%rax),%ecx
  0x00007f8f8f729709: je     0x00007f8f8f729f32
  0x00007f8f8f72970f: mov    %eax,-0x14000(%rsp)
  0x00007f8f8f729716: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f72971e: cmpb   $0x0,0x1e48da62(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f729725: je     0x00007f8f8f729755
  0x00007f8f8f72972b: mov    -0x18(%rbp),%rsi
  0x00007f8f8f72972f: mov    %r15,%rdi
  0x00007f8f8f729732: test   $0xf,%esp
  0x00007f8f8f729738: je     0x00007f8f8f729750
  0x00007f8f8f72973e: sub    $0x8,%rsp
  0x00007f8f8f729742: callq  0x00007f8fad48e620 = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x00007f8f8f729747: add    $0x8,%rsp
  0x00007f8f8f72974b: jmpq   0x00007f8f8f729755
  0x00007f8f8f729750: callq  0x00007f8fad48e620 = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x00007f8f8f729755: mov    -0x18(%rbp),%rbx
  0x00007f8f8f729759: mov    0x8(%rbx),%r11
  0x00007f8f8f72975d: movzwl 0x34(%r11),%r11d
  0x00007f8f8f729762: shl    $0x3,%r11d
  0x00007f8f8f729766: sub    %r11,%rsp
  0x00007f8f8f729769: sub    $0x0,%rsp
  0x00007f8f8f72976d: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f729771: mov    0x60(%rbx),%r11
  0x00007f8f8f729775: test   %r11,%r11
  0x00007f8f8f729778: jne    0x00007f8f8f729825
  0x00007f8f8f72977e: callq  0x00007f8f8f729788
  0x00007f8f8f729783: jmpq   0x00007f8f8f72981d
  0x00007f8f8f729788: mov    %rbx,%rsi
  0x00007f8f8f72978b: lea    0x8(%rsp),%rax
  0x00007f8f8f729790: mov    %r13,-0x40(%rbp)
  0x00007f8f8f729794: mov    %r15,%rdi
  0x00007f8f8f729797: vzeroupper 
  0x00007f8f8f72979a: mov    %rbp,0x330(%r15)
  0x00007f8f8f7297a1: mov    %rax,0x320(%r15)
  0x00007f8f8f7297a8: test   $0xf,%esp
  0x00007f8f8f7297ae: je     0x00007f8f8f7297c6
  0x00007f8f8f7297b4: sub    $0x8,%rsp
  0x00007f8f8f7297b8: callq  0x00007f8fad030970 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x00007f8f8f7297bd: add    $0x8,%rsp
  0x00007f8f8f7297c1: jmpq   0x00007f8f8f7297cb
  0x00007f8f8f7297c6: callq  0x00007f8fad030970 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x00007f8f8f7297cb: movabs $0x0,%r10
  0x00007f8f8f7297d5: mov    %r10,0x320(%r15)
  0x00007f8f8f7297dc: movabs $0x0,%r10
  0x00007f8f8f7297e6: mov    %r10,0x330(%r15)
  0x00007f8f8f7297ed: movabs $0x0,%r10
  0x00007f8f8f7297f7: mov    %r10,0x328(%r15)
  0x00007f8f8f7297fe: vzeroupper 
  0x00007f8f8f729801: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f729809: je     0x00007f8f8f729814
  0x00007f8f8f72980f: jmpq   0x00007f8f8f71a780
  0x00007f8f8f729814: mov    -0x40(%rbp),%r13
  0x00007f8f8f729818: mov    -0x38(%rbp),%r14
  0x00007f8f8f72981c: retq   
  0x00007f8f8f72981d: mov    -0x18(%rbp),%rbx
  0x00007f8f8f729821: mov    0x60(%rbx),%r11
  0x00007f8f8f729825: callq  *%r11
  0x00007f8f8f729828: mov    -0x18(%rbp),%rbx
  0x00007f8f8f72982c: mov    %rax,0x18(%rbp)
  0x00007f8f8f729830: mov    0x20(%rbx),%r11d
  0x00007f8f8f729834: test   $0x8,%r11d
  0x00007f8f8f72983b: je     0x00007f8f8f72985c
  0x00007f8f8f729841: mov    0x8(%rbx),%r11
  0x00007f8f8f729845: mov    0x8(%r11),%r11
  0x00007f8f8f729849: mov    0x18(%r11),%r11
  0x00007f8f8f72984d: mov    0x70(%r11),%r11
  0x00007f8f8f729851: mov    (%r11),%r11
  0x00007f8f8f729854: mov    %r11,0x10(%rbp)
  0x00007f8f8f729858: lea    0x10(%rbp),%rsi
  0x00007f8f8f72985c: mov    0x58(%rbx),%rax
  0x00007f8f8f729860: movabs $0x7f8fad48ac60,%r10
  0x00007f8f8f72986a: cmp    %r10,%rax
  0x00007f8f8f72986d: jne    0x00007f8f8f72991a
  0x00007f8f8f729873: callq  0x00007f8f8f72987d
  0x00007f8f8f729878: jmpq   0x00007f8f8f729912
  0x00007f8f8f72987d: mov    %rbx,%rsi
  0x00007f8f8f729880: lea    0x8(%rsp),%rax
  0x00007f8f8f729885: mov    %r13,-0x40(%rbp)
  0x00007f8f8f729889: mov    %r15,%rdi
  0x00007f8f8f72988c: vzeroupper 
  0x00007f8f8f72988f: mov    %rbp,0x330(%r15)
  0x00007f8f8f729896: mov    %rax,0x320(%r15)
  0x00007f8f8f72989d: test   $0xf,%esp
  0x00007f8f8f7298a3: je     0x00007f8f8f7298bb
  0x00007f8f8f7298a9: sub    $0x8,%rsp
  0x00007f8f8f7298ad: callq  0x00007f8fad030970 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x00007f8f8f7298b2: add    $0x8,%rsp
  0x00007f8f8f7298b6: jmpq   0x00007f8f8f7298c0
  0x00007f8f8f7298bb: callq  0x00007f8fad030970 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x00007f8f8f7298c0: movabs $0x0,%r10
  0x00007f8f8f7298ca: mov    %r10,0x320(%r15)
  0x00007f8f8f7298d1: movabs $0x0,%r10
  0x00007f8f8f7298db: mov    %r10,0x330(%r15)
  0x00007f8f8f7298e2: movabs $0x0,%r10
  0x00007f8f8f7298ec: mov    %r10,0x328(%r15)
  0x00007f8f8f7298f3: vzeroupper 
  0x00007f8f8f7298f6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7298fe: je     0x00007f8f8f729909
  0x00007f8f8f729904: jmpq   0x00007f8f8f71a780
  0x00007f8f8f729909: mov    -0x40(%rbp),%r13
  0x00007f8f8f72990d: mov    -0x38(%rbp),%r14
  0x00007f8f8f729911: retq   
  0x00007f8f8f729912: mov    -0x18(%rbp),%rbx
  0x00007f8f8f729916: mov    0x58(%rbx),%rax
  0x00007f8f8f72991a: lea    0x340(%r15),%rdi
  0x00007f8f8f729921: vzeroupper 
  0x00007f8f8f729924: mov    %rbp,0x330(%r15)
  0x00007f8f8f72992b: movabs $0x7f8f8f729921,%r10
  0x00007f8f8f729935: mov    %r10,0x328(%r15)
  0x00007f8f8f72993c: mov    %rsp,0x320(%r15)
  0x00007f8f8f729943: movl   $0x4,0x3b8(%r15)
  0x00007f8f8f72994e: callq  *%rax
  0x00007f8f8f729950: vzeroupper 
  0x00007f8f8f729953: sub    $0x10,%rsp
  0x00007f8f8f729957: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72995c: sub    $0x10,%rsp
  0x00007f8f8f729960: mov    %rax,(%rsp)
  0x00007f8f8f729964: movabs $0x0,%r10
  0x00007f8f8f72996e: mov    %r10,0x8(%rsp)
  0x00007f8f8f729973: movl   $0x5,0x3b8(%r15)
  0x00007f8f8f72997e: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f729984: testb  $0x8,0x108(%r15)
  0x00007f8f8f72998c: jne    0x00007f8f8f7299a3
  0x00007f8f8f729992: cmpl   $0x0,0xd8(%r15)
  0x00007f8f8f72999d: je     0x00007f8f8f7299bc
  0x00007f8f8f7299a3: mov    %r15,%rdi
  0x00007f8f8f7299a6: mov    %rsp,%r12
  0x00007f8f8f7299a9: sub    $0x0,%rsp
  0x00007f8f8f7299ad: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f7299b1: callq  0x00007f8fad574630 = JavaThread::check_special_condition_for_native_trans(JavaThread*)
  0x00007f8f8f7299b6: mov    %r12,%rsp
  0x00007f8f8f7299b9: xor    %r12,%r12
  0x00007f8f8f7299bc: movl   $0x8,0x3b8(%r15)
  0x00007f8f8f7299c7: movabs $0x0,%r10
  0x00007f8f8f7299d1: mov    %r10,0x320(%r15)
  0x00007f8f8f7299d8: movabs $0x0,%r10
  0x00007f8f8f7299e2: mov    %r10,0x330(%r15)
  0x00007f8f8f7299e9: movabs $0x0,%r10
  0x00007f8f8f7299f3: mov    %r10,0x328(%r15)
  0x00007f8f8f7299fa: vzeroupper 
  0x00007f8f8f7299fd: mov    0xe0(%r15),%r11
  0x00007f8f8f729a04: movl   $0x0,0x100(%r11)
  0x00007f8f8f729a0f: movabs $0x7f8f8f72689b,%r11
  0x00007f8f8f729a19: cmp    0x18(%rbp),%r11
  0x00007f8f8f729a1d: jne    0x00007f8f8f729ac9
  0x00007f8f8f729a23: mov    (%rsp),%rax
  0x00007f8f8f729a27: add    $0x10,%rsp
  0x00007f8f8f729a2b: test   %rax,%rax
  0x00007f8f8f729a2e: je     0x00007f8f8f729aae
  0x00007f8f8f729a34: test   $0x1,%rax
  0x00007f8f8f729a3a: je     0x00007f8f8f729aab
  0x00007f8f8f729a40: mov    -0x1(%rax),%rax
  0x00007f8f8f729a44: cmpb   $0x0,0x30(%r15)
  0x00007f8f8f729a49: je     0x00007f8f8f729aa6
  0x00007f8f8f729a4f: cmp    $0x0,%rax
  0x00007f8f8f729a53: je     0x00007f8f8f729aa6
  0x00007f8f8f729a59: mov    0x38(%r15),%r11
  0x00007f8f8f729a5d: cmp    $0x0,%r11
  0x00007f8f8f729a61: je     0x00007f8f8f729a7b
  0x00007f8f8f729a67: sub    $0x8,%r11
  0x00007f8f8f729a6b: mov    %r11,0x38(%r15)
  0x00007f8f8f729a6f: add    0x48(%r15),%r11
  0x00007f8f8f729a73: mov    %rax,(%r11)
  0x00007f8f8f729a76: jmpq   0x00007f8f8f729aa6
  0x00007f8f8f729a7b: push   %rax
  0x00007f8f8f729a7c: mov    %r15,%rsi
  0x00007f8f8f729a7f: mov    %rax,%rdi
  0x00007f8f8f729a82: test   $0xf,%esp
  0x00007f8f8f729a88: je     0x00007f8f8f729aa0
  0x00007f8f8f729a8e: sub    $0x8,%rsp
  0x00007f8f8f729a92: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f729a97: add    $0x8,%rsp
  0x00007f8f8f729a9b: jmpq   0x00007f8f8f729aa5
  0x00007f8f8f729aa0: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f729aa5: pop    %rax
  0x00007f8f8f729aa6: jmpq   0x00007f8f8f729aae
  0x00007f8f8f729aab: mov    (%rax),%rax
  0x00007f8f8f729aae: mov    %rax,0x10(%rbp)
  0x00007f8f8f729ab2: sub    $0x10,%rsp
  0x00007f8f8f729ab6: mov    %rax,(%rsp)
  0x00007f8f8f729aba: movabs $0x0,%r10
  0x00007f8f8f729ac4: mov    %r10,0x8(%rsp)
  0x00007f8f8f729ac9: cmpl   $0x2,0x408(%r15)
  0x00007f8f8f729ad4: jne    0x00007f8f8f729b97
  0x00007f8f8f729ada: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f729adf: sub    $0x80,%rsp
  0x00007f8f8f729ae6: mov    %rax,0x78(%rsp)
  0x00007f8f8f729aeb: mov    %rcx,0x70(%rsp)
  0x00007f8f8f729af0: mov    %rdx,0x68(%rsp)
  0x00007f8f8f729af5: mov    %rbx,0x60(%rsp)
  0x00007f8f8f729afa: mov    %rbp,0x50(%rsp)
  0x00007f8f8f729aff: mov    %rsi,0x48(%rsp)
  0x00007f8f8f729b04: mov    %rdi,0x40(%rsp)
  0x00007f8f8f729b09: mov    %r8,0x38(%rsp)
  0x00007f8f8f729b0e: mov    %r9,0x30(%rsp)
  0x00007f8f8f729b13: mov    %r10,0x28(%rsp)
  0x00007f8f8f729b18: mov    %r11,0x20(%rsp)
  0x00007f8f8f729b1d: mov    %r12,0x18(%rsp)
  0x00007f8f8f729b22: mov    %r13,0x10(%rsp)
  0x00007f8f8f729b27: mov    %r14,0x8(%rsp)
  0x00007f8f8f729b2c: mov    %r15,(%rsp)
  0x00007f8f8f729b30: mov    %rsp,%r12
  0x00007f8f8f729b33: sub    $0x0,%rsp
  0x00007f8f8f729b37: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f729b3b: callq  0x00007f8fad4940e0 = SharedRuntime::reguard_yellow_pages()
  0x00007f8f8f729b40: mov    %r12,%rsp
  0x00007f8f8f729b43: mov    (%rsp),%r15
  0x00007f8f8f729b47: mov    0x8(%rsp),%r14
  0x00007f8f8f729b4c: mov    0x10(%rsp),%r13
  0x00007f8f8f729b51: mov    0x18(%rsp),%r12
  0x00007f8f8f729b56: mov    0x20(%rsp),%r11
  0x00007f8f8f729b5b: mov    0x28(%rsp),%r10
  0x00007f8f8f729b60: mov    0x30(%rsp),%r9
  0x00007f8f8f729b65: mov    0x38(%rsp),%r8
  0x00007f8f8f729b6a: mov    0x40(%rsp),%rdi
  0x00007f8f8f729b6f: mov    0x48(%rsp),%rsi
  0x00007f8f8f729b74: mov    0x50(%rsp),%rbp
  0x00007f8f8f729b79: mov    0x60(%rsp),%rbx
  0x00007f8f8f729b7e: mov    0x68(%rsp),%rdx
  0x00007f8f8f729b83: mov    0x70(%rsp),%rcx
  0x00007f8f8f729b88: mov    0x78(%rsp),%rax
  0x00007f8f8f729b8d: add    $0x80,%rsp
  0x00007f8f8f729b94: xor    %r12,%r12
  0x00007f8f8f729b97: mov    -0x18(%rbp),%rbx
  0x00007f8f8f729b9b: mov    0x8(%rbx),%r13
  0x00007f8f8f729b9f: lea    0x38(%r13),%r13
  0x00007f8f8f729ba3: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f729bab: je     0x00007f8f8f729cc4
  0x00007f8f8f729bb1: callq  0x00007f8f8f729bbb
  0x00007f8f8f729bb6: jmpq   0x00007f8f8f729c4d
  0x00007f8f8f729bbb: lea    0x8(%rsp),%rax
  0x00007f8f8f729bc0: mov    %r13,-0x40(%rbp)
  0x00007f8f8f729bc4: mov    %r15,%rdi
  0x00007f8f8f729bc7: vzeroupper 
  0x00007f8f8f729bca: mov    %rbp,0x330(%r15)
  0x00007f8f8f729bd1: mov    %rax,0x320(%r15)
  0x00007f8f8f729bd8: test   $0xf,%esp
  0x00007f8f8f729bde: je     0x00007f8f8f729bf6
  0x00007f8f8f729be4: sub    $0x8,%rsp
  0x00007f8f8f729be8: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f729bed: add    $0x8,%rsp
  0x00007f8f8f729bf1: jmpq   0x00007f8f8f729bfb
  0x00007f8f8f729bf6: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f729bfb: movabs $0x0,%r10
  0x00007f8f8f729c05: mov    %r10,0x320(%r15)
  0x00007f8f8f729c0c: movabs $0x0,%r10
  0x00007f8f8f729c16: mov    %r10,0x330(%r15)
  0x00007f8f8f729c1d: movabs $0x0,%r10
  0x00007f8f8f729c27: mov    %r10,0x328(%r15)
  0x00007f8f8f729c2e: vzeroupper 
  0x00007f8f8f729c31: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f729c39: je     0x00007f8f8f729c44
  0x00007f8f8f729c3f: jmpq   0x00007f8f8f71a780
  0x00007f8f8f729c44: mov    -0x40(%rbp),%r13
  0x00007f8f8f729c48: mov    -0x38(%rbp),%r14
  0x00007f8f8f729c4c: retq   
  0x00007f8f8f729c4d: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f729c52: sub    $0x80,%rsp
  0x00007f8f8f729c59: mov    %rax,0x78(%rsp)
  0x00007f8f8f729c5e: mov    %rcx,0x70(%rsp)
  0x00007f8f8f729c63: mov    %rdx,0x68(%rsp)
  0x00007f8f8f729c68: mov    %rbx,0x60(%rsp)
  0x00007f8f8f729c6d: mov    %rbp,0x50(%rsp)
  0x00007f8f8f729c72: mov    %rsi,0x48(%rsp)
  0x00007f8f8f729c77: mov    %rdi,0x40(%rsp)
  0x00007f8f8f729c7c: mov    %r8,0x38(%rsp)
  0x00007f8f8f729c81: mov    %r9,0x30(%rsp)
  0x00007f8f8f729c86: mov    %r10,0x28(%rsp)
  0x00007f8f8f729c8b: mov    %r11,0x20(%rsp)
  0x00007f8f8f729c90: mov    %r12,0x18(%rsp)
  0x00007f8f8f729c95: mov    %r13,0x10(%rsp)
  0x00007f8f8f729c9a: mov    %r14,0x8(%rsp)
  0x00007f8f8f729c9f: mov    %r15,(%rsp)
  0x00007f8f8f729ca3: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f729cad: movabs $0x7f8f8f729c4d,%rsi
  0x00007f8f8f729cb7: mov    %rsp,%rdx
  0x00007f8f8f729cba: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f729cbe: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f729cc3: hlt    
  0x00007f8f8f729cc4: mov    0x20(%rbx),%r11d
  0x00007f8f8f729cc8: test   $0x20,%r11d
  0x00007f8f8f729ccf: je     0x00007f8f8f729ed8
  0x00007f8f8f729cd5: lea    -0x58(%rbp),%rsi
  0x00007f8f8f729cd9: mov    0x8(%rsi),%r11
  0x00007f8f8f729cdd: test   %r11,%r11
  0x00007f8f8f729ce0: jne    0x00007f8f8f729df9
  0x00007f8f8f729ce6: callq  0x00007f8f8f729cf0
  0x00007f8f8f729ceb: jmpq   0x00007f8f8f729d82
  0x00007f8f8f729cf0: lea    0x8(%rsp),%rax
  0x00007f8f8f729cf5: mov    %r13,-0x40(%rbp)
  0x00007f8f8f729cf9: mov    %r15,%rdi
  0x00007f8f8f729cfc: vzeroupper 
  0x00007f8f8f729cff: mov    %rbp,0x330(%r15)
  0x00007f8f8f729d06: mov    %rax,0x320(%r15)
  0x00007f8f8f729d0d: test   $0xf,%esp
  0x00007f8f8f729d13: je     0x00007f8f8f729d2b
  0x00007f8f8f729d19: sub    $0x8,%rsp
  0x00007f8f8f729d1d: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f729d22: add    $0x8,%rsp
  0x00007f8f8f729d26: jmpq   0x00007f8f8f729d30
  0x00007f8f8f729d2b: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f729d30: movabs $0x0,%r10
  0x00007f8f8f729d3a: mov    %r10,0x320(%r15)
  0x00007f8f8f729d41: movabs $0x0,%r10
  0x00007f8f8f729d4b: mov    %r10,0x330(%r15)
  0x00007f8f8f729d52: movabs $0x0,%r10
  0x00007f8f8f729d5c: mov    %r10,0x328(%r15)
  0x00007f8f8f729d63: vzeroupper 
  0x00007f8f8f729d66: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f729d6e: je     0x00007f8f8f729d79
  0x00007f8f8f729d74: jmpq   0x00007f8f8f71a780
  0x00007f8f8f729d79: mov    -0x40(%rbp),%r13
  0x00007f8f8f729d7d: mov    -0x38(%rbp),%r14
  0x00007f8f8f729d81: retq   
  0x00007f8f8f729d82: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f729d87: sub    $0x80,%rsp
  0x00007f8f8f729d8e: mov    %rax,0x78(%rsp)
  0x00007f8f8f729d93: mov    %rcx,0x70(%rsp)
  0x00007f8f8f729d98: mov    %rdx,0x68(%rsp)
  0x00007f8f8f729d9d: mov    %rbx,0x60(%rsp)
  0x00007f8f8f729da2: mov    %rbp,0x50(%rsp)
  0x00007f8f8f729da7: mov    %rsi,0x48(%rsp)
  0x00007f8f8f729dac: mov    %rdi,0x40(%rsp)
  0x00007f8f8f729db1: mov    %r8,0x38(%rsp)
  0x00007f8f8f729db6: mov    %r9,0x30(%rsp)
  0x00007f8f8f729dbb: mov    %r10,0x28(%rsp)
  0x00007f8f8f729dc0: mov    %r11,0x20(%rsp)
  0x00007f8f8f729dc5: mov    %r12,0x18(%rsp)
  0x00007f8f8f729dca: mov    %r13,0x10(%rsp)
  0x00007f8f8f729dcf: mov    %r14,0x8(%rsp)
  0x00007f8f8f729dd4: mov    %r15,(%rsp)
  0x00007f8f8f729dd8: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f729de2: movabs $0x7f8f8f729d82,%rsi
  0x00007f8f8f729dec: mov    %rsp,%rdx
  0x00007f8f8f729def: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f729df3: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f729df8: hlt    
  0x00007f8f8f729df9: mov    %r13,-0x40(%rbp)
  0x00007f8f8f729dfd: lea    (%rsi),%rax
  0x00007f8f8f729e00: mov    0x8(%rsi),%rcx
  0x00007f8f8f729e04: movq   $0x0,0x8(%rsi)
  0x00007f8f8f729e0c: mov    (%rcx),%rdx
  0x00007f8f8f729e0f: and    $0x7,%rdx
  0x00007f8f8f729e13: cmp    $0x5,%rdx
  0x00007f8f8f729e17: je     0x00007f8f8f729ed4
  0x00007f8f8f729e1d: mov    (%rax),%rdx
  0x00007f8f8f729e20: test   %rdx,%rdx
  0x00007f8f8f729e23: je     0x00007f8f8f729ed4
  0x00007f8f8f729e29: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f729e2e: je     0x00007f8f8f729ed4
  0x00007f8f8f729e34: mov    %rcx,0x8(%rsi)
  0x00007f8f8f729e38: callq  0x00007f8f8f729e42
  0x00007f8f8f729e3d: jmpq   0x00007f8f8f729ed4
  0x00007f8f8f729e42: lea    0x8(%rsp),%rax
  0x00007f8f8f729e47: mov    %r13,-0x40(%rbp)
  0x00007f8f8f729e4b: mov    %r15,%rdi
  0x00007f8f8f729e4e: vzeroupper 
  0x00007f8f8f729e51: mov    %rbp,0x330(%r15)
  0x00007f8f8f729e58: mov    %rax,0x320(%r15)
  0x00007f8f8f729e5f: test   $0xf,%esp
  0x00007f8f8f729e65: je     0x00007f8f8f729e7d
  0x00007f8f8f729e6b: sub    $0x8,%rsp
  0x00007f8f8f729e6f: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f729e74: add    $0x8,%rsp
  0x00007f8f8f729e78: jmpq   0x00007f8f8f729e82
  0x00007f8f8f729e7d: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f729e82: movabs $0x0,%r10
  0x00007f8f8f729e8c: mov    %r10,0x320(%r15)
  0x00007f8f8f729e93: movabs $0x0,%r10
  0x00007f8f8f729e9d: mov    %r10,0x330(%r15)
  0x00007f8f8f729ea4: movabs $0x0,%r10
  0x00007f8f8f729eae: mov    %r10,0x328(%r15)
  0x00007f8f8f729eb5: vzeroupper 
  0x00007f8f8f729eb8: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f729ec0: je     0x00007f8f8f729ecb
  0x00007f8f8f729ec6: jmpq   0x00007f8f8f71a780
  0x00007f8f8f729ecb: mov    -0x40(%rbp),%r13
  0x00007f8f8f729ecf: mov    -0x38(%rbp),%r14
  0x00007f8f8f729ed3: retq   
  0x00007f8f8f729ed4: mov    -0x40(%rbp),%r13
  0x00007f8f8f729ed8: cmpb   $0x0,0x1e48d2a8(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f729edf: je     0x00007f8f8f729f0f
  0x00007f8f8f729ee5: mov    -0x18(%rbp),%rsi
  0x00007f8f8f729ee9: mov    %r15,%rdi
  0x00007f8f8f729eec: test   $0xf,%esp
  0x00007f8f8f729ef2: je     0x00007f8f8f729f0a
  0x00007f8f8f729ef8: sub    $0x8,%rsp
  0x00007f8f8f729efc: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f729f01: add    $0x8,%rsp
  0x00007f8f8f729f05: jmpq   0x00007f8f8f729f0f
  0x00007f8f8f729f0a: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f729f0f: mov    (%rsp),%rax
  0x00007f8f8f729f13: add    $0x10,%rsp
  0x00007f8f8f729f17: vmovsd (%rsp),%xmm0
  0x00007f8f8f729f1c: add    $0x10,%rsp
  0x00007f8f8f729f20: mov    0x18(%rbp),%r11
  0x00007f8f8f729f24: callq  *%r11
  0x00007f8f8f729f27: mov    -0x8(%rbp),%r11
  0x00007f8f8f729f2b: leaveq 
  0x00007f8f8f729f2c: pop    %rdi
  0x00007f8f8f729f2d: mov    %r11,%rsp
  0x00007f8f8f729f30: jmpq   *%rdi
  0x00007f8f8f729f32: mov    $0x0,%esi
  0x00007f8f8f729f37: callq  0x00007f8f8f729f41
  0x00007f8f8f729f3c: jmpq   0x00007f8f8f729fd3
  0x00007f8f8f729f41: lea    0x8(%rsp),%rax
  0x00007f8f8f729f46: mov    %r13,-0x40(%rbp)
  0x00007f8f8f729f4a: mov    %r15,%rdi
  0x00007f8f8f729f4d: vzeroupper 
  0x00007f8f8f729f50: mov    %rbp,0x330(%r15)
  0x00007f8f8f729f57: mov    %rax,0x320(%r15)
  0x00007f8f8f729f5e: test   $0xf,%esp
  0x00007f8f8f729f64: je     0x00007f8f8f729f7c
  0x00007f8f8f729f6a: sub    $0x8,%rsp
  0x00007f8f8f729f6e: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f729f73: add    $0x8,%rsp
  0x00007f8f8f729f77: jmpq   0x00007f8f8f729f81
  0x00007f8f8f729f7c: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f729f81: movabs $0x0,%r10
  0x00007f8f8f729f8b: mov    %r10,0x320(%r15)
  0x00007f8f8f729f92: movabs $0x0,%r10
  0x00007f8f8f729f9c: mov    %r10,0x330(%r15)
  0x00007f8f8f729fa3: movabs $0x0,%r10
  0x00007f8f8f729fad: mov    %r10,0x328(%r15)
  0x00007f8f8f729fb4: vzeroupper 
  0x00007f8f8f729fb7: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f729fbf: je     0x00007f8f8f729fca
  0x00007f8f8f729fc5: jmpq   0x00007f8f8f71a780
  0x00007f8f8f729fca: mov    -0x40(%rbp),%r13
  0x00007f8f8f729fce: mov    -0x38(%rbp),%r14
  0x00007f8f8f729fd2: retq   
  0x00007f8f8f729fd3: mov    -0x18(%rbp),%rbx
  0x00007f8f8f729fd7: jmpq   0x00007f8f8f72970f
  0x00007f8f8f729fdc: nopl   0x0(%rax)

----------------------------------------------------------------------
method entry point (kind = native_synchronized)  [0x00007f8f8f72a000, 0x00007f8f8f72ac00]  3072 bytes

  0x00007f8f8f72a000: mov    0x8(%rbx),%rcx
  0x00007f8f8f72a004: movzwl 0x34(%rcx),%ecx
  0x00007f8f8f72a008: pop    %rax
  0x00007f8f8f72a009: lea    -0x8(%rsp,%rcx,8),%r14
  0x00007f8f8f72a00e: pushq  $0x0
  0x00007f8f8f72a013: pushq  $0x0
  0x00007f8f8f72a018: push   %rax
  0x00007f8f8f72a019: push   %rbp
  0x00007f8f8f72a01a: mov    %rsp,%rbp
  0x00007f8f8f72a01d: push   %r13
  0x00007f8f8f72a01f: pushq  $0x0
  0x00007f8f8f72a024: mov    0x8(%rbx),%r13
  0x00007f8f8f72a028: lea    0x38(%r13),%r13
  0x00007f8f8f72a02c: push   %rbx
  0x00007f8f8f72a02d: mov    0x8(%rbx),%rdx
  0x00007f8f8f72a031: mov    0x8(%rdx),%rdx
  0x00007f8f8f72a035: mov    0x18(%rdx),%rdx
  0x00007f8f8f72a039: mov    0x70(%rdx),%rdx
  0x00007f8f8f72a03d: mov    (%rdx),%rdx
  0x00007f8f8f72a040: push   %rdx
  0x00007f8f8f72a041: mov    0x10(%rbx),%rdx
  0x00007f8f8f72a045: test   %rdx,%rdx
  0x00007f8f8f72a048: je     0x00007f8f8f72a055
  0x00007f8f8f72a04e: add    $0x138,%rdx
  0x00007f8f8f72a055: push   %rdx
  0x00007f8f8f72a056: mov    0x8(%rbx),%rdx
  0x00007f8f8f72a05a: mov    0x8(%rdx),%rdx
  0x00007f8f8f72a05e: mov    0x10(%rdx),%rdx
  0x00007f8f8f72a062: push   %rdx
  0x00007f8f8f72a063: push   %r14
  0x00007f8f8f72a065: pushq  $0x0
  0x00007f8f8f72a06a: pushq  $0x0
  0x00007f8f8f72a06f: mov    %rsp,(%rsp)
  0x00007f8f8f72a073: movb   $0x1,0x3dd(%r15)
  0x00007f8f8f72a07b: mov    0x10(%rbx),%rax
  0x00007f8f8f72a07f: test   %rax,%rax
  0x00007f8f8f72a082: je     0x00007f8f8f72a0a4
  0x00007f8f8f72a084: mov    0x104(%rax),%ecx
  0x00007f8f8f72a08a: add    $0x8,%ecx
  0x00007f8f8f72a08d: mov    %ecx,0x104(%rax)
  0x00007f8f8f72a093: and    0x118(%rax),%ecx
  0x00007f8f8f72a099: je     0x00007f8f8f72ab48
  0x00007f8f8f72a09f: jmpq   0x00007f8f8f72a16f
  0x00007f8f8f72a0a4: mov    0x18(%rbx),%rax
  0x00007f8f8f72a0a8: test   %rax,%rax
  0x00007f8f8f72a0ab: jne    0x00007f8f8f72a15d
  0x00007f8f8f72a0b1: callq  0x00007f8f8f72a0bb
  0x00007f8f8f72a0b6: jmpq   0x00007f8f8f72a150
  0x00007f8f8f72a0bb: mov    %rbx,%rsi
  0x00007f8f8f72a0be: lea    0x8(%rsp),%rax
  0x00007f8f8f72a0c3: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72a0c7: mov    %r15,%rdi
  0x00007f8f8f72a0ca: vzeroupper 
  0x00007f8f8f72a0cd: mov    %rbp,0x330(%r15)
  0x00007f8f8f72a0d4: mov    %rax,0x320(%r15)
  0x00007f8f8f72a0db: test   $0xf,%esp
  0x00007f8f8f72a0e1: je     0x00007f8f8f72a0f9
  0x00007f8f8f72a0e7: sub    $0x8,%rsp
  0x00007f8f8f72a0eb: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f72a0f0: add    $0x8,%rsp
  0x00007f8f8f72a0f4: jmpq   0x00007f8f8f72a0fe
  0x00007f8f8f72a0f9: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f72a0fe: movabs $0x0,%r10
  0x00007f8f8f72a108: mov    %r10,0x320(%r15)
  0x00007f8f8f72a10f: movabs $0x0,%r10
  0x00007f8f8f72a119: mov    %r10,0x330(%r15)
  0x00007f8f8f72a120: movabs $0x0,%r10
  0x00007f8f8f72a12a: mov    %r10,0x328(%r15)
  0x00007f8f8f72a131: vzeroupper 
  0x00007f8f8f72a134: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72a13c: je     0x00007f8f8f72a147
  0x00007f8f8f72a142: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72a147: mov    -0x40(%rbp),%r13
  0x00007f8f8f72a14b: mov    -0x38(%rbp),%r14
  0x00007f8f8f72a14f: retq   
  0x00007f8f8f72a150: mov    0x18(%rbx),%rax
  0x00007f8f8f72a154: test   %rax,%rax
  0x00007f8f8f72a157: je     0x00007f8f8f72a16f
  0x00007f8f8f72a15d: mov    0x18(%rax),%ecx
  0x00007f8f8f72a160: add    $0x8,%ecx
  0x00007f8f8f72a163: mov    %ecx,0x18(%rax)
  0x00007f8f8f72a166: and    0x30(%rax),%ecx
  0x00007f8f8f72a169: je     0x00007f8f8f72ab48
  0x00007f8f8f72a16f: mov    %eax,-0x14000(%rsp)
  0x00007f8f8f72a176: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f72a17e: mov    0x20(%rbx),%eax
  0x00007f8f8f72a181: test   $0x8,%eax
  0x00007f8f8f72a186: mov    (%r14),%rax
  0x00007f8f8f72a189: je     0x00007f8f8f72a1a2
  0x00007f8f8f72a18f: mov    0x8(%rbx),%rax
  0x00007f8f8f72a193: mov    0x8(%rax),%rax
  0x00007f8f8f72a197: mov    0x18(%rax),%rax
  0x00007f8f8f72a19b: mov    0x70(%rax),%rax
  0x00007f8f8f72a19f: mov    (%rax),%rax
  0x00007f8f8f72a1a2: sub    $0x10,%rsp
  0x00007f8f8f72a1a6: mov    %rsp,-0x48(%rbp)
  0x00007f8f8f72a1aa: mov    %rax,0x8(%rsp)
  0x00007f8f8f72a1af: mov    %rsp,%rsi
  0x00007f8f8f72a1b2: mov    0x8(%rsi),%rcx
  0x00007f8f8f72a1b6: mov    (%rcx),%rax
  0x00007f8f8f72a1b9: mov    %rax,%rbx
  0x00007f8f8f72a1bc: and    $0x7,%rbx
  0x00007f8f8f72a1c0: cmp    $0x5,%rbx
  0x00007f8f8f72a1c4: jne    0x00007f8f8f72a26f
  0x00007f8f8f72a1ca: mov    0x8(%rcx),%ebx
  0x00007f8f8f72a1cd: movabs $0x800000000,%r12
  0x00007f8f8f72a1d7: add    %r12,%rbx
  0x00007f8f8f72a1da: xor    %r12,%r12
  0x00007f8f8f72a1dd: mov    0xb8(%rbx),%rbx
  0x00007f8f8f72a1e4: or     %r15,%rbx
  0x00007f8f8f72a1e7: xor    %rax,%rbx
  0x00007f8f8f72a1ea: and    $0xffffffffffffff87,%rbx
  0x00007f8f8f72a1ee: je     0x00007f8f8f72a334
  0x00007f8f8f72a1f4: test   $0x7,%rbx
  0x00007f8f8f72a1fb: jne    0x00007f8f8f72a250
  0x00007f8f8f72a1fd: test   $0x300,%rbx
  0x00007f8f8f72a204: jne    0x00007f8f8f72a223
  0x00007f8f8f72a206: and    $0x37f,%rax
  0x00007f8f8f72a20d: mov    %rax,%rbx
  0x00007f8f8f72a210: or     %r15,%rbx
  0x00007f8f8f72a213: lock cmpxchg %rbx,(%rcx)
  0x00007f8f8f72a218: jne    0x00007f8f8f72a298
  0x00007f8f8f72a21e: jmpq   0x00007f8f8f72a334
  0x00007f8f8f72a223: mov    0x8(%rcx),%ebx
  0x00007f8f8f72a226: movabs $0x800000000,%r12
  0x00007f8f8f72a230: add    %r12,%rbx
  0x00007f8f8f72a233: xor    %r12,%r12
  0x00007f8f8f72a236: mov    0xb8(%rbx),%rbx
  0x00007f8f8f72a23d: or     %r15,%rbx
  0x00007f8f8f72a240: lock cmpxchg %rbx,(%rcx)
  0x00007f8f8f72a245: jne    0x00007f8f8f72a298
  0x00007f8f8f72a24b: jmpq   0x00007f8f8f72a334
  0x00007f8f8f72a250: mov    0x8(%rcx),%ebx
  0x00007f8f8f72a253: movabs $0x800000000,%r12
  0x00007f8f8f72a25d: add    %r12,%rbx
  0x00007f8f8f72a260: xor    %r12,%r12
  0x00007f8f8f72a263: mov    0xb8(%rbx),%rbx
  0x00007f8f8f72a26a: lock cmpxchg %rbx,(%rcx)
  0x00007f8f8f72a26f: mov    $0x1,%eax
  0x00007f8f8f72a274: or     (%rcx),%rax
  0x00007f8f8f72a277: mov    %rax,(%rsi)
  0x00007f8f8f72a27a: lock cmpxchg %rsi,(%rcx)
  0x00007f8f8f72a27f: je     0x00007f8f8f72a334
  0x00007f8f8f72a285: sub    %rsp,%rax
  0x00007f8f8f72a288: and    $0xfffffffffffff007,%rax
  0x00007f8f8f72a28f: mov    %rax,(%rsi)
  0x00007f8f8f72a292: je     0x00007f8f8f72a334
  0x00007f8f8f72a298: callq  0x00007f8f8f72a2a2
  0x00007f8f8f72a29d: jmpq   0x00007f8f8f72a334
  0x00007f8f8f72a2a2: lea    0x8(%rsp),%rax
  0x00007f8f8f72a2a7: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72a2ab: mov    %r15,%rdi
  0x00007f8f8f72a2ae: vzeroupper 
  0x00007f8f8f72a2b1: mov    %rbp,0x330(%r15)
  0x00007f8f8f72a2b8: mov    %rax,0x320(%r15)
  0x00007f8f8f72a2bf: test   $0xf,%esp
  0x00007f8f8f72a2c5: je     0x00007f8f8f72a2dd
  0x00007f8f8f72a2cb: sub    $0x8,%rsp
  0x00007f8f8f72a2cf: callq  0x00007f8fad02c250 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72a2d4: add    $0x8,%rsp
  0x00007f8f8f72a2d8: jmpq   0x00007f8f8f72a2e2
  0x00007f8f8f72a2dd: callq  0x00007f8fad02c250 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72a2e2: movabs $0x0,%r10
  0x00007f8f8f72a2ec: mov    %r10,0x320(%r15)
  0x00007f8f8f72a2f3: movabs $0x0,%r10
  0x00007f8f8f72a2fd: mov    %r10,0x330(%r15)
  0x00007f8f8f72a304: movabs $0x0,%r10
  0x00007f8f8f72a30e: mov    %r10,0x328(%r15)
  0x00007f8f8f72a315: vzeroupper 
  0x00007f8f8f72a318: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72a320: je     0x00007f8f8f72a32b
  0x00007f8f8f72a326: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72a32b: mov    -0x40(%rbp),%r13
  0x00007f8f8f72a32f: mov    -0x38(%rbp),%r14
  0x00007f8f8f72a333: retq   
  0x00007f8f8f72a334: cmpb   $0x0,0x1e48ce4c(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f72a33b: je     0x00007f8f8f72a36b
  0x00007f8f8f72a341: mov    -0x18(%rbp),%rsi
  0x00007f8f8f72a345: mov    %r15,%rdi
  0x00007f8f8f72a348: test   $0xf,%esp
  0x00007f8f8f72a34e: je     0x00007f8f8f72a366
  0x00007f8f8f72a354: sub    $0x8,%rsp
  0x00007f8f8f72a358: callq  0x00007f8fad48e620 = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x00007f8f8f72a35d: add    $0x8,%rsp
  0x00007f8f8f72a361: jmpq   0x00007f8f8f72a36b
  0x00007f8f8f72a366: callq  0x00007f8fad48e620 = SharedRuntime::dtrace_method_entry(JavaThread*, Method*)
  0x00007f8f8f72a36b: mov    -0x18(%rbp),%rbx
  0x00007f8f8f72a36f: mov    0x8(%rbx),%r11
  0x00007f8f8f72a373: movzwl 0x34(%r11),%r11d
  0x00007f8f8f72a378: shl    $0x3,%r11d
  0x00007f8f8f72a37c: sub    %r11,%rsp
  0x00007f8f8f72a37f: sub    $0x0,%rsp
  0x00007f8f8f72a383: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f72a387: mov    0x60(%rbx),%r11
  0x00007f8f8f72a38b: test   %r11,%r11
  0x00007f8f8f72a38e: jne    0x00007f8f8f72a43b
  0x00007f8f8f72a394: callq  0x00007f8f8f72a39e
  0x00007f8f8f72a399: jmpq   0x00007f8f8f72a433
  0x00007f8f8f72a39e: mov    %rbx,%rsi
  0x00007f8f8f72a3a1: lea    0x8(%rsp),%rax
  0x00007f8f8f72a3a6: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72a3aa: mov    %r15,%rdi
  0x00007f8f8f72a3ad: vzeroupper 
  0x00007f8f8f72a3b0: mov    %rbp,0x330(%r15)
  0x00007f8f8f72a3b7: mov    %rax,0x320(%r15)
  0x00007f8f8f72a3be: test   $0xf,%esp
  0x00007f8f8f72a3c4: je     0x00007f8f8f72a3dc
  0x00007f8f8f72a3ca: sub    $0x8,%rsp
  0x00007f8f8f72a3ce: callq  0x00007f8fad030970 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x00007f8f8f72a3d3: add    $0x8,%rsp
  0x00007f8f8f72a3d7: jmpq   0x00007f8f8f72a3e1
  0x00007f8f8f72a3dc: callq  0x00007f8fad030970 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x00007f8f8f72a3e1: movabs $0x0,%r10
  0x00007f8f8f72a3eb: mov    %r10,0x320(%r15)
  0x00007f8f8f72a3f2: movabs $0x0,%r10
  0x00007f8f8f72a3fc: mov    %r10,0x330(%r15)
  0x00007f8f8f72a403: movabs $0x0,%r10
  0x00007f8f8f72a40d: mov    %r10,0x328(%r15)
  0x00007f8f8f72a414: vzeroupper 
  0x00007f8f8f72a417: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72a41f: je     0x00007f8f8f72a42a
  0x00007f8f8f72a425: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72a42a: mov    -0x40(%rbp),%r13
  0x00007f8f8f72a42e: mov    -0x38(%rbp),%r14
  0x00007f8f8f72a432: retq   
  0x00007f8f8f72a433: mov    -0x18(%rbp),%rbx
  0x00007f8f8f72a437: mov    0x60(%rbx),%r11
  0x00007f8f8f72a43b: callq  *%r11
  0x00007f8f8f72a43e: mov    -0x18(%rbp),%rbx
  0x00007f8f8f72a442: mov    %rax,0x18(%rbp)
  0x00007f8f8f72a446: mov    0x20(%rbx),%r11d
  0x00007f8f8f72a44a: test   $0x8,%r11d
  0x00007f8f8f72a451: je     0x00007f8f8f72a472
  0x00007f8f8f72a457: mov    0x8(%rbx),%r11
  0x00007f8f8f72a45b: mov    0x8(%r11),%r11
  0x00007f8f8f72a45f: mov    0x18(%r11),%r11
  0x00007f8f8f72a463: mov    0x70(%r11),%r11
  0x00007f8f8f72a467: mov    (%r11),%r11
  0x00007f8f8f72a46a: mov    %r11,0x10(%rbp)
  0x00007f8f8f72a46e: lea    0x10(%rbp),%rsi
  0x00007f8f8f72a472: mov    0x58(%rbx),%rax
  0x00007f8f8f72a476: movabs $0x7f8fad48ac60,%r10
  0x00007f8f8f72a480: cmp    %r10,%rax
  0x00007f8f8f72a483: jne    0x00007f8f8f72a530
  0x00007f8f8f72a489: callq  0x00007f8f8f72a493
  0x00007f8f8f72a48e: jmpq   0x00007f8f8f72a528
  0x00007f8f8f72a493: mov    %rbx,%rsi
  0x00007f8f8f72a496: lea    0x8(%rsp),%rax
  0x00007f8f8f72a49b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72a49f: mov    %r15,%rdi
  0x00007f8f8f72a4a2: vzeroupper 
  0x00007f8f8f72a4a5: mov    %rbp,0x330(%r15)
  0x00007f8f8f72a4ac: mov    %rax,0x320(%r15)
  0x00007f8f8f72a4b3: test   $0xf,%esp
  0x00007f8f8f72a4b9: je     0x00007f8f8f72a4d1
  0x00007f8f8f72a4bf: sub    $0x8,%rsp
  0x00007f8f8f72a4c3: callq  0x00007f8fad030970 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x00007f8f8f72a4c8: add    $0x8,%rsp
  0x00007f8f8f72a4cc: jmpq   0x00007f8f8f72a4d6
  0x00007f8f8f72a4d1: callq  0x00007f8fad030970 = InterpreterRuntime::prepare_native_call(JavaThread*, Method*)
  0x00007f8f8f72a4d6: movabs $0x0,%r10
  0x00007f8f8f72a4e0: mov    %r10,0x320(%r15)
  0x00007f8f8f72a4e7: movabs $0x0,%r10
  0x00007f8f8f72a4f1: mov    %r10,0x330(%r15)
  0x00007f8f8f72a4f8: movabs $0x0,%r10
  0x00007f8f8f72a502: mov    %r10,0x328(%r15)
  0x00007f8f8f72a509: vzeroupper 
  0x00007f8f8f72a50c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72a514: je     0x00007f8f8f72a51f
  0x00007f8f8f72a51a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72a51f: mov    -0x40(%rbp),%r13
  0x00007f8f8f72a523: mov    -0x38(%rbp),%r14
  0x00007f8f8f72a527: retq   
  0x00007f8f8f72a528: mov    -0x18(%rbp),%rbx
  0x00007f8f8f72a52c: mov    0x58(%rbx),%rax
  0x00007f8f8f72a530: lea    0x340(%r15),%rdi
  0x00007f8f8f72a537: vzeroupper 
  0x00007f8f8f72a53a: mov    %rbp,0x330(%r15)
  0x00007f8f8f72a541: movabs $0x7f8f8f72a537,%r10
  0x00007f8f8f72a54b: mov    %r10,0x328(%r15)
  0x00007f8f8f72a552: mov    %rsp,0x320(%r15)
  0x00007f8f8f72a559: movl   $0x4,0x3b8(%r15)
  0x00007f8f8f72a564: callq  *%rax
  0x00007f8f8f72a566: vzeroupper 
  0x00007f8f8f72a569: sub    $0x10,%rsp
  0x00007f8f8f72a56d: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72a572: sub    $0x10,%rsp
  0x00007f8f8f72a576: mov    %rax,(%rsp)
  0x00007f8f8f72a57a: movabs $0x0,%r10
  0x00007f8f8f72a584: mov    %r10,0x8(%rsp)
  0x00007f8f8f72a589: movl   $0x5,0x3b8(%r15)
  0x00007f8f8f72a594: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f72a59a: testb  $0x8,0x108(%r15)
  0x00007f8f8f72a5a2: jne    0x00007f8f8f72a5b9
  0x00007f8f8f72a5a8: cmpl   $0x0,0xd8(%r15)
  0x00007f8f8f72a5b3: je     0x00007f8f8f72a5d2
  0x00007f8f8f72a5b9: mov    %r15,%rdi
  0x00007f8f8f72a5bc: mov    %rsp,%r12
  0x00007f8f8f72a5bf: sub    $0x0,%rsp
  0x00007f8f8f72a5c3: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f72a5c7: callq  0x00007f8fad574630 = JavaThread::check_special_condition_for_native_trans(JavaThread*)
  0x00007f8f8f72a5cc: mov    %r12,%rsp
  0x00007f8f8f72a5cf: xor    %r12,%r12
  0x00007f8f8f72a5d2: movl   $0x8,0x3b8(%r15)
  0x00007f8f8f72a5dd: movabs $0x0,%r10
  0x00007f8f8f72a5e7: mov    %r10,0x320(%r15)
  0x00007f8f8f72a5ee: movabs $0x0,%r10
  0x00007f8f8f72a5f8: mov    %r10,0x330(%r15)
  0x00007f8f8f72a5ff: movabs $0x0,%r10
  0x00007f8f8f72a609: mov    %r10,0x328(%r15)
  0x00007f8f8f72a610: vzeroupper 
  0x00007f8f8f72a613: mov    0xe0(%r15),%r11
  0x00007f8f8f72a61a: movl   $0x0,0x100(%r11)
  0x00007f8f8f72a625: movabs $0x7f8f8f72689b,%r11
  0x00007f8f8f72a62f: cmp    0x18(%rbp),%r11
  0x00007f8f8f72a633: jne    0x00007f8f8f72a6df
  0x00007f8f8f72a639: mov    (%rsp),%rax
  0x00007f8f8f72a63d: add    $0x10,%rsp
  0x00007f8f8f72a641: test   %rax,%rax
  0x00007f8f8f72a644: je     0x00007f8f8f72a6c4
  0x00007f8f8f72a64a: test   $0x1,%rax
  0x00007f8f8f72a650: je     0x00007f8f8f72a6c1
  0x00007f8f8f72a656: mov    -0x1(%rax),%rax
  0x00007f8f8f72a65a: cmpb   $0x0,0x30(%r15)
  0x00007f8f8f72a65f: je     0x00007f8f8f72a6bc
  0x00007f8f8f72a665: cmp    $0x0,%rax
  0x00007f8f8f72a669: je     0x00007f8f8f72a6bc
  0x00007f8f8f72a66f: mov    0x38(%r15),%r11
  0x00007f8f8f72a673: cmp    $0x0,%r11
  0x00007f8f8f72a677: je     0x00007f8f8f72a691
  0x00007f8f8f72a67d: sub    $0x8,%r11
  0x00007f8f8f72a681: mov    %r11,0x38(%r15)
  0x00007f8f8f72a685: add    0x48(%r15),%r11
  0x00007f8f8f72a689: mov    %rax,(%r11)
  0x00007f8f8f72a68c: jmpq   0x00007f8f8f72a6bc
  0x00007f8f8f72a691: push   %rax
  0x00007f8f8f72a692: mov    %r15,%rsi
  0x00007f8f8f72a695: mov    %rax,%rdi
  0x00007f8f8f72a698: test   $0xf,%esp
  0x00007f8f8f72a69e: je     0x00007f8f8f72a6b6
  0x00007f8f8f72a6a4: sub    $0x8,%rsp
  0x00007f8f8f72a6a8: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f72a6ad: add    $0x8,%rsp
  0x00007f8f8f72a6b1: jmpq   0x00007f8f8f72a6bb
  0x00007f8f8f72a6b6: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f72a6bb: pop    %rax
  0x00007f8f8f72a6bc: jmpq   0x00007f8f8f72a6c4
  0x00007f8f8f72a6c1: mov    (%rax),%rax
  0x00007f8f8f72a6c4: mov    %rax,0x10(%rbp)
  0x00007f8f8f72a6c8: sub    $0x10,%rsp
  0x00007f8f8f72a6cc: mov    %rax,(%rsp)
  0x00007f8f8f72a6d0: movabs $0x0,%r10
  0x00007f8f8f72a6da: mov    %r10,0x8(%rsp)
  0x00007f8f8f72a6df: cmpl   $0x2,0x408(%r15)
  0x00007f8f8f72a6ea: jne    0x00007f8f8f72a7ad
  0x00007f8f8f72a6f0: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f72a6f5: sub    $0x80,%rsp
  0x00007f8f8f72a6fc: mov    %rax,0x78(%rsp)
  0x00007f8f8f72a701: mov    %rcx,0x70(%rsp)
  0x00007f8f8f72a706: mov    %rdx,0x68(%rsp)
  0x00007f8f8f72a70b: mov    %rbx,0x60(%rsp)
  0x00007f8f8f72a710: mov    %rbp,0x50(%rsp)
  0x00007f8f8f72a715: mov    %rsi,0x48(%rsp)
  0x00007f8f8f72a71a: mov    %rdi,0x40(%rsp)
  0x00007f8f8f72a71f: mov    %r8,0x38(%rsp)
  0x00007f8f8f72a724: mov    %r9,0x30(%rsp)
  0x00007f8f8f72a729: mov    %r10,0x28(%rsp)
  0x00007f8f8f72a72e: mov    %r11,0x20(%rsp)
  0x00007f8f8f72a733: mov    %r12,0x18(%rsp)
  0x00007f8f8f72a738: mov    %r13,0x10(%rsp)
  0x00007f8f8f72a73d: mov    %r14,0x8(%rsp)
  0x00007f8f8f72a742: mov    %r15,(%rsp)
  0x00007f8f8f72a746: mov    %rsp,%r12
  0x00007f8f8f72a749: sub    $0x0,%rsp
  0x00007f8f8f72a74d: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f72a751: callq  0x00007f8fad4940e0 = SharedRuntime::reguard_yellow_pages()
  0x00007f8f8f72a756: mov    %r12,%rsp
  0x00007f8f8f72a759: mov    (%rsp),%r15
  0x00007f8f8f72a75d: mov    0x8(%rsp),%r14
  0x00007f8f8f72a762: mov    0x10(%rsp),%r13
  0x00007f8f8f72a767: mov    0x18(%rsp),%r12
  0x00007f8f8f72a76c: mov    0x20(%rsp),%r11
  0x00007f8f8f72a771: mov    0x28(%rsp),%r10
  0x00007f8f8f72a776: mov    0x30(%rsp),%r9
  0x00007f8f8f72a77b: mov    0x38(%rsp),%r8
  0x00007f8f8f72a780: mov    0x40(%rsp),%rdi
  0x00007f8f8f72a785: mov    0x48(%rsp),%rsi
  0x00007f8f8f72a78a: mov    0x50(%rsp),%rbp
  0x00007f8f8f72a78f: mov    0x60(%rsp),%rbx
  0x00007f8f8f72a794: mov    0x68(%rsp),%rdx
  0x00007f8f8f72a799: mov    0x70(%rsp),%rcx
  0x00007f8f8f72a79e: mov    0x78(%rsp),%rax
  0x00007f8f8f72a7a3: add    $0x80,%rsp
  0x00007f8f8f72a7aa: xor    %r12,%r12
  0x00007f8f8f72a7ad: mov    -0x18(%rbp),%rbx
  0x00007f8f8f72a7b1: mov    0x8(%rbx),%r13
  0x00007f8f8f72a7b5: lea    0x38(%r13),%r13
  0x00007f8f8f72a7b9: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72a7c1: je     0x00007f8f8f72a8da
  0x00007f8f8f72a7c7: callq  0x00007f8f8f72a7d1
  0x00007f8f8f72a7cc: jmpq   0x00007f8f8f72a863
  0x00007f8f8f72a7d1: lea    0x8(%rsp),%rax
  0x00007f8f8f72a7d6: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72a7da: mov    %r15,%rdi
  0x00007f8f8f72a7dd: vzeroupper 
  0x00007f8f8f72a7e0: mov    %rbp,0x330(%r15)
  0x00007f8f8f72a7e7: mov    %rax,0x320(%r15)
  0x00007f8f8f72a7ee: test   $0xf,%esp
  0x00007f8f8f72a7f4: je     0x00007f8f8f72a80c
  0x00007f8f8f72a7fa: sub    $0x8,%rsp
  0x00007f8f8f72a7fe: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f72a803: add    $0x8,%rsp
  0x00007f8f8f72a807: jmpq   0x00007f8f8f72a811
  0x00007f8f8f72a80c: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f72a811: movabs $0x0,%r10
  0x00007f8f8f72a81b: mov    %r10,0x320(%r15)
  0x00007f8f8f72a822: movabs $0x0,%r10
  0x00007f8f8f72a82c: mov    %r10,0x330(%r15)
  0x00007f8f8f72a833: movabs $0x0,%r10
  0x00007f8f8f72a83d: mov    %r10,0x328(%r15)
  0x00007f8f8f72a844: vzeroupper 
  0x00007f8f8f72a847: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72a84f: je     0x00007f8f8f72a85a
  0x00007f8f8f72a855: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72a85a: mov    -0x40(%rbp),%r13
  0x00007f8f8f72a85e: mov    -0x38(%rbp),%r14
  0x00007f8f8f72a862: retq   
  0x00007f8f8f72a863: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f72a868: sub    $0x80,%rsp
  0x00007f8f8f72a86f: mov    %rax,0x78(%rsp)
  0x00007f8f8f72a874: mov    %rcx,0x70(%rsp)
  0x00007f8f8f72a879: mov    %rdx,0x68(%rsp)
  0x00007f8f8f72a87e: mov    %rbx,0x60(%rsp)
  0x00007f8f8f72a883: mov    %rbp,0x50(%rsp)
  0x00007f8f8f72a888: mov    %rsi,0x48(%rsp)
  0x00007f8f8f72a88d: mov    %rdi,0x40(%rsp)
  0x00007f8f8f72a892: mov    %r8,0x38(%rsp)
  0x00007f8f8f72a897: mov    %r9,0x30(%rsp)
  0x00007f8f8f72a89c: mov    %r10,0x28(%rsp)
  0x00007f8f8f72a8a1: mov    %r11,0x20(%rsp)
  0x00007f8f8f72a8a6: mov    %r12,0x18(%rsp)
  0x00007f8f8f72a8ab: mov    %r13,0x10(%rsp)
  0x00007f8f8f72a8b0: mov    %r14,0x8(%rsp)
  0x00007f8f8f72a8b5: mov    %r15,(%rsp)
  0x00007f8f8f72a8b9: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f72a8c3: movabs $0x7f8f8f72a863,%rsi
  0x00007f8f8f72a8cd: mov    %rsp,%rdx
  0x00007f8f8f72a8d0: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f72a8d4: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f72a8d9: hlt    
  0x00007f8f8f72a8da: mov    0x20(%rbx),%r11d
  0x00007f8f8f72a8de: test   $0x20,%r11d
  0x00007f8f8f72a8e5: je     0x00007f8f8f72aaee
  0x00007f8f8f72a8eb: lea    -0x58(%rbp),%rsi
  0x00007f8f8f72a8ef: mov    0x8(%rsi),%r11
  0x00007f8f8f72a8f3: test   %r11,%r11
  0x00007f8f8f72a8f6: jne    0x00007f8f8f72aa0f
  0x00007f8f8f72a8fc: callq  0x00007f8f8f72a906
  0x00007f8f8f72a901: jmpq   0x00007f8f8f72a998
  0x00007f8f8f72a906: lea    0x8(%rsp),%rax
  0x00007f8f8f72a90b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72a90f: mov    %r15,%rdi
  0x00007f8f8f72a912: vzeroupper 
  0x00007f8f8f72a915: mov    %rbp,0x330(%r15)
  0x00007f8f8f72a91c: mov    %rax,0x320(%r15)
  0x00007f8f8f72a923: test   $0xf,%esp
  0x00007f8f8f72a929: je     0x00007f8f8f72a941
  0x00007f8f8f72a92f: sub    $0x8,%rsp
  0x00007f8f8f72a933: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f72a938: add    $0x8,%rsp
  0x00007f8f8f72a93c: jmpq   0x00007f8f8f72a946
  0x00007f8f8f72a941: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f72a946: movabs $0x0,%r10
  0x00007f8f8f72a950: mov    %r10,0x320(%r15)
  0x00007f8f8f72a957: movabs $0x0,%r10
  0x00007f8f8f72a961: mov    %r10,0x330(%r15)
  0x00007f8f8f72a968: movabs $0x0,%r10
  0x00007f8f8f72a972: mov    %r10,0x328(%r15)
  0x00007f8f8f72a979: vzeroupper 
  0x00007f8f8f72a97c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72a984: je     0x00007f8f8f72a98f
  0x00007f8f8f72a98a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72a98f: mov    -0x40(%rbp),%r13
  0x00007f8f8f72a993: mov    -0x38(%rbp),%r14
  0x00007f8f8f72a997: retq   
  0x00007f8f8f72a998: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f72a99d: sub    $0x80,%rsp
  0x00007f8f8f72a9a4: mov    %rax,0x78(%rsp)
  0x00007f8f8f72a9a9: mov    %rcx,0x70(%rsp)
  0x00007f8f8f72a9ae: mov    %rdx,0x68(%rsp)
  0x00007f8f8f72a9b3: mov    %rbx,0x60(%rsp)
  0x00007f8f8f72a9b8: mov    %rbp,0x50(%rsp)
  0x00007f8f8f72a9bd: mov    %rsi,0x48(%rsp)
  0x00007f8f8f72a9c2: mov    %rdi,0x40(%rsp)
  0x00007f8f8f72a9c7: mov    %r8,0x38(%rsp)
  0x00007f8f8f72a9cc: mov    %r9,0x30(%rsp)
  0x00007f8f8f72a9d1: mov    %r10,0x28(%rsp)
  0x00007f8f8f72a9d6: mov    %r11,0x20(%rsp)
  0x00007f8f8f72a9db: mov    %r12,0x18(%rsp)
  0x00007f8f8f72a9e0: mov    %r13,0x10(%rsp)
  0x00007f8f8f72a9e5: mov    %r14,0x8(%rsp)
  0x00007f8f8f72a9ea: mov    %r15,(%rsp)
  0x00007f8f8f72a9ee: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f72a9f8: movabs $0x7f8f8f72a998,%rsi
  0x00007f8f8f72aa02: mov    %rsp,%rdx
  0x00007f8f8f72aa05: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f72aa09: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f72aa0e: hlt    
  0x00007f8f8f72aa0f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72aa13: lea    (%rsi),%rax
  0x00007f8f8f72aa16: mov    0x8(%rsi),%rcx
  0x00007f8f8f72aa1a: movq   $0x0,0x8(%rsi)
  0x00007f8f8f72aa22: mov    (%rcx),%rdx
  0x00007f8f8f72aa25: and    $0x7,%rdx
  0x00007f8f8f72aa29: cmp    $0x5,%rdx
  0x00007f8f8f72aa2d: je     0x00007f8f8f72aaea
  0x00007f8f8f72aa33: mov    (%rax),%rdx
  0x00007f8f8f72aa36: test   %rdx,%rdx
  0x00007f8f8f72aa39: je     0x00007f8f8f72aaea
  0x00007f8f8f72aa3f: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f72aa44: je     0x00007f8f8f72aaea
  0x00007f8f8f72aa4a: mov    %rcx,0x8(%rsi)
  0x00007f8f8f72aa4e: callq  0x00007f8f8f72aa58
  0x00007f8f8f72aa53: jmpq   0x00007f8f8f72aaea
  0x00007f8f8f72aa58: lea    0x8(%rsp),%rax
  0x00007f8f8f72aa5d: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72aa61: mov    %r15,%rdi
  0x00007f8f8f72aa64: vzeroupper 
  0x00007f8f8f72aa67: mov    %rbp,0x330(%r15)
  0x00007f8f8f72aa6e: mov    %rax,0x320(%r15)
  0x00007f8f8f72aa75: test   $0xf,%esp
  0x00007f8f8f72aa7b: je     0x00007f8f8f72aa93
  0x00007f8f8f72aa81: sub    $0x8,%rsp
  0x00007f8f8f72aa85: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72aa8a: add    $0x8,%rsp
  0x00007f8f8f72aa8e: jmpq   0x00007f8f8f72aa98
  0x00007f8f8f72aa93: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f72aa98: movabs $0x0,%r10
  0x00007f8f8f72aaa2: mov    %r10,0x320(%r15)
  0x00007f8f8f72aaa9: movabs $0x0,%r10
  0x00007f8f8f72aab3: mov    %r10,0x330(%r15)
  0x00007f8f8f72aaba: movabs $0x0,%r10
  0x00007f8f8f72aac4: mov    %r10,0x328(%r15)
  0x00007f8f8f72aacb: vzeroupper 
  0x00007f8f8f72aace: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72aad6: je     0x00007f8f8f72aae1
  0x00007f8f8f72aadc: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72aae1: mov    -0x40(%rbp),%r13
  0x00007f8f8f72aae5: mov    -0x38(%rbp),%r14
  0x00007f8f8f72aae9: retq   
  0x00007f8f8f72aaea: mov    -0x40(%rbp),%r13
  0x00007f8f8f72aaee: cmpb   $0x0,0x1e48c692(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f72aaf5: je     0x00007f8f8f72ab25
  0x00007f8f8f72aafb: mov    -0x18(%rbp),%rsi
  0x00007f8f8f72aaff: mov    %r15,%rdi
  0x00007f8f8f72ab02: test   $0xf,%esp
  0x00007f8f8f72ab08: je     0x00007f8f8f72ab20
  0x00007f8f8f72ab0e: sub    $0x8,%rsp
  0x00007f8f8f72ab12: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f72ab17: add    $0x8,%rsp
  0x00007f8f8f72ab1b: jmpq   0x00007f8f8f72ab25
  0x00007f8f8f72ab20: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f72ab25: mov    (%rsp),%rax
  0x00007f8f8f72ab29: add    $0x10,%rsp
  0x00007f8f8f72ab2d: vmovsd (%rsp),%xmm0
  0x00007f8f8f72ab32: add    $0x10,%rsp
  0x00007f8f8f72ab36: mov    0x18(%rbp),%r11
  0x00007f8f8f72ab3a: callq  *%r11
  0x00007f8f8f72ab3d: mov    -0x8(%rbp),%r11
  0x00007f8f8f72ab41: leaveq 
  0x00007f8f8f72ab42: pop    %rdi
  0x00007f8f8f72ab43: mov    %r11,%rsp
  0x00007f8f8f72ab46: jmpq   *%rdi
  0x00007f8f8f72ab48: mov    $0x0,%esi
  0x00007f8f8f72ab4d: callq  0x00007f8f8f72ab57
  0x00007f8f8f72ab52: jmpq   0x00007f8f8f72abe9
  0x00007f8f8f72ab57: lea    0x8(%rsp),%rax
  0x00007f8f8f72ab5c: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72ab60: mov    %r15,%rdi
  0x00007f8f8f72ab63: vzeroupper 
  0x00007f8f8f72ab66: mov    %rbp,0x330(%r15)
  0x00007f8f8f72ab6d: mov    %rax,0x320(%r15)
  0x00007f8f8f72ab74: test   $0xf,%esp
  0x00007f8f8f72ab7a: je     0x00007f8f8f72ab92
  0x00007f8f8f72ab80: sub    $0x8,%rsp
  0x00007f8f8f72ab84: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f72ab89: add    $0x8,%rsp
  0x00007f8f8f72ab8d: jmpq   0x00007f8f8f72ab97
  0x00007f8f8f72ab92: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f72ab97: movabs $0x0,%r10
  0x00007f8f8f72aba1: mov    %r10,0x320(%r15)
  0x00007f8f8f72aba8: movabs $0x0,%r10
  0x00007f8f8f72abb2: mov    %r10,0x330(%r15)
  0x00007f8f8f72abb9: movabs $0x0,%r10
  0x00007f8f8f72abc3: mov    %r10,0x328(%r15)
  0x00007f8f8f72abca: vzeroupper 
  0x00007f8f8f72abcd: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72abd5: je     0x00007f8f8f72abe0
  0x00007f8f8f72abdb: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72abe0: mov    -0x40(%rbp),%r13
  0x00007f8f8f72abe4: mov    -0x38(%rbp),%r14
  0x00007f8f8f72abe8: retq   
  0x00007f8f8f72abe9: mov    -0x18(%rbp),%rbx
  0x00007f8f8f72abed: jmpq   0x00007f8f8f72a16f
  0x00007f8f8f72abf2: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f72abf8: add    %al,(%rax)
  0x00007f8f8f72abfa: add    %al,(%rax)
  0x00007f8f8f72abfc: add    %al,(%rax)
  0x00007f8f8f72abfe: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_update)  [0x00007f8f8f72ac20, 0x00007f8f8f72ac60]  64 bytes

  0x00007f8f8f72ac20: testb  $0x8,0x108(%r15)
  0x00007f8f8f72ac28: jne    0x00007f8f8f72ac58
  0x00007f8f8f72ac2e: mov    0x8(%rsp),%edi
  0x00007f8f8f72ac32: mov    0x10(%rsp),%eax
  0x00007f8f8f72ac36: movabs $0x7f8fadb8abc0,%rsi
  0x00007f8f8f72ac40: not    %eax
  0x00007f8f8f72ac42: xor    %eax,%edi
  0x00007f8f8f72ac44: and    $0xff,%edi
  0x00007f8f8f72ac4a: shr    $0x8,%eax
  0x00007f8f8f72ac4d: xor    (%rsi,%rdi,4),%eax
  0x00007f8f8f72ac50: not    %eax
  0x00007f8f8f72ac52: pop    %rdi
  0x00007f8f8f72ac53: mov    %r13,%rsp
  0x00007f8f8f72ac56: jmpq   *%rdi
  0x00007f8f8f72ac58: jmpq   0x00007f8f8f7295a0
  0x00007f8f8f72ac5d: data16 xchg %ax,%ax

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_updateBytes)  [0x00007f8f8f72ac80, 0x00007f8f8f72ace0]  96 bytes

  0x00007f8f8f72ac80: testb  $0x8,0x108(%r15)
  0x00007f8f8f72ac88: jne    0x00007f8f8f72acd0
  0x00007f8f8f72ac8e: mov    0x18(%rsp),%rsi
  0x00007f8f8f72ac93: add    $0x10,%rsi
  0x00007f8f8f72ac97: movslq 0x10(%rsp),%rdx
  0x00007f8f8f72ac9c: add    %rdx,%rsi
  0x00007f8f8f72ac9f: mov    0x20(%rsp),%edi
  0x00007f8f8f72aca3: mov    0x8(%rsp),%edx
  0x00007f8f8f72aca7: test   $0xf,%esp
  0x00007f8f8f72acad: je     0x00007f8f8f72acc5
  0x00007f8f8f72acb3: sub    $0x8,%rsp
  0x00007f8f8f72acb7: callq  0x00007f8f8f71a940
  0x00007f8f8f72acbc: add    $0x8,%rsp
  0x00007f8f8f72acc0: jmpq   0x00007f8f8f72acca
  0x00007f8f8f72acc5: callq  0x00007f8f8f71a940
  0x00007f8f8f72acca: pop    %rdi
  0x00007f8f8f72accb: mov    %r13,%rsp
  0x00007f8f8f72acce: jmpq   *%rdi
  0x00007f8f8f72acd0: jmpq   0x00007f8f8f7295a0
  0x00007f8f8f72acd5: data16 xchg %ax,%ax
  0x00007f8f8f72acd8: add    %al,(%rax)
  0x00007f8f8f72acda: add    %al,(%rax)
  0x00007f8f8f72acdc: add    %al,(%rax)
  0x00007f8f8f72acde: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32_updateByteBuffer)  [0x00007f8f8f72ad00, 0x00007f8f8f72ad60]  96 bytes

  0x00007f8f8f72ad00: testb  $0x8,0x108(%r15)
  0x00007f8f8f72ad08: jne    0x00007f8f8f72ad4c
  0x00007f8f8f72ad0e: mov    0x18(%rsp),%rsi
  0x00007f8f8f72ad13: movslq 0x10(%rsp),%rdx
  0x00007f8f8f72ad18: add    %rdx,%rsi
  0x00007f8f8f72ad1b: mov    0x28(%rsp),%edi
  0x00007f8f8f72ad1f: mov    0x8(%rsp),%edx
  0x00007f8f8f72ad23: test   $0xf,%esp
  0x00007f8f8f72ad29: je     0x00007f8f8f72ad41
  0x00007f8f8f72ad2f: sub    $0x8,%rsp
  0x00007f8f8f72ad33: callq  0x00007f8f8f71a940
  0x00007f8f8f72ad38: add    $0x8,%rsp
  0x00007f8f8f72ad3c: jmpq   0x00007f8f8f72ad46
  0x00007f8f8f72ad41: callq  0x00007f8f8f71a940
  0x00007f8f8f72ad46: pop    %rdi
  0x00007f8f8f72ad47: mov    %r13,%rsp
  0x00007f8f8f72ad4a: jmpq   *%rdi
  0x00007f8f8f72ad4c: jmpq   0x00007f8f8f7295a0
  0x00007f8f8f72ad51: nopl   0x0(%rax)
  0x00007f8f8f72ad58: add    %al,(%rax)
  0x00007f8f8f72ad5a: add    %al,(%rax)
  0x00007f8f8f72ad5c: add    %al,(%rax)
  0x00007f8f8f72ad5e: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32C_updateBytes)  [0x00007f8f8f72ad80, 0x00007f8f8f72ade0]  96 bytes

  0x00007f8f8f72ad80: mov    0x18(%rsp),%rsi
  0x00007f8f8f72ad85: add    $0x10,%rsi
  0x00007f8f8f72ad89: movslq 0x10(%rsp),%rcx
  0x00007f8f8f72ad8e: add    %rcx,%rsi
  0x00007f8f8f72ad91: mov    0x20(%rsp),%edi
  0x00007f8f8f72ad95: mov    0x8(%rsp),%edx
  0x00007f8f8f72ad99: sub    %ecx,%edx
  0x00007f8f8f72ad9b: test   $0xf,%esp
  0x00007f8f8f72ada1: je     0x00007f8f8f72adb9
  0x00007f8f8f72ada7: sub    $0x8,%rsp
  0x00007f8f8f72adab: callq  0x00007f8f8f71aba0
  0x00007f8f8f72adb0: add    $0x8,%rsp
  0x00007f8f8f72adb4: jmpq   0x00007f8f8f72adbe
  0x00007f8f8f72adb9: callq  0x00007f8f8f71aba0
  0x00007f8f8f72adbe: pop    %rdi
  0x00007f8f8f72adbf: mov    %r13,%rsp
  0x00007f8f8f72adc2: jmpq   *%rdi
  0x00007f8f8f72adc4: nopl   0x0(%rax)
  0x00007f8f8f72adc8: add    %al,(%rax)
  0x00007f8f8f72adca: add    %al,(%rax)
  0x00007f8f8f72adcc: add    %al,(%rax)
  0x00007f8f8f72adce: add    %al,(%rax)
  0x00007f8f8f72add0: add    %al,(%rax)
  0x00007f8f8f72add2: add    %al,(%rax)
  0x00007f8f8f72add4: add    %al,(%rax)
  0x00007f8f8f72add6: add    %al,(%rax)
  0x00007f8f8f72add8: add    %al,(%rax)
  0x00007f8f8f72adda: add    %al,(%rax)
  0x00007f8f8f72addc: add    %al,(%rax)
  0x00007f8f8f72adde: add    %al,(%rax)

----------------------------------------------------------------------
method entry point (kind = java_util_zip_CRC32C_updateDirectByteBuffer)  [0x00007f8f8f72ae00, 0x00007f8f8f72ae40]  64 bytes

  0x00007f8f8f72ae00: mov    0x18(%rsp),%rsi
  0x00007f8f8f72ae05: movslq 0x10(%rsp),%rcx
  0x00007f8f8f72ae0a: add    %rcx,%rsi
  0x00007f8f8f72ae0d: mov    0x28(%rsp),%edi
  0x00007f8f8f72ae11: mov    0x8(%rsp),%edx
  0x00007f8f8f72ae15: sub    %ecx,%edx
  0x00007f8f8f72ae17: test   $0xf,%esp
  0x00007f8f8f72ae1d: je     0x00007f8f8f72ae35
  0x00007f8f8f72ae23: sub    $0x8,%rsp
  0x00007f8f8f72ae27: callq  0x00007f8f8f71aba0
  0x00007f8f8f72ae2c: add    $0x8,%rsp
  0x00007f8f8f72ae30: jmpq   0x00007f8f8f72ae3a
  0x00007f8f8f72ae35: callq  0x00007f8f8f71aba0
  0x00007f8f8f72ae3a: pop    %rdi
  0x00007f8f8f72ae3b: mov    %r13,%rsp
  0x00007f8f8f72ae3e: jmpq   *%rdi

----------------------------------------------------------------------
nop  0 nop  [0x00007f8f8f72ae60, 0x00007f8f8f72aec0]  96 bytes

  0x00007f8f8f72ae60: push   %rax
  0x00007f8f8f72ae61: jmpq   0x00007f8f8f72ae9f
  0x00007f8f8f72ae66: sub    $0x8,%rsp
  0x00007f8f8f72ae6a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72ae6f: jmpq   0x00007f8f8f72ae9f
  0x00007f8f8f72ae74: sub    $0x10,%rsp
  0x00007f8f8f72ae78: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72ae7d: jmpq   0x00007f8f8f72ae9f
  0x00007f8f8f72ae82: sub    $0x10,%rsp
  0x00007f8f8f72ae86: mov    %rax,(%rsp)
  0x00007f8f8f72ae8a: movabs $0x0,%r10
  0x00007f8f8f72ae94: mov    %r10,0x8(%rsp)
  0x00007f8f8f72ae99: jmpq   0x00007f8f8f72ae9f
  0x00007f8f8f72ae9e: push   %rax
  0x00007f8f8f72ae9f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72aea4: inc    %r13
  0x00007f8f8f72aea7: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72aeb1: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72aeb5: data16 xchg %ax,%ax
  0x00007f8f8f72aeb8: add    %al,(%rax)
  0x00007f8f8f72aeba: add    %al,(%rax)
  0x00007f8f8f72aebc: add    %al,(%rax)
  0x00007f8f8f72aebe: add    %al,(%rax)

----------------------------------------------------------------------
aconst_null  1 aconst_null  [0x00007f8f8f72aee0, 0x00007f8f8f72af40]  96 bytes

  0x00007f8f8f72aee0: push   %rax
  0x00007f8f8f72aee1: jmpq   0x00007f8f8f72af1f
  0x00007f8f8f72aee6: sub    $0x8,%rsp
  0x00007f8f8f72aeea: vmovss %xmm0,(%rsp)
  0x00007f8f8f72aeef: jmpq   0x00007f8f8f72af1f
  0x00007f8f8f72aef4: sub    $0x10,%rsp
  0x00007f8f8f72aef8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72aefd: jmpq   0x00007f8f8f72af1f
  0x00007f8f8f72af02: sub    $0x10,%rsp
  0x00007f8f8f72af06: mov    %rax,(%rsp)
  0x00007f8f8f72af0a: movabs $0x0,%r10
  0x00007f8f8f72af14: mov    %r10,0x8(%rsp)
  0x00007f8f8f72af19: jmpq   0x00007f8f8f72af1f
  0x00007f8f8f72af1e: push   %rax
  0x00007f8f8f72af1f: xor    %eax,%eax
  0x00007f8f8f72af21: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72af26: inc    %r13
  0x00007f8f8f72af29: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f72af33: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72af37: nop
  0x00007f8f8f72af38: add    %al,(%rax)
  0x00007f8f8f72af3a: add    %al,(%rax)
  0x00007f8f8f72af3c: add    %al,(%rax)
  0x00007f8f8f72af3e: add    %al,(%rax)

----------------------------------------------------------------------
iconst_m1  2 iconst_m1  [0x00007f8f8f72af60, 0x00007f8f8f72afc0]  96 bytes

  0x00007f8f8f72af60: push   %rax
  0x00007f8f8f72af61: jmpq   0x00007f8f8f72af9f
  0x00007f8f8f72af66: sub    $0x8,%rsp
  0x00007f8f8f72af6a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72af6f: jmpq   0x00007f8f8f72af9f
  0x00007f8f8f72af74: sub    $0x10,%rsp
  0x00007f8f8f72af78: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72af7d: jmpq   0x00007f8f8f72af9f
  0x00007f8f8f72af82: sub    $0x10,%rsp
  0x00007f8f8f72af86: mov    %rax,(%rsp)
  0x00007f8f8f72af8a: movabs $0x0,%r10
  0x00007f8f8f72af94: mov    %r10,0x8(%rsp)
  0x00007f8f8f72af99: jmpq   0x00007f8f8f72af9f
  0x00007f8f8f72af9e: push   %rax
  0x00007f8f8f72af9f: mov    $0xffffffff,%eax
  0x00007f8f8f72afa4: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72afa9: inc    %r13
  0x00007f8f8f72afac: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72afb6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72afba: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_0  3 iconst_0  [0x00007f8f8f72afe0, 0x00007f8f8f72b040]  96 bytes

  0x00007f8f8f72afe0: push   %rax
  0x00007f8f8f72afe1: jmpq   0x00007f8f8f72b01f
  0x00007f8f8f72afe6: sub    $0x8,%rsp
  0x00007f8f8f72afea: vmovss %xmm0,(%rsp)
  0x00007f8f8f72afef: jmpq   0x00007f8f8f72b01f
  0x00007f8f8f72aff4: sub    $0x10,%rsp
  0x00007f8f8f72aff8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72affd: jmpq   0x00007f8f8f72b01f
  0x00007f8f8f72b002: sub    $0x10,%rsp
  0x00007f8f8f72b006: mov    %rax,(%rsp)
  0x00007f8f8f72b00a: movabs $0x0,%r10
  0x00007f8f8f72b014: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b019: jmpq   0x00007f8f8f72b01f
  0x00007f8f8f72b01e: push   %rax
  0x00007f8f8f72b01f: xor    %eax,%eax
  0x00007f8f8f72b021: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72b026: inc    %r13
  0x00007f8f8f72b029: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72b033: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72b037: nop
  0x00007f8f8f72b038: add    %al,(%rax)
  0x00007f8f8f72b03a: add    %al,(%rax)
  0x00007f8f8f72b03c: add    %al,(%rax)
  0x00007f8f8f72b03e: add    %al,(%rax)

----------------------------------------------------------------------
iconst_1  4 iconst_1  [0x00007f8f8f72b060, 0x00007f8f8f72b0c0]  96 bytes

  0x00007f8f8f72b060: push   %rax
  0x00007f8f8f72b061: jmpq   0x00007f8f8f72b09f
  0x00007f8f8f72b066: sub    $0x8,%rsp
  0x00007f8f8f72b06a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b06f: jmpq   0x00007f8f8f72b09f
  0x00007f8f8f72b074: sub    $0x10,%rsp
  0x00007f8f8f72b078: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b07d: jmpq   0x00007f8f8f72b09f
  0x00007f8f8f72b082: sub    $0x10,%rsp
  0x00007f8f8f72b086: mov    %rax,(%rsp)
  0x00007f8f8f72b08a: movabs $0x0,%r10
  0x00007f8f8f72b094: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b099: jmpq   0x00007f8f8f72b09f
  0x00007f8f8f72b09e: push   %rax
  0x00007f8f8f72b09f: mov    $0x1,%eax
  0x00007f8f8f72b0a4: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72b0a9: inc    %r13
  0x00007f8f8f72b0ac: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72b0b6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72b0ba: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_2  5 iconst_2  [0x00007f8f8f72b0e0, 0x00007f8f8f72b140]  96 bytes

  0x00007f8f8f72b0e0: push   %rax
  0x00007f8f8f72b0e1: jmpq   0x00007f8f8f72b11f
  0x00007f8f8f72b0e6: sub    $0x8,%rsp
  0x00007f8f8f72b0ea: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b0ef: jmpq   0x00007f8f8f72b11f
  0x00007f8f8f72b0f4: sub    $0x10,%rsp
  0x00007f8f8f72b0f8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b0fd: jmpq   0x00007f8f8f72b11f
  0x00007f8f8f72b102: sub    $0x10,%rsp
  0x00007f8f8f72b106: mov    %rax,(%rsp)
  0x00007f8f8f72b10a: movabs $0x0,%r10
  0x00007f8f8f72b114: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b119: jmpq   0x00007f8f8f72b11f
  0x00007f8f8f72b11e: push   %rax
  0x00007f8f8f72b11f: mov    $0x2,%eax
  0x00007f8f8f72b124: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72b129: inc    %r13
  0x00007f8f8f72b12c: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72b136: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72b13a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_3  6 iconst_3  [0x00007f8f8f72b160, 0x00007f8f8f72b1c0]  96 bytes

  0x00007f8f8f72b160: push   %rax
  0x00007f8f8f72b161: jmpq   0x00007f8f8f72b19f
  0x00007f8f8f72b166: sub    $0x8,%rsp
  0x00007f8f8f72b16a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b16f: jmpq   0x00007f8f8f72b19f
  0x00007f8f8f72b174: sub    $0x10,%rsp
  0x00007f8f8f72b178: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b17d: jmpq   0x00007f8f8f72b19f
  0x00007f8f8f72b182: sub    $0x10,%rsp
  0x00007f8f8f72b186: mov    %rax,(%rsp)
  0x00007f8f8f72b18a: movabs $0x0,%r10
  0x00007f8f8f72b194: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b199: jmpq   0x00007f8f8f72b19f
  0x00007f8f8f72b19e: push   %rax
  0x00007f8f8f72b19f: mov    $0x3,%eax
  0x00007f8f8f72b1a4: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72b1a9: inc    %r13
  0x00007f8f8f72b1ac: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72b1b6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72b1ba: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_4  7 iconst_4  [0x00007f8f8f72b1e0, 0x00007f8f8f72b240]  96 bytes

  0x00007f8f8f72b1e0: push   %rax
  0x00007f8f8f72b1e1: jmpq   0x00007f8f8f72b21f
  0x00007f8f8f72b1e6: sub    $0x8,%rsp
  0x00007f8f8f72b1ea: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b1ef: jmpq   0x00007f8f8f72b21f
  0x00007f8f8f72b1f4: sub    $0x10,%rsp
  0x00007f8f8f72b1f8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b1fd: jmpq   0x00007f8f8f72b21f
  0x00007f8f8f72b202: sub    $0x10,%rsp
  0x00007f8f8f72b206: mov    %rax,(%rsp)
  0x00007f8f8f72b20a: movabs $0x0,%r10
  0x00007f8f8f72b214: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b219: jmpq   0x00007f8f8f72b21f
  0x00007f8f8f72b21e: push   %rax
  0x00007f8f8f72b21f: mov    $0x4,%eax
  0x00007f8f8f72b224: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72b229: inc    %r13
  0x00007f8f8f72b22c: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72b236: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72b23a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iconst_5  8 iconst_5  [0x00007f8f8f72b260, 0x00007f8f8f72b2c0]  96 bytes

  0x00007f8f8f72b260: push   %rax
  0x00007f8f8f72b261: jmpq   0x00007f8f8f72b29f
  0x00007f8f8f72b266: sub    $0x8,%rsp
  0x00007f8f8f72b26a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b26f: jmpq   0x00007f8f8f72b29f
  0x00007f8f8f72b274: sub    $0x10,%rsp
  0x00007f8f8f72b278: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b27d: jmpq   0x00007f8f8f72b29f
  0x00007f8f8f72b282: sub    $0x10,%rsp
  0x00007f8f8f72b286: mov    %rax,(%rsp)
  0x00007f8f8f72b28a: movabs $0x0,%r10
  0x00007f8f8f72b294: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b299: jmpq   0x00007f8f8f72b29f
  0x00007f8f8f72b29e: push   %rax
  0x00007f8f8f72b29f: mov    $0x5,%eax
  0x00007f8f8f72b2a4: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72b2a9: inc    %r13
  0x00007f8f8f72b2ac: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72b2b6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72b2ba: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
lconst_0  9 lconst_0  [0x00007f8f8f72b2e0, 0x00007f8f8f72b340]  96 bytes

  0x00007f8f8f72b2e0: push   %rax
  0x00007f8f8f72b2e1: jmpq   0x00007f8f8f72b31f
  0x00007f8f8f72b2e6: sub    $0x8,%rsp
  0x00007f8f8f72b2ea: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b2ef: jmpq   0x00007f8f8f72b31f
  0x00007f8f8f72b2f4: sub    $0x10,%rsp
  0x00007f8f8f72b2f8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b2fd: jmpq   0x00007f8f8f72b31f
  0x00007f8f8f72b302: sub    $0x10,%rsp
  0x00007f8f8f72b306: mov    %rax,(%rsp)
  0x00007f8f8f72b30a: movabs $0x0,%r10
  0x00007f8f8f72b314: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b319: jmpq   0x00007f8f8f72b31f
  0x00007f8f8f72b31e: push   %rax
  0x00007f8f8f72b31f: xor    %eax,%eax
  0x00007f8f8f72b321: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72b326: inc    %r13
  0x00007f8f8f72b329: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72b333: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72b337: nop
  0x00007f8f8f72b338: add    %al,(%rax)
  0x00007f8f8f72b33a: add    %al,(%rax)
  0x00007f8f8f72b33c: add    %al,(%rax)
  0x00007f8f8f72b33e: add    %al,(%rax)

----------------------------------------------------------------------
lconst_1  10 lconst_1  [0x00007f8f8f72b360, 0x00007f8f8f72b3c0]  96 bytes

  0x00007f8f8f72b360: push   %rax
  0x00007f8f8f72b361: jmpq   0x00007f8f8f72b39f
  0x00007f8f8f72b366: sub    $0x8,%rsp
  0x00007f8f8f72b36a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b36f: jmpq   0x00007f8f8f72b39f
  0x00007f8f8f72b374: sub    $0x10,%rsp
  0x00007f8f8f72b378: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b37d: jmpq   0x00007f8f8f72b39f
  0x00007f8f8f72b382: sub    $0x10,%rsp
  0x00007f8f8f72b386: mov    %rax,(%rsp)
  0x00007f8f8f72b38a: movabs $0x0,%r10
  0x00007f8f8f72b394: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b399: jmpq   0x00007f8f8f72b39f
  0x00007f8f8f72b39e: push   %rax
  0x00007f8f8f72b39f: mov    $0x1,%eax
  0x00007f8f8f72b3a4: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72b3a9: inc    %r13
  0x00007f8f8f72b3ac: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72b3b6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72b3ba: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fconst_0  11 fconst_0  [0x00007f8f8f72b3e0, 0x00007f8f8f72b440]  96 bytes

  0x00007f8f8f72b3e0: push   %rax
  0x00007f8f8f72b3e1: jmpq   0x00007f8f8f72b41f
  0x00007f8f8f72b3e6: sub    $0x8,%rsp
  0x00007f8f8f72b3ea: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b3ef: jmpq   0x00007f8f8f72b41f
  0x00007f8f8f72b3f4: sub    $0x10,%rsp
  0x00007f8f8f72b3f8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b3fd: jmpq   0x00007f8f8f72b41f
  0x00007f8f8f72b402: sub    $0x10,%rsp
  0x00007f8f8f72b406: mov    %rax,(%rsp)
  0x00007f8f8f72b40a: movabs $0x0,%r10
  0x00007f8f8f72b414: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b419: jmpq   0x00007f8f8f72b41f
  0x00007f8f8f72b41e: push   %rax
  0x00007f8f8f72b41f: vxorps %xmm0,%xmm0,%xmm0
  0x00007f8f8f72b423: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72b428: inc    %r13
  0x00007f8f8f72b42b: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72b435: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72b439: nopl   0x0(%rax)

----------------------------------------------------------------------
fconst_1  12 fconst_1  [0x00007f8f8f72b460, 0x00007f8f8f72b4c0]  96 bytes

  0x00007f8f8f72b460: push   %rax
  0x00007f8f8f72b461: jmpq   0x00007f8f8f72b49f
  0x00007f8f8f72b466: sub    $0x8,%rsp
  0x00007f8f8f72b46a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b46f: jmpq   0x00007f8f8f72b49f
  0x00007f8f8f72b474: sub    $0x10,%rsp
  0x00007f8f8f72b478: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b47d: jmpq   0x00007f8f8f72b49f
  0x00007f8f8f72b482: sub    $0x10,%rsp
  0x00007f8f8f72b486: mov    %rax,(%rsp)
  0x00007f8f8f72b48a: movabs $0x0,%r10
  0x00007f8f8f72b494: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b499: jmpq   0x00007f8f8f72b49f
  0x00007f8f8f72b49e: push   %rax
  0x00007f8f8f72b49f: vmovss 0x1e45fb5d(%rip),%xmm0        # 0x00007f8fadb8b004
  0x00007f8f8f72b4a7: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72b4ac: inc    %r13
  0x00007f8f8f72b4af: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72b4b9: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72b4bd: data16 xchg %ax,%ax

----------------------------------------------------------------------
fconst_2  13 fconst_2  [0x00007f8f8f72b4e0, 0x00007f8f8f72b540]  96 bytes

  0x00007f8f8f72b4e0: push   %rax
  0x00007f8f8f72b4e1: jmpq   0x00007f8f8f72b51f
  0x00007f8f8f72b4e6: sub    $0x8,%rsp
  0x00007f8f8f72b4ea: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b4ef: jmpq   0x00007f8f8f72b51f
  0x00007f8f8f72b4f4: sub    $0x10,%rsp
  0x00007f8f8f72b4f8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b4fd: jmpq   0x00007f8f8f72b51f
  0x00007f8f8f72b502: sub    $0x10,%rsp
  0x00007f8f8f72b506: mov    %rax,(%rsp)
  0x00007f8f8f72b50a: movabs $0x0,%r10
  0x00007f8f8f72b514: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b519: jmpq   0x00007f8f8f72b51f
  0x00007f8f8f72b51e: push   %rax
  0x00007f8f8f72b51f: vmovss 0x1e45fad9(%rip),%xmm0        # 0x00007f8fadb8b000
  0x00007f8f8f72b527: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72b52c: inc    %r13
  0x00007f8f8f72b52f: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72b539: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72b53d: data16 xchg %ax,%ax

----------------------------------------------------------------------
dconst_0  14 dconst_0  [0x00007f8f8f72b560, 0x00007f8f8f72b5c0]  96 bytes

  0x00007f8f8f72b560: push   %rax
  0x00007f8f8f72b561: jmpq   0x00007f8f8f72b59f
  0x00007f8f8f72b566: sub    $0x8,%rsp
  0x00007f8f8f72b56a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b56f: jmpq   0x00007f8f8f72b59f
  0x00007f8f8f72b574: sub    $0x10,%rsp
  0x00007f8f8f72b578: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b57d: jmpq   0x00007f8f8f72b59f
  0x00007f8f8f72b582: sub    $0x10,%rsp
  0x00007f8f8f72b586: mov    %rax,(%rsp)
  0x00007f8f8f72b58a: movabs $0x0,%r10
  0x00007f8f8f72b594: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b599: jmpq   0x00007f8f8f72b59f
  0x00007f8f8f72b59e: push   %rax
  0x00007f8f8f72b59f: vxorpd %xmm0,%xmm0,%xmm0
  0x00007f8f8f72b5a3: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72b5a8: inc    %r13
  0x00007f8f8f72b5ab: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72b5b5: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72b5b9: nopl   0x0(%rax)

----------------------------------------------------------------------
dconst_1  15 dconst_1  [0x00007f8f8f72b5e0, 0x00007f8f8f72b640]  96 bytes

  0x00007f8f8f72b5e0: push   %rax
  0x00007f8f8f72b5e1: jmpq   0x00007f8f8f72b61f
  0x00007f8f8f72b5e6: sub    $0x8,%rsp
  0x00007f8f8f72b5ea: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b5ef: jmpq   0x00007f8f8f72b61f
  0x00007f8f8f72b5f4: sub    $0x10,%rsp
  0x00007f8f8f72b5f8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b5fd: jmpq   0x00007f8f8f72b61f
  0x00007f8f8f72b602: sub    $0x10,%rsp
  0x00007f8f8f72b606: mov    %rax,(%rsp)
  0x00007f8f8f72b60a: movabs $0x0,%r10
  0x00007f8f8f72b614: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b619: jmpq   0x00007f8f8f72b61f
  0x00007f8f8f72b61e: push   %rax
  0x00007f8f8f72b61f: vmovsd 0x1e45f9d1(%rip),%xmm0        # 0x00007f8fadb8aff8
  0x00007f8f8f72b627: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72b62c: inc    %r13
  0x00007f8f8f72b62f: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72b639: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72b63d: data16 xchg %ax,%ax

----------------------------------------------------------------------
bipush  16 bipush  [0x00007f8f8f72b660, 0x00007f8f8f72b6c0]  96 bytes

  0x00007f8f8f72b660: push   %rax
  0x00007f8f8f72b661: jmpq   0x00007f8f8f72b69f
  0x00007f8f8f72b666: sub    $0x8,%rsp
  0x00007f8f8f72b66a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b66f: jmpq   0x00007f8f8f72b69f
  0x00007f8f8f72b674: sub    $0x10,%rsp
  0x00007f8f8f72b678: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b67d: jmpq   0x00007f8f8f72b69f
  0x00007f8f8f72b682: sub    $0x10,%rsp
  0x00007f8f8f72b686: mov    %rax,(%rsp)
  0x00007f8f8f72b68a: movabs $0x0,%r10
  0x00007f8f8f72b694: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b699: jmpq   0x00007f8f8f72b69f
  0x00007f8f8f72b69e: push   %rax
  0x00007f8f8f72b69f: movsbl 0x1(%r13),%eax
  0x00007f8f8f72b6a4: movzbl 0x2(%r13),%ebx
  0x00007f8f8f72b6a9: add    $0x2,%r13
  0x00007f8f8f72b6ad: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72b6b7: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72b6bb: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
sipush  17 sipush  [0x00007f8f8f72b6e0, 0x00007f8f8f72b740]  96 bytes

  0x00007f8f8f72b6e0: push   %rax
  0x00007f8f8f72b6e1: jmpq   0x00007f8f8f72b71f
  0x00007f8f8f72b6e6: sub    $0x8,%rsp
  0x00007f8f8f72b6ea: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b6ef: jmpq   0x00007f8f8f72b71f
  0x00007f8f8f72b6f4: sub    $0x10,%rsp
  0x00007f8f8f72b6f8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b6fd: jmpq   0x00007f8f8f72b71f
  0x00007f8f8f72b702: sub    $0x10,%rsp
  0x00007f8f8f72b706: mov    %rax,(%rsp)
  0x00007f8f8f72b70a: movabs $0x0,%r10
  0x00007f8f8f72b714: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b719: jmpq   0x00007f8f8f72b71f
  0x00007f8f8f72b71e: push   %rax
  0x00007f8f8f72b71f: movzwl 0x1(%r13),%eax
  0x00007f8f8f72b724: bswap  %eax
  0x00007f8f8f72b726: sar    $0x10,%eax
  0x00007f8f8f72b729: movzbl 0x3(%r13),%ebx
  0x00007f8f8f72b72e: add    $0x3,%r13
  0x00007f8f8f72b732: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72b73c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
ldc  18 ldc  [0x00007f8f8f72b760, 0x00007f8f8f72baa0]  832 bytes

  0x00007f8f8f72b760: push   %rax
  0x00007f8f8f72b761: jmpq   0x00007f8f8f72b79f
  0x00007f8f8f72b766: sub    $0x8,%rsp
  0x00007f8f8f72b76a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b76f: jmpq   0x00007f8f8f72b79f
  0x00007f8f8f72b774: sub    $0x10,%rsp
  0x00007f8f8f72b778: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72b77d: jmpq   0x00007f8f8f72b79f
  0x00007f8f8f72b782: sub    $0x10,%rsp
  0x00007f8f8f72b786: mov    %rax,(%rsp)
  0x00007f8f8f72b78a: movabs $0x0,%r10
  0x00007f8f8f72b794: mov    %r10,0x8(%rsp)
  0x00007f8f8f72b799: jmpq   0x00007f8f8f72b79f
  0x00007f8f8f72b79e: push   %rax
  0x00007f8f8f72b79f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72b7a4: mov    -0x18(%rbp),%rcx
  0x00007f8f8f72b7a8: mov    0x8(%rcx),%rcx
  0x00007f8f8f72b7ac: mov    0x8(%rcx),%rcx
  0x00007f8f8f72b7b0: mov    0x8(%rcx),%rax
  0x00007f8f8f72b7b4: movzbl 0x4(%rax,%rbx,1),%edx
  0x00007f8f8f72b7b9: cmp    $0x64,%edx
  0x00007f8f8f72b7bc: je     0x00007f8f8f72b7cc
  0x00007f8f8f72b7be: cmp    $0x67,%edx
  0x00007f8f8f72b7c1: je     0x00007f8f8f72b7cc
  0x00007f8f8f72b7c3: cmp    $0x7,%edx
  0x00007f8f8f72b7c6: jne    0x00007f8f8f72b88b
  0x00007f8f8f72b7cc: mov    $0x0,%esi
  0x00007f8f8f72b7d1: callq  0x00007f8f8f72b7db
  0x00007f8f8f72b7d6: jmpq   0x00007f8f8f72b885
  0x00007f8f8f72b7db: lea    0x8(%rsp),%rax
  0x00007f8f8f72b7e0: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72b7e4: mov    %r15,%rdi
  0x00007f8f8f72b7e7: vzeroupper 
  0x00007f8f8f72b7ea: mov    %rbp,0x330(%r15)
  0x00007f8f8f72b7f1: mov    %rax,0x320(%r15)
  0x00007f8f8f72b7f8: test   $0xf,%esp
  0x00007f8f8f72b7fe: je     0x00007f8f8f72b816
  0x00007f8f8f72b804: sub    $0x8,%rsp
  0x00007f8f8f72b808: callq  0x00007f8fad026a10 = InterpreterRuntime::ldc(JavaThread*, bool)
  0x00007f8f8f72b80d: add    $0x8,%rsp
  0x00007f8f8f72b811: jmpq   0x00007f8f8f72b81b
  0x00007f8f8f72b816: callq  0x00007f8fad026a10 = InterpreterRuntime::ldc(JavaThread*, bool)
  0x00007f8f8f72b81b: movabs $0x0,%r10
  0x00007f8f8f72b825: mov    %r10,0x320(%r15)
  0x00007f8f8f72b82c: movabs $0x0,%r10
  0x00007f8f8f72b836: mov    %r10,0x330(%r15)
  0x00007f8f8f72b83d: movabs $0x0,%r10
  0x00007f8f8f72b847: mov    %r10,0x328(%r15)
  0x00007f8f8f72b84e: vzeroupper 
  0x00007f8f8f72b851: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72b859: je     0x00007f8f8f72b864
  0x00007f8f8f72b85f: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72b864: mov    0x380(%r15),%rax
  0x00007f8f8f72b86b: movabs $0x0,%r10
  0x00007f8f8f72b875: mov    %r10,0x380(%r15)
  0x00007f8f8f72b87c: mov    -0x40(%rbp),%r13
  0x00007f8f8f72b880: mov    -0x38(%rbp),%r14
  0x00007f8f8f72b884: retq   
  0x00007f8f8f72b885: push   %rax
  0x00007f8f8f72b886: jmpq   0x00007f8f8f72ba83
  0x00007f8f8f72b88b: cmp    $0x4,%edx
  0x00007f8f8f72b88e: jne    0x00007f8f8f72b8a4
  0x00007f8f8f72b890: vmovss 0x40(%rcx,%rbx,8),%xmm0
  0x00007f8f8f72b896: sub    $0x8,%rsp
  0x00007f8f8f72b89a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b89f: jmpq   0x00007f8f8f72ba83
  0x00007f8f8f72b8a4: cmp    $0x3,%edx
  0x00007f8f8f72b8a7: jne    0x00007f8f8f72b8b3
  0x00007f8f8f72b8a9: mov    0x40(%rcx,%rbx,8),%eax
  0x00007f8f8f72b8ad: push   %rax
  0x00007f8f8f72b8ae: jmpq   0x00007f8f8f72ba83
  0x00007f8f8f72b8b3: mov    $0x12,%esi
  0x00007f8f8f72b8b8: callq  0x00007f8f8f72b8c2
  0x00007f8f8f72b8bd: jmpq   0x00007f8f8f72b96c
  0x00007f8f8f72b8c2: lea    0x8(%rsp),%rax
  0x00007f8f8f72b8c7: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72b8cb: mov    %r15,%rdi
  0x00007f8f8f72b8ce: vzeroupper 
  0x00007f8f8f72b8d1: mov    %rbp,0x330(%r15)
  0x00007f8f8f72b8d8: mov    %rax,0x320(%r15)
  0x00007f8f8f72b8df: test   $0xf,%esp
  0x00007f8f8f72b8e5: je     0x00007f8f8f72b8fd
  0x00007f8f8f72b8eb: sub    $0x8,%rsp
  0x00007f8f8f72b8ef: callq  0x00007f8fad026ed0 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x00007f8f8f72b8f4: add    $0x8,%rsp
  0x00007f8f8f72b8f8: jmpq   0x00007f8f8f72b902
  0x00007f8f8f72b8fd: callq  0x00007f8fad026ed0 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x00007f8f8f72b902: movabs $0x0,%r10
  0x00007f8f8f72b90c: mov    %r10,0x320(%r15)
  0x00007f8f8f72b913: movabs $0x0,%r10
  0x00007f8f8f72b91d: mov    %r10,0x330(%r15)
  0x00007f8f8f72b924: movabs $0x0,%r10
  0x00007f8f8f72b92e: mov    %r10,0x328(%r15)
  0x00007f8f8f72b935: vzeroupper 
  0x00007f8f8f72b938: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72b940: je     0x00007f8f8f72b94b
  0x00007f8f8f72b946: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72b94b: mov    0x380(%r15),%rax
  0x00007f8f8f72b952: movabs $0x0,%r10
  0x00007f8f8f72b95c: mov    %r10,0x380(%r15)
  0x00007f8f8f72b963: mov    -0x40(%rbp),%r13
  0x00007f8f8f72b967: mov    -0x38(%rbp),%r14
  0x00007f8f8f72b96b: retq   
  0x00007f8f8f72b96c: mov    0x388(%r15),%rcx
  0x00007f8f8f72b973: movabs $0x0,%r10
  0x00007f8f8f72b97d: mov    %r10,0x388(%r15)
  0x00007f8f8f72b984: mov    %ecx,%ebx
  0x00007f8f8f72b986: and    $0xffff,%ebx
  0x00007f8f8f72b98c: shr    $0x1c,%ecx
  0x00007f8f8f72b98f: and    $0xf,%ecx
  0x00007f8f8f72b992: cmp    $0x4,%ecx
  0x00007f8f8f72b995: jne    0x00007f8f8f72b9a4
  0x00007f8f8f72b99b: mov    (%rax,%rbx,1),%eax
  0x00007f8f8f72b99e: push   %rax
  0x00007f8f8f72b99f: jmpq   0x00007f8f8f72ba83
  0x00007f8f8f72b9a4: cmp    $0x6,%ecx
  0x00007f8f8f72b9a7: jne    0x00007f8f8f72b9c0
  0x00007f8f8f72b9ad: vmovss (%rax,%rbx,1),%xmm0
  0x00007f8f8f72b9b2: sub    $0x8,%rsp
  0x00007f8f8f72b9b6: vmovss %xmm0,(%rsp)
  0x00007f8f8f72b9bb: jmpq   0x00007f8f8f72ba83
  0x00007f8f8f72b9c0: cmp    $0x3,%ecx
  0x00007f8f8f72b9c3: jne    0x00007f8f8f72b9d3
  0x00007f8f8f72b9c9: movswl (%rax,%rbx,1),%eax
  0x00007f8f8f72b9cd: push   %rax
  0x00007f8f8f72b9ce: jmpq   0x00007f8f8f72ba83
  0x00007f8f8f72b9d3: cmp    $0x0,%ecx
  0x00007f8f8f72b9d6: jne    0x00007f8f8f72b9e6
  0x00007f8f8f72b9dc: movsbl (%rax,%rbx,1),%eax
  0x00007f8f8f72b9e0: push   %rax
  0x00007f8f8f72b9e1: jmpq   0x00007f8f8f72ba83
  0x00007f8f8f72b9e6: cmp    $0x2,%ecx
  0x00007f8f8f72b9e9: jne    0x00007f8f8f72b9f9
  0x00007f8f8f72b9ef: movzwl (%rax,%rbx,1),%eax
  0x00007f8f8f72b9f3: push   %rax
  0x00007f8f8f72b9f4: jmpq   0x00007f8f8f72ba83
  0x00007f8f8f72b9f9: cmp    $0x1,%ecx
  0x00007f8f8f72b9fc: jne    0x00007f8f8f72ba0c
  0x00007f8f8f72ba02: movsbl (%rax,%rbx,1),%eax
  0x00007f8f8f72ba06: push   %rax
  0x00007f8f8f72ba07: jmpq   0x00007f8f8f72ba83
  0x00007f8f8f72ba0c: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f72ba11: sub    $0x80,%rsp
  0x00007f8f8f72ba18: mov    %rax,0x78(%rsp)
  0x00007f8f8f72ba1d: mov    %rcx,0x70(%rsp)
  0x00007f8f8f72ba22: mov    %rdx,0x68(%rsp)
  0x00007f8f8f72ba27: mov    %rbx,0x60(%rsp)
  0x00007f8f8f72ba2c: mov    %rbp,0x50(%rsp)
  0x00007f8f8f72ba31: mov    %rsi,0x48(%rsp)
  0x00007f8f8f72ba36: mov    %rdi,0x40(%rsp)
  0x00007f8f8f72ba3b: mov    %r8,0x38(%rsp)
  0x00007f8f8f72ba40: mov    %r9,0x30(%rsp)
  0x00007f8f8f72ba45: mov    %r10,0x28(%rsp)
  0x00007f8f8f72ba4a: mov    %r11,0x20(%rsp)
  0x00007f8f8f72ba4f: mov    %r12,0x18(%rsp)
  0x00007f8f8f72ba54: mov    %r13,0x10(%rsp)
  0x00007f8f8f72ba59: mov    %r14,0x8(%rsp)
  0x00007f8f8f72ba5e: mov    %r15,(%rsp)
  0x00007f8f8f72ba62: movabs $0x7f8fad6abceb,%rdi
  0x00007f8f8f72ba6c: movabs $0x7f8f8f72ba0c,%rsi
  0x00007f8f8f72ba76: mov    %rsp,%rdx
  0x00007f8f8f72ba79: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f72ba7d: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f72ba82: hlt    
  0x00007f8f8f72ba83: movzbl 0x2(%r13),%ebx
  0x00007f8f8f72ba88: add    $0x2,%r13
  0x00007f8f8f72ba8c: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72ba96: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72ba9a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
ldc_w  19 ldc_w  [0x00007f8f8f72bac0, 0x00007f8f8f72be00]  832 bytes

  0x00007f8f8f72bac0: push   %rax
  0x00007f8f8f72bac1: jmpq   0x00007f8f8f72baff
  0x00007f8f8f72bac6: sub    $0x8,%rsp
  0x00007f8f8f72baca: vmovss %xmm0,(%rsp)
  0x00007f8f8f72bacf: jmpq   0x00007f8f8f72baff
  0x00007f8f8f72bad4: sub    $0x10,%rsp
  0x00007f8f8f72bad8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72badd: jmpq   0x00007f8f8f72baff
  0x00007f8f8f72bae2: sub    $0x10,%rsp
  0x00007f8f8f72bae6: mov    %rax,(%rsp)
  0x00007f8f8f72baea: movabs $0x0,%r10
  0x00007f8f8f72baf4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72baf9: jmpq   0x00007f8f8f72baff
  0x00007f8f8f72bafe: push   %rax
  0x00007f8f8f72baff: movzwl 0x1(%r13),%ebx
  0x00007f8f8f72bb04: bswap  %ebx
  0x00007f8f8f72bb06: shr    $0x10,%ebx
  0x00007f8f8f72bb09: mov    -0x18(%rbp),%rcx
  0x00007f8f8f72bb0d: mov    0x8(%rcx),%rcx
  0x00007f8f8f72bb11: mov    0x8(%rcx),%rcx
  0x00007f8f8f72bb15: mov    0x8(%rcx),%rax
  0x00007f8f8f72bb19: movzbl 0x4(%rax,%rbx,1),%edx
  0x00007f8f8f72bb1e: cmp    $0x64,%edx
  0x00007f8f8f72bb21: je     0x00007f8f8f72bb31
  0x00007f8f8f72bb23: cmp    $0x67,%edx
  0x00007f8f8f72bb26: je     0x00007f8f8f72bb31
  0x00007f8f8f72bb28: cmp    $0x7,%edx
  0x00007f8f8f72bb2b: jne    0x00007f8f8f72bbf0
  0x00007f8f8f72bb31: mov    $0x1,%esi
  0x00007f8f8f72bb36: callq  0x00007f8f8f72bb40
  0x00007f8f8f72bb3b: jmpq   0x00007f8f8f72bbea
  0x00007f8f8f72bb40: lea    0x8(%rsp),%rax
  0x00007f8f8f72bb45: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72bb49: mov    %r15,%rdi
  0x00007f8f8f72bb4c: vzeroupper 
  0x00007f8f8f72bb4f: mov    %rbp,0x330(%r15)
  0x00007f8f8f72bb56: mov    %rax,0x320(%r15)
  0x00007f8f8f72bb5d: test   $0xf,%esp
  0x00007f8f8f72bb63: je     0x00007f8f8f72bb7b
  0x00007f8f8f72bb69: sub    $0x8,%rsp
  0x00007f8f8f72bb6d: callq  0x00007f8fad026a10 = InterpreterRuntime::ldc(JavaThread*, bool)
  0x00007f8f8f72bb72: add    $0x8,%rsp
  0x00007f8f8f72bb76: jmpq   0x00007f8f8f72bb80
  0x00007f8f8f72bb7b: callq  0x00007f8fad026a10 = InterpreterRuntime::ldc(JavaThread*, bool)
  0x00007f8f8f72bb80: movabs $0x0,%r10
  0x00007f8f8f72bb8a: mov    %r10,0x320(%r15)
  0x00007f8f8f72bb91: movabs $0x0,%r10
  0x00007f8f8f72bb9b: mov    %r10,0x330(%r15)
  0x00007f8f8f72bba2: movabs $0x0,%r10
  0x00007f8f8f72bbac: mov    %r10,0x328(%r15)
  0x00007f8f8f72bbb3: vzeroupper 
  0x00007f8f8f72bbb6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72bbbe: je     0x00007f8f8f72bbc9
  0x00007f8f8f72bbc4: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72bbc9: mov    0x380(%r15),%rax
  0x00007f8f8f72bbd0: movabs $0x0,%r10
  0x00007f8f8f72bbda: mov    %r10,0x380(%r15)
  0x00007f8f8f72bbe1: mov    -0x40(%rbp),%r13
  0x00007f8f8f72bbe5: mov    -0x38(%rbp),%r14
  0x00007f8f8f72bbe9: retq   
  0x00007f8f8f72bbea: push   %rax
  0x00007f8f8f72bbeb: jmpq   0x00007f8f8f72bde8
  0x00007f8f8f72bbf0: cmp    $0x4,%edx
  0x00007f8f8f72bbf3: jne    0x00007f8f8f72bc09
  0x00007f8f8f72bbf5: vmovss 0x40(%rcx,%rbx,8),%xmm0
  0x00007f8f8f72bbfb: sub    $0x8,%rsp
  0x00007f8f8f72bbff: vmovss %xmm0,(%rsp)
  0x00007f8f8f72bc04: jmpq   0x00007f8f8f72bde8
  0x00007f8f8f72bc09: cmp    $0x3,%edx
  0x00007f8f8f72bc0c: jne    0x00007f8f8f72bc18
  0x00007f8f8f72bc0e: mov    0x40(%rcx,%rbx,8),%eax
  0x00007f8f8f72bc12: push   %rax
  0x00007f8f8f72bc13: jmpq   0x00007f8f8f72bde8
  0x00007f8f8f72bc18: mov    $0x13,%esi
  0x00007f8f8f72bc1d: callq  0x00007f8f8f72bc27
  0x00007f8f8f72bc22: jmpq   0x00007f8f8f72bcd1
  0x00007f8f8f72bc27: lea    0x8(%rsp),%rax
  0x00007f8f8f72bc2c: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72bc30: mov    %r15,%rdi
  0x00007f8f8f72bc33: vzeroupper 
  0x00007f8f8f72bc36: mov    %rbp,0x330(%r15)
  0x00007f8f8f72bc3d: mov    %rax,0x320(%r15)
  0x00007f8f8f72bc44: test   $0xf,%esp
  0x00007f8f8f72bc4a: je     0x00007f8f8f72bc62
  0x00007f8f8f72bc50: sub    $0x8,%rsp
  0x00007f8f8f72bc54: callq  0x00007f8fad026ed0 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x00007f8f8f72bc59: add    $0x8,%rsp
  0x00007f8f8f72bc5d: jmpq   0x00007f8f8f72bc67
  0x00007f8f8f72bc62: callq  0x00007f8fad026ed0 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x00007f8f8f72bc67: movabs $0x0,%r10
  0x00007f8f8f72bc71: mov    %r10,0x320(%r15)
  0x00007f8f8f72bc78: movabs $0x0,%r10
  0x00007f8f8f72bc82: mov    %r10,0x330(%r15)
  0x00007f8f8f72bc89: movabs $0x0,%r10
  0x00007f8f8f72bc93: mov    %r10,0x328(%r15)
  0x00007f8f8f72bc9a: vzeroupper 
  0x00007f8f8f72bc9d: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72bca5: je     0x00007f8f8f72bcb0
  0x00007f8f8f72bcab: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72bcb0: mov    0x380(%r15),%rax
  0x00007f8f8f72bcb7: movabs $0x0,%r10
  0x00007f8f8f72bcc1: mov    %r10,0x380(%r15)
  0x00007f8f8f72bcc8: mov    -0x40(%rbp),%r13
  0x00007f8f8f72bccc: mov    -0x38(%rbp),%r14
  0x00007f8f8f72bcd0: retq   
  0x00007f8f8f72bcd1: mov    0x388(%r15),%rcx
  0x00007f8f8f72bcd8: movabs $0x0,%r10
  0x00007f8f8f72bce2: mov    %r10,0x388(%r15)
  0x00007f8f8f72bce9: mov    %ecx,%ebx
  0x00007f8f8f72bceb: and    $0xffff,%ebx
  0x00007f8f8f72bcf1: shr    $0x1c,%ecx
  0x00007f8f8f72bcf4: and    $0xf,%ecx
  0x00007f8f8f72bcf7: cmp    $0x4,%ecx
  0x00007f8f8f72bcfa: jne    0x00007f8f8f72bd09
  0x00007f8f8f72bd00: mov    (%rax,%rbx,1),%eax
  0x00007f8f8f72bd03: push   %rax
  0x00007f8f8f72bd04: jmpq   0x00007f8f8f72bde8
  0x00007f8f8f72bd09: cmp    $0x6,%ecx
  0x00007f8f8f72bd0c: jne    0x00007f8f8f72bd25
  0x00007f8f8f72bd12: vmovss (%rax,%rbx,1),%xmm0
  0x00007f8f8f72bd17: sub    $0x8,%rsp
  0x00007f8f8f72bd1b: vmovss %xmm0,(%rsp)
  0x00007f8f8f72bd20: jmpq   0x00007f8f8f72bde8
  0x00007f8f8f72bd25: cmp    $0x3,%ecx
  0x00007f8f8f72bd28: jne    0x00007f8f8f72bd38
  0x00007f8f8f72bd2e: movswl (%rax,%rbx,1),%eax
  0x00007f8f8f72bd32: push   %rax
  0x00007f8f8f72bd33: jmpq   0x00007f8f8f72bde8
  0x00007f8f8f72bd38: cmp    $0x0,%ecx
  0x00007f8f8f72bd3b: jne    0x00007f8f8f72bd4b
  0x00007f8f8f72bd41: movsbl (%rax,%rbx,1),%eax
  0x00007f8f8f72bd45: push   %rax
  0x00007f8f8f72bd46: jmpq   0x00007f8f8f72bde8
  0x00007f8f8f72bd4b: cmp    $0x2,%ecx
  0x00007f8f8f72bd4e: jne    0x00007f8f8f72bd5e
  0x00007f8f8f72bd54: movzwl (%rax,%rbx,1),%eax
  0x00007f8f8f72bd58: push   %rax
  0x00007f8f8f72bd59: jmpq   0x00007f8f8f72bde8
  0x00007f8f8f72bd5e: cmp    $0x1,%ecx
  0x00007f8f8f72bd61: jne    0x00007f8f8f72bd71
  0x00007f8f8f72bd67: movsbl (%rax,%rbx,1),%eax
  0x00007f8f8f72bd6b: push   %rax
  0x00007f8f8f72bd6c: jmpq   0x00007f8f8f72bde8
  0x00007f8f8f72bd71: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f72bd76: sub    $0x80,%rsp
  0x00007f8f8f72bd7d: mov    %rax,0x78(%rsp)
  0x00007f8f8f72bd82: mov    %rcx,0x70(%rsp)
  0x00007f8f8f72bd87: mov    %rdx,0x68(%rsp)
  0x00007f8f8f72bd8c: mov    %rbx,0x60(%rsp)
  0x00007f8f8f72bd91: mov    %rbp,0x50(%rsp)
  0x00007f8f8f72bd96: mov    %rsi,0x48(%rsp)
  0x00007f8f8f72bd9b: mov    %rdi,0x40(%rsp)
  0x00007f8f8f72bda0: mov    %r8,0x38(%rsp)
  0x00007f8f8f72bda5: mov    %r9,0x30(%rsp)
  0x00007f8f8f72bdaa: mov    %r10,0x28(%rsp)
  0x00007f8f8f72bdaf: mov    %r11,0x20(%rsp)
  0x00007f8f8f72bdb4: mov    %r12,0x18(%rsp)
  0x00007f8f8f72bdb9: mov    %r13,0x10(%rsp)
  0x00007f8f8f72bdbe: mov    %r14,0x8(%rsp)
  0x00007f8f8f72bdc3: mov    %r15,(%rsp)
  0x00007f8f8f72bdc7: movabs $0x7f8fad6abceb,%rdi
  0x00007f8f8f72bdd1: movabs $0x7f8f8f72bd71,%rsi
  0x00007f8f8f72bddb: mov    %rsp,%rdx
  0x00007f8f8f72bdde: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f72bde2: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f72bde7: hlt    
  0x00007f8f8f72bde8: movzbl 0x3(%r13),%ebx
  0x00007f8f8f72bded: add    $0x3,%r13
  0x00007f8f8f72bdf1: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72bdfb: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72bdff: nop

----------------------------------------------------------------------
ldc2_w  20 ldc2_w  [0x00007f8f8f72be20, 0x00007f8f8f72c080]  608 bytes

  0x00007f8f8f72be20: push   %rax
  0x00007f8f8f72be21: jmpq   0x00007f8f8f72be5f
  0x00007f8f8f72be26: sub    $0x8,%rsp
  0x00007f8f8f72be2a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72be2f: jmpq   0x00007f8f8f72be5f
  0x00007f8f8f72be34: sub    $0x10,%rsp
  0x00007f8f8f72be38: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72be3d: jmpq   0x00007f8f8f72be5f
  0x00007f8f8f72be42: sub    $0x10,%rsp
  0x00007f8f8f72be46: mov    %rax,(%rsp)
  0x00007f8f8f72be4a: movabs $0x0,%r10
  0x00007f8f8f72be54: mov    %r10,0x8(%rsp)
  0x00007f8f8f72be59: jmpq   0x00007f8f8f72be5f
  0x00007f8f8f72be5e: push   %rax
  0x00007f8f8f72be5f: movzwl 0x1(%r13),%ebx
  0x00007f8f8f72be64: bswap  %ebx
  0x00007f8f8f72be66: shr    $0x10,%ebx
  0x00007f8f8f72be69: mov    -0x18(%rbp),%rcx
  0x00007f8f8f72be6d: mov    0x8(%rcx),%rcx
  0x00007f8f8f72be71: mov    0x8(%rcx),%rcx
  0x00007f8f8f72be75: mov    0x8(%rcx),%rax
  0x00007f8f8f72be79: movzbl 0x4(%rax,%rbx,1),%edx
  0x00007f8f8f72be7e: cmp    $0x6,%edx
  0x00007f8f8f72be81: jne    0x00007f8f8f72be97
  0x00007f8f8f72be83: vmovsd 0x40(%rcx,%rbx,8),%xmm0
  0x00007f8f8f72be89: sub    $0x10,%rsp
  0x00007f8f8f72be8d: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72be92: jmpq   0x00007f8f8f72c058
  0x00007f8f8f72be97: cmp    $0x5,%edx
  0x00007f8f8f72be9a: jne    0x00007f8f8f72bebd
  0x00007f8f8f72be9c: mov    0x40(%rcx,%rbx,8),%rax
  0x00007f8f8f72bea1: sub    $0x10,%rsp
  0x00007f8f8f72bea5: mov    %rax,(%rsp)
  0x00007f8f8f72bea9: movabs $0x0,%r10
  0x00007f8f8f72beb3: mov    %r10,0x8(%rsp)
  0x00007f8f8f72beb8: jmpq   0x00007f8f8f72c058
  0x00007f8f8f72bebd: mov    $0x14,%esi
  0x00007f8f8f72bec2: callq  0x00007f8f8f72becc
  0x00007f8f8f72bec7: jmpq   0x00007f8f8f72bf76
  0x00007f8f8f72becc: lea    0x8(%rsp),%rax
  0x00007f8f8f72bed1: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72bed5: mov    %r15,%rdi
  0x00007f8f8f72bed8: vzeroupper 
  0x00007f8f8f72bedb: mov    %rbp,0x330(%r15)
  0x00007f8f8f72bee2: mov    %rax,0x320(%r15)
  0x00007f8f8f72bee9: test   $0xf,%esp
  0x00007f8f8f72beef: je     0x00007f8f8f72bf07
  0x00007f8f8f72bef5: sub    $0x8,%rsp
  0x00007f8f8f72bef9: callq  0x00007f8fad026ed0 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x00007f8f8f72befe: add    $0x8,%rsp
  0x00007f8f8f72bf02: jmpq   0x00007f8f8f72bf0c
  0x00007f8f8f72bf07: callq  0x00007f8fad026ed0 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x00007f8f8f72bf0c: movabs $0x0,%r10
  0x00007f8f8f72bf16: mov    %r10,0x320(%r15)
  0x00007f8f8f72bf1d: movabs $0x0,%r10
  0x00007f8f8f72bf27: mov    %r10,0x330(%r15)
  0x00007f8f8f72bf2e: movabs $0x0,%r10
  0x00007f8f8f72bf38: mov    %r10,0x328(%r15)
  0x00007f8f8f72bf3f: vzeroupper 
  0x00007f8f8f72bf42: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72bf4a: je     0x00007f8f8f72bf55
  0x00007f8f8f72bf50: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72bf55: mov    0x380(%r15),%rax
  0x00007f8f8f72bf5c: movabs $0x0,%r10
  0x00007f8f8f72bf66: mov    %r10,0x380(%r15)
  0x00007f8f8f72bf6d: mov    -0x40(%rbp),%r13
  0x00007f8f8f72bf71: mov    -0x38(%rbp),%r14
  0x00007f8f8f72bf75: retq   
  0x00007f8f8f72bf76: mov    0x388(%r15),%rcx
  0x00007f8f8f72bf7d: movabs $0x0,%r10
  0x00007f8f8f72bf87: mov    %r10,0x388(%r15)
  0x00007f8f8f72bf8e: mov    %ecx,%ebx
  0x00007f8f8f72bf90: and    $0xffff,%ebx
  0x00007f8f8f72bf96: shr    $0x1c,%ecx
  0x00007f8f8f72bf99: and    $0xf,%ecx
  0x00007f8f8f72bf9c: cmp    $0x5,%ecx
  0x00007f8f8f72bf9f: jne    0x00007f8f8f72bfc5
  0x00007f8f8f72bfa5: mov    (%rax,%rbx,1),%rax
  0x00007f8f8f72bfa9: sub    $0x10,%rsp
  0x00007f8f8f72bfad: mov    %rax,(%rsp)
  0x00007f8f8f72bfb1: movabs $0x0,%r10
  0x00007f8f8f72bfbb: mov    %r10,0x8(%rsp)
  0x00007f8f8f72bfc0: jmpq   0x00007f8f8f72c058
  0x00007f8f8f72bfc5: cmp    $0x7,%ecx
  0x00007f8f8f72bfc8: jne    0x00007f8f8f72bfe1
  0x00007f8f8f72bfce: vmovsd (%rax,%rbx,1),%xmm0
  0x00007f8f8f72bfd3: sub    $0x10,%rsp
  0x00007f8f8f72bfd7: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72bfdc: jmpq   0x00007f8f8f72c058
  0x00007f8f8f72bfe1: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f72bfe6: sub    $0x80,%rsp
  0x00007f8f8f72bfed: mov    %rax,0x78(%rsp)
  0x00007f8f8f72bff2: mov    %rcx,0x70(%rsp)
  0x00007f8f8f72bff7: mov    %rdx,0x68(%rsp)
  0x00007f8f8f72bffc: mov    %rbx,0x60(%rsp)
  0x00007f8f8f72c001: mov    %rbp,0x50(%rsp)
  0x00007f8f8f72c006: mov    %rsi,0x48(%rsp)
  0x00007f8f8f72c00b: mov    %rdi,0x40(%rsp)
  0x00007f8f8f72c010: mov    %r8,0x38(%rsp)
  0x00007f8f8f72c015: mov    %r9,0x30(%rsp)
  0x00007f8f8f72c01a: mov    %r10,0x28(%rsp)
  0x00007f8f8f72c01f: mov    %r11,0x20(%rsp)
  0x00007f8f8f72c024: mov    %r12,0x18(%rsp)
  0x00007f8f8f72c029: mov    %r13,0x10(%rsp)
  0x00007f8f8f72c02e: mov    %r14,0x8(%rsp)
  0x00007f8f8f72c033: mov    %r15,(%rsp)
  0x00007f8f8f72c037: movabs $0x7f8fad6abceb,%rdi
  0x00007f8f8f72c041: movabs $0x7f8f8f72bfe1,%rsi
  0x00007f8f8f72c04b: mov    %rsp,%rdx
  0x00007f8f8f72c04e: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f72c052: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f72c057: hlt    
  0x00007f8f8f72c058: movzbl 0x3(%r13),%ebx
  0x00007f8f8f72c05d: add    $0x3,%r13
  0x00007f8f8f72c061: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72c06b: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c06f: nop
  0x00007f8f8f72c070: add    %al,(%rax)
  0x00007f8f8f72c072: add    %al,(%rax)
  0x00007f8f8f72c074: add    %al,(%rax)
  0x00007f8f8f72c076: add    %al,(%rax)
  0x00007f8f8f72c078: add    %al,(%rax)
  0x00007f8f8f72c07a: add    %al,(%rax)
  0x00007f8f8f72c07c: add    %al,(%rax)
  0x00007f8f8f72c07e: add    %al,(%rax)

----------------------------------------------------------------------
iload  21 iload  [0x00007f8f8f72c0a0, 0x00007f8f8f72c160]  192 bytes

  0x00007f8f8f72c0a0: push   %rax
  0x00007f8f8f72c0a1: jmpq   0x00007f8f8f72c0df
  0x00007f8f8f72c0a6: sub    $0x8,%rsp
  0x00007f8f8f72c0aa: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c0af: jmpq   0x00007f8f8f72c0df
  0x00007f8f8f72c0b4: sub    $0x10,%rsp
  0x00007f8f8f72c0b8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c0bd: jmpq   0x00007f8f8f72c0df
  0x00007f8f8f72c0c2: sub    $0x10,%rsp
  0x00007f8f8f72c0c6: mov    %rax,(%rsp)
  0x00007f8f8f72c0ca: movabs $0x0,%r10
  0x00007f8f8f72c0d4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c0d9: jmpq   0x00007f8f8f72c0df
  0x00007f8f8f72c0de: push   %rax
  0x00007f8f8f72c0df: movzbl 0x2(%r13),%ebx
  0x00007f8f8f72c0e4: cmp    $0x15,%ebx
  0x00007f8f8f72c0e7: je     0x00007f8f8f72c10d
  0x00007f8f8f72c0ed: cmp    $0xe0,%ebx
  0x00007f8f8f72c0f3: mov    $0xe1,%ecx
  0x00007f8f8f72c0f8: je     0x00007f8f8f72c109
  0x00007f8f8f72c0fa: cmp    $0x34,%ebx
  0x00007f8f8f72c0fd: mov    $0xe2,%ecx
  0x00007f8f8f72c102: je     0x00007f8f8f72c109
  0x00007f8f8f72c104: mov    $0xe0,%ecx
  0x00007f8f8f72c109: mov    %cl,0x0(%r13)
  0x00007f8f8f72c10d: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c112: neg    %rbx
  0x00007f8f8f72c115: mov    (%r14,%rbx,8),%eax
  0x00007f8f8f72c119: movzbl 0x2(%r13),%ebx
  0x00007f8f8f72c11e: add    $0x2,%r13
  0x00007f8f8f72c122: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72c12c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c130: movzwl 0x2(%r13),%ebx
  0x00007f8f8f72c135: bswap  %ebx
  0x00007f8f8f72c137: shr    $0x10,%ebx
  0x00007f8f8f72c13a: neg    %rbx
  0x00007f8f8f72c13d: mov    (%r14,%rbx,8),%eax
  0x00007f8f8f72c141: movzbl 0x4(%r13),%ebx
  0x00007f8f8f72c146: add    $0x4,%r13
  0x00007f8f8f72c14a: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72c154: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c158: add    %al,(%rax)
  0x00007f8f8f72c15a: add    %al,(%rax)
  0x00007f8f8f72c15c: add    %al,(%rax)
  0x00007f8f8f72c15e: add    %al,(%rax)

----------------------------------------------------------------------
lload  22 lload  [0x00007f8f8f72c180, 0x00007f8f8f72c220]  160 bytes

  0x00007f8f8f72c180: push   %rax
  0x00007f8f8f72c181: jmpq   0x00007f8f8f72c1bf
  0x00007f8f8f72c186: sub    $0x8,%rsp
  0x00007f8f8f72c18a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c18f: jmpq   0x00007f8f8f72c1bf
  0x00007f8f8f72c194: sub    $0x10,%rsp
  0x00007f8f8f72c198: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c19d: jmpq   0x00007f8f8f72c1bf
  0x00007f8f8f72c1a2: sub    $0x10,%rsp
  0x00007f8f8f72c1a6: mov    %rax,(%rsp)
  0x00007f8f8f72c1aa: movabs $0x0,%r10
  0x00007f8f8f72c1b4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c1b9: jmpq   0x00007f8f8f72c1bf
  0x00007f8f8f72c1be: push   %rax
  0x00007f8f8f72c1bf: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c1c4: neg    %rbx
  0x00007f8f8f72c1c7: mov    -0x8(%r14,%rbx,8),%rax
  0x00007f8f8f72c1cc: movzbl 0x2(%r13),%ebx
  0x00007f8f8f72c1d1: add    $0x2,%r13
  0x00007f8f8f72c1d5: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72c1df: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c1e3: movzwl 0x2(%r13),%ebx
  0x00007f8f8f72c1e8: bswap  %ebx
  0x00007f8f8f72c1ea: shr    $0x10,%ebx
  0x00007f8f8f72c1ed: neg    %rbx
  0x00007f8f8f72c1f0: mov    -0x8(%r14,%rbx,8),%rax
  0x00007f8f8f72c1f5: movzbl 0x4(%r13),%ebx
  0x00007f8f8f72c1fa: add    $0x4,%r13
  0x00007f8f8f72c1fe: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72c208: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c20c: nopl   0x0(%rax)
  0x00007f8f8f72c210: add    %al,(%rax)
  0x00007f8f8f72c212: add    %al,(%rax)
  0x00007f8f8f72c214: add    %al,(%rax)
  0x00007f8f8f72c216: add    %al,(%rax)
  0x00007f8f8f72c218: add    %al,(%rax)
  0x00007f8f8f72c21a: add    %al,(%rax)
  0x00007f8f8f72c21c: add    %al,(%rax)
  0x00007f8f8f72c21e: add    %al,(%rax)

----------------------------------------------------------------------
fload  23 fload  [0x00007f8f8f72c240, 0x00007f8f8f72c2e0]  160 bytes

  0x00007f8f8f72c240: push   %rax
  0x00007f8f8f72c241: jmpq   0x00007f8f8f72c27f
  0x00007f8f8f72c246: sub    $0x8,%rsp
  0x00007f8f8f72c24a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c24f: jmpq   0x00007f8f8f72c27f
  0x00007f8f8f72c254: sub    $0x10,%rsp
  0x00007f8f8f72c258: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c25d: jmpq   0x00007f8f8f72c27f
  0x00007f8f8f72c262: sub    $0x10,%rsp
  0x00007f8f8f72c266: mov    %rax,(%rsp)
  0x00007f8f8f72c26a: movabs $0x0,%r10
  0x00007f8f8f72c274: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c279: jmpq   0x00007f8f8f72c27f
  0x00007f8f8f72c27e: push   %rax
  0x00007f8f8f72c27f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c284: neg    %rbx
  0x00007f8f8f72c287: vmovss (%r14,%rbx,8),%xmm0
  0x00007f8f8f72c28d: movzbl 0x2(%r13),%ebx
  0x00007f8f8f72c292: add    $0x2,%r13
  0x00007f8f8f72c296: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72c2a0: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c2a4: movzwl 0x2(%r13),%ebx
  0x00007f8f8f72c2a9: bswap  %ebx
  0x00007f8f8f72c2ab: shr    $0x10,%ebx
  0x00007f8f8f72c2ae: neg    %rbx
  0x00007f8f8f72c2b1: vmovss (%r14,%rbx,8),%xmm0
  0x00007f8f8f72c2b7: movzbl 0x4(%r13),%ebx
  0x00007f8f8f72c2bc: add    $0x4,%r13
  0x00007f8f8f72c2c0: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72c2ca: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c2ce: xchg   %ax,%ax
  0x00007f8f8f72c2d0: add    %al,(%rax)
  0x00007f8f8f72c2d2: add    %al,(%rax)
  0x00007f8f8f72c2d4: add    %al,(%rax)
  0x00007f8f8f72c2d6: add    %al,(%rax)
  0x00007f8f8f72c2d8: add    %al,(%rax)
  0x00007f8f8f72c2da: add    %al,(%rax)
  0x00007f8f8f72c2dc: add    %al,(%rax)
  0x00007f8f8f72c2de: add    %al,(%rax)

----------------------------------------------------------------------
dload  24 dload  [0x00007f8f8f72c300, 0x00007f8f8f72c3a0]  160 bytes

  0x00007f8f8f72c300: push   %rax
  0x00007f8f8f72c301: jmpq   0x00007f8f8f72c33f
  0x00007f8f8f72c306: sub    $0x8,%rsp
  0x00007f8f8f72c30a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c30f: jmpq   0x00007f8f8f72c33f
  0x00007f8f8f72c314: sub    $0x10,%rsp
  0x00007f8f8f72c318: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c31d: jmpq   0x00007f8f8f72c33f
  0x00007f8f8f72c322: sub    $0x10,%rsp
  0x00007f8f8f72c326: mov    %rax,(%rsp)
  0x00007f8f8f72c32a: movabs $0x0,%r10
  0x00007f8f8f72c334: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c339: jmpq   0x00007f8f8f72c33f
  0x00007f8f8f72c33e: push   %rax
  0x00007f8f8f72c33f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c344: neg    %rbx
  0x00007f8f8f72c347: vmovsd -0x8(%r14,%rbx,8),%xmm0
  0x00007f8f8f72c34e: movzbl 0x2(%r13),%ebx
  0x00007f8f8f72c353: add    $0x2,%r13
  0x00007f8f8f72c357: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72c361: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c365: movzwl 0x2(%r13),%ebx
  0x00007f8f8f72c36a: bswap  %ebx
  0x00007f8f8f72c36c: shr    $0x10,%ebx
  0x00007f8f8f72c36f: neg    %rbx
  0x00007f8f8f72c372: vmovsd -0x8(%r14,%rbx,8),%xmm0
  0x00007f8f8f72c379: movzbl 0x4(%r13),%ebx
  0x00007f8f8f72c37e: add    $0x4,%r13
  0x00007f8f8f72c382: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72c38c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c390: add    %al,(%rax)
  0x00007f8f8f72c392: add    %al,(%rax)
  0x00007f8f8f72c394: add    %al,(%rax)
  0x00007f8f8f72c396: add    %al,(%rax)
  0x00007f8f8f72c398: add    %al,(%rax)
  0x00007f8f8f72c39a: add    %al,(%rax)
  0x00007f8f8f72c39c: add    %al,(%rax)
  0x00007f8f8f72c39e: add    %al,(%rax)

----------------------------------------------------------------------
aload  25 aload  [0x00007f8f8f72c3c0, 0x00007f8f8f72c460]  160 bytes

  0x00007f8f8f72c3c0: push   %rax
  0x00007f8f8f72c3c1: jmpq   0x00007f8f8f72c3ff
  0x00007f8f8f72c3c6: sub    $0x8,%rsp
  0x00007f8f8f72c3ca: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c3cf: jmpq   0x00007f8f8f72c3ff
  0x00007f8f8f72c3d4: sub    $0x10,%rsp
  0x00007f8f8f72c3d8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c3dd: jmpq   0x00007f8f8f72c3ff
  0x00007f8f8f72c3e2: sub    $0x10,%rsp
  0x00007f8f8f72c3e6: mov    %rax,(%rsp)
  0x00007f8f8f72c3ea: movabs $0x0,%r10
  0x00007f8f8f72c3f4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c3f9: jmpq   0x00007f8f8f72c3ff
  0x00007f8f8f72c3fe: push   %rax
  0x00007f8f8f72c3ff: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c404: neg    %rbx
  0x00007f8f8f72c407: mov    (%r14,%rbx,8),%rax
  0x00007f8f8f72c40b: movzbl 0x2(%r13),%ebx
  0x00007f8f8f72c410: add    $0x2,%r13
  0x00007f8f8f72c414: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f72c41e: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c422: movzwl 0x2(%r13),%ebx
  0x00007f8f8f72c427: bswap  %ebx
  0x00007f8f8f72c429: shr    $0x10,%ebx
  0x00007f8f8f72c42c: neg    %rbx
  0x00007f8f8f72c42f: mov    (%r14,%rbx,8),%rax
  0x00007f8f8f72c433: movzbl 0x4(%r13),%ebx
  0x00007f8f8f72c438: add    $0x4,%r13
  0x00007f8f8f72c43c: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f72c446: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c44a: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f72c450: add    %al,(%rax)
  0x00007f8f8f72c452: add    %al,(%rax)
  0x00007f8f8f72c454: add    %al,(%rax)
  0x00007f8f8f72c456: add    %al,(%rax)
  0x00007f8f8f72c458: add    %al,(%rax)
  0x00007f8f8f72c45a: add    %al,(%rax)
  0x00007f8f8f72c45c: add    %al,(%rax)
  0x00007f8f8f72c45e: add    %al,(%rax)

----------------------------------------------------------------------
iload_0  26 iload_0  [0x00007f8f8f72c480, 0x00007f8f8f72c4e0]  96 bytes

  0x00007f8f8f72c480: push   %rax
  0x00007f8f8f72c481: jmpq   0x00007f8f8f72c4bf
  0x00007f8f8f72c486: sub    $0x8,%rsp
  0x00007f8f8f72c48a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c48f: jmpq   0x00007f8f8f72c4bf
  0x00007f8f8f72c494: sub    $0x10,%rsp
  0x00007f8f8f72c498: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c49d: jmpq   0x00007f8f8f72c4bf
  0x00007f8f8f72c4a2: sub    $0x10,%rsp
  0x00007f8f8f72c4a6: mov    %rax,(%rsp)
  0x00007f8f8f72c4aa: movabs $0x0,%r10
  0x00007f8f8f72c4b4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c4b9: jmpq   0x00007f8f8f72c4bf
  0x00007f8f8f72c4be: push   %rax
  0x00007f8f8f72c4bf: mov    (%r14),%eax
  0x00007f8f8f72c4c2: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c4c7: inc    %r13
  0x00007f8f8f72c4ca: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72c4d4: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c4d8: add    %al,(%rax)
  0x00007f8f8f72c4da: add    %al,(%rax)
  0x00007f8f8f72c4dc: add    %al,(%rax)
  0x00007f8f8f72c4de: add    %al,(%rax)

----------------------------------------------------------------------
iload_1  27 iload_1  [0x00007f8f8f72c500, 0x00007f8f8f72c560]  96 bytes

  0x00007f8f8f72c500: push   %rax
  0x00007f8f8f72c501: jmpq   0x00007f8f8f72c53f
  0x00007f8f8f72c506: sub    $0x8,%rsp
  0x00007f8f8f72c50a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c50f: jmpq   0x00007f8f8f72c53f
  0x00007f8f8f72c514: sub    $0x10,%rsp
  0x00007f8f8f72c518: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c51d: jmpq   0x00007f8f8f72c53f
  0x00007f8f8f72c522: sub    $0x10,%rsp
  0x00007f8f8f72c526: mov    %rax,(%rsp)
  0x00007f8f8f72c52a: movabs $0x0,%r10
  0x00007f8f8f72c534: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c539: jmpq   0x00007f8f8f72c53f
  0x00007f8f8f72c53e: push   %rax
  0x00007f8f8f72c53f: mov    -0x8(%r14),%eax
  0x00007f8f8f72c543: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c548: inc    %r13
  0x00007f8f8f72c54b: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72c555: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c559: nopl   0x0(%rax)

----------------------------------------------------------------------
iload_2  28 iload_2  [0x00007f8f8f72c580, 0x00007f8f8f72c5e0]  96 bytes

  0x00007f8f8f72c580: push   %rax
  0x00007f8f8f72c581: jmpq   0x00007f8f8f72c5bf
  0x00007f8f8f72c586: sub    $0x8,%rsp
  0x00007f8f8f72c58a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c58f: jmpq   0x00007f8f8f72c5bf
  0x00007f8f8f72c594: sub    $0x10,%rsp
  0x00007f8f8f72c598: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c59d: jmpq   0x00007f8f8f72c5bf
  0x00007f8f8f72c5a2: sub    $0x10,%rsp
  0x00007f8f8f72c5a6: mov    %rax,(%rsp)
  0x00007f8f8f72c5aa: movabs $0x0,%r10
  0x00007f8f8f72c5b4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c5b9: jmpq   0x00007f8f8f72c5bf
  0x00007f8f8f72c5be: push   %rax
  0x00007f8f8f72c5bf: mov    -0x10(%r14),%eax
  0x00007f8f8f72c5c3: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c5c8: inc    %r13
  0x00007f8f8f72c5cb: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72c5d5: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c5d9: nopl   0x0(%rax)

----------------------------------------------------------------------
iload_3  29 iload_3  [0x00007f8f8f72c600, 0x00007f8f8f72c660]  96 bytes

  0x00007f8f8f72c600: push   %rax
  0x00007f8f8f72c601: jmpq   0x00007f8f8f72c63f
  0x00007f8f8f72c606: sub    $0x8,%rsp
  0x00007f8f8f72c60a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c60f: jmpq   0x00007f8f8f72c63f
  0x00007f8f8f72c614: sub    $0x10,%rsp
  0x00007f8f8f72c618: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c61d: jmpq   0x00007f8f8f72c63f
  0x00007f8f8f72c622: sub    $0x10,%rsp
  0x00007f8f8f72c626: mov    %rax,(%rsp)
  0x00007f8f8f72c62a: movabs $0x0,%r10
  0x00007f8f8f72c634: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c639: jmpq   0x00007f8f8f72c63f
  0x00007f8f8f72c63e: push   %rax
  0x00007f8f8f72c63f: mov    -0x18(%r14),%eax
  0x00007f8f8f72c643: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c648: inc    %r13
  0x00007f8f8f72c64b: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72c655: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c659: nopl   0x0(%rax)

----------------------------------------------------------------------
lload_0  30 lload_0  [0x00007f8f8f72c680, 0x00007f8f8f72c6e0]  96 bytes

  0x00007f8f8f72c680: push   %rax
  0x00007f8f8f72c681: jmpq   0x00007f8f8f72c6bf
  0x00007f8f8f72c686: sub    $0x8,%rsp
  0x00007f8f8f72c68a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c68f: jmpq   0x00007f8f8f72c6bf
  0x00007f8f8f72c694: sub    $0x10,%rsp
  0x00007f8f8f72c698: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c69d: jmpq   0x00007f8f8f72c6bf
  0x00007f8f8f72c6a2: sub    $0x10,%rsp
  0x00007f8f8f72c6a6: mov    %rax,(%rsp)
  0x00007f8f8f72c6aa: movabs $0x0,%r10
  0x00007f8f8f72c6b4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c6b9: jmpq   0x00007f8f8f72c6bf
  0x00007f8f8f72c6be: push   %rax
  0x00007f8f8f72c6bf: mov    -0x8(%r14),%rax
  0x00007f8f8f72c6c3: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c6c8: inc    %r13
  0x00007f8f8f72c6cb: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72c6d5: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c6d9: nopl   0x0(%rax)

----------------------------------------------------------------------
lload_1  31 lload_1  [0x00007f8f8f72c700, 0x00007f8f8f72c760]  96 bytes

  0x00007f8f8f72c700: push   %rax
  0x00007f8f8f72c701: jmpq   0x00007f8f8f72c73f
  0x00007f8f8f72c706: sub    $0x8,%rsp
  0x00007f8f8f72c70a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c70f: jmpq   0x00007f8f8f72c73f
  0x00007f8f8f72c714: sub    $0x10,%rsp
  0x00007f8f8f72c718: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c71d: jmpq   0x00007f8f8f72c73f
  0x00007f8f8f72c722: sub    $0x10,%rsp
  0x00007f8f8f72c726: mov    %rax,(%rsp)
  0x00007f8f8f72c72a: movabs $0x0,%r10
  0x00007f8f8f72c734: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c739: jmpq   0x00007f8f8f72c73f
  0x00007f8f8f72c73e: push   %rax
  0x00007f8f8f72c73f: mov    -0x10(%r14),%rax
  0x00007f8f8f72c743: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c748: inc    %r13
  0x00007f8f8f72c74b: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72c755: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c759: nopl   0x0(%rax)

----------------------------------------------------------------------
lload_2  32 lload_2  [0x00007f8f8f72c780, 0x00007f8f8f72c7e0]  96 bytes

  0x00007f8f8f72c780: push   %rax
  0x00007f8f8f72c781: jmpq   0x00007f8f8f72c7bf
  0x00007f8f8f72c786: sub    $0x8,%rsp
  0x00007f8f8f72c78a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c78f: jmpq   0x00007f8f8f72c7bf
  0x00007f8f8f72c794: sub    $0x10,%rsp
  0x00007f8f8f72c798: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c79d: jmpq   0x00007f8f8f72c7bf
  0x00007f8f8f72c7a2: sub    $0x10,%rsp
  0x00007f8f8f72c7a6: mov    %rax,(%rsp)
  0x00007f8f8f72c7aa: movabs $0x0,%r10
  0x00007f8f8f72c7b4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c7b9: jmpq   0x00007f8f8f72c7bf
  0x00007f8f8f72c7be: push   %rax
  0x00007f8f8f72c7bf: mov    -0x18(%r14),%rax
  0x00007f8f8f72c7c3: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c7c8: inc    %r13
  0x00007f8f8f72c7cb: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72c7d5: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c7d9: nopl   0x0(%rax)

----------------------------------------------------------------------
lload_3  33 lload_3  [0x00007f8f8f72c800, 0x00007f8f8f72c860]  96 bytes

  0x00007f8f8f72c800: push   %rax
  0x00007f8f8f72c801: jmpq   0x00007f8f8f72c83f
  0x00007f8f8f72c806: sub    $0x8,%rsp
  0x00007f8f8f72c80a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c80f: jmpq   0x00007f8f8f72c83f
  0x00007f8f8f72c814: sub    $0x10,%rsp
  0x00007f8f8f72c818: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c81d: jmpq   0x00007f8f8f72c83f
  0x00007f8f8f72c822: sub    $0x10,%rsp
  0x00007f8f8f72c826: mov    %rax,(%rsp)
  0x00007f8f8f72c82a: movabs $0x0,%r10
  0x00007f8f8f72c834: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c839: jmpq   0x00007f8f8f72c83f
  0x00007f8f8f72c83e: push   %rax
  0x00007f8f8f72c83f: mov    -0x20(%r14),%rax
  0x00007f8f8f72c843: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c848: inc    %r13
  0x00007f8f8f72c84b: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72c855: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c859: nopl   0x0(%rax)

----------------------------------------------------------------------
fload_0  34 fload_0  [0x00007f8f8f72c880, 0x00007f8f8f72c8e0]  96 bytes

  0x00007f8f8f72c880: push   %rax
  0x00007f8f8f72c881: jmpq   0x00007f8f8f72c8bf
  0x00007f8f8f72c886: sub    $0x8,%rsp
  0x00007f8f8f72c88a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c88f: jmpq   0x00007f8f8f72c8bf
  0x00007f8f8f72c894: sub    $0x10,%rsp
  0x00007f8f8f72c898: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c89d: jmpq   0x00007f8f8f72c8bf
  0x00007f8f8f72c8a2: sub    $0x10,%rsp
  0x00007f8f8f72c8a6: mov    %rax,(%rsp)
  0x00007f8f8f72c8aa: movabs $0x0,%r10
  0x00007f8f8f72c8b4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c8b9: jmpq   0x00007f8f8f72c8bf
  0x00007f8f8f72c8be: push   %rax
  0x00007f8f8f72c8bf: vmovss (%r14),%xmm0
  0x00007f8f8f72c8c4: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c8c9: inc    %r13
  0x00007f8f8f72c8cc: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72c8d6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c8da: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fload_1  35 fload_1  [0x00007f8f8f72c900, 0x00007f8f8f72c960]  96 bytes

  0x00007f8f8f72c900: push   %rax
  0x00007f8f8f72c901: jmpq   0x00007f8f8f72c93f
  0x00007f8f8f72c906: sub    $0x8,%rsp
  0x00007f8f8f72c90a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c90f: jmpq   0x00007f8f8f72c93f
  0x00007f8f8f72c914: sub    $0x10,%rsp
  0x00007f8f8f72c918: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c91d: jmpq   0x00007f8f8f72c93f
  0x00007f8f8f72c922: sub    $0x10,%rsp
  0x00007f8f8f72c926: mov    %rax,(%rsp)
  0x00007f8f8f72c92a: movabs $0x0,%r10
  0x00007f8f8f72c934: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c939: jmpq   0x00007f8f8f72c93f
  0x00007f8f8f72c93e: push   %rax
  0x00007f8f8f72c93f: vmovss -0x8(%r14),%xmm0
  0x00007f8f8f72c945: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c94a: inc    %r13
  0x00007f8f8f72c94d: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72c957: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c95b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fload_2  36 fload_2  [0x00007f8f8f72c980, 0x00007f8f8f72c9e0]  96 bytes

  0x00007f8f8f72c980: push   %rax
  0x00007f8f8f72c981: jmpq   0x00007f8f8f72c9bf
  0x00007f8f8f72c986: sub    $0x8,%rsp
  0x00007f8f8f72c98a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72c98f: jmpq   0x00007f8f8f72c9bf
  0x00007f8f8f72c994: sub    $0x10,%rsp
  0x00007f8f8f72c998: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72c99d: jmpq   0x00007f8f8f72c9bf
  0x00007f8f8f72c9a2: sub    $0x10,%rsp
  0x00007f8f8f72c9a6: mov    %rax,(%rsp)
  0x00007f8f8f72c9aa: movabs $0x0,%r10
  0x00007f8f8f72c9b4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72c9b9: jmpq   0x00007f8f8f72c9bf
  0x00007f8f8f72c9be: push   %rax
  0x00007f8f8f72c9bf: vmovss -0x10(%r14),%xmm0
  0x00007f8f8f72c9c5: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72c9ca: inc    %r13
  0x00007f8f8f72c9cd: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72c9d7: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72c9db: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fload_3  37 fload_3  [0x00007f8f8f72ca00, 0x00007f8f8f72ca60]  96 bytes

  0x00007f8f8f72ca00: push   %rax
  0x00007f8f8f72ca01: jmpq   0x00007f8f8f72ca3f
  0x00007f8f8f72ca06: sub    $0x8,%rsp
  0x00007f8f8f72ca0a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72ca0f: jmpq   0x00007f8f8f72ca3f
  0x00007f8f8f72ca14: sub    $0x10,%rsp
  0x00007f8f8f72ca18: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72ca1d: jmpq   0x00007f8f8f72ca3f
  0x00007f8f8f72ca22: sub    $0x10,%rsp
  0x00007f8f8f72ca26: mov    %rax,(%rsp)
  0x00007f8f8f72ca2a: movabs $0x0,%r10
  0x00007f8f8f72ca34: mov    %r10,0x8(%rsp)
  0x00007f8f8f72ca39: jmpq   0x00007f8f8f72ca3f
  0x00007f8f8f72ca3e: push   %rax
  0x00007f8f8f72ca3f: vmovss -0x18(%r14),%xmm0
  0x00007f8f8f72ca45: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ca4a: inc    %r13
  0x00007f8f8f72ca4d: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72ca57: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72ca5b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dload_0  38 dload_0  [0x00007f8f8f72ca80, 0x00007f8f8f72cae0]  96 bytes

  0x00007f8f8f72ca80: push   %rax
  0x00007f8f8f72ca81: jmpq   0x00007f8f8f72cabf
  0x00007f8f8f72ca86: sub    $0x8,%rsp
  0x00007f8f8f72ca8a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72ca8f: jmpq   0x00007f8f8f72cabf
  0x00007f8f8f72ca94: sub    $0x10,%rsp
  0x00007f8f8f72ca98: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72ca9d: jmpq   0x00007f8f8f72cabf
  0x00007f8f8f72caa2: sub    $0x10,%rsp
  0x00007f8f8f72caa6: mov    %rax,(%rsp)
  0x00007f8f8f72caaa: movabs $0x0,%r10
  0x00007f8f8f72cab4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72cab9: jmpq   0x00007f8f8f72cabf
  0x00007f8f8f72cabe: push   %rax
  0x00007f8f8f72cabf: vmovsd -0x8(%r14),%xmm0
  0x00007f8f8f72cac5: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72caca: inc    %r13
  0x00007f8f8f72cacd: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72cad7: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72cadb: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dload_1  39 dload_1  [0x00007f8f8f72cb00, 0x00007f8f8f72cb60]  96 bytes

  0x00007f8f8f72cb00: push   %rax
  0x00007f8f8f72cb01: jmpq   0x00007f8f8f72cb3f
  0x00007f8f8f72cb06: sub    $0x8,%rsp
  0x00007f8f8f72cb0a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72cb0f: jmpq   0x00007f8f8f72cb3f
  0x00007f8f8f72cb14: sub    $0x10,%rsp
  0x00007f8f8f72cb18: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72cb1d: jmpq   0x00007f8f8f72cb3f
  0x00007f8f8f72cb22: sub    $0x10,%rsp
  0x00007f8f8f72cb26: mov    %rax,(%rsp)
  0x00007f8f8f72cb2a: movabs $0x0,%r10
  0x00007f8f8f72cb34: mov    %r10,0x8(%rsp)
  0x00007f8f8f72cb39: jmpq   0x00007f8f8f72cb3f
  0x00007f8f8f72cb3e: push   %rax
  0x00007f8f8f72cb3f: vmovsd -0x10(%r14),%xmm0
  0x00007f8f8f72cb45: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72cb4a: inc    %r13
  0x00007f8f8f72cb4d: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72cb57: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72cb5b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dload_2  40 dload_2  [0x00007f8f8f72cb80, 0x00007f8f8f72cbe0]  96 bytes

  0x00007f8f8f72cb80: push   %rax
  0x00007f8f8f72cb81: jmpq   0x00007f8f8f72cbbf
  0x00007f8f8f72cb86: sub    $0x8,%rsp
  0x00007f8f8f72cb8a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72cb8f: jmpq   0x00007f8f8f72cbbf
  0x00007f8f8f72cb94: sub    $0x10,%rsp
  0x00007f8f8f72cb98: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72cb9d: jmpq   0x00007f8f8f72cbbf
  0x00007f8f8f72cba2: sub    $0x10,%rsp
  0x00007f8f8f72cba6: mov    %rax,(%rsp)
  0x00007f8f8f72cbaa: movabs $0x0,%r10
  0x00007f8f8f72cbb4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72cbb9: jmpq   0x00007f8f8f72cbbf
  0x00007f8f8f72cbbe: push   %rax
  0x00007f8f8f72cbbf: vmovsd -0x18(%r14),%xmm0
  0x00007f8f8f72cbc5: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72cbca: inc    %r13
  0x00007f8f8f72cbcd: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72cbd7: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72cbdb: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dload_3  41 dload_3  [0x00007f8f8f72cc00, 0x00007f8f8f72cc60]  96 bytes

  0x00007f8f8f72cc00: push   %rax
  0x00007f8f8f72cc01: jmpq   0x00007f8f8f72cc3f
  0x00007f8f8f72cc06: sub    $0x8,%rsp
  0x00007f8f8f72cc0a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72cc0f: jmpq   0x00007f8f8f72cc3f
  0x00007f8f8f72cc14: sub    $0x10,%rsp
  0x00007f8f8f72cc18: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72cc1d: jmpq   0x00007f8f8f72cc3f
  0x00007f8f8f72cc22: sub    $0x10,%rsp
  0x00007f8f8f72cc26: mov    %rax,(%rsp)
  0x00007f8f8f72cc2a: movabs $0x0,%r10
  0x00007f8f8f72cc34: mov    %r10,0x8(%rsp)
  0x00007f8f8f72cc39: jmpq   0x00007f8f8f72cc3f
  0x00007f8f8f72cc3e: push   %rax
  0x00007f8f8f72cc3f: vmovsd -0x20(%r14),%xmm0
  0x00007f8f8f72cc45: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72cc4a: inc    %r13
  0x00007f8f8f72cc4d: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72cc57: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72cc5b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
aload_0  42 aload_0  [0x00007f8f8f72cc80, 0x00007f8f8f72cd20]  160 bytes

  0x00007f8f8f72cc80: push   %rax
  0x00007f8f8f72cc81: jmpq   0x00007f8f8f72ccbf
  0x00007f8f8f72cc86: sub    $0x8,%rsp
  0x00007f8f8f72cc8a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72cc8f: jmpq   0x00007f8f8f72ccbf
  0x00007f8f8f72cc94: sub    $0x10,%rsp
  0x00007f8f8f72cc98: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72cc9d: jmpq   0x00007f8f8f72ccbf
  0x00007f8f8f72cca2: sub    $0x10,%rsp
  0x00007f8f8f72cca6: mov    %rax,(%rsp)
  0x00007f8f8f72ccaa: movabs $0x0,%r10
  0x00007f8f8f72ccb4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72ccb9: jmpq   0x00007f8f8f72ccbf
  0x00007f8f8f72ccbe: push   %rax
  0x00007f8f8f72ccbf: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ccc4: cmp    $0xb4,%ebx
  0x00007f8f8f72ccca: je     0x00007f8f8f72cd00
  0x00007f8f8f72ccd0: cmp    $0xd0,%ebx
  0x00007f8f8f72ccd6: mov    $0xdd,%ecx
  0x00007f8f8f72ccdb: je     0x00007f8f8f72ccfc
  0x00007f8f8f72ccdd: cmp    $0xcb,%ebx
  0x00007f8f8f72cce3: mov    $0xde,%ecx
  0x00007f8f8f72cce8: je     0x00007f8f8f72ccfc
  0x00007f8f8f72ccea: cmp    $0xcf,%ebx
  0x00007f8f8f72ccf0: mov    $0xdf,%ecx
  0x00007f8f8f72ccf5: je     0x00007f8f8f72ccfc
  0x00007f8f8f72ccf7: mov    $0xdc,%ecx
  0x00007f8f8f72ccfc: mov    %cl,0x0(%r13)
  0x00007f8f8f72cd00: mov    (%r14),%rax
  0x00007f8f8f72cd03: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72cd08: inc    %r13
  0x00007f8f8f72cd0b: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f72cd15: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72cd19: nopl   0x0(%rax)

----------------------------------------------------------------------
aload_1  43 aload_1  [0x00007f8f8f72cd40, 0x00007f8f8f72cda0]  96 bytes

  0x00007f8f8f72cd40: push   %rax
  0x00007f8f8f72cd41: jmpq   0x00007f8f8f72cd7f
  0x00007f8f8f72cd46: sub    $0x8,%rsp
  0x00007f8f8f72cd4a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72cd4f: jmpq   0x00007f8f8f72cd7f
  0x00007f8f8f72cd54: sub    $0x10,%rsp
  0x00007f8f8f72cd58: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72cd5d: jmpq   0x00007f8f8f72cd7f
  0x00007f8f8f72cd62: sub    $0x10,%rsp
  0x00007f8f8f72cd66: mov    %rax,(%rsp)
  0x00007f8f8f72cd6a: movabs $0x0,%r10
  0x00007f8f8f72cd74: mov    %r10,0x8(%rsp)
  0x00007f8f8f72cd79: jmpq   0x00007f8f8f72cd7f
  0x00007f8f8f72cd7e: push   %rax
  0x00007f8f8f72cd7f: mov    -0x8(%r14),%rax
  0x00007f8f8f72cd83: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72cd88: inc    %r13
  0x00007f8f8f72cd8b: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f72cd95: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72cd99: nopl   0x0(%rax)

----------------------------------------------------------------------
aload_2  44 aload_2  [0x00007f8f8f72cdc0, 0x00007f8f8f72ce20]  96 bytes

  0x00007f8f8f72cdc0: push   %rax
  0x00007f8f8f72cdc1: jmpq   0x00007f8f8f72cdff
  0x00007f8f8f72cdc6: sub    $0x8,%rsp
  0x00007f8f8f72cdca: vmovss %xmm0,(%rsp)
  0x00007f8f8f72cdcf: jmpq   0x00007f8f8f72cdff
  0x00007f8f8f72cdd4: sub    $0x10,%rsp
  0x00007f8f8f72cdd8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72cddd: jmpq   0x00007f8f8f72cdff
  0x00007f8f8f72cde2: sub    $0x10,%rsp
  0x00007f8f8f72cde6: mov    %rax,(%rsp)
  0x00007f8f8f72cdea: movabs $0x0,%r10
  0x00007f8f8f72cdf4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72cdf9: jmpq   0x00007f8f8f72cdff
  0x00007f8f8f72cdfe: push   %rax
  0x00007f8f8f72cdff: mov    -0x10(%r14),%rax
  0x00007f8f8f72ce03: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ce08: inc    %r13
  0x00007f8f8f72ce0b: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f72ce15: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72ce19: nopl   0x0(%rax)

----------------------------------------------------------------------
aload_3  45 aload_3  [0x00007f8f8f72ce40, 0x00007f8f8f72cea0]  96 bytes

  0x00007f8f8f72ce40: push   %rax
  0x00007f8f8f72ce41: jmpq   0x00007f8f8f72ce7f
  0x00007f8f8f72ce46: sub    $0x8,%rsp
  0x00007f8f8f72ce4a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72ce4f: jmpq   0x00007f8f8f72ce7f
  0x00007f8f8f72ce54: sub    $0x10,%rsp
  0x00007f8f8f72ce58: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72ce5d: jmpq   0x00007f8f8f72ce7f
  0x00007f8f8f72ce62: sub    $0x10,%rsp
  0x00007f8f8f72ce66: mov    %rax,(%rsp)
  0x00007f8f8f72ce6a: movabs $0x0,%r10
  0x00007f8f8f72ce74: mov    %r10,0x8(%rsp)
  0x00007f8f8f72ce79: jmpq   0x00007f8f8f72ce7f
  0x00007f8f8f72ce7e: push   %rax
  0x00007f8f8f72ce7f: mov    -0x18(%r14),%rax
  0x00007f8f8f72ce83: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ce88: inc    %r13
  0x00007f8f8f72ce8b: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f72ce95: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72ce99: nopl   0x0(%rax)

----------------------------------------------------------------------
iaload  46 iaload  [0x00007f8f8f72cec0, 0x00007f8f8f72cf00]  64 bytes

  0x00007f8f8f72cec0: mov    (%rsp),%eax
  0x00007f8f8f72cec3: add    $0x8,%rsp
  0x00007f8f8f72cec7: pop    %rdx
  0x00007f8f8f72cec8: movslq %eax,%rax
  0x00007f8f8f72cecb: cmp    0xc(%rdx),%eax
  0x00007f8f8f72cece: mov    %eax,%ebx
  0x00007f8f8f72ced0: jb     0x00007f8f8f72ceda
  0x00007f8f8f72ced2: mov    %rdx,%rsi
  0x00007f8f8f72ced5: jmpq   0x00007f8f8f728060
  0x00007f8f8f72ceda: mov    0x10(%rdx,%rax,4),%eax
  0x00007f8f8f72cede: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72cee3: inc    %r13
  0x00007f8f8f72cee6: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72cef0: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72cef4: nopl   0x0(%rax)
  0x00007f8f8f72cef8: add    %al,(%rax)
  0x00007f8f8f72cefa: add    %al,(%rax)
  0x00007f8f8f72cefc: add    %al,(%rax)
  0x00007f8f8f72cefe: add    %al,(%rax)

----------------------------------------------------------------------
laload  47 laload  [0x00007f8f8f72cf20, 0x00007f8f8f72cf60]  64 bytes

  0x00007f8f8f72cf20: mov    (%rsp),%eax
  0x00007f8f8f72cf23: add    $0x8,%rsp
  0x00007f8f8f72cf27: pop    %rdx
  0x00007f8f8f72cf28: movslq %eax,%rax
  0x00007f8f8f72cf2b: cmp    0xc(%rdx),%eax
  0x00007f8f8f72cf2e: mov    %eax,%ebx
  0x00007f8f8f72cf30: jb     0x00007f8f8f72cf3a
  0x00007f8f8f72cf32: mov    %rdx,%rsi
  0x00007f8f8f72cf35: jmpq   0x00007f8f8f728060
  0x00007f8f8f72cf3a: mov    0x10(%rdx,%rbx,8),%rax
  0x00007f8f8f72cf3f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72cf44: inc    %r13
  0x00007f8f8f72cf47: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72cf51: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72cf55: data16 xchg %ax,%ax
  0x00007f8f8f72cf58: add    %al,(%rax)
  0x00007f8f8f72cf5a: add    %al,(%rax)
  0x00007f8f8f72cf5c: add    %al,(%rax)
  0x00007f8f8f72cf5e: add    %al,(%rax)

----------------------------------------------------------------------
faload  48 faload  [0x00007f8f8f72cf80, 0x00007f8f8f72cfc0]  64 bytes

  0x00007f8f8f72cf80: mov    (%rsp),%eax
  0x00007f8f8f72cf83: add    $0x8,%rsp
  0x00007f8f8f72cf87: pop    %rdx
  0x00007f8f8f72cf88: movslq %eax,%rax
  0x00007f8f8f72cf8b: cmp    0xc(%rdx),%eax
  0x00007f8f8f72cf8e: mov    %eax,%ebx
  0x00007f8f8f72cf90: jb     0x00007f8f8f72cf9a
  0x00007f8f8f72cf92: mov    %rdx,%rsi
  0x00007f8f8f72cf95: jmpq   0x00007f8f8f728060
  0x00007f8f8f72cf9a: vmovss 0x10(%rdx,%rax,4),%xmm0
  0x00007f8f8f72cfa0: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72cfa5: inc    %r13
  0x00007f8f8f72cfa8: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72cfb2: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72cfb6: xchg   %ax,%ax
  0x00007f8f8f72cfb8: add    %al,(%rax)
  0x00007f8f8f72cfba: add    %al,(%rax)
  0x00007f8f8f72cfbc: add    %al,(%rax)
  0x00007f8f8f72cfbe: add    %al,(%rax)

----------------------------------------------------------------------
daload  49 daload  [0x00007f8f8f72cfe0, 0x00007f8f8f72d020]  64 bytes

  0x00007f8f8f72cfe0: mov    (%rsp),%eax
  0x00007f8f8f72cfe3: add    $0x8,%rsp
  0x00007f8f8f72cfe7: pop    %rdx
  0x00007f8f8f72cfe8: movslq %eax,%rax
  0x00007f8f8f72cfeb: cmp    0xc(%rdx),%eax
  0x00007f8f8f72cfee: mov    %eax,%ebx
  0x00007f8f8f72cff0: jb     0x00007f8f8f72cffa
  0x00007f8f8f72cff2: mov    %rdx,%rsi
  0x00007f8f8f72cff5: jmpq   0x00007f8f8f728060
  0x00007f8f8f72cffa: vmovsd 0x10(%rdx,%rax,8),%xmm0
  0x00007f8f8f72d000: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d005: inc    %r13
  0x00007f8f8f72d008: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72d012: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d016: xchg   %ax,%ax
  0x00007f8f8f72d018: add    %al,(%rax)
  0x00007f8f8f72d01a: add    %al,(%rax)
  0x00007f8f8f72d01c: add    %al,(%rax)
  0x00007f8f8f72d01e: add    %al,(%rax)

----------------------------------------------------------------------
aaload  50 aaload  [0x00007f8f8f72d040, 0x00007f8f8f72d080]  64 bytes

  0x00007f8f8f72d040: mov    (%rsp),%eax
  0x00007f8f8f72d043: add    $0x8,%rsp
  0x00007f8f8f72d047: pop    %rdx
  0x00007f8f8f72d048: movslq %eax,%rax
  0x00007f8f8f72d04b: cmp    0xc(%rdx),%eax
  0x00007f8f8f72d04e: mov    %eax,%ebx
  0x00007f8f8f72d050: jb     0x00007f8f8f72d05a
  0x00007f8f8f72d052: mov    %rdx,%rsi
  0x00007f8f8f72d055: jmpq   0x00007f8f8f728060
  0x00007f8f8f72d05a: mov    0x10(%rdx,%rax,4),%eax
  0x00007f8f8f72d05e: shl    $0x3,%rax
  0x00007f8f8f72d062: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d067: inc    %r13
  0x00007f8f8f72d06a: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f72d074: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d078: add    %al,(%rax)
  0x00007f8f8f72d07a: add    %al,(%rax)
  0x00007f8f8f72d07c: add    %al,(%rax)
  0x00007f8f8f72d07e: add    %al,(%rax)

----------------------------------------------------------------------
baload  51 baload  [0x00007f8f8f72d0a0, 0x00007f8f8f72d0e0]  64 bytes

  0x00007f8f8f72d0a0: mov    (%rsp),%eax
  0x00007f8f8f72d0a3: add    $0x8,%rsp
  0x00007f8f8f72d0a7: pop    %rdx
  0x00007f8f8f72d0a8: movslq %eax,%rax
  0x00007f8f8f72d0ab: cmp    0xc(%rdx),%eax
  0x00007f8f8f72d0ae: mov    %eax,%ebx
  0x00007f8f8f72d0b0: jb     0x00007f8f8f72d0ba
  0x00007f8f8f72d0b2: mov    %rdx,%rsi
  0x00007f8f8f72d0b5: jmpq   0x00007f8f8f728060
  0x00007f8f8f72d0ba: movsbl 0x10(%rdx,%rax,1),%eax
  0x00007f8f8f72d0bf: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d0c4: inc    %r13
  0x00007f8f8f72d0c7: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72d0d1: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d0d5: data16 xchg %ax,%ax
  0x00007f8f8f72d0d8: add    %al,(%rax)
  0x00007f8f8f72d0da: add    %al,(%rax)
  0x00007f8f8f72d0dc: add    %al,(%rax)
  0x00007f8f8f72d0de: add    %al,(%rax)

----------------------------------------------------------------------
caload  52 caload  [0x00007f8f8f72d100, 0x00007f8f8f72d140]  64 bytes

  0x00007f8f8f72d100: mov    (%rsp),%eax
  0x00007f8f8f72d103: add    $0x8,%rsp
  0x00007f8f8f72d107: pop    %rdx
  0x00007f8f8f72d108: movslq %eax,%rax
  0x00007f8f8f72d10b: cmp    0xc(%rdx),%eax
  0x00007f8f8f72d10e: mov    %eax,%ebx
  0x00007f8f8f72d110: jb     0x00007f8f8f72d11a
  0x00007f8f8f72d112: mov    %rdx,%rsi
  0x00007f8f8f72d115: jmpq   0x00007f8f8f728060
  0x00007f8f8f72d11a: movzwl 0x10(%rdx,%rax,2),%eax
  0x00007f8f8f72d11f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d124: inc    %r13
  0x00007f8f8f72d127: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72d131: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d135: data16 xchg %ax,%ax
  0x00007f8f8f72d138: add    %al,(%rax)
  0x00007f8f8f72d13a: add    %al,(%rax)
  0x00007f8f8f72d13c: add    %al,(%rax)
  0x00007f8f8f72d13e: add    %al,(%rax)

----------------------------------------------------------------------
saload  53 saload  [0x00007f8f8f72d160, 0x00007f8f8f72d1a0]  64 bytes

  0x00007f8f8f72d160: mov    (%rsp),%eax
  0x00007f8f8f72d163: add    $0x8,%rsp
  0x00007f8f8f72d167: pop    %rdx
  0x00007f8f8f72d168: movslq %eax,%rax
  0x00007f8f8f72d16b: cmp    0xc(%rdx),%eax
  0x00007f8f8f72d16e: mov    %eax,%ebx
  0x00007f8f8f72d170: jb     0x00007f8f8f72d17a
  0x00007f8f8f72d172: mov    %rdx,%rsi
  0x00007f8f8f72d175: jmpq   0x00007f8f8f728060
  0x00007f8f8f72d17a: movswl 0x10(%rdx,%rax,2),%eax
  0x00007f8f8f72d17f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d184: inc    %r13
  0x00007f8f8f72d187: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72d191: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d195: data16 xchg %ax,%ax
  0x00007f8f8f72d198: add    %al,(%rax)
  0x00007f8f8f72d19a: add    %al,(%rax)
  0x00007f8f8f72d19c: add    %al,(%rax)
  0x00007f8f8f72d19e: add    %al,(%rax)

----------------------------------------------------------------------
istore  54 istore  [0x00007f8f8f72d1c0, 0x00007f8f8f72d220]  96 bytes

  0x00007f8f8f72d1c0: mov    (%rsp),%eax
  0x00007f8f8f72d1c3: add    $0x8,%rsp
  0x00007f8f8f72d1c7: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d1cc: neg    %rbx
  0x00007f8f8f72d1cf: mov    %eax,(%r14,%rbx,8)
  0x00007f8f8f72d1d3: movzbl 0x2(%r13),%ebx
  0x00007f8f8f72d1d8: add    $0x2,%r13
  0x00007f8f8f72d1dc: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d1e6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d1ea: mov    (%rsp),%eax
  0x00007f8f8f72d1ed: add    $0x8,%rsp
  0x00007f8f8f72d1f1: movzwl 0x2(%r13),%ebx
  0x00007f8f8f72d1f6: bswap  %ebx
  0x00007f8f8f72d1f8: shr    $0x10,%ebx
  0x00007f8f8f72d1fb: neg    %rbx
  0x00007f8f8f72d1fe: mov    %eax,(%r14,%rbx,8)
  0x00007f8f8f72d202: movzbl 0x4(%r13),%ebx
  0x00007f8f8f72d207: add    $0x4,%r13
  0x00007f8f8f72d20b: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d215: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d219: nopl   0x0(%rax)

----------------------------------------------------------------------
lstore  55 lstore  [0x00007f8f8f72d240, 0x00007f8f8f72d2a0]  96 bytes

  0x00007f8f8f72d240: mov    (%rsp),%rax
  0x00007f8f8f72d244: add    $0x10,%rsp
  0x00007f8f8f72d248: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d24d: neg    %rbx
  0x00007f8f8f72d250: mov    %rax,-0x8(%r14,%rbx,8)
  0x00007f8f8f72d255: movzbl 0x2(%r13),%ebx
  0x00007f8f8f72d25a: add    $0x2,%r13
  0x00007f8f8f72d25e: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d268: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d26c: mov    (%rsp),%rax
  0x00007f8f8f72d270: add    $0x10,%rsp
  0x00007f8f8f72d274: movzwl 0x2(%r13),%ebx
  0x00007f8f8f72d279: bswap  %ebx
  0x00007f8f8f72d27b: shr    $0x10,%ebx
  0x00007f8f8f72d27e: neg    %rbx
  0x00007f8f8f72d281: mov    %rax,-0x8(%r14,%rbx,8)
  0x00007f8f8f72d286: movzbl 0x4(%r13),%ebx
  0x00007f8f8f72d28b: add    $0x4,%r13
  0x00007f8f8f72d28f: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d299: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d29d: data16 xchg %ax,%ax

----------------------------------------------------------------------
fstore  56 fstore  [0x00007f8f8f72d2c0, 0x00007f8f8f72d340]  128 bytes

  0x00007f8f8f72d2c0: vmovss (%rsp),%xmm0
  0x00007f8f8f72d2c5: add    $0x8,%rsp
  0x00007f8f8f72d2c9: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d2ce: neg    %rbx
  0x00007f8f8f72d2d1: vmovss %xmm0,(%r14,%rbx,8)
  0x00007f8f8f72d2d7: movzbl 0x2(%r13),%ebx
  0x00007f8f8f72d2dc: add    $0x2,%r13
  0x00007f8f8f72d2e0: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d2ea: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d2ee: vmovss (%rsp),%xmm0
  0x00007f8f8f72d2f3: add    $0x8,%rsp
  0x00007f8f8f72d2f7: movzwl 0x2(%r13),%ebx
  0x00007f8f8f72d2fc: bswap  %ebx
  0x00007f8f8f72d2fe: shr    $0x10,%ebx
  0x00007f8f8f72d301: neg    %rbx
  0x00007f8f8f72d304: vmovss %xmm0,(%r14,%rbx,8)
  0x00007f8f8f72d30a: movzbl 0x4(%r13),%ebx
  0x00007f8f8f72d30f: add    $0x4,%r13
  0x00007f8f8f72d313: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d31d: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d321: nopl   0x0(%rax)
  0x00007f8f8f72d328: add    %al,(%rax)
  0x00007f8f8f72d32a: add    %al,(%rax)
  0x00007f8f8f72d32c: add    %al,(%rax)
  0x00007f8f8f72d32e: add    %al,(%rax)
  0x00007f8f8f72d330: add    %al,(%rax)
  0x00007f8f8f72d332: add    %al,(%rax)
  0x00007f8f8f72d334: add    %al,(%rax)
  0x00007f8f8f72d336: add    %al,(%rax)
  0x00007f8f8f72d338: add    %al,(%rax)
  0x00007f8f8f72d33a: add    %al,(%rax)
  0x00007f8f8f72d33c: add    %al,(%rax)
  0x00007f8f8f72d33e: add    %al,(%rax)

----------------------------------------------------------------------
dstore  57 dstore  [0x00007f8f8f72d360, 0x00007f8f8f72d3e0]  128 bytes

  0x00007f8f8f72d360: vmovsd (%rsp),%xmm0
  0x00007f8f8f72d365: add    $0x10,%rsp
  0x00007f8f8f72d369: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d36e: neg    %rbx
  0x00007f8f8f72d371: vmovsd %xmm0,-0x8(%r14,%rbx,8)
  0x00007f8f8f72d378: movzbl 0x2(%r13),%ebx
  0x00007f8f8f72d37d: add    $0x2,%r13
  0x00007f8f8f72d381: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d38b: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d38f: vmovsd (%rsp),%xmm0
  0x00007f8f8f72d394: add    $0x10,%rsp
  0x00007f8f8f72d398: movzwl 0x2(%r13),%ebx
  0x00007f8f8f72d39d: bswap  %ebx
  0x00007f8f8f72d39f: shr    $0x10,%ebx
  0x00007f8f8f72d3a2: neg    %rbx
  0x00007f8f8f72d3a5: vmovsd %xmm0,-0x8(%r14,%rbx,8)
  0x00007f8f8f72d3ac: movzbl 0x4(%r13),%ebx
  0x00007f8f8f72d3b1: add    $0x4,%r13
  0x00007f8f8f72d3b5: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d3bf: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d3c3: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f72d3c8: add    %al,(%rax)
  0x00007f8f8f72d3ca: add    %al,(%rax)
  0x00007f8f8f72d3cc: add    %al,(%rax)
  0x00007f8f8f72d3ce: add    %al,(%rax)
  0x00007f8f8f72d3d0: add    %al,(%rax)
  0x00007f8f8f72d3d2: add    %al,(%rax)
  0x00007f8f8f72d3d4: add    %al,(%rax)
  0x00007f8f8f72d3d6: add    %al,(%rax)
  0x00007f8f8f72d3d8: add    %al,(%rax)
  0x00007f8f8f72d3da: add    %al,(%rax)
  0x00007f8f8f72d3dc: add    %al,(%rax)
  0x00007f8f8f72d3de: add    %al,(%rax)

----------------------------------------------------------------------
astore  58 astore  [0x00007f8f8f72d400, 0x00007f8f8f72d4a0]  160 bytes

  0x00007f8f8f72d400: push   %rax
  0x00007f8f8f72d401: jmpq   0x00007f8f8f72d43f
  0x00007f8f8f72d406: sub    $0x8,%rsp
  0x00007f8f8f72d40a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72d40f: jmpq   0x00007f8f8f72d43f
  0x00007f8f8f72d414: sub    $0x10,%rsp
  0x00007f8f8f72d418: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72d41d: jmpq   0x00007f8f8f72d43f
  0x00007f8f8f72d422: sub    $0x10,%rsp
  0x00007f8f8f72d426: mov    %rax,(%rsp)
  0x00007f8f8f72d42a: movabs $0x0,%r10
  0x00007f8f8f72d434: mov    %r10,0x8(%rsp)
  0x00007f8f8f72d439: jmpq   0x00007f8f8f72d43f
  0x00007f8f8f72d43e: push   %rax
  0x00007f8f8f72d43f: pop    %rax
  0x00007f8f8f72d440: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d445: neg    %rbx
  0x00007f8f8f72d448: mov    %rax,(%r14,%rbx,8)
  0x00007f8f8f72d44c: movzbl 0x2(%r13),%ebx
  0x00007f8f8f72d451: add    $0x2,%r13
  0x00007f8f8f72d455: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d45f: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d463: pop    %rax
  0x00007f8f8f72d464: movzwl 0x2(%r13),%ebx
  0x00007f8f8f72d469: bswap  %ebx
  0x00007f8f8f72d46b: shr    $0x10,%ebx
  0x00007f8f8f72d46e: neg    %rbx
  0x00007f8f8f72d471: mov    %rax,(%r14,%rbx,8)
  0x00007f8f8f72d475: movzbl 0x4(%r13),%ebx
  0x00007f8f8f72d47a: add    $0x4,%r13
  0x00007f8f8f72d47e: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d488: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d48c: nopl   0x0(%rax)
  0x00007f8f8f72d490: add    %al,(%rax)
  0x00007f8f8f72d492: add    %al,(%rax)
  0x00007f8f8f72d494: add    %al,(%rax)
  0x00007f8f8f72d496: add    %al,(%rax)
  0x00007f8f8f72d498: add    %al,(%rax)
  0x00007f8f8f72d49a: add    %al,(%rax)
  0x00007f8f8f72d49c: add    %al,(%rax)
  0x00007f8f8f72d49e: add    %al,(%rax)

----------------------------------------------------------------------
istore_0  59 istore_0  [0x00007f8f8f72d4c0, 0x00007f8f8f72d4e0]  32 bytes

  0x00007f8f8f72d4c0: mov    (%rsp),%eax
  0x00007f8f8f72d4c3: add    $0x8,%rsp
  0x00007f8f8f72d4c7: mov    %eax,(%r14)
  0x00007f8f8f72d4ca: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d4cf: inc    %r13
  0x00007f8f8f72d4d2: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d4dc: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
istore_1  60 istore_1  [0x00007f8f8f72d500, 0x00007f8f8f72d540]  64 bytes

  0x00007f8f8f72d500: mov    (%rsp),%eax
  0x00007f8f8f72d503: add    $0x8,%rsp
  0x00007f8f8f72d507: mov    %eax,-0x8(%r14)
  0x00007f8f8f72d50b: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d510: inc    %r13
  0x00007f8f8f72d513: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d51d: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d521: nopl   0x0(%rax)
  0x00007f8f8f72d528: add    %al,(%rax)
  0x00007f8f8f72d52a: add    %al,(%rax)
  0x00007f8f8f72d52c: add    %al,(%rax)
  0x00007f8f8f72d52e: add    %al,(%rax)
  0x00007f8f8f72d530: add    %al,(%rax)
  0x00007f8f8f72d532: add    %al,(%rax)
  0x00007f8f8f72d534: add    %al,(%rax)
  0x00007f8f8f72d536: add    %al,(%rax)
  0x00007f8f8f72d538: add    %al,(%rax)
  0x00007f8f8f72d53a: add    %al,(%rax)
  0x00007f8f8f72d53c: add    %al,(%rax)
  0x00007f8f8f72d53e: add    %al,(%rax)

----------------------------------------------------------------------
istore_2  61 istore_2  [0x00007f8f8f72d560, 0x00007f8f8f72d5a0]  64 bytes

  0x00007f8f8f72d560: mov    (%rsp),%eax
  0x00007f8f8f72d563: add    $0x8,%rsp
  0x00007f8f8f72d567: mov    %eax,-0x10(%r14)
  0x00007f8f8f72d56b: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d570: inc    %r13
  0x00007f8f8f72d573: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d57d: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d581: nopl   0x0(%rax)
  0x00007f8f8f72d588: add    %al,(%rax)
  0x00007f8f8f72d58a: add    %al,(%rax)
  0x00007f8f8f72d58c: add    %al,(%rax)
  0x00007f8f8f72d58e: add    %al,(%rax)
  0x00007f8f8f72d590: add    %al,(%rax)
  0x00007f8f8f72d592: add    %al,(%rax)
  0x00007f8f8f72d594: add    %al,(%rax)
  0x00007f8f8f72d596: add    %al,(%rax)
  0x00007f8f8f72d598: add    %al,(%rax)
  0x00007f8f8f72d59a: add    %al,(%rax)
  0x00007f8f8f72d59c: add    %al,(%rax)
  0x00007f8f8f72d59e: add    %al,(%rax)

----------------------------------------------------------------------
istore_3  62 istore_3  [0x00007f8f8f72d5c0, 0x00007f8f8f72d600]  64 bytes

  0x00007f8f8f72d5c0: mov    (%rsp),%eax
  0x00007f8f8f72d5c3: add    $0x8,%rsp
  0x00007f8f8f72d5c7: mov    %eax,-0x18(%r14)
  0x00007f8f8f72d5cb: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d5d0: inc    %r13
  0x00007f8f8f72d5d3: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d5dd: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d5e1: nopl   0x0(%rax)
  0x00007f8f8f72d5e8: add    %al,(%rax)
  0x00007f8f8f72d5ea: add    %al,(%rax)
  0x00007f8f8f72d5ec: add    %al,(%rax)
  0x00007f8f8f72d5ee: add    %al,(%rax)
  0x00007f8f8f72d5f0: add    %al,(%rax)
  0x00007f8f8f72d5f2: add    %al,(%rax)
  0x00007f8f8f72d5f4: add    %al,(%rax)
  0x00007f8f8f72d5f6: add    %al,(%rax)
  0x00007f8f8f72d5f8: add    %al,(%rax)
  0x00007f8f8f72d5fa: add    %al,(%rax)
  0x00007f8f8f72d5fc: add    %al,(%rax)
  0x00007f8f8f72d5fe: add    %al,(%rax)

----------------------------------------------------------------------
lstore_0  63 lstore_0  [0x00007f8f8f72d620, 0x00007f8f8f72d660]  64 bytes

  0x00007f8f8f72d620: mov    (%rsp),%rax
  0x00007f8f8f72d624: add    $0x10,%rsp
  0x00007f8f8f72d628: mov    %rax,-0x8(%r14)
  0x00007f8f8f72d62c: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d631: inc    %r13
  0x00007f8f8f72d634: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d63e: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d642: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f72d648: add    %al,(%rax)
  0x00007f8f8f72d64a: add    %al,(%rax)
  0x00007f8f8f72d64c: add    %al,(%rax)
  0x00007f8f8f72d64e: add    %al,(%rax)
  0x00007f8f8f72d650: add    %al,(%rax)
  0x00007f8f8f72d652: add    %al,(%rax)
  0x00007f8f8f72d654: add    %al,(%rax)
  0x00007f8f8f72d656: add    %al,(%rax)
  0x00007f8f8f72d658: add    %al,(%rax)
  0x00007f8f8f72d65a: add    %al,(%rax)
  0x00007f8f8f72d65c: add    %al,(%rax)
  0x00007f8f8f72d65e: add    %al,(%rax)

----------------------------------------------------------------------
lstore_1  64 lstore_1  [0x00007f8f8f72d680, 0x00007f8f8f72d6c0]  64 bytes

  0x00007f8f8f72d680: mov    (%rsp),%rax
  0x00007f8f8f72d684: add    $0x10,%rsp
  0x00007f8f8f72d688: mov    %rax,-0x10(%r14)
  0x00007f8f8f72d68c: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d691: inc    %r13
  0x00007f8f8f72d694: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d69e: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d6a2: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f72d6a8: add    %al,(%rax)
  0x00007f8f8f72d6aa: add    %al,(%rax)
  0x00007f8f8f72d6ac: add    %al,(%rax)
  0x00007f8f8f72d6ae: add    %al,(%rax)
  0x00007f8f8f72d6b0: add    %al,(%rax)
  0x00007f8f8f72d6b2: add    %al,(%rax)
  0x00007f8f8f72d6b4: add    %al,(%rax)
  0x00007f8f8f72d6b6: add    %al,(%rax)
  0x00007f8f8f72d6b8: add    %al,(%rax)
  0x00007f8f8f72d6ba: add    %al,(%rax)
  0x00007f8f8f72d6bc: add    %al,(%rax)
  0x00007f8f8f72d6be: add    %al,(%rax)

----------------------------------------------------------------------
lstore_2  65 lstore_2  [0x00007f8f8f72d6e0, 0x00007f8f8f72d720]  64 bytes

  0x00007f8f8f72d6e0: mov    (%rsp),%rax
  0x00007f8f8f72d6e4: add    $0x10,%rsp
  0x00007f8f8f72d6e8: mov    %rax,-0x18(%r14)
  0x00007f8f8f72d6ec: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d6f1: inc    %r13
  0x00007f8f8f72d6f4: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d6fe: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d702: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f72d708: add    %al,(%rax)
  0x00007f8f8f72d70a: add    %al,(%rax)
  0x00007f8f8f72d70c: add    %al,(%rax)
  0x00007f8f8f72d70e: add    %al,(%rax)
  0x00007f8f8f72d710: add    %al,(%rax)
  0x00007f8f8f72d712: add    %al,(%rax)
  0x00007f8f8f72d714: add    %al,(%rax)
  0x00007f8f8f72d716: add    %al,(%rax)
  0x00007f8f8f72d718: add    %al,(%rax)
  0x00007f8f8f72d71a: add    %al,(%rax)
  0x00007f8f8f72d71c: add    %al,(%rax)
  0x00007f8f8f72d71e: add    %al,(%rax)

----------------------------------------------------------------------
lstore_3  66 lstore_3  [0x00007f8f8f72d740, 0x00007f8f8f72d780]  64 bytes

  0x00007f8f8f72d740: mov    (%rsp),%rax
  0x00007f8f8f72d744: add    $0x10,%rsp
  0x00007f8f8f72d748: mov    %rax,-0x20(%r14)
  0x00007f8f8f72d74c: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d751: inc    %r13
  0x00007f8f8f72d754: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d75e: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d762: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f72d768: add    %al,(%rax)
  0x00007f8f8f72d76a: add    %al,(%rax)
  0x00007f8f8f72d76c: add    %al,(%rax)
  0x00007f8f8f72d76e: add    %al,(%rax)
  0x00007f8f8f72d770: add    %al,(%rax)
  0x00007f8f8f72d772: add    %al,(%rax)
  0x00007f8f8f72d774: add    %al,(%rax)
  0x00007f8f8f72d776: add    %al,(%rax)
  0x00007f8f8f72d778: add    %al,(%rax)
  0x00007f8f8f72d77a: add    %al,(%rax)
  0x00007f8f8f72d77c: add    %al,(%rax)
  0x00007f8f8f72d77e: add    %al,(%rax)

----------------------------------------------------------------------
fstore_0  67 fstore_0  [0x00007f8f8f72d7a0, 0x00007f8f8f72d7e0]  64 bytes

  0x00007f8f8f72d7a0: vmovss (%rsp),%xmm0
  0x00007f8f8f72d7a5: add    $0x8,%rsp
  0x00007f8f8f72d7a9: vmovss %xmm0,(%r14)
  0x00007f8f8f72d7ae: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d7b3: inc    %r13
  0x00007f8f8f72d7b6: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d7c0: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d7c4: nopl   0x0(%rax)
  0x00007f8f8f72d7c8: add    %al,(%rax)
  0x00007f8f8f72d7ca: add    %al,(%rax)
  0x00007f8f8f72d7cc: add    %al,(%rax)
  0x00007f8f8f72d7ce: add    %al,(%rax)
  0x00007f8f8f72d7d0: add    %al,(%rax)
  0x00007f8f8f72d7d2: add    %al,(%rax)
  0x00007f8f8f72d7d4: add    %al,(%rax)
  0x00007f8f8f72d7d6: add    %al,(%rax)
  0x00007f8f8f72d7d8: add    %al,(%rax)
  0x00007f8f8f72d7da: add    %al,(%rax)
  0x00007f8f8f72d7dc: add    %al,(%rax)
  0x00007f8f8f72d7de: add    %al,(%rax)

----------------------------------------------------------------------
fstore_1  68 fstore_1  [0x00007f8f8f72d800, 0x00007f8f8f72d840]  64 bytes

  0x00007f8f8f72d800: vmovss (%rsp),%xmm0
  0x00007f8f8f72d805: add    $0x8,%rsp
  0x00007f8f8f72d809: vmovss %xmm0,-0x8(%r14)
  0x00007f8f8f72d80f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d814: inc    %r13
  0x00007f8f8f72d817: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d821: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d825: data16 xchg %ax,%ax
  0x00007f8f8f72d828: add    %al,(%rax)
  0x00007f8f8f72d82a: add    %al,(%rax)
  0x00007f8f8f72d82c: add    %al,(%rax)
  0x00007f8f8f72d82e: add    %al,(%rax)
  0x00007f8f8f72d830: add    %al,(%rax)
  0x00007f8f8f72d832: add    %al,(%rax)
  0x00007f8f8f72d834: add    %al,(%rax)
  0x00007f8f8f72d836: add    %al,(%rax)
  0x00007f8f8f72d838: add    %al,(%rax)
  0x00007f8f8f72d83a: add    %al,(%rax)
  0x00007f8f8f72d83c: add    %al,(%rax)
  0x00007f8f8f72d83e: add    %al,(%rax)

----------------------------------------------------------------------
fstore_2  69 fstore_2  [0x00007f8f8f72d860, 0x00007f8f8f72d8a0]  64 bytes

  0x00007f8f8f72d860: vmovss (%rsp),%xmm0
  0x00007f8f8f72d865: add    $0x8,%rsp
  0x00007f8f8f72d869: vmovss %xmm0,-0x10(%r14)
  0x00007f8f8f72d86f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d874: inc    %r13
  0x00007f8f8f72d877: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d881: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d885: data16 xchg %ax,%ax
  0x00007f8f8f72d888: add    %al,(%rax)
  0x00007f8f8f72d88a: add    %al,(%rax)
  0x00007f8f8f72d88c: add    %al,(%rax)
  0x00007f8f8f72d88e: add    %al,(%rax)
  0x00007f8f8f72d890: add    %al,(%rax)
  0x00007f8f8f72d892: add    %al,(%rax)
  0x00007f8f8f72d894: add    %al,(%rax)
  0x00007f8f8f72d896: add    %al,(%rax)
  0x00007f8f8f72d898: add    %al,(%rax)
  0x00007f8f8f72d89a: add    %al,(%rax)
  0x00007f8f8f72d89c: add    %al,(%rax)
  0x00007f8f8f72d89e: add    %al,(%rax)

----------------------------------------------------------------------
fstore_3  70 fstore_3  [0x00007f8f8f72d8c0, 0x00007f8f8f72d900]  64 bytes

  0x00007f8f8f72d8c0: vmovss (%rsp),%xmm0
  0x00007f8f8f72d8c5: add    $0x8,%rsp
  0x00007f8f8f72d8c9: vmovss %xmm0,-0x18(%r14)
  0x00007f8f8f72d8cf: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d8d4: inc    %r13
  0x00007f8f8f72d8d7: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d8e1: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d8e5: data16 xchg %ax,%ax
  0x00007f8f8f72d8e8: add    %al,(%rax)
  0x00007f8f8f72d8ea: add    %al,(%rax)
  0x00007f8f8f72d8ec: add    %al,(%rax)
  0x00007f8f8f72d8ee: add    %al,(%rax)
  0x00007f8f8f72d8f0: add    %al,(%rax)
  0x00007f8f8f72d8f2: add    %al,(%rax)
  0x00007f8f8f72d8f4: add    %al,(%rax)
  0x00007f8f8f72d8f6: add    %al,(%rax)
  0x00007f8f8f72d8f8: add    %al,(%rax)
  0x00007f8f8f72d8fa: add    %al,(%rax)
  0x00007f8f8f72d8fc: add    %al,(%rax)
  0x00007f8f8f72d8fe: add    %al,(%rax)

----------------------------------------------------------------------
dstore_0  71 dstore_0  [0x00007f8f8f72d920, 0x00007f8f8f72d960]  64 bytes

  0x00007f8f8f72d920: vmovsd (%rsp),%xmm0
  0x00007f8f8f72d925: add    $0x10,%rsp
  0x00007f8f8f72d929: vmovsd %xmm0,-0x8(%r14)
  0x00007f8f8f72d92f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d934: inc    %r13
  0x00007f8f8f72d937: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d941: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d945: data16 xchg %ax,%ax
  0x00007f8f8f72d948: add    %al,(%rax)
  0x00007f8f8f72d94a: add    %al,(%rax)
  0x00007f8f8f72d94c: add    %al,(%rax)
  0x00007f8f8f72d94e: add    %al,(%rax)
  0x00007f8f8f72d950: add    %al,(%rax)
  0x00007f8f8f72d952: add    %al,(%rax)
  0x00007f8f8f72d954: add    %al,(%rax)
  0x00007f8f8f72d956: add    %al,(%rax)
  0x00007f8f8f72d958: add    %al,(%rax)
  0x00007f8f8f72d95a: add    %al,(%rax)
  0x00007f8f8f72d95c: add    %al,(%rax)
  0x00007f8f8f72d95e: add    %al,(%rax)

----------------------------------------------------------------------
dstore_1  72 dstore_1  [0x00007f8f8f72d980, 0x00007f8f8f72d9c0]  64 bytes

  0x00007f8f8f72d980: vmovsd (%rsp),%xmm0
  0x00007f8f8f72d985: add    $0x10,%rsp
  0x00007f8f8f72d989: vmovsd %xmm0,-0x10(%r14)
  0x00007f8f8f72d98f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d994: inc    %r13
  0x00007f8f8f72d997: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72d9a1: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72d9a5: data16 xchg %ax,%ax
  0x00007f8f8f72d9a8: add    %al,(%rax)
  0x00007f8f8f72d9aa: add    %al,(%rax)
  0x00007f8f8f72d9ac: add    %al,(%rax)
  0x00007f8f8f72d9ae: add    %al,(%rax)
  0x00007f8f8f72d9b0: add    %al,(%rax)
  0x00007f8f8f72d9b2: add    %al,(%rax)
  0x00007f8f8f72d9b4: add    %al,(%rax)
  0x00007f8f8f72d9b6: add    %al,(%rax)
  0x00007f8f8f72d9b8: add    %al,(%rax)
  0x00007f8f8f72d9ba: add    %al,(%rax)
  0x00007f8f8f72d9bc: add    %al,(%rax)
  0x00007f8f8f72d9be: add    %al,(%rax)

----------------------------------------------------------------------
dstore_2  73 dstore_2  [0x00007f8f8f72d9e0, 0x00007f8f8f72da20]  64 bytes

  0x00007f8f8f72d9e0: vmovsd (%rsp),%xmm0
  0x00007f8f8f72d9e5: add    $0x10,%rsp
  0x00007f8f8f72d9e9: vmovsd %xmm0,-0x18(%r14)
  0x00007f8f8f72d9ef: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72d9f4: inc    %r13
  0x00007f8f8f72d9f7: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72da01: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72da05: data16 xchg %ax,%ax
  0x00007f8f8f72da08: add    %al,(%rax)
  0x00007f8f8f72da0a: add    %al,(%rax)
  0x00007f8f8f72da0c: add    %al,(%rax)
  0x00007f8f8f72da0e: add    %al,(%rax)
  0x00007f8f8f72da10: add    %al,(%rax)
  0x00007f8f8f72da12: add    %al,(%rax)
  0x00007f8f8f72da14: add    %al,(%rax)
  0x00007f8f8f72da16: add    %al,(%rax)
  0x00007f8f8f72da18: add    %al,(%rax)
  0x00007f8f8f72da1a: add    %al,(%rax)
  0x00007f8f8f72da1c: add    %al,(%rax)
  0x00007f8f8f72da1e: add    %al,(%rax)

----------------------------------------------------------------------
dstore_3  74 dstore_3  [0x00007f8f8f72da40, 0x00007f8f8f72da80]  64 bytes

  0x00007f8f8f72da40: vmovsd (%rsp),%xmm0
  0x00007f8f8f72da45: add    $0x10,%rsp
  0x00007f8f8f72da49: vmovsd %xmm0,-0x20(%r14)
  0x00007f8f8f72da4f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72da54: inc    %r13
  0x00007f8f8f72da57: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72da61: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72da65: data16 xchg %ax,%ax
  0x00007f8f8f72da68: add    %al,(%rax)
  0x00007f8f8f72da6a: add    %al,(%rax)
  0x00007f8f8f72da6c: add    %al,(%rax)
  0x00007f8f8f72da6e: add    %al,(%rax)
  0x00007f8f8f72da70: add    %al,(%rax)
  0x00007f8f8f72da72: add    %al,(%rax)
  0x00007f8f8f72da74: add    %al,(%rax)
  0x00007f8f8f72da76: add    %al,(%rax)
  0x00007f8f8f72da78: add    %al,(%rax)
  0x00007f8f8f72da7a: add    %al,(%rax)
  0x00007f8f8f72da7c: add    %al,(%rax)
  0x00007f8f8f72da7e: add    %al,(%rax)

----------------------------------------------------------------------
astore_0  75 astore_0  [0x00007f8f8f72daa0, 0x00007f8f8f72db00]  96 bytes

  0x00007f8f8f72daa0: push   %rax
  0x00007f8f8f72daa1: jmpq   0x00007f8f8f72dadf
  0x00007f8f8f72daa6: sub    $0x8,%rsp
  0x00007f8f8f72daaa: vmovss %xmm0,(%rsp)
  0x00007f8f8f72daaf: jmpq   0x00007f8f8f72dadf
  0x00007f8f8f72dab4: sub    $0x10,%rsp
  0x00007f8f8f72dab8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72dabd: jmpq   0x00007f8f8f72dadf
  0x00007f8f8f72dac2: sub    $0x10,%rsp
  0x00007f8f8f72dac6: mov    %rax,(%rsp)
  0x00007f8f8f72daca: movabs $0x0,%r10
  0x00007f8f8f72dad4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72dad9: jmpq   0x00007f8f8f72dadf
  0x00007f8f8f72dade: push   %rax
  0x00007f8f8f72dadf: pop    %rax
  0x00007f8f8f72dae0: mov    %rax,(%r14)
  0x00007f8f8f72dae3: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72dae8: inc    %r13
  0x00007f8f8f72daeb: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72daf5: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72daf9: nopl   0x0(%rax)

----------------------------------------------------------------------
astore_1  76 astore_1  [0x00007f8f8f72db20, 0x00007f8f8f72db80]  96 bytes

  0x00007f8f8f72db20: push   %rax
  0x00007f8f8f72db21: jmpq   0x00007f8f8f72db5f
  0x00007f8f8f72db26: sub    $0x8,%rsp
  0x00007f8f8f72db2a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72db2f: jmpq   0x00007f8f8f72db5f
  0x00007f8f8f72db34: sub    $0x10,%rsp
  0x00007f8f8f72db38: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72db3d: jmpq   0x00007f8f8f72db5f
  0x00007f8f8f72db42: sub    $0x10,%rsp
  0x00007f8f8f72db46: mov    %rax,(%rsp)
  0x00007f8f8f72db4a: movabs $0x0,%r10
  0x00007f8f8f72db54: mov    %r10,0x8(%rsp)
  0x00007f8f8f72db59: jmpq   0x00007f8f8f72db5f
  0x00007f8f8f72db5e: push   %rax
  0x00007f8f8f72db5f: pop    %rax
  0x00007f8f8f72db60: mov    %rax,-0x8(%r14)
  0x00007f8f8f72db64: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72db69: inc    %r13
  0x00007f8f8f72db6c: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72db76: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72db7a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
astore_2  77 astore_2  [0x00007f8f8f72dba0, 0x00007f8f8f72dc00]  96 bytes

  0x00007f8f8f72dba0: push   %rax
  0x00007f8f8f72dba1: jmpq   0x00007f8f8f72dbdf
  0x00007f8f8f72dba6: sub    $0x8,%rsp
  0x00007f8f8f72dbaa: vmovss %xmm0,(%rsp)
  0x00007f8f8f72dbaf: jmpq   0x00007f8f8f72dbdf
  0x00007f8f8f72dbb4: sub    $0x10,%rsp
  0x00007f8f8f72dbb8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72dbbd: jmpq   0x00007f8f8f72dbdf
  0x00007f8f8f72dbc2: sub    $0x10,%rsp
  0x00007f8f8f72dbc6: mov    %rax,(%rsp)
  0x00007f8f8f72dbca: movabs $0x0,%r10
  0x00007f8f8f72dbd4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72dbd9: jmpq   0x00007f8f8f72dbdf
  0x00007f8f8f72dbde: push   %rax
  0x00007f8f8f72dbdf: pop    %rax
  0x00007f8f8f72dbe0: mov    %rax,-0x10(%r14)
  0x00007f8f8f72dbe4: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72dbe9: inc    %r13
  0x00007f8f8f72dbec: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72dbf6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72dbfa: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
astore_3  78 astore_3  [0x00007f8f8f72dc20, 0x00007f8f8f72dc80]  96 bytes

  0x00007f8f8f72dc20: push   %rax
  0x00007f8f8f72dc21: jmpq   0x00007f8f8f72dc5f
  0x00007f8f8f72dc26: sub    $0x8,%rsp
  0x00007f8f8f72dc2a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72dc2f: jmpq   0x00007f8f8f72dc5f
  0x00007f8f8f72dc34: sub    $0x10,%rsp
  0x00007f8f8f72dc38: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72dc3d: jmpq   0x00007f8f8f72dc5f
  0x00007f8f8f72dc42: sub    $0x10,%rsp
  0x00007f8f8f72dc46: mov    %rax,(%rsp)
  0x00007f8f8f72dc4a: movabs $0x0,%r10
  0x00007f8f8f72dc54: mov    %r10,0x8(%rsp)
  0x00007f8f8f72dc59: jmpq   0x00007f8f8f72dc5f
  0x00007f8f8f72dc5e: push   %rax
  0x00007f8f8f72dc5f: pop    %rax
  0x00007f8f8f72dc60: mov    %rax,-0x18(%r14)
  0x00007f8f8f72dc64: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72dc69: inc    %r13
  0x00007f8f8f72dc6c: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72dc76: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72dc7a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
iastore  79 iastore  [0x00007f8f8f72dca0, 0x00007f8f8f72dce0]  64 bytes

  0x00007f8f8f72dca0: mov    (%rsp),%eax
  0x00007f8f8f72dca3: add    $0x8,%rsp
  0x00007f8f8f72dca7: mov    (%rsp),%ebx
  0x00007f8f8f72dcaa: add    $0x8,%rsp
  0x00007f8f8f72dcae: pop    %rdx
  0x00007f8f8f72dcaf: movslq %ebx,%rbx
  0x00007f8f8f72dcb2: cmp    0xc(%rdx),%ebx
  0x00007f8f8f72dcb5: jb     0x00007f8f8f72dcbf
  0x00007f8f8f72dcb7: mov    %rdx,%rsi
  0x00007f8f8f72dcba: jmpq   0x00007f8f8f728060
  0x00007f8f8f72dcbf: mov    %eax,0x10(%rdx,%rbx,4)
  0x00007f8f8f72dcc3: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72dcc8: inc    %r13
  0x00007f8f8f72dccb: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72dcd5: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72dcd9: nopl   0x0(%rax)

----------------------------------------------------------------------
lastore  80 lastore  [0x00007f8f8f72dd00, 0x00007f8f8f72dd40]  64 bytes

  0x00007f8f8f72dd00: mov    (%rsp),%rax
  0x00007f8f8f72dd04: add    $0x10,%rsp
  0x00007f8f8f72dd08: mov    (%rsp),%ebx
  0x00007f8f8f72dd0b: add    $0x8,%rsp
  0x00007f8f8f72dd0f: pop    %rcx
  0x00007f8f8f72dd10: movslq %ebx,%rbx
  0x00007f8f8f72dd13: cmp    0xc(%rcx),%ebx
  0x00007f8f8f72dd16: jb     0x00007f8f8f72dd20
  0x00007f8f8f72dd18: mov    %rcx,%rsi
  0x00007f8f8f72dd1b: jmpq   0x00007f8f8f728060
  0x00007f8f8f72dd20: mov    %rax,0x10(%rcx,%rbx,8)
  0x00007f8f8f72dd25: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72dd2a: inc    %r13
  0x00007f8f8f72dd2d: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72dd37: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72dd3b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fastore  81 fastore  [0x00007f8f8f72dd60, 0x00007f8f8f72dda0]  64 bytes

  0x00007f8f8f72dd60: vmovss (%rsp),%xmm0
  0x00007f8f8f72dd65: add    $0x8,%rsp
  0x00007f8f8f72dd69: mov    (%rsp),%ebx
  0x00007f8f8f72dd6c: add    $0x8,%rsp
  0x00007f8f8f72dd70: pop    %rdx
  0x00007f8f8f72dd71: movslq %ebx,%rbx
  0x00007f8f8f72dd74: cmp    0xc(%rdx),%ebx
  0x00007f8f8f72dd77: jb     0x00007f8f8f72dd81
  0x00007f8f8f72dd79: mov    %rdx,%rsi
  0x00007f8f8f72dd7c: jmpq   0x00007f8f8f728060
  0x00007f8f8f72dd81: vmovss %xmm0,0x10(%rdx,%rbx,4)
  0x00007f8f8f72dd87: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72dd8c: inc    %r13
  0x00007f8f8f72dd8f: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72dd99: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72dd9d: data16 xchg %ax,%ax

----------------------------------------------------------------------
dastore  82 dastore  [0x00007f8f8f72ddc0, 0x00007f8f8f72de00]  64 bytes

  0x00007f8f8f72ddc0: vmovsd (%rsp),%xmm0
  0x00007f8f8f72ddc5: add    $0x10,%rsp
  0x00007f8f8f72ddc9: mov    (%rsp),%ebx
  0x00007f8f8f72ddcc: add    $0x8,%rsp
  0x00007f8f8f72ddd0: pop    %rdx
  0x00007f8f8f72ddd1: movslq %ebx,%rbx
  0x00007f8f8f72ddd4: cmp    0xc(%rdx),%ebx
  0x00007f8f8f72ddd7: jb     0x00007f8f8f72dde1
  0x00007f8f8f72ddd9: mov    %rdx,%rsi
  0x00007f8f8f72dddc: jmpq   0x00007f8f8f728060
  0x00007f8f8f72dde1: vmovsd %xmm0,0x10(%rdx,%rbx,8)
  0x00007f8f8f72dde7: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ddec: inc    %r13
  0x00007f8f8f72ddef: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72ddf9: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72ddfd: data16 xchg %ax,%ax

----------------------------------------------------------------------
aastore  83 aastore  [0x00007f8f8f72de20, 0x00007f8f8f72e180]  864 bytes

  0x00007f8f8f72de20: push   %rax
  0x00007f8f8f72de21: jmpq   0x00007f8f8f72de5f
  0x00007f8f8f72de26: sub    $0x8,%rsp
  0x00007f8f8f72de2a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72de2f: jmpq   0x00007f8f8f72de5f
  0x00007f8f8f72de34: sub    $0x10,%rsp
  0x00007f8f8f72de38: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72de3d: jmpq   0x00007f8f8f72de5f
  0x00007f8f8f72de42: sub    $0x10,%rsp
  0x00007f8f8f72de46: mov    %rax,(%rsp)
  0x00007f8f8f72de4a: movabs $0x0,%r10
  0x00007f8f8f72de54: mov    %r10,0x8(%rsp)
  0x00007f8f8f72de59: jmpq   0x00007f8f8f72de5f
  0x00007f8f8f72de5e: push   %rax
  0x00007f8f8f72de5f: mov    (%rsp),%rax
  0x00007f8f8f72de63: mov    0x8(%rsp),%ecx
  0x00007f8f8f72de67: mov    0x10(%rsp),%rdx
  0x00007f8f8f72de6c: movslq %ecx,%rcx
  0x00007f8f8f72de6f: cmp    0xc(%rdx),%ecx
  0x00007f8f8f72de72: mov    %ecx,%ebx
  0x00007f8f8f72de74: jb     0x00007f8f8f72de7e
  0x00007f8f8f72de76: mov    %rdx,%rsi
  0x00007f8f8f72de79: jmpq   0x00007f8f8f728060
  0x00007f8f8f72de7e: test   %rax,%rax
  0x00007f8f8f72de81: je     0x00007f8f8f72e0d7
  0x00007f8f8f72de87: mov    0x8(%rax),%ebx
  0x00007f8f8f72de8a: movabs $0x800000000,%r12
  0x00007f8f8f72de94: add    %r12,%rbx
  0x00007f8f8f72de97: xor    %r12,%r12
  0x00007f8f8f72de9a: mov    0x8(%rdx),%eax
  0x00007f8f8f72de9d: movabs $0x800000000,%r12
  0x00007f8f8f72dea7: add    %r12,%rax
  0x00007f8f8f72deaa: xor    %r12,%r12
  0x00007f8f8f72dead: mov    0xe8(%rax),%rax
  0x00007f8f8f72deb4: mov    -0x28(%rbp),%rcx
  0x00007f8f8f72deb8: test   %rcx,%rcx
  0x00007f8f8f72debb: je     0x00007f8f8f72df4b
  0x00007f8f8f72dec1: mov    0x18(%rcx),%rdi
  0x00007f8f8f72dec5: cmp    %rbx,%rdi
  0x00007f8f8f72dec8: jne    0x00007f8f8f72dedd
  0x00007f8f8f72dece: addq   $0x1,0x20(%rcx)
  0x00007f8f8f72ded3: sbbq   $0x0,0x20(%rcx)
  0x00007f8f8f72ded8: jmpq   0x00007f8f8f72df43
  0x00007f8f8f72dedd: test   %rdi,%rdi
  0x00007f8f8f72dee0: je     0x00007f8f8f72df1d
  0x00007f8f8f72dee6: mov    0x28(%rcx),%rdi
  0x00007f8f8f72deea: cmp    %rbx,%rdi
  0x00007f8f8f72deed: jne    0x00007f8f8f72df02
  0x00007f8f8f72def3: addq   $0x1,0x30(%rcx)
  0x00007f8f8f72def8: sbbq   $0x0,0x30(%rcx)
  0x00007f8f8f72defd: jmpq   0x00007f8f8f72df43
  0x00007f8f8f72df02: test   %rdi,%rdi
  0x00007f8f8f72df05: jne    0x00007f8f8f72df43
  0x00007f8f8f72df0b: mov    %rbx,0x28(%rcx)
  0x00007f8f8f72df0f: mov    $0x1,%edi
  0x00007f8f8f72df14: mov    %rdi,0x30(%rcx)
  0x00007f8f8f72df18: jmpq   0x00007f8f8f72df43
  0x00007f8f8f72df1d: cmp    0x28(%rcx),%rbx
  0x00007f8f8f72df21: jne    0x00007f8f8f72df36
  0x00007f8f8f72df27: addq   $0x1,0x30(%rcx)
  0x00007f8f8f72df2c: sbbq   $0x0,0x30(%rcx)
  0x00007f8f8f72df31: jmpq   0x00007f8f8f72df43
  0x00007f8f8f72df36: mov    %rbx,0x18(%rcx)
  0x00007f8f8f72df3a: mov    $0x1,%edi
  0x00007f8f8f72df3f: mov    %rdi,0x20(%rcx)
  0x00007f8f8f72df43: add    $0x38,%rcx
  0x00007f8f8f72df47: mov    %rcx,-0x28(%rbp)
  0x00007f8f8f72df4b: cmp    %rax,%rbx
  0x00007f8f8f72df4e: je     0x00007f8f8f72dfae
  0x00007f8f8f72df54: mov    0x10(%rax),%ecx
  0x00007f8f8f72df57: cmp    (%rbx,%rcx,1),%rax
  0x00007f8f8f72df5b: je     0x00007f8f8f72dfae
  0x00007f8f8f72df61: cmp    $0x20,%ecx
  0x00007f8f8f72df64: jne    0x00007f8f8f72df8c
  0x00007f8f8f72df6a: push   %rax
  0x00007f8f8f72df6b: mov    %rax,%rax
  0x00007f8f8f72df6e: push   %rdi
  0x00007f8f8f72df6f: mov    0x28(%rbx),%rdi
  0x00007f8f8f72df73: mov    (%rdi),%ecx
  0x00007f8f8f72df75: add    $0x8,%rdi
  0x00007f8f8f72df79: test   %rax,%rax
  0x00007f8f8f72df7c: repnz scas %es:(%rdi),%rax
  0x00007f8f8f72df7f: pop    %rdi
  0x00007f8f8f72df80: pop    %rax
  0x00007f8f8f72df81: jne    0x00007f8f8f72df8c
  0x00007f8f8f72df83: mov    %rax,0x20(%rbx)
  0x00007f8f8f72df87: jmpq   0x00007f8f8f72dfae
  0x00007f8f8f72df8c: mov    -0x28(%rbp),%rcx
  0x00007f8f8f72df90: test   %rcx,%rcx
  0x00007f8f8f72df93: je     0x00007f8f8f72dfa9
  0x00007f8f8f72df99: addq   $0xffffffffffffffff,-0x30(%rcx)
  0x00007f8f8f72df9e: js     0x00007f8f8f72dfa9
  0x00007f8f8f72dfa4: addq   $0x1,-0x30(%rcx)
  0x00007f8f8f72dfa9: jmpq   0x00007f8f8f72810b
  0x00007f8f8f72dfae: mov    (%rsp),%rax
  0x00007f8f8f72dfb2: mov    0x8(%rsp),%ecx
  0x00007f8f8f72dfb6: lea    0x10(%rdx,%rcx,4),%rdx
  0x00007f8f8f72dfbb: cmpb   $0x0,0x30(%r15)
  0x00007f8f8f72dfc0: je     0x00007f8f8f72e027
  0x00007f8f8f72dfc6: mov    (%rdx),%ebx
  0x00007f8f8f72dfc8: shl    $0x3,%rbx
  0x00007f8f8f72dfcc: cmp    $0x0,%rbx
  0x00007f8f8f72dfd0: je     0x00007f8f8f72e027
  0x00007f8f8f72dfd6: mov    0x38(%r15),%r8
  0x00007f8f8f72dfda: cmp    $0x0,%r8
  0x00007f8f8f72dfde: je     0x00007f8f8f72dff8
  0x00007f8f8f72dfe4: sub    $0x8,%r8
  0x00007f8f8f72dfe8: mov    %r8,0x38(%r15)
  0x00007f8f8f72dfec: add    0x48(%r15),%r8
  0x00007f8f8f72dff0: mov    %rbx,(%r8)
  0x00007f8f8f72dff3: jmpq   0x00007f8f8f72e027
  0x00007f8f8f72dff8: push   %rax
  0x00007f8f8f72dff9: push   %rdx
  0x00007f8f8f72dffa: push   %rbx
  0x00007f8f8f72dffb: mov    %r15,%rsi
  0x00007f8f8f72dffe: mov    %rbx,%rdi
  0x00007f8f8f72e001: test   $0xf,%esp
  0x00007f8f8f72e007: je     0x00007f8f8f72e01f
  0x00007f8f8f72e00d: sub    $0x8,%rsp
  0x00007f8f8f72e011: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f72e016: add    $0x8,%rsp
  0x00007f8f8f72e01a: jmpq   0x00007f8f8f72e024
  0x00007f8f8f72e01f: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f72e024: pop    %rbx
  0x00007f8f8f72e025: pop    %rdx
  0x00007f8f8f72e026: pop    %rax
  0x00007f8f8f72e027: mov    %rax,%rbx
  0x00007f8f8f72e02a: shr    $0x3,%rax
  0x00007f8f8f72e02e: mov    %eax,(%rdx)
  0x00007f8f8f72e030: mov    %rdx,%r8
  0x00007f8f8f72e033: xor    %rbx,%r8
  0x00007f8f8f72e036: shr    $0x15,%r8
  0x00007f8f8f72e03a: je     0x00007f8f8f72e0d2
  0x00007f8f8f72e040: cmp    $0x0,%rbx
  0x00007f8f8f72e044: je     0x00007f8f8f72e0d2
  0x00007f8f8f72e04a: mov    %rdx,%r8
  0x00007f8f8f72e04d: shr    $0x9,%r8
  0x00007f8f8f72e051: movabs $0x7f8f89e7a000,%rbx
  0x00007f8f8f72e05b: add    %rbx,%r8
  0x00007f8f8f72e05e: cmpb   $0x20,(%r8)
  0x00007f8f8f72e062: je     0x00007f8f8f72e0d2
  0x00007f8f8f72e068: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f72e06e: cmpb   $0x0,(%r8)
  0x00007f8f8f72e072: je     0x00007f8f8f72e0d2
  0x00007f8f8f72e078: movb   $0x0,(%r8)
  0x00007f8f8f72e07c: cmpl   $0x0,0x70(%r15)
  0x00007f8f8f72e084: je     0x00007f8f8f72e0a5
  0x00007f8f8f72e08a: subl   $0x8,0x70(%r15)
  0x00007f8f8f72e08f: mov    0x80(%r15),%rbx
  0x00007f8f8f72e096: movslq 0x70(%r15),%r10
  0x00007f8f8f72e09a: add    %r10,%rbx
  0x00007f8f8f72e09d: mov    %r8,(%rbx)
  0x00007f8f8f72e0a0: jmpq   0x00007f8f8f72e0d2
  0x00007f8f8f72e0a5: push   %rdx
  0x00007f8f8f72e0a6: push   %rbx
  0x00007f8f8f72e0a7: mov    %r15,%rsi
  0x00007f8f8f72e0aa: mov    %r8,%rdi
  0x00007f8f8f72e0ad: test   $0xf,%esp
  0x00007f8f8f72e0b3: je     0x00007f8f8f72e0cb
  0x00007f8f8f72e0b9: sub    $0x8,%rsp
  0x00007f8f8f72e0bd: callq  0x00007f8facf1ecb0 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x00007f8f8f72e0c2: add    $0x8,%rsp
  0x00007f8f8f72e0c6: jmpq   0x00007f8f8f72e0d0
  0x00007f8f8f72e0cb: callq  0x00007f8facf1ecb0 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x00007f8f8f72e0d0: pop    %rbx
  0x00007f8f8f72e0d1: pop    %rdx
  0x00007f8f8f72e0d2: jmpq   0x00007f8f8f72e165
  0x00007f8f8f72e0d7: mov    -0x28(%rbp),%rbx
  0x00007f8f8f72e0db: test   %rbx,%rbx
  0x00007f8f8f72e0de: je     0x00007f8f8f72e0f0
  0x00007f8f8f72e0e4: orb    $0x1,0x1(%rbx)
  0x00007f8f8f72e0e8: add    $0x38,%rbx
  0x00007f8f8f72e0ec: mov    %rbx,-0x28(%rbp)
  0x00007f8f8f72e0f0: lea    0x10(%rdx,%rcx,4),%rdx
  0x00007f8f8f72e0f5: cmpb   $0x0,0x30(%r15)
  0x00007f8f8f72e0fa: je     0x00007f8f8f72e15f
  0x00007f8f8f72e100: mov    (%rdx),%ebx
  0x00007f8f8f72e102: shl    $0x3,%rbx
  0x00007f8f8f72e106: cmp    $0x0,%rbx
  0x00007f8f8f72e10a: je     0x00007f8f8f72e15f
  0x00007f8f8f72e110: mov    0x38(%r15),%r8
  0x00007f8f8f72e114: cmp    $0x0,%r8
  0x00007f8f8f72e118: je     0x00007f8f8f72e132
  0x00007f8f8f72e11e: sub    $0x8,%r8
  0x00007f8f8f72e122: mov    %r8,0x38(%r15)
  0x00007f8f8f72e126: add    0x48(%r15),%r8
  0x00007f8f8f72e12a: mov    %rbx,(%r8)
  0x00007f8f8f72e12d: jmpq   0x00007f8f8f72e15f
  0x00007f8f8f72e132: push   %rdx
  0x00007f8f8f72e133: push   %rbx
  0x00007f8f8f72e134: mov    %r15,%rsi
  0x00007f8f8f72e137: mov    %rbx,%rdi
  0x00007f8f8f72e13a: test   $0xf,%esp
  0x00007f8f8f72e140: je     0x00007f8f8f72e158
  0x00007f8f8f72e146: sub    $0x8,%rsp
  0x00007f8f8f72e14a: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f72e14f: add    $0x8,%rsp
  0x00007f8f8f72e153: jmpq   0x00007f8f8f72e15d
  0x00007f8f8f72e158: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f72e15d: pop    %rbx
  0x00007f8f8f72e15e: pop    %rdx
  0x00007f8f8f72e15f: movl   $0x0,(%rdx)
  0x00007f8f8f72e165: add    $0x18,%rsp
  0x00007f8f8f72e169: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e16e: inc    %r13
  0x00007f8f8f72e171: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72e17b: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e17f: nop

----------------------------------------------------------------------
bastore  84 bastore  [0x00007f8f8f72e1a0, 0x00007f8f8f72e200]  96 bytes

  0x00007f8f8f72e1a0: mov    (%rsp),%eax
  0x00007f8f8f72e1a3: add    $0x8,%rsp
  0x00007f8f8f72e1a7: mov    (%rsp),%ebx
  0x00007f8f8f72e1aa: add    $0x8,%rsp
  0x00007f8f8f72e1ae: pop    %rdx
  0x00007f8f8f72e1af: movslq %ebx,%rbx
  0x00007f8f8f72e1b2: cmp    0xc(%rdx),%ebx
  0x00007f8f8f72e1b5: jb     0x00007f8f8f72e1bf
  0x00007f8f8f72e1b7: mov    %rdx,%rsi
  0x00007f8f8f72e1ba: jmpq   0x00007f8f8f728060
  0x00007f8f8f72e1bf: mov    0x8(%rdx),%ecx
  0x00007f8f8f72e1c2: movabs $0x800000000,%r12
  0x00007f8f8f72e1cc: add    %r12,%rcx
  0x00007f8f8f72e1cf: xor    %r12,%r12
  0x00007f8f8f72e1d2: mov    0x8(%rcx),%ecx
  0x00007f8f8f72e1d5: test   $0x400,%ecx
  0x00007f8f8f72e1db: je     0x00007f8f8f72e1e0
  0x00007f8f8f72e1dd: and    $0x1,%eax
  0x00007f8f8f72e1e0: mov    %al,0x10(%rdx,%rbx,1)
  0x00007f8f8f72e1e4: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e1e9: inc    %r13
  0x00007f8f8f72e1ec: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72e1f6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e1fa: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
castore  85 castore  [0x00007f8f8f72e220, 0x00007f8f8f72e260]  64 bytes

  0x00007f8f8f72e220: mov    (%rsp),%eax
  0x00007f8f8f72e223: add    $0x8,%rsp
  0x00007f8f8f72e227: mov    (%rsp),%ebx
  0x00007f8f8f72e22a: add    $0x8,%rsp
  0x00007f8f8f72e22e: pop    %rdx
  0x00007f8f8f72e22f: movslq %ebx,%rbx
  0x00007f8f8f72e232: cmp    0xc(%rdx),%ebx
  0x00007f8f8f72e235: jb     0x00007f8f8f72e23f
  0x00007f8f8f72e237: mov    %rdx,%rsi
  0x00007f8f8f72e23a: jmpq   0x00007f8f8f728060
  0x00007f8f8f72e23f: mov    %ax,0x10(%rdx,%rbx,2)
  0x00007f8f8f72e244: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e249: inc    %r13
  0x00007f8f8f72e24c: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72e256: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e25a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
sastore  86 sastore  [0x00007f8f8f72e280, 0x00007f8f8f72e2c0]  64 bytes

  0x00007f8f8f72e280: mov    (%rsp),%eax
  0x00007f8f8f72e283: add    $0x8,%rsp
  0x00007f8f8f72e287: mov    (%rsp),%ebx
  0x00007f8f8f72e28a: add    $0x8,%rsp
  0x00007f8f8f72e28e: pop    %rdx
  0x00007f8f8f72e28f: movslq %ebx,%rbx
  0x00007f8f8f72e292: cmp    0xc(%rdx),%ebx
  0x00007f8f8f72e295: jb     0x00007f8f8f72e29f
  0x00007f8f8f72e297: mov    %rdx,%rsi
  0x00007f8f8f72e29a: jmpq   0x00007f8f8f728060
  0x00007f8f8f72e29f: mov    %ax,0x10(%rdx,%rbx,2)
  0x00007f8f8f72e2a4: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e2a9: inc    %r13
  0x00007f8f8f72e2ac: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72e2b6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e2ba: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
pop  87 pop  [0x00007f8f8f72e2e0, 0x00007f8f8f72e340]  96 bytes

  0x00007f8f8f72e2e0: push   %rax
  0x00007f8f8f72e2e1: jmpq   0x00007f8f8f72e31f
  0x00007f8f8f72e2e6: sub    $0x8,%rsp
  0x00007f8f8f72e2ea: vmovss %xmm0,(%rsp)
  0x00007f8f8f72e2ef: jmpq   0x00007f8f8f72e31f
  0x00007f8f8f72e2f4: sub    $0x10,%rsp
  0x00007f8f8f72e2f8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72e2fd: jmpq   0x00007f8f8f72e31f
  0x00007f8f8f72e302: sub    $0x10,%rsp
  0x00007f8f8f72e306: mov    %rax,(%rsp)
  0x00007f8f8f72e30a: movabs $0x0,%r10
  0x00007f8f8f72e314: mov    %r10,0x8(%rsp)
  0x00007f8f8f72e319: jmpq   0x00007f8f8f72e31f
  0x00007f8f8f72e31e: push   %rax
  0x00007f8f8f72e31f: add    $0x8,%rsp
  0x00007f8f8f72e323: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e328: inc    %r13
  0x00007f8f8f72e32b: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72e335: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e339: nopl   0x0(%rax)

----------------------------------------------------------------------
pop2  88 pop2  [0x00007f8f8f72e360, 0x00007f8f8f72e3c0]  96 bytes

  0x00007f8f8f72e360: push   %rax
  0x00007f8f8f72e361: jmpq   0x00007f8f8f72e39f
  0x00007f8f8f72e366: sub    $0x8,%rsp
  0x00007f8f8f72e36a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72e36f: jmpq   0x00007f8f8f72e39f
  0x00007f8f8f72e374: sub    $0x10,%rsp
  0x00007f8f8f72e378: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72e37d: jmpq   0x00007f8f8f72e39f
  0x00007f8f8f72e382: sub    $0x10,%rsp
  0x00007f8f8f72e386: mov    %rax,(%rsp)
  0x00007f8f8f72e38a: movabs $0x0,%r10
  0x00007f8f8f72e394: mov    %r10,0x8(%rsp)
  0x00007f8f8f72e399: jmpq   0x00007f8f8f72e39f
  0x00007f8f8f72e39e: push   %rax
  0x00007f8f8f72e39f: add    $0x10,%rsp
  0x00007f8f8f72e3a3: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e3a8: inc    %r13
  0x00007f8f8f72e3ab: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72e3b5: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e3b9: nopl   0x0(%rax)

----------------------------------------------------------------------
dup  89 dup  [0x00007f8f8f72e3e0, 0x00007f8f8f72e440]  96 bytes

  0x00007f8f8f72e3e0: push   %rax
  0x00007f8f8f72e3e1: jmpq   0x00007f8f8f72e41f
  0x00007f8f8f72e3e6: sub    $0x8,%rsp
  0x00007f8f8f72e3ea: vmovss %xmm0,(%rsp)
  0x00007f8f8f72e3ef: jmpq   0x00007f8f8f72e41f
  0x00007f8f8f72e3f4: sub    $0x10,%rsp
  0x00007f8f8f72e3f8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72e3fd: jmpq   0x00007f8f8f72e41f
  0x00007f8f8f72e402: sub    $0x10,%rsp
  0x00007f8f8f72e406: mov    %rax,(%rsp)
  0x00007f8f8f72e40a: movabs $0x0,%r10
  0x00007f8f8f72e414: mov    %r10,0x8(%rsp)
  0x00007f8f8f72e419: jmpq   0x00007f8f8f72e41f
  0x00007f8f8f72e41e: push   %rax
  0x00007f8f8f72e41f: mov    (%rsp),%rax
  0x00007f8f8f72e423: push   %rax
  0x00007f8f8f72e424: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e429: inc    %r13
  0x00007f8f8f72e42c: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72e436: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e43a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dup_x1  90 dup_x1  [0x00007f8f8f72e460, 0x00007f8f8f72e4e0]  128 bytes

  0x00007f8f8f72e460: push   %rax
  0x00007f8f8f72e461: jmpq   0x00007f8f8f72e49f
  0x00007f8f8f72e466: sub    $0x8,%rsp
  0x00007f8f8f72e46a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72e46f: jmpq   0x00007f8f8f72e49f
  0x00007f8f8f72e474: sub    $0x10,%rsp
  0x00007f8f8f72e478: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72e47d: jmpq   0x00007f8f8f72e49f
  0x00007f8f8f72e482: sub    $0x10,%rsp
  0x00007f8f8f72e486: mov    %rax,(%rsp)
  0x00007f8f8f72e48a: movabs $0x0,%r10
  0x00007f8f8f72e494: mov    %r10,0x8(%rsp)
  0x00007f8f8f72e499: jmpq   0x00007f8f8f72e49f
  0x00007f8f8f72e49e: push   %rax
  0x00007f8f8f72e49f: mov    (%rsp),%rax
  0x00007f8f8f72e4a3: mov    0x8(%rsp),%rcx
  0x00007f8f8f72e4a8: mov    %rax,0x8(%rsp)
  0x00007f8f8f72e4ad: mov    %rcx,(%rsp)
  0x00007f8f8f72e4b1: push   %rax
  0x00007f8f8f72e4b2: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e4b7: inc    %r13
  0x00007f8f8f72e4ba: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72e4c4: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e4c8: add    %al,(%rax)
  0x00007f8f8f72e4ca: add    %al,(%rax)
  0x00007f8f8f72e4cc: add    %al,(%rax)
  0x00007f8f8f72e4ce: add    %al,(%rax)
  0x00007f8f8f72e4d0: add    %al,(%rax)
  0x00007f8f8f72e4d2: add    %al,(%rax)
  0x00007f8f8f72e4d4: add    %al,(%rax)
  0x00007f8f8f72e4d6: add    %al,(%rax)
  0x00007f8f8f72e4d8: add    %al,(%rax)
  0x00007f8f8f72e4da: add    %al,(%rax)
  0x00007f8f8f72e4dc: add    %al,(%rax)
  0x00007f8f8f72e4de: add    %al,(%rax)

----------------------------------------------------------------------
dup_x2  91 dup_x2  [0x00007f8f8f72e500, 0x00007f8f8f72e580]  128 bytes

  0x00007f8f8f72e500: push   %rax
  0x00007f8f8f72e501: jmpq   0x00007f8f8f72e53f
  0x00007f8f8f72e506: sub    $0x8,%rsp
  0x00007f8f8f72e50a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72e50f: jmpq   0x00007f8f8f72e53f
  0x00007f8f8f72e514: sub    $0x10,%rsp
  0x00007f8f8f72e518: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72e51d: jmpq   0x00007f8f8f72e53f
  0x00007f8f8f72e522: sub    $0x10,%rsp
  0x00007f8f8f72e526: mov    %rax,(%rsp)
  0x00007f8f8f72e52a: movabs $0x0,%r10
  0x00007f8f8f72e534: mov    %r10,0x8(%rsp)
  0x00007f8f8f72e539: jmpq   0x00007f8f8f72e53f
  0x00007f8f8f72e53e: push   %rax
  0x00007f8f8f72e53f: mov    (%rsp),%rax
  0x00007f8f8f72e543: mov    0x10(%rsp),%rcx
  0x00007f8f8f72e548: mov    %rax,0x10(%rsp)
  0x00007f8f8f72e54d: push   %rax
  0x00007f8f8f72e54e: mov    0x10(%rsp),%rax
  0x00007f8f8f72e553: mov    %rcx,0x10(%rsp)
  0x00007f8f8f72e558: mov    %rax,0x8(%rsp)
  0x00007f8f8f72e55d: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e562: inc    %r13
  0x00007f8f8f72e565: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72e56f: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e573: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f72e578: add    %al,(%rax)
  0x00007f8f8f72e57a: add    %al,(%rax)
  0x00007f8f8f72e57c: add    %al,(%rax)
  0x00007f8f8f72e57e: add    %al,(%rax)

----------------------------------------------------------------------
dup2  92 dup2  [0x00007f8f8f72e5a0, 0x00007f8f8f72e620]  128 bytes

  0x00007f8f8f72e5a0: push   %rax
  0x00007f8f8f72e5a1: jmpq   0x00007f8f8f72e5df
  0x00007f8f8f72e5a6: sub    $0x8,%rsp
  0x00007f8f8f72e5aa: vmovss %xmm0,(%rsp)
  0x00007f8f8f72e5af: jmpq   0x00007f8f8f72e5df
  0x00007f8f8f72e5b4: sub    $0x10,%rsp
  0x00007f8f8f72e5b8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72e5bd: jmpq   0x00007f8f8f72e5df
  0x00007f8f8f72e5c2: sub    $0x10,%rsp
  0x00007f8f8f72e5c6: mov    %rax,(%rsp)
  0x00007f8f8f72e5ca: movabs $0x0,%r10
  0x00007f8f8f72e5d4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72e5d9: jmpq   0x00007f8f8f72e5df
  0x00007f8f8f72e5de: push   %rax
  0x00007f8f8f72e5df: mov    0x8(%rsp),%rax
  0x00007f8f8f72e5e4: push   %rax
  0x00007f8f8f72e5e5: mov    0x8(%rsp),%rax
  0x00007f8f8f72e5ea: push   %rax
  0x00007f8f8f72e5eb: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e5f0: inc    %r13
  0x00007f8f8f72e5f3: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72e5fd: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e601: nopl   0x0(%rax)
  0x00007f8f8f72e608: add    %al,(%rax)
  0x00007f8f8f72e60a: add    %al,(%rax)
  0x00007f8f8f72e60c: add    %al,(%rax)
  0x00007f8f8f72e60e: add    %al,(%rax)
  0x00007f8f8f72e610: add    %al,(%rax)
  0x00007f8f8f72e612: add    %al,(%rax)
  0x00007f8f8f72e614: add    %al,(%rax)
  0x00007f8f8f72e616: add    %al,(%rax)
  0x00007f8f8f72e618: add    %al,(%rax)
  0x00007f8f8f72e61a: add    %al,(%rax)
  0x00007f8f8f72e61c: add    %al,(%rax)
  0x00007f8f8f72e61e: add    %al,(%rax)

----------------------------------------------------------------------
dup2_x1  93 dup2_x1  [0x00007f8f8f72e640, 0x00007f8f8f72e6c0]  128 bytes

  0x00007f8f8f72e640: push   %rax
  0x00007f8f8f72e641: jmpq   0x00007f8f8f72e67f
  0x00007f8f8f72e646: sub    $0x8,%rsp
  0x00007f8f8f72e64a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72e64f: jmpq   0x00007f8f8f72e67f
  0x00007f8f8f72e654: sub    $0x10,%rsp
  0x00007f8f8f72e658: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72e65d: jmpq   0x00007f8f8f72e67f
  0x00007f8f8f72e662: sub    $0x10,%rsp
  0x00007f8f8f72e666: mov    %rax,(%rsp)
  0x00007f8f8f72e66a: movabs $0x0,%r10
  0x00007f8f8f72e674: mov    %r10,0x8(%rsp)
  0x00007f8f8f72e679: jmpq   0x00007f8f8f72e67f
  0x00007f8f8f72e67e: push   %rax
  0x00007f8f8f72e67f: mov    (%rsp),%rcx
  0x00007f8f8f72e683: mov    0x8(%rsp),%rax
  0x00007f8f8f72e688: push   %rax
  0x00007f8f8f72e689: push   %rcx
  0x00007f8f8f72e68a: mov    %rcx,0x18(%rsp)
  0x00007f8f8f72e68f: mov    0x20(%rsp),%rcx
  0x00007f8f8f72e694: mov    %rcx,0x10(%rsp)
  0x00007f8f8f72e699: mov    %rax,0x20(%rsp)
  0x00007f8f8f72e69e: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e6a3: inc    %r13
  0x00007f8f8f72e6a6: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72e6b0: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e6b4: nopl   0x0(%rax)
  0x00007f8f8f72e6b8: add    %al,(%rax)
  0x00007f8f8f72e6ba: add    %al,(%rax)
  0x00007f8f8f72e6bc: add    %al,(%rax)
  0x00007f8f8f72e6be: add    %al,(%rax)

----------------------------------------------------------------------
dup2_x2  94 dup2_x2  [0x00007f8f8f72e6e0, 0x00007f8f8f72e780]  160 bytes

  0x00007f8f8f72e6e0: push   %rax
  0x00007f8f8f72e6e1: jmpq   0x00007f8f8f72e71f
  0x00007f8f8f72e6e6: sub    $0x8,%rsp
  0x00007f8f8f72e6ea: vmovss %xmm0,(%rsp)
  0x00007f8f8f72e6ef: jmpq   0x00007f8f8f72e71f
  0x00007f8f8f72e6f4: sub    $0x10,%rsp
  0x00007f8f8f72e6f8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72e6fd: jmpq   0x00007f8f8f72e71f
  0x00007f8f8f72e702: sub    $0x10,%rsp
  0x00007f8f8f72e706: mov    %rax,(%rsp)
  0x00007f8f8f72e70a: movabs $0x0,%r10
  0x00007f8f8f72e714: mov    %r10,0x8(%rsp)
  0x00007f8f8f72e719: jmpq   0x00007f8f8f72e71f
  0x00007f8f8f72e71e: push   %rax
  0x00007f8f8f72e71f: mov    (%rsp),%rcx
  0x00007f8f8f72e723: mov    0x8(%rsp),%rax
  0x00007f8f8f72e728: push   %rax
  0x00007f8f8f72e729: push   %rcx
  0x00007f8f8f72e72a: mov    0x20(%rsp),%rax
  0x00007f8f8f72e72f: mov    %rax,0x10(%rsp)
  0x00007f8f8f72e734: mov    %rcx,0x20(%rsp)
  0x00007f8f8f72e739: mov    0x28(%rsp),%rcx
  0x00007f8f8f72e73e: mov    0x18(%rsp),%rax
  0x00007f8f8f72e743: mov    %rcx,0x18(%rsp)
  0x00007f8f8f72e748: mov    %rax,0x28(%rsp)
  0x00007f8f8f72e74d: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e752: inc    %r13
  0x00007f8f8f72e755: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72e75f: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e763: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f72e768: add    %al,(%rax)
  0x00007f8f8f72e76a: add    %al,(%rax)
  0x00007f8f8f72e76c: add    %al,(%rax)
  0x00007f8f8f72e76e: add    %al,(%rax)
  0x00007f8f8f72e770: add    %al,(%rax)
  0x00007f8f8f72e772: add    %al,(%rax)
  0x00007f8f8f72e774: add    %al,(%rax)
  0x00007f8f8f72e776: add    %al,(%rax)
  0x00007f8f8f72e778: add    %al,(%rax)
  0x00007f8f8f72e77a: add    %al,(%rax)
  0x00007f8f8f72e77c: add    %al,(%rax)
  0x00007f8f8f72e77e: add    %al,(%rax)

----------------------------------------------------------------------
swap  95 swap  [0x00007f8f8f72e7a0, 0x00007f8f8f72e820]  128 bytes

  0x00007f8f8f72e7a0: push   %rax
  0x00007f8f8f72e7a1: jmpq   0x00007f8f8f72e7df
  0x00007f8f8f72e7a6: sub    $0x8,%rsp
  0x00007f8f8f72e7aa: vmovss %xmm0,(%rsp)
  0x00007f8f8f72e7af: jmpq   0x00007f8f8f72e7df
  0x00007f8f8f72e7b4: sub    $0x10,%rsp
  0x00007f8f8f72e7b8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72e7bd: jmpq   0x00007f8f8f72e7df
  0x00007f8f8f72e7c2: sub    $0x10,%rsp
  0x00007f8f8f72e7c6: mov    %rax,(%rsp)
  0x00007f8f8f72e7ca: movabs $0x0,%r10
  0x00007f8f8f72e7d4: mov    %r10,0x8(%rsp)
  0x00007f8f8f72e7d9: jmpq   0x00007f8f8f72e7df
  0x00007f8f8f72e7de: push   %rax
  0x00007f8f8f72e7df: mov    0x8(%rsp),%rcx
  0x00007f8f8f72e7e4: mov    (%rsp),%rax
  0x00007f8f8f72e7e8: mov    %rcx,(%rsp)
  0x00007f8f8f72e7ec: mov    %rax,0x8(%rsp)
  0x00007f8f8f72e7f1: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e7f6: inc    %r13
  0x00007f8f8f72e7f9: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72e803: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e807: nop
  0x00007f8f8f72e808: add    %al,(%rax)
  0x00007f8f8f72e80a: add    %al,(%rax)
  0x00007f8f8f72e80c: add    %al,(%rax)
  0x00007f8f8f72e80e: add    %al,(%rax)
  0x00007f8f8f72e810: add    %al,(%rax)
  0x00007f8f8f72e812: add    %al,(%rax)
  0x00007f8f8f72e814: add    %al,(%rax)
  0x00007f8f8f72e816: add    %al,(%rax)
  0x00007f8f8f72e818: add    %al,(%rax)
  0x00007f8f8f72e81a: add    %al,(%rax)
  0x00007f8f8f72e81c: add    %al,(%rax)
  0x00007f8f8f72e81e: add    %al,(%rax)

----------------------------------------------------------------------
iadd  96 iadd  [0x00007f8f8f72e840, 0x00007f8f8f72e880]  64 bytes

  0x00007f8f8f72e840: mov    (%rsp),%eax
  0x00007f8f8f72e843: add    $0x8,%rsp
  0x00007f8f8f72e847: mov    (%rsp),%edx
  0x00007f8f8f72e84a: add    $0x8,%rsp
  0x00007f8f8f72e84e: add    %edx,%eax
  0x00007f8f8f72e850: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e855: inc    %r13
  0x00007f8f8f72e858: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72e862: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e866: xchg   %ax,%ax
  0x00007f8f8f72e868: add    %al,(%rax)
  0x00007f8f8f72e86a: add    %al,(%rax)
  0x00007f8f8f72e86c: add    %al,(%rax)
  0x00007f8f8f72e86e: add    %al,(%rax)
  0x00007f8f8f72e870: add    %al,(%rax)
  0x00007f8f8f72e872: add    %al,(%rax)
  0x00007f8f8f72e874: add    %al,(%rax)
  0x00007f8f8f72e876: add    %al,(%rax)
  0x00007f8f8f72e878: add    %al,(%rax)
  0x00007f8f8f72e87a: add    %al,(%rax)
  0x00007f8f8f72e87c: add    %al,(%rax)
  0x00007f8f8f72e87e: add    %al,(%rax)

----------------------------------------------------------------------
ladd  97 ladd  [0x00007f8f8f72e8a0, 0x00007f8f8f72e8e0]  64 bytes

  0x00007f8f8f72e8a0: mov    (%rsp),%rax
  0x00007f8f8f72e8a4: add    $0x10,%rsp
  0x00007f8f8f72e8a8: mov    (%rsp),%rdx
  0x00007f8f8f72e8ac: add    $0x10,%rsp
  0x00007f8f8f72e8b0: add    %rdx,%rax
  0x00007f8f8f72e8b3: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e8b8: inc    %r13
  0x00007f8f8f72e8bb: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72e8c5: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e8c9: nopl   0x0(%rax)
  0x00007f8f8f72e8d0: add    %al,(%rax)
  0x00007f8f8f72e8d2: add    %al,(%rax)
  0x00007f8f8f72e8d4: add    %al,(%rax)
  0x00007f8f8f72e8d6: add    %al,(%rax)
  0x00007f8f8f72e8d8: add    %al,(%rax)
  0x00007f8f8f72e8da: add    %al,(%rax)
  0x00007f8f8f72e8dc: add    %al,(%rax)
  0x00007f8f8f72e8de: add    %al,(%rax)

----------------------------------------------------------------------
fadd  98 fadd  [0x00007f8f8f72e900, 0x00007f8f8f72e940]  64 bytes

  0x00007f8f8f72e900: vmovss (%rsp),%xmm0
  0x00007f8f8f72e905: add    $0x8,%rsp
  0x00007f8f8f72e909: vaddss (%rsp),%xmm0,%xmm0
  0x00007f8f8f72e90e: add    $0x8,%rsp
  0x00007f8f8f72e912: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e917: inc    %r13
  0x00007f8f8f72e91a: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72e924: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e928: add    %al,(%rax)
  0x00007f8f8f72e92a: add    %al,(%rax)
  0x00007f8f8f72e92c: add    %al,(%rax)
  0x00007f8f8f72e92e: add    %al,(%rax)
  0x00007f8f8f72e930: add    %al,(%rax)
  0x00007f8f8f72e932: add    %al,(%rax)
  0x00007f8f8f72e934: add    %al,(%rax)
  0x00007f8f8f72e936: add    %al,(%rax)
  0x00007f8f8f72e938: add    %al,(%rax)
  0x00007f8f8f72e93a: add    %al,(%rax)
  0x00007f8f8f72e93c: add    %al,(%rax)
  0x00007f8f8f72e93e: add    %al,(%rax)

----------------------------------------------------------------------
dadd  99 dadd  [0x00007f8f8f72e960, 0x00007f8f8f72e9a0]  64 bytes

  0x00007f8f8f72e960: vmovsd (%rsp),%xmm0
  0x00007f8f8f72e965: add    $0x10,%rsp
  0x00007f8f8f72e969: vaddsd (%rsp),%xmm0,%xmm0
  0x00007f8f8f72e96e: add    $0x10,%rsp
  0x00007f8f8f72e972: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e977: inc    %r13
  0x00007f8f8f72e97a: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72e984: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e988: add    %al,(%rax)
  0x00007f8f8f72e98a: add    %al,(%rax)
  0x00007f8f8f72e98c: add    %al,(%rax)
  0x00007f8f8f72e98e: add    %al,(%rax)
  0x00007f8f8f72e990: add    %al,(%rax)
  0x00007f8f8f72e992: add    %al,(%rax)
  0x00007f8f8f72e994: add    %al,(%rax)
  0x00007f8f8f72e996: add    %al,(%rax)
  0x00007f8f8f72e998: add    %al,(%rax)
  0x00007f8f8f72e99a: add    %al,(%rax)
  0x00007f8f8f72e99c: add    %al,(%rax)
  0x00007f8f8f72e99e: add    %al,(%rax)

----------------------------------------------------------------------
isub  100 isub  [0x00007f8f8f72e9c0, 0x00007f8f8f72ea00]  64 bytes

  0x00007f8f8f72e9c0: mov    (%rsp),%eax
  0x00007f8f8f72e9c3: add    $0x8,%rsp
  0x00007f8f8f72e9c7: mov    %eax,%edx
  0x00007f8f8f72e9c9: mov    (%rsp),%eax
  0x00007f8f8f72e9cc: add    $0x8,%rsp
  0x00007f8f8f72e9d0: sub    %edx,%eax
  0x00007f8f8f72e9d2: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72e9d7: inc    %r13
  0x00007f8f8f72e9da: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72e9e4: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72e9e8: add    %al,(%rax)
  0x00007f8f8f72e9ea: add    %al,(%rax)
  0x00007f8f8f72e9ec: add    %al,(%rax)
  0x00007f8f8f72e9ee: add    %al,(%rax)
  0x00007f8f8f72e9f0: add    %al,(%rax)
  0x00007f8f8f72e9f2: add    %al,(%rax)
  0x00007f8f8f72e9f4: add    %al,(%rax)
  0x00007f8f8f72e9f6: add    %al,(%rax)
  0x00007f8f8f72e9f8: add    %al,(%rax)
  0x00007f8f8f72e9fa: add    %al,(%rax)
  0x00007f8f8f72e9fc: add    %al,(%rax)
  0x00007f8f8f72e9fe: add    %al,(%rax)

----------------------------------------------------------------------
lsub  101 lsub  [0x00007f8f8f72ea20, 0x00007f8f8f72ea60]  64 bytes

  0x00007f8f8f72ea20: mov    (%rsp),%rax
  0x00007f8f8f72ea24: add    $0x10,%rsp
  0x00007f8f8f72ea28: mov    %rax,%rdx
  0x00007f8f8f72ea2b: mov    (%rsp),%rax
  0x00007f8f8f72ea2f: add    $0x10,%rsp
  0x00007f8f8f72ea33: sub    %rdx,%rax
  0x00007f8f8f72ea36: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ea3b: inc    %r13
  0x00007f8f8f72ea3e: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72ea48: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72ea4c: nopl   0x0(%rax)
  0x00007f8f8f72ea50: add    %al,(%rax)
  0x00007f8f8f72ea52: add    %al,(%rax)
  0x00007f8f8f72ea54: add    %al,(%rax)
  0x00007f8f8f72ea56: add    %al,(%rax)
  0x00007f8f8f72ea58: add    %al,(%rax)
  0x00007f8f8f72ea5a: add    %al,(%rax)
  0x00007f8f8f72ea5c: add    %al,(%rax)
  0x00007f8f8f72ea5e: add    %al,(%rax)

----------------------------------------------------------------------
fsub  102 fsub  [0x00007f8f8f72ea80, 0x00007f8f8f72eac0]  64 bytes

  0x00007f8f8f72ea80: vmovss (%rsp),%xmm0
  0x00007f8f8f72ea85: add    $0x8,%rsp
  0x00007f8f8f72ea89: vmovaps %xmm0,%xmm1
  0x00007f8f8f72ea8d: vmovss (%rsp),%xmm0
  0x00007f8f8f72ea92: add    $0x8,%rsp
  0x00007f8f8f72ea96: vsubss %xmm1,%xmm0,%xmm0
  0x00007f8f8f72ea9a: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ea9f: inc    %r13
  0x00007f8f8f72eaa2: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72eaac: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72eab0: add    %al,(%rax)
  0x00007f8f8f72eab2: add    %al,(%rax)
  0x00007f8f8f72eab4: add    %al,(%rax)
  0x00007f8f8f72eab6: add    %al,(%rax)
  0x00007f8f8f72eab8: add    %al,(%rax)
  0x00007f8f8f72eaba: add    %al,(%rax)
  0x00007f8f8f72eabc: add    %al,(%rax)
  0x00007f8f8f72eabe: add    %al,(%rax)

----------------------------------------------------------------------
dsub  103 dsub  [0x00007f8f8f72eae0, 0x00007f8f8f72eb20]  64 bytes

  0x00007f8f8f72eae0: vmovsd (%rsp),%xmm0
  0x00007f8f8f72eae5: add    $0x10,%rsp
  0x00007f8f8f72eae9: vmovapd %xmm0,%xmm1
  0x00007f8f8f72eaed: vmovsd (%rsp),%xmm0
  0x00007f8f8f72eaf2: add    $0x10,%rsp
  0x00007f8f8f72eaf6: vsubsd %xmm1,%xmm0,%xmm0
  0x00007f8f8f72eafa: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72eaff: inc    %r13
  0x00007f8f8f72eb02: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72eb0c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72eb10: add    %al,(%rax)
  0x00007f8f8f72eb12: add    %al,(%rax)
  0x00007f8f8f72eb14: add    %al,(%rax)
  0x00007f8f8f72eb16: add    %al,(%rax)
  0x00007f8f8f72eb18: add    %al,(%rax)
  0x00007f8f8f72eb1a: add    %al,(%rax)
  0x00007f8f8f72eb1c: add    %al,(%rax)
  0x00007f8f8f72eb1e: add    %al,(%rax)

----------------------------------------------------------------------
imul  104 imul  [0x00007f8f8f72eb40, 0x00007f8f8f72eb80]  64 bytes

  0x00007f8f8f72eb40: mov    (%rsp),%eax
  0x00007f8f8f72eb43: add    $0x8,%rsp
  0x00007f8f8f72eb47: mov    (%rsp),%edx
  0x00007f8f8f72eb4a: add    $0x8,%rsp
  0x00007f8f8f72eb4e: imul   %edx,%eax
  0x00007f8f8f72eb51: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72eb56: inc    %r13
  0x00007f8f8f72eb59: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72eb63: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72eb67: nop
  0x00007f8f8f72eb68: add    %al,(%rax)
  0x00007f8f8f72eb6a: add    %al,(%rax)
  0x00007f8f8f72eb6c: add    %al,(%rax)
  0x00007f8f8f72eb6e: add    %al,(%rax)
  0x00007f8f8f72eb70: add    %al,(%rax)
  0x00007f8f8f72eb72: add    %al,(%rax)
  0x00007f8f8f72eb74: add    %al,(%rax)
  0x00007f8f8f72eb76: add    %al,(%rax)
  0x00007f8f8f72eb78: add    %al,(%rax)
  0x00007f8f8f72eb7a: add    %al,(%rax)
  0x00007f8f8f72eb7c: add    %al,(%rax)
  0x00007f8f8f72eb7e: add    %al,(%rax)

----------------------------------------------------------------------
lmul  105 lmul  [0x00007f8f8f72eba0, 0x00007f8f8f72ebe0]  64 bytes

  0x00007f8f8f72eba0: mov    (%rsp),%rax
  0x00007f8f8f72eba4: add    $0x10,%rsp
  0x00007f8f8f72eba8: mov    (%rsp),%rdx
  0x00007f8f8f72ebac: add    $0x10,%rsp
  0x00007f8f8f72ebb0: imul   %rdx,%rax
  0x00007f8f8f72ebb4: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ebb9: inc    %r13
  0x00007f8f8f72ebbc: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72ebc6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72ebca: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f72ebd0: add    %al,(%rax)
  0x00007f8f8f72ebd2: add    %al,(%rax)
  0x00007f8f8f72ebd4: add    %al,(%rax)
  0x00007f8f8f72ebd6: add    %al,(%rax)
  0x00007f8f8f72ebd8: add    %al,(%rax)
  0x00007f8f8f72ebda: add    %al,(%rax)
  0x00007f8f8f72ebdc: add    %al,(%rax)
  0x00007f8f8f72ebde: add    %al,(%rax)

----------------------------------------------------------------------
fmul  106 fmul  [0x00007f8f8f72ec00, 0x00007f8f8f72ec40]  64 bytes

  0x00007f8f8f72ec00: vmovss (%rsp),%xmm0
  0x00007f8f8f72ec05: add    $0x8,%rsp
  0x00007f8f8f72ec09: vmulss (%rsp),%xmm0,%xmm0
  0x00007f8f8f72ec0e: add    $0x8,%rsp
  0x00007f8f8f72ec12: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ec17: inc    %r13
  0x00007f8f8f72ec1a: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72ec24: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72ec28: add    %al,(%rax)
  0x00007f8f8f72ec2a: add    %al,(%rax)
  0x00007f8f8f72ec2c: add    %al,(%rax)
  0x00007f8f8f72ec2e: add    %al,(%rax)
  0x00007f8f8f72ec30: add    %al,(%rax)
  0x00007f8f8f72ec32: add    %al,(%rax)
  0x00007f8f8f72ec34: add    %al,(%rax)
  0x00007f8f8f72ec36: add    %al,(%rax)
  0x00007f8f8f72ec38: add    %al,(%rax)
  0x00007f8f8f72ec3a: add    %al,(%rax)
  0x00007f8f8f72ec3c: add    %al,(%rax)
  0x00007f8f8f72ec3e: add    %al,(%rax)

----------------------------------------------------------------------
dmul  107 dmul  [0x00007f8f8f72ec60, 0x00007f8f8f72eca0]  64 bytes

  0x00007f8f8f72ec60: vmovsd (%rsp),%xmm0
  0x00007f8f8f72ec65: add    $0x10,%rsp
  0x00007f8f8f72ec69: vmulsd (%rsp),%xmm0,%xmm0
  0x00007f8f8f72ec6e: add    $0x10,%rsp
  0x00007f8f8f72ec72: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ec77: inc    %r13
  0x00007f8f8f72ec7a: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72ec84: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72ec88: add    %al,(%rax)
  0x00007f8f8f72ec8a: add    %al,(%rax)
  0x00007f8f8f72ec8c: add    %al,(%rax)
  0x00007f8f8f72ec8e: add    %al,(%rax)
  0x00007f8f8f72ec90: add    %al,(%rax)
  0x00007f8f8f72ec92: add    %al,(%rax)
  0x00007f8f8f72ec94: add    %al,(%rax)
  0x00007f8f8f72ec96: add    %al,(%rax)
  0x00007f8f8f72ec98: add    %al,(%rax)
  0x00007f8f8f72ec9a: add    %al,(%rax)
  0x00007f8f8f72ec9c: add    %al,(%rax)
  0x00007f8f8f72ec9e: add    %al,(%rax)

----------------------------------------------------------------------
idiv  108 idiv  [0x00007f8f8f72ecc0, 0x00007f8f8f72ed00]  64 bytes

  0x00007f8f8f72ecc0: mov    (%rsp),%eax
  0x00007f8f8f72ecc3: add    $0x8,%rsp
  0x00007f8f8f72ecc7: mov    %eax,%ecx
  0x00007f8f8f72ecc9: mov    (%rsp),%eax
  0x00007f8f8f72eccc: add    $0x8,%rsp
  0x00007f8f8f72ecd0: cmp    $0x80000000,%eax
  0x00007f8f8f72ecd6: jne    0x00007f8f8f72ece7
  0x00007f8f8f72ecdc: xor    %edx,%edx
  0x00007f8f8f72ecde: cmp    $0xffffffff,%ecx
  0x00007f8f8f72ece1: je     0x00007f8f8f72ecea
  0x00007f8f8f72ece7: cltd   
  0x00007f8f8f72ece8: idiv   %ecx
  0x00007f8f8f72ecea: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ecef: inc    %r13
  0x00007f8f8f72ecf2: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72ecfc: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
ldiv  109 ldiv  [0x00007f8f8f72ed20, 0x00007f8f8f72ed80]  96 bytes

  0x00007f8f8f72ed20: mov    (%rsp),%rax
  0x00007f8f8f72ed24: add    $0x10,%rsp
  0x00007f8f8f72ed28: mov    %rax,%rcx
  0x00007f8f8f72ed2b: mov    (%rsp),%rax
  0x00007f8f8f72ed2f: add    $0x10,%rsp
  0x00007f8f8f72ed33: test   %rcx,%rcx
  0x00007f8f8f72ed36: je     0x00007f8f8f7281db
  0x00007f8f8f72ed3c: cmp    0x1df5ed3d(%rip),%rax        # 0x00007f8fad68da80
  0x00007f8f8f72ed43: jne    0x00007f8f8f72ed55
  0x00007f8f8f72ed49: xor    %edx,%edx
  0x00007f8f8f72ed4b: cmp    $0xffffffffffffffff,%rcx
  0x00007f8f8f72ed4f: je     0x00007f8f8f72ed5a
  0x00007f8f8f72ed55: cqto   
  0x00007f8f8f72ed57: idiv   %rcx
  0x00007f8f8f72ed5a: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ed5f: inc    %r13
  0x00007f8f8f72ed62: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72ed6c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72ed70: add    %al,(%rax)
  0x00007f8f8f72ed72: add    %al,(%rax)
  0x00007f8f8f72ed74: add    %al,(%rax)
  0x00007f8f8f72ed76: add    %al,(%rax)
  0x00007f8f8f72ed78: add    %al,(%rax)
  0x00007f8f8f72ed7a: add    %al,(%rax)
  0x00007f8f8f72ed7c: add    %al,(%rax)
  0x00007f8f8f72ed7e: add    %al,(%rax)

----------------------------------------------------------------------
fdiv  110 fdiv  [0x00007f8f8f72eda0, 0x00007f8f8f72ede0]  64 bytes

  0x00007f8f8f72eda0: vmovss (%rsp),%xmm0
  0x00007f8f8f72eda5: add    $0x8,%rsp
  0x00007f8f8f72eda9: vmovaps %xmm0,%xmm1
  0x00007f8f8f72edad: vmovss (%rsp),%xmm0
  0x00007f8f8f72edb2: add    $0x8,%rsp
  0x00007f8f8f72edb6: vdivss %xmm1,%xmm0,%xmm0
  0x00007f8f8f72edba: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72edbf: inc    %r13
  0x00007f8f8f72edc2: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72edcc: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72edd0: add    %al,(%rax)
  0x00007f8f8f72edd2: add    %al,(%rax)
  0x00007f8f8f72edd4: add    %al,(%rax)
  0x00007f8f8f72edd6: add    %al,(%rax)
  0x00007f8f8f72edd8: add    %al,(%rax)
  0x00007f8f8f72edda: add    %al,(%rax)
  0x00007f8f8f72eddc: add    %al,(%rax)
  0x00007f8f8f72edde: add    %al,(%rax)

----------------------------------------------------------------------
ddiv  111 ddiv  [0x00007f8f8f72ee00, 0x00007f8f8f72ee40]  64 bytes

  0x00007f8f8f72ee00: vmovsd (%rsp),%xmm0
  0x00007f8f8f72ee05: add    $0x10,%rsp
  0x00007f8f8f72ee09: vmovapd %xmm0,%xmm1
  0x00007f8f8f72ee0d: vmovsd (%rsp),%xmm0
  0x00007f8f8f72ee12: add    $0x10,%rsp
  0x00007f8f8f72ee16: vdivsd %xmm1,%xmm0,%xmm0
  0x00007f8f8f72ee1a: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ee1f: inc    %r13
  0x00007f8f8f72ee22: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72ee2c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72ee30: add    %al,(%rax)
  0x00007f8f8f72ee32: add    %al,(%rax)
  0x00007f8f8f72ee34: add    %al,(%rax)
  0x00007f8f8f72ee36: add    %al,(%rax)
  0x00007f8f8f72ee38: add    %al,(%rax)
  0x00007f8f8f72ee3a: add    %al,(%rax)
  0x00007f8f8f72ee3c: add    %al,(%rax)
  0x00007f8f8f72ee3e: add    %al,(%rax)

----------------------------------------------------------------------
irem  112 irem  [0x00007f8f8f72ee60, 0x00007f8f8f72eec0]  96 bytes

  0x00007f8f8f72ee60: mov    (%rsp),%eax
  0x00007f8f8f72ee63: add    $0x8,%rsp
  0x00007f8f8f72ee67: mov    %eax,%ecx
  0x00007f8f8f72ee69: mov    (%rsp),%eax
  0x00007f8f8f72ee6c: add    $0x8,%rsp
  0x00007f8f8f72ee70: cmp    $0x80000000,%eax
  0x00007f8f8f72ee76: jne    0x00007f8f8f72ee87
  0x00007f8f8f72ee7c: xor    %edx,%edx
  0x00007f8f8f72ee7e: cmp    $0xffffffff,%ecx
  0x00007f8f8f72ee81: je     0x00007f8f8f72ee8a
  0x00007f8f8f72ee87: cltd   
  0x00007f8f8f72ee88: idiv   %ecx
  0x00007f8f8f72ee8a: mov    %edx,%eax
  0x00007f8f8f72ee8c: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ee91: inc    %r13
  0x00007f8f8f72ee94: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72ee9e: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72eea2: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f72eea8: add    %al,(%rax)
  0x00007f8f8f72eeaa: add    %al,(%rax)
  0x00007f8f8f72eeac: add    %al,(%rax)
  0x00007f8f8f72eeae: add    %al,(%rax)
  0x00007f8f8f72eeb0: add    %al,(%rax)
  0x00007f8f8f72eeb2: add    %al,(%rax)
  0x00007f8f8f72eeb4: add    %al,(%rax)
  0x00007f8f8f72eeb6: add    %al,(%rax)
  0x00007f8f8f72eeb8: add    %al,(%rax)
  0x00007f8f8f72eeba: add    %al,(%rax)
  0x00007f8f8f72eebc: add    %al,(%rax)
  0x00007f8f8f72eebe: add    %al,(%rax)

----------------------------------------------------------------------
lrem  113 lrem  [0x00007f8f8f72eee0, 0x00007f8f8f72ef40]  96 bytes

  0x00007f8f8f72eee0: mov    (%rsp),%rax
  0x00007f8f8f72eee4: add    $0x10,%rsp
  0x00007f8f8f72eee8: mov    %rax,%rcx
  0x00007f8f8f72eeeb: mov    (%rsp),%rax
  0x00007f8f8f72eeef: add    $0x10,%rsp
  0x00007f8f8f72eef3: test   %rcx,%rcx
  0x00007f8f8f72eef6: je     0x00007f8f8f7281db
  0x00007f8f8f72eefc: cmp    0x1df5eb7d(%rip),%rax        # 0x00007f8fad68da80
  0x00007f8f8f72ef03: jne    0x00007f8f8f72ef15
  0x00007f8f8f72ef09: xor    %edx,%edx
  0x00007f8f8f72ef0b: cmp    $0xffffffffffffffff,%rcx
  0x00007f8f8f72ef0f: je     0x00007f8f8f72ef1a
  0x00007f8f8f72ef15: cqto   
  0x00007f8f8f72ef17: idiv   %rcx
  0x00007f8f8f72ef1a: mov    %rdx,%rax
  0x00007f8f8f72ef1d: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ef22: inc    %r13
  0x00007f8f8f72ef25: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72ef2f: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72ef33: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f72ef38: add    %al,(%rax)
  0x00007f8f8f72ef3a: add    %al,(%rax)
  0x00007f8f8f72ef3c: add    %al,(%rax)
  0x00007f8f8f72ef3e: add    %al,(%rax)

----------------------------------------------------------------------
frem  114 frem  [0x00007f8f8f72ef60, 0x00007f8f8f72efc0]  96 bytes

  0x00007f8f8f72ef60: vmovss (%rsp),%xmm0
  0x00007f8f8f72ef65: add    $0x8,%rsp
  0x00007f8f8f72ef69: vmovaps %xmm0,%xmm1
  0x00007f8f8f72ef6d: vmovss (%rsp),%xmm0
  0x00007f8f8f72ef72: add    $0x8,%rsp
  0x00007f8f8f72ef76: test   $0xf,%esp
  0x00007f8f8f72ef7c: je     0x00007f8f8f72ef94
  0x00007f8f8f72ef82: sub    $0x8,%rsp
  0x00007f8f8f72ef86: callq  0x00007f8fad48baf0 = SharedRuntime::frem(float, float)
  0x00007f8f8f72ef8b: add    $0x8,%rsp
  0x00007f8f8f72ef8f: jmpq   0x00007f8f8f72ef99
  0x00007f8f8f72ef94: callq  0x00007f8fad48baf0 = SharedRuntime::frem(float, float)
  0x00007f8f8f72ef99: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72ef9e: inc    %r13
  0x00007f8f8f72efa1: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72efab: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72efaf: nop
  0x00007f8f8f72efb0: add    %al,(%rax)
  0x00007f8f8f72efb2: add    %al,(%rax)
  0x00007f8f8f72efb4: add    %al,(%rax)
  0x00007f8f8f72efb6: add    %al,(%rax)
  0x00007f8f8f72efb8: add    %al,(%rax)
  0x00007f8f8f72efba: add    %al,(%rax)
  0x00007f8f8f72efbc: add    %al,(%rax)
  0x00007f8f8f72efbe: add    %al,(%rax)

----------------------------------------------------------------------
drem  115 drem  [0x00007f8f8f72efe0, 0x00007f8f8f72f040]  96 bytes

  0x00007f8f8f72efe0: vmovsd (%rsp),%xmm0
  0x00007f8f8f72efe5: add    $0x10,%rsp
  0x00007f8f8f72efe9: vmovapd %xmm0,%xmm1
  0x00007f8f8f72efed: vmovsd (%rsp),%xmm0
  0x00007f8f8f72eff2: add    $0x10,%rsp
  0x00007f8f8f72eff6: test   $0xf,%esp
  0x00007f8f8f72effc: je     0x00007f8f8f72f014
  0x00007f8f8f72f002: sub    $0x8,%rsp
  0x00007f8f8f72f006: callq  0x00007f8fad48bb10 = SharedRuntime::drem(double, double)
  0x00007f8f8f72f00b: add    $0x8,%rsp
  0x00007f8f8f72f00f: jmpq   0x00007f8f8f72f019
  0x00007f8f8f72f014: callq  0x00007f8fad48bb10 = SharedRuntime::drem(double, double)
  0x00007f8f8f72f019: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f01e: inc    %r13
  0x00007f8f8f72f021: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72f02b: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f02f: nop
  0x00007f8f8f72f030: add    %al,(%rax)
  0x00007f8f8f72f032: add    %al,(%rax)
  0x00007f8f8f72f034: add    %al,(%rax)
  0x00007f8f8f72f036: add    %al,(%rax)
  0x00007f8f8f72f038: add    %al,(%rax)
  0x00007f8f8f72f03a: add    %al,(%rax)
  0x00007f8f8f72f03c: add    %al,(%rax)
  0x00007f8f8f72f03e: add    %al,(%rax)

----------------------------------------------------------------------
ineg  116 ineg  [0x00007f8f8f72f060, 0x00007f8f8f72f080]  32 bytes

  0x00007f8f8f72f060: mov    (%rsp),%eax
  0x00007f8f8f72f063: add    $0x8,%rsp
  0x00007f8f8f72f067: neg    %eax
  0x00007f8f8f72f069: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f06e: inc    %r13
  0x00007f8f8f72f071: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72f07b: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f07f: nop

----------------------------------------------------------------------
lneg  117 lneg  [0x00007f8f8f72f0a0, 0x00007f8f8f72f0e0]  64 bytes

  0x00007f8f8f72f0a0: mov    (%rsp),%rax
  0x00007f8f8f72f0a4: add    $0x10,%rsp
  0x00007f8f8f72f0a8: neg    %rax
  0x00007f8f8f72f0ab: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f0b0: inc    %r13
  0x00007f8f8f72f0b3: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72f0bd: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f0c1: nopl   0x0(%rax)
  0x00007f8f8f72f0c8: add    %al,(%rax)
  0x00007f8f8f72f0ca: add    %al,(%rax)
  0x00007f8f8f72f0cc: add    %al,(%rax)
  0x00007f8f8f72f0ce: add    %al,(%rax)
  0x00007f8f8f72f0d0: add    %al,(%rax)
  0x00007f8f8f72f0d2: add    %al,(%rax)
  0x00007f8f8f72f0d4: add    %al,(%rax)
  0x00007f8f8f72f0d6: add    %al,(%rax)
  0x00007f8f8f72f0d8: add    %al,(%rax)
  0x00007f8f8f72f0da: add    %al,(%rax)
  0x00007f8f8f72f0dc: add    %al,(%rax)
  0x00007f8f8f72f0de: add    %al,(%rax)

----------------------------------------------------------------------
fneg  118 fneg  [0x00007f8f8f72f100, 0x00007f8f8f72f140]  64 bytes

  0x00007f8f8f72f100: vmovss (%rsp),%xmm0
  0x00007f8f8f72f105: add    $0x8,%rsp
  0x00007f8f8f72f109: vxorps 0x1e4bcf0f(%rip),%xmm0,%xmm0        # 0x00007f8fadbec020
  0x00007f8f8f72f111: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f116: inc    %r13
  0x00007f8f8f72f119: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72f123: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f127: nop
  0x00007f8f8f72f128: add    %al,(%rax)
  0x00007f8f8f72f12a: add    %al,(%rax)
  0x00007f8f8f72f12c: add    %al,(%rax)
  0x00007f8f8f72f12e: add    %al,(%rax)
  0x00007f8f8f72f130: add    %al,(%rax)
  0x00007f8f8f72f132: add    %al,(%rax)
  0x00007f8f8f72f134: add    %al,(%rax)
  0x00007f8f8f72f136: add    %al,(%rax)
  0x00007f8f8f72f138: add    %al,(%rax)
  0x00007f8f8f72f13a: add    %al,(%rax)
  0x00007f8f8f72f13c: add    %al,(%rax)
  0x00007f8f8f72f13e: add    %al,(%rax)

----------------------------------------------------------------------
dneg  119 dneg  [0x00007f8f8f72f160, 0x00007f8f8f72f1a0]  64 bytes

  0x00007f8f8f72f160: vmovsd (%rsp),%xmm0
  0x00007f8f8f72f165: add    $0x10,%rsp
  0x00007f8f8f72f169: vxorpd 0x1e4bce8f(%rip),%xmm0,%xmm0        # 0x00007f8fadbec000
  0x00007f8f8f72f171: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f176: inc    %r13
  0x00007f8f8f72f179: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72f183: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f187: nop
  0x00007f8f8f72f188: add    %al,(%rax)
  0x00007f8f8f72f18a: add    %al,(%rax)
  0x00007f8f8f72f18c: add    %al,(%rax)
  0x00007f8f8f72f18e: add    %al,(%rax)
  0x00007f8f8f72f190: add    %al,(%rax)
  0x00007f8f8f72f192: add    %al,(%rax)
  0x00007f8f8f72f194: add    %al,(%rax)
  0x00007f8f8f72f196: add    %al,(%rax)
  0x00007f8f8f72f198: add    %al,(%rax)
  0x00007f8f8f72f19a: add    %al,(%rax)
  0x00007f8f8f72f19c: add    %al,(%rax)
  0x00007f8f8f72f19e: add    %al,(%rax)

----------------------------------------------------------------------
ishl  120 ishl  [0x00007f8f8f72f1c0, 0x00007f8f8f72f200]  64 bytes

  0x00007f8f8f72f1c0: mov    (%rsp),%eax
  0x00007f8f8f72f1c3: add    $0x8,%rsp
  0x00007f8f8f72f1c7: mov    %eax,%ecx
  0x00007f8f8f72f1c9: mov    (%rsp),%eax
  0x00007f8f8f72f1cc: add    $0x8,%rsp
  0x00007f8f8f72f1d0: shl    %cl,%eax
  0x00007f8f8f72f1d2: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f1d7: inc    %r13
  0x00007f8f8f72f1da: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72f1e4: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f1e8: add    %al,(%rax)
  0x00007f8f8f72f1ea: add    %al,(%rax)
  0x00007f8f8f72f1ec: add    %al,(%rax)
  0x00007f8f8f72f1ee: add    %al,(%rax)
  0x00007f8f8f72f1f0: add    %al,(%rax)
  0x00007f8f8f72f1f2: add    %al,(%rax)
  0x00007f8f8f72f1f4: add    %al,(%rax)
  0x00007f8f8f72f1f6: add    %al,(%rax)
  0x00007f8f8f72f1f8: add    %al,(%rax)
  0x00007f8f8f72f1fa: add    %al,(%rax)
  0x00007f8f8f72f1fc: add    %al,(%rax)
  0x00007f8f8f72f1fe: add    %al,(%rax)

----------------------------------------------------------------------
lshl  121 lshl  [0x00007f8f8f72f220, 0x00007f8f8f72f260]  64 bytes

  0x00007f8f8f72f220: mov    (%rsp),%eax
  0x00007f8f8f72f223: add    $0x8,%rsp
  0x00007f8f8f72f227: mov    %eax,%ecx
  0x00007f8f8f72f229: mov    (%rsp),%rax
  0x00007f8f8f72f22d: add    $0x10,%rsp
  0x00007f8f8f72f231: shl    %cl,%rax
  0x00007f8f8f72f234: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f239: inc    %r13
  0x00007f8f8f72f23c: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72f246: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f24a: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f72f250: add    %al,(%rax)
  0x00007f8f8f72f252: add    %al,(%rax)
  0x00007f8f8f72f254: add    %al,(%rax)
  0x00007f8f8f72f256: add    %al,(%rax)
  0x00007f8f8f72f258: add    %al,(%rax)
  0x00007f8f8f72f25a: add    %al,(%rax)
  0x00007f8f8f72f25c: add    %al,(%rax)
  0x00007f8f8f72f25e: add    %al,(%rax)

----------------------------------------------------------------------
ishr  122 ishr  [0x00007f8f8f72f280, 0x00007f8f8f72f2c0]  64 bytes

  0x00007f8f8f72f280: mov    (%rsp),%eax
  0x00007f8f8f72f283: add    $0x8,%rsp
  0x00007f8f8f72f287: mov    %eax,%ecx
  0x00007f8f8f72f289: mov    (%rsp),%eax
  0x00007f8f8f72f28c: add    $0x8,%rsp
  0x00007f8f8f72f290: sar    %cl,%eax
  0x00007f8f8f72f292: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f297: inc    %r13
  0x00007f8f8f72f29a: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72f2a4: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f2a8: add    %al,(%rax)
  0x00007f8f8f72f2aa: add    %al,(%rax)
  0x00007f8f8f72f2ac: add    %al,(%rax)
  0x00007f8f8f72f2ae: add    %al,(%rax)
  0x00007f8f8f72f2b0: add    %al,(%rax)
  0x00007f8f8f72f2b2: add    %al,(%rax)
  0x00007f8f8f72f2b4: add    %al,(%rax)
  0x00007f8f8f72f2b6: add    %al,(%rax)
  0x00007f8f8f72f2b8: add    %al,(%rax)
  0x00007f8f8f72f2ba: add    %al,(%rax)
  0x00007f8f8f72f2bc: add    %al,(%rax)
  0x00007f8f8f72f2be: add    %al,(%rax)

----------------------------------------------------------------------
lshr  123 lshr  [0x00007f8f8f72f2e0, 0x00007f8f8f72f320]  64 bytes

  0x00007f8f8f72f2e0: mov    (%rsp),%eax
  0x00007f8f8f72f2e3: add    $0x8,%rsp
  0x00007f8f8f72f2e7: mov    %eax,%ecx
  0x00007f8f8f72f2e9: mov    (%rsp),%rax
  0x00007f8f8f72f2ed: add    $0x10,%rsp
  0x00007f8f8f72f2f1: sar    %cl,%rax
  0x00007f8f8f72f2f4: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f2f9: inc    %r13
  0x00007f8f8f72f2fc: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72f306: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f30a: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f72f310: add    %al,(%rax)
  0x00007f8f8f72f312: add    %al,(%rax)
  0x00007f8f8f72f314: add    %al,(%rax)
  0x00007f8f8f72f316: add    %al,(%rax)
  0x00007f8f8f72f318: add    %al,(%rax)
  0x00007f8f8f72f31a: add    %al,(%rax)
  0x00007f8f8f72f31c: add    %al,(%rax)
  0x00007f8f8f72f31e: add    %al,(%rax)

----------------------------------------------------------------------
iushr  124 iushr  [0x00007f8f8f72f340, 0x00007f8f8f72f380]  64 bytes

  0x00007f8f8f72f340: mov    (%rsp),%eax
  0x00007f8f8f72f343: add    $0x8,%rsp
  0x00007f8f8f72f347: mov    %eax,%ecx
  0x00007f8f8f72f349: mov    (%rsp),%eax
  0x00007f8f8f72f34c: add    $0x8,%rsp
  0x00007f8f8f72f350: shr    %cl,%eax
  0x00007f8f8f72f352: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f357: inc    %r13
  0x00007f8f8f72f35a: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72f364: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f368: add    %al,(%rax)
  0x00007f8f8f72f36a: add    %al,(%rax)
  0x00007f8f8f72f36c: add    %al,(%rax)
  0x00007f8f8f72f36e: add    %al,(%rax)
  0x00007f8f8f72f370: add    %al,(%rax)
  0x00007f8f8f72f372: add    %al,(%rax)
  0x00007f8f8f72f374: add    %al,(%rax)
  0x00007f8f8f72f376: add    %al,(%rax)
  0x00007f8f8f72f378: add    %al,(%rax)
  0x00007f8f8f72f37a: add    %al,(%rax)
  0x00007f8f8f72f37c: add    %al,(%rax)
  0x00007f8f8f72f37e: add    %al,(%rax)

----------------------------------------------------------------------
lushr  125 lushr  [0x00007f8f8f72f3a0, 0x00007f8f8f72f3e0]  64 bytes

  0x00007f8f8f72f3a0: mov    (%rsp),%eax
  0x00007f8f8f72f3a3: add    $0x8,%rsp
  0x00007f8f8f72f3a7: mov    %eax,%ecx
  0x00007f8f8f72f3a9: mov    (%rsp),%rax
  0x00007f8f8f72f3ad: add    $0x10,%rsp
  0x00007f8f8f72f3b1: shr    %cl,%rax
  0x00007f8f8f72f3b4: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f3b9: inc    %r13
  0x00007f8f8f72f3bc: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72f3c6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f3ca: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f72f3d0: add    %al,(%rax)
  0x00007f8f8f72f3d2: add    %al,(%rax)
  0x00007f8f8f72f3d4: add    %al,(%rax)
  0x00007f8f8f72f3d6: add    %al,(%rax)
  0x00007f8f8f72f3d8: add    %al,(%rax)
  0x00007f8f8f72f3da: add    %al,(%rax)
  0x00007f8f8f72f3dc: add    %al,(%rax)
  0x00007f8f8f72f3de: add    %al,(%rax)

----------------------------------------------------------------------
iand  126 iand  [0x00007f8f8f72f400, 0x00007f8f8f72f440]  64 bytes

  0x00007f8f8f72f400: mov    (%rsp),%eax
  0x00007f8f8f72f403: add    $0x8,%rsp
  0x00007f8f8f72f407: mov    (%rsp),%edx
  0x00007f8f8f72f40a: add    $0x8,%rsp
  0x00007f8f8f72f40e: and    %edx,%eax
  0x00007f8f8f72f410: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f415: inc    %r13
  0x00007f8f8f72f418: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72f422: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f426: xchg   %ax,%ax
  0x00007f8f8f72f428: add    %al,(%rax)
  0x00007f8f8f72f42a: add    %al,(%rax)
  0x00007f8f8f72f42c: add    %al,(%rax)
  0x00007f8f8f72f42e: add    %al,(%rax)
  0x00007f8f8f72f430: add    %al,(%rax)
  0x00007f8f8f72f432: add    %al,(%rax)
  0x00007f8f8f72f434: add    %al,(%rax)
  0x00007f8f8f72f436: add    %al,(%rax)
  0x00007f8f8f72f438: add    %al,(%rax)
  0x00007f8f8f72f43a: add    %al,(%rax)
  0x00007f8f8f72f43c: add    %al,(%rax)
  0x00007f8f8f72f43e: add    %al,(%rax)

----------------------------------------------------------------------
land  127 land  [0x00007f8f8f72f460, 0x00007f8f8f72f4a0]  64 bytes

  0x00007f8f8f72f460: mov    (%rsp),%rax
  0x00007f8f8f72f464: add    $0x10,%rsp
  0x00007f8f8f72f468: mov    (%rsp),%rdx
  0x00007f8f8f72f46c: add    $0x10,%rsp
  0x00007f8f8f72f470: and    %rdx,%rax
  0x00007f8f8f72f473: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f478: inc    %r13
  0x00007f8f8f72f47b: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72f485: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f489: nopl   0x0(%rax)
  0x00007f8f8f72f490: add    %al,(%rax)
  0x00007f8f8f72f492: add    %al,(%rax)
  0x00007f8f8f72f494: add    %al,(%rax)
  0x00007f8f8f72f496: add    %al,(%rax)
  0x00007f8f8f72f498: add    %al,(%rax)
  0x00007f8f8f72f49a: add    %al,(%rax)
  0x00007f8f8f72f49c: add    %al,(%rax)
  0x00007f8f8f72f49e: add    %al,(%rax)

----------------------------------------------------------------------
ior  128 ior  [0x00007f8f8f72f4c0, 0x00007f8f8f72f500]  64 bytes

  0x00007f8f8f72f4c0: mov    (%rsp),%eax
  0x00007f8f8f72f4c3: add    $0x8,%rsp
  0x00007f8f8f72f4c7: mov    (%rsp),%edx
  0x00007f8f8f72f4ca: add    $0x8,%rsp
  0x00007f8f8f72f4ce: or     %edx,%eax
  0x00007f8f8f72f4d0: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f4d5: inc    %r13
  0x00007f8f8f72f4d8: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72f4e2: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f4e6: xchg   %ax,%ax
  0x00007f8f8f72f4e8: add    %al,(%rax)
  0x00007f8f8f72f4ea: add    %al,(%rax)
  0x00007f8f8f72f4ec: add    %al,(%rax)
  0x00007f8f8f72f4ee: add    %al,(%rax)
  0x00007f8f8f72f4f0: add    %al,(%rax)
  0x00007f8f8f72f4f2: add    %al,(%rax)
  0x00007f8f8f72f4f4: add    %al,(%rax)
  0x00007f8f8f72f4f6: add    %al,(%rax)
  0x00007f8f8f72f4f8: add    %al,(%rax)
  0x00007f8f8f72f4fa: add    %al,(%rax)
  0x00007f8f8f72f4fc: add    %al,(%rax)
  0x00007f8f8f72f4fe: add    %al,(%rax)

----------------------------------------------------------------------
lor  129 lor  [0x00007f8f8f72f520, 0x00007f8f8f72f560]  64 bytes

  0x00007f8f8f72f520: mov    (%rsp),%rax
  0x00007f8f8f72f524: add    $0x10,%rsp
  0x00007f8f8f72f528: mov    (%rsp),%rdx
  0x00007f8f8f72f52c: add    $0x10,%rsp
  0x00007f8f8f72f530: or     %rdx,%rax
  0x00007f8f8f72f533: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f538: inc    %r13
  0x00007f8f8f72f53b: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72f545: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f549: nopl   0x0(%rax)
  0x00007f8f8f72f550: add    %al,(%rax)
  0x00007f8f8f72f552: add    %al,(%rax)
  0x00007f8f8f72f554: add    %al,(%rax)
  0x00007f8f8f72f556: add    %al,(%rax)
  0x00007f8f8f72f558: add    %al,(%rax)
  0x00007f8f8f72f55a: add    %al,(%rax)
  0x00007f8f8f72f55c: add    %al,(%rax)
  0x00007f8f8f72f55e: add    %al,(%rax)

----------------------------------------------------------------------
ixor  130 ixor  [0x00007f8f8f72f580, 0x00007f8f8f72f5c0]  64 bytes

  0x00007f8f8f72f580: mov    (%rsp),%eax
  0x00007f8f8f72f583: add    $0x8,%rsp
  0x00007f8f8f72f587: mov    (%rsp),%edx
  0x00007f8f8f72f58a: add    $0x8,%rsp
  0x00007f8f8f72f58e: xor    %edx,%eax
  0x00007f8f8f72f590: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f595: inc    %r13
  0x00007f8f8f72f598: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72f5a2: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f5a6: xchg   %ax,%ax
  0x00007f8f8f72f5a8: add    %al,(%rax)
  0x00007f8f8f72f5aa: add    %al,(%rax)
  0x00007f8f8f72f5ac: add    %al,(%rax)
  0x00007f8f8f72f5ae: add    %al,(%rax)
  0x00007f8f8f72f5b0: add    %al,(%rax)
  0x00007f8f8f72f5b2: add    %al,(%rax)
  0x00007f8f8f72f5b4: add    %al,(%rax)
  0x00007f8f8f72f5b6: add    %al,(%rax)
  0x00007f8f8f72f5b8: add    %al,(%rax)
  0x00007f8f8f72f5ba: add    %al,(%rax)
  0x00007f8f8f72f5bc: add    %al,(%rax)
  0x00007f8f8f72f5be: add    %al,(%rax)

----------------------------------------------------------------------
lxor  131 lxor  [0x00007f8f8f72f5e0, 0x00007f8f8f72f620]  64 bytes

  0x00007f8f8f72f5e0: mov    (%rsp),%rax
  0x00007f8f8f72f5e4: add    $0x10,%rsp
  0x00007f8f8f72f5e8: mov    (%rsp),%rdx
  0x00007f8f8f72f5ec: add    $0x10,%rsp
  0x00007f8f8f72f5f0: xor    %rdx,%rax
  0x00007f8f8f72f5f3: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f5f8: inc    %r13
  0x00007f8f8f72f5fb: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72f605: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f609: nopl   0x0(%rax)
  0x00007f8f8f72f610: add    %al,(%rax)
  0x00007f8f8f72f612: add    %al,(%rax)
  0x00007f8f8f72f614: add    %al,(%rax)
  0x00007f8f8f72f616: add    %al,(%rax)
  0x00007f8f8f72f618: add    %al,(%rax)
  0x00007f8f8f72f61a: add    %al,(%rax)
  0x00007f8f8f72f61c: add    %al,(%rax)
  0x00007f8f8f72f61e: add    %al,(%rax)

----------------------------------------------------------------------
iinc  132 iinc  [0x00007f8f8f72f640, 0x00007f8f8f72f6e0]  160 bytes

  0x00007f8f8f72f640: push   %rax
  0x00007f8f8f72f641: jmpq   0x00007f8f8f72f67f
  0x00007f8f8f72f646: sub    $0x8,%rsp
  0x00007f8f8f72f64a: vmovss %xmm0,(%rsp)
  0x00007f8f8f72f64f: jmpq   0x00007f8f8f72f67f
  0x00007f8f8f72f654: sub    $0x10,%rsp
  0x00007f8f8f72f658: vmovsd %xmm0,(%rsp)
  0x00007f8f8f72f65d: jmpq   0x00007f8f8f72f67f
  0x00007f8f8f72f662: sub    $0x10,%rsp
  0x00007f8f8f72f666: mov    %rax,(%rsp)
  0x00007f8f8f72f66a: movabs $0x0,%r10
  0x00007f8f8f72f674: mov    %r10,0x8(%rsp)
  0x00007f8f8f72f679: jmpq   0x00007f8f8f72f67f
  0x00007f8f8f72f67e: push   %rax
  0x00007f8f8f72f67f: movsbl 0x2(%r13),%edx
  0x00007f8f8f72f684: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f689: neg    %rbx
  0x00007f8f8f72f68c: add    %edx,(%r14,%rbx,8)
  0x00007f8f8f72f690: movzbl 0x3(%r13),%ebx
  0x00007f8f8f72f695: add    $0x3,%r13
  0x00007f8f8f72f699: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72f6a3: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f6a7: mov    0x4(%r13),%edx
  0x00007f8f8f72f6ab: movzwl 0x2(%r13),%ebx
  0x00007f8f8f72f6b0: bswap  %ebx
  0x00007f8f8f72f6b2: shr    $0x10,%ebx
  0x00007f8f8f72f6b5: neg    %rbx
  0x00007f8f8f72f6b8: bswap  %edx
  0x00007f8f8f72f6ba: sar    $0x10,%edx
  0x00007f8f8f72f6bd: add    %edx,(%r14,%rbx,8)
  0x00007f8f8f72f6c1: movzbl 0x6(%r13),%ebx
  0x00007f8f8f72f6c6: add    $0x6,%r13
  0x00007f8f8f72f6ca: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72f6d4: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f6d8: add    %al,(%rax)
  0x00007f8f8f72f6da: add    %al,(%rax)
  0x00007f8f8f72f6dc: add    %al,(%rax)
  0x00007f8f8f72f6de: add    %al,(%rax)

----------------------------------------------------------------------
i2l  133 i2l  [0x00007f8f8f72f700, 0x00007f8f8f72f720]  32 bytes

  0x00007f8f8f72f700: mov    (%rsp),%eax
  0x00007f8f8f72f703: add    $0x8,%rsp
  0x00007f8f8f72f707: movslq %eax,%rax
  0x00007f8f8f72f70a: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f70f: inc    %r13
  0x00007f8f8f72f712: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72f71c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
i2f  134 i2f  [0x00007f8f8f72f740, 0x00007f8f8f72f780]  64 bytes

  0x00007f8f8f72f740: mov    (%rsp),%eax
  0x00007f8f8f72f743: add    $0x8,%rsp
  0x00007f8f8f72f747: vcvtsi2ss %eax,%xmm0,%xmm0
  0x00007f8f8f72f74b: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f750: inc    %r13
  0x00007f8f8f72f753: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72f75d: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f761: nopl   0x0(%rax)
  0x00007f8f8f72f768: add    %al,(%rax)
  0x00007f8f8f72f76a: add    %al,(%rax)
  0x00007f8f8f72f76c: add    %al,(%rax)
  0x00007f8f8f72f76e: add    %al,(%rax)
  0x00007f8f8f72f770: add    %al,(%rax)
  0x00007f8f8f72f772: add    %al,(%rax)
  0x00007f8f8f72f774: add    %al,(%rax)
  0x00007f8f8f72f776: add    %al,(%rax)
  0x00007f8f8f72f778: add    %al,(%rax)
  0x00007f8f8f72f77a: add    %al,(%rax)
  0x00007f8f8f72f77c: add    %al,(%rax)
  0x00007f8f8f72f77e: add    %al,(%rax)

----------------------------------------------------------------------
i2d  135 i2d  [0x00007f8f8f72f7a0, 0x00007f8f8f72f7e0]  64 bytes

  0x00007f8f8f72f7a0: mov    (%rsp),%eax
  0x00007f8f8f72f7a3: add    $0x8,%rsp
  0x00007f8f8f72f7a7: vcvtsi2sd %eax,%xmm0,%xmm0
  0x00007f8f8f72f7ab: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f7b0: inc    %r13
  0x00007f8f8f72f7b3: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72f7bd: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f7c1: nopl   0x0(%rax)
  0x00007f8f8f72f7c8: add    %al,(%rax)
  0x00007f8f8f72f7ca: add    %al,(%rax)
  0x00007f8f8f72f7cc: add    %al,(%rax)
  0x00007f8f8f72f7ce: add    %al,(%rax)
  0x00007f8f8f72f7d0: add    %al,(%rax)
  0x00007f8f8f72f7d2: add    %al,(%rax)
  0x00007f8f8f72f7d4: add    %al,(%rax)
  0x00007f8f8f72f7d6: add    %al,(%rax)
  0x00007f8f8f72f7d8: add    %al,(%rax)
  0x00007f8f8f72f7da: add    %al,(%rax)
  0x00007f8f8f72f7dc: add    %al,(%rax)
  0x00007f8f8f72f7de: add    %al,(%rax)

----------------------------------------------------------------------
l2i  136 l2i  [0x00007f8f8f72f800, 0x00007f8f8f72f820]  32 bytes

  0x00007f8f8f72f800: mov    (%rsp),%rax
  0x00007f8f8f72f804: add    $0x10,%rsp
  0x00007f8f8f72f808: mov    %eax,%eax
  0x00007f8f8f72f80a: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f80f: inc    %r13
  0x00007f8f8f72f812: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72f81c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
l2f  137 l2f  [0x00007f8f8f72f840, 0x00007f8f8f72f880]  64 bytes

  0x00007f8f8f72f840: mov    (%rsp),%rax
  0x00007f8f8f72f844: add    $0x10,%rsp
  0x00007f8f8f72f848: vcvtsi2ss %rax,%xmm0,%xmm0
  0x00007f8f8f72f84d: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f852: inc    %r13
  0x00007f8f8f72f855: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72f85f: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f863: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f72f868: add    %al,(%rax)
  0x00007f8f8f72f86a: add    %al,(%rax)
  0x00007f8f8f72f86c: add    %al,(%rax)
  0x00007f8f8f72f86e: add    %al,(%rax)
  0x00007f8f8f72f870: add    %al,(%rax)
  0x00007f8f8f72f872: add    %al,(%rax)
  0x00007f8f8f72f874: add    %al,(%rax)
  0x00007f8f8f72f876: add    %al,(%rax)
  0x00007f8f8f72f878: add    %al,(%rax)
  0x00007f8f8f72f87a: add    %al,(%rax)
  0x00007f8f8f72f87c: add    %al,(%rax)
  0x00007f8f8f72f87e: add    %al,(%rax)

----------------------------------------------------------------------
l2d  138 l2d  [0x00007f8f8f72f8a0, 0x00007f8f8f72f8e0]  64 bytes

  0x00007f8f8f72f8a0: mov    (%rsp),%rax
  0x00007f8f8f72f8a4: add    $0x10,%rsp
  0x00007f8f8f72f8a8: vcvtsi2sd %rax,%xmm0,%xmm0
  0x00007f8f8f72f8ad: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f8b2: inc    %r13
  0x00007f8f8f72f8b5: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72f8bf: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f8c3: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f72f8c8: add    %al,(%rax)
  0x00007f8f8f72f8ca: add    %al,(%rax)
  0x00007f8f8f72f8cc: add    %al,(%rax)
  0x00007f8f8f72f8ce: add    %al,(%rax)
  0x00007f8f8f72f8d0: add    %al,(%rax)
  0x00007f8f8f72f8d2: add    %al,(%rax)
  0x00007f8f8f72f8d4: add    %al,(%rax)
  0x00007f8f8f72f8d6: add    %al,(%rax)
  0x00007f8f8f72f8d8: add    %al,(%rax)
  0x00007f8f8f72f8da: add    %al,(%rax)
  0x00007f8f8f72f8dc: add    %al,(%rax)
  0x00007f8f8f72f8de: add    %al,(%rax)

----------------------------------------------------------------------
f2i  139 f2i  [0x00007f8f8f72f900, 0x00007f8f8f72f960]  96 bytes

  0x00007f8f8f72f900: vmovss (%rsp),%xmm0
  0x00007f8f8f72f905: add    $0x8,%rsp
  0x00007f8f8f72f909: vcvttss2si %xmm0,%eax
  0x00007f8f8f72f90d: cmp    $0x80000000,%eax
  0x00007f8f8f72f913: jne    0x00007f8f8f72f93c
  0x00007f8f8f72f919: test   $0xf,%esp
  0x00007f8f8f72f91f: je     0x00007f8f8f72f937
  0x00007f8f8f72f925: sub    $0x8,%rsp
  0x00007f8f8f72f929: callq  0x00007f8fad48bb20 = SharedRuntime::f2i(float)
  0x00007f8f8f72f92e: add    $0x8,%rsp
  0x00007f8f8f72f932: jmpq   0x00007f8f8f72f93c
  0x00007f8f8f72f937: callq  0x00007f8fad48bb20 = SharedRuntime::f2i(float)
  0x00007f8f8f72f93c: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f941: inc    %r13
  0x00007f8f8f72f944: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72f94e: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f952: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f72f958: add    %al,(%rax)
  0x00007f8f8f72f95a: add    %al,(%rax)
  0x00007f8f8f72f95c: add    %al,(%rax)
  0x00007f8f8f72f95e: add    %al,(%rax)

----------------------------------------------------------------------
f2l  140 f2l  [0x00007f8f8f72f980, 0x00007f8f8f72f9e0]  96 bytes

  0x00007f8f8f72f980: vmovss (%rsp),%xmm0
  0x00007f8f8f72f985: add    $0x8,%rsp
  0x00007f8f8f72f989: vcvttss2si %xmm0,%rax
  0x00007f8f8f72f98e: cmp    0x1df7c59b(%rip),%rax        # 0x00007f8fad6abf30
  0x00007f8f8f72f995: jne    0x00007f8f8f72f9be
  0x00007f8f8f72f99b: test   $0xf,%esp
  0x00007f8f8f72f9a1: je     0x00007f8f8f72f9b9
  0x00007f8f8f72f9a7: sub    $0x8,%rsp
  0x00007f8f8f72f9ab: callq  0x00007f8fad48bb60 = SharedRuntime::f2l(float)
  0x00007f8f8f72f9b0: add    $0x8,%rsp
  0x00007f8f8f72f9b4: jmpq   0x00007f8f8f72f9be
  0x00007f8f8f72f9b9: callq  0x00007f8fad48bb60 = SharedRuntime::f2l(float)
  0x00007f8f8f72f9be: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72f9c3: inc    %r13
  0x00007f8f8f72f9c6: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72f9d0: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72f9d4: nopl   0x0(%rax)
  0x00007f8f8f72f9d8: add    %al,(%rax)
  0x00007f8f8f72f9da: add    %al,(%rax)
  0x00007f8f8f72f9dc: add    %al,(%rax)
  0x00007f8f8f72f9de: add    %al,(%rax)

----------------------------------------------------------------------
f2d  141 f2d  [0x00007f8f8f72fa00, 0x00007f8f8f72fa40]  64 bytes

  0x00007f8f8f72fa00: vmovss (%rsp),%xmm0
  0x00007f8f8f72fa05: add    $0x8,%rsp
  0x00007f8f8f72fa09: vcvtss2sd %xmm0,%xmm0,%xmm0
  0x00007f8f8f72fa0d: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72fa12: inc    %r13
  0x00007f8f8f72fa15: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f72fa1f: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72fa23: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f72fa28: add    %al,(%rax)
  0x00007f8f8f72fa2a: add    %al,(%rax)
  0x00007f8f8f72fa2c: add    %al,(%rax)
  0x00007f8f8f72fa2e: add    %al,(%rax)
  0x00007f8f8f72fa30: add    %al,(%rax)
  0x00007f8f8f72fa32: add    %al,(%rax)
  0x00007f8f8f72fa34: add    %al,(%rax)
  0x00007f8f8f72fa36: add    %al,(%rax)
  0x00007f8f8f72fa38: add    %al,(%rax)
  0x00007f8f8f72fa3a: add    %al,(%rax)
  0x00007f8f8f72fa3c: add    %al,(%rax)
  0x00007f8f8f72fa3e: add    %al,(%rax)

----------------------------------------------------------------------
d2i  142 d2i  [0x00007f8f8f72fa60, 0x00007f8f8f72fac0]  96 bytes

  0x00007f8f8f72fa60: vmovsd (%rsp),%xmm0
  0x00007f8f8f72fa65: add    $0x10,%rsp
  0x00007f8f8f72fa69: vcvttsd2si %xmm0,%eax
  0x00007f8f8f72fa6d: cmp    $0x80000000,%eax
  0x00007f8f8f72fa73: jne    0x00007f8f8f72fa9c
  0x00007f8f8f72fa79: test   $0xf,%esp
  0x00007f8f8f72fa7f: je     0x00007f8f8f72fa97
  0x00007f8f8f72fa85: sub    $0x8,%rsp
  0x00007f8f8f72fa89: callq  0x00007f8fad48bbb0 = SharedRuntime::d2i(double)
  0x00007f8f8f72fa8e: add    $0x8,%rsp
  0x00007f8f8f72fa92: jmpq   0x00007f8f8f72fa9c
  0x00007f8f8f72fa97: callq  0x00007f8fad48bbb0 = SharedRuntime::d2i(double)
  0x00007f8f8f72fa9c: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72faa1: inc    %r13
  0x00007f8f8f72faa4: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72faae: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72fab2: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f72fab8: add    %al,(%rax)
  0x00007f8f8f72faba: add    %al,(%rax)
  0x00007f8f8f72fabc: add    %al,(%rax)
  0x00007f8f8f72fabe: add    %al,(%rax)

----------------------------------------------------------------------
d2l  143 d2l  [0x00007f8f8f72fae0, 0x00007f8f8f72fb40]  96 bytes

  0x00007f8f8f72fae0: vmovsd (%rsp),%xmm0
  0x00007f8f8f72fae5: add    $0x10,%rsp
  0x00007f8f8f72fae9: vcvttsd2si %xmm0,%rax
  0x00007f8f8f72faee: cmp    0x1df7c43b(%rip),%rax        # 0x00007f8fad6abf30
  0x00007f8f8f72faf5: jne    0x00007f8f8f72fb1e
  0x00007f8f8f72fafb: test   $0xf,%esp
  0x00007f8f8f72fb01: je     0x00007f8f8f72fb19
  0x00007f8f8f72fb07: sub    $0x8,%rsp
  0x00007f8f8f72fb0b: callq  0x00007f8fad48bbf0 = SharedRuntime::d2l(double)
  0x00007f8f8f72fb10: add    $0x8,%rsp
  0x00007f8f8f72fb14: jmpq   0x00007f8f8f72fb1e
  0x00007f8f8f72fb19: callq  0x00007f8fad48bbf0 = SharedRuntime::d2l(double)
  0x00007f8f8f72fb1e: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72fb23: inc    %r13
  0x00007f8f8f72fb26: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f72fb30: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72fb34: nopl   0x0(%rax)
  0x00007f8f8f72fb38: add    %al,(%rax)
  0x00007f8f8f72fb3a: add    %al,(%rax)
  0x00007f8f8f72fb3c: add    %al,(%rax)
  0x00007f8f8f72fb3e: add    %al,(%rax)

----------------------------------------------------------------------
d2f  144 d2f  [0x00007f8f8f72fb60, 0x00007f8f8f72fba0]  64 bytes

  0x00007f8f8f72fb60: vmovsd (%rsp),%xmm0
  0x00007f8f8f72fb65: add    $0x10,%rsp
  0x00007f8f8f72fb69: vcvtsd2ss %xmm0,%xmm0,%xmm0
  0x00007f8f8f72fb6d: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72fb72: inc    %r13
  0x00007f8f8f72fb75: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f72fb7f: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72fb83: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f72fb88: add    %al,(%rax)
  0x00007f8f8f72fb8a: add    %al,(%rax)
  0x00007f8f8f72fb8c: add    %al,(%rax)
  0x00007f8f8f72fb8e: add    %al,(%rax)
  0x00007f8f8f72fb90: add    %al,(%rax)
  0x00007f8f8f72fb92: add    %al,(%rax)
  0x00007f8f8f72fb94: add    %al,(%rax)
  0x00007f8f8f72fb96: add    %al,(%rax)
  0x00007f8f8f72fb98: add    %al,(%rax)
  0x00007f8f8f72fb9a: add    %al,(%rax)
  0x00007f8f8f72fb9c: add    %al,(%rax)
  0x00007f8f8f72fb9e: add    %al,(%rax)

----------------------------------------------------------------------
i2b  145 i2b  [0x00007f8f8f72fbc0, 0x00007f8f8f72fbe0]  32 bytes

  0x00007f8f8f72fbc0: mov    (%rsp),%eax
  0x00007f8f8f72fbc3: add    $0x8,%rsp
  0x00007f8f8f72fbc7: movsbl %al,%eax
  0x00007f8f8f72fbca: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72fbcf: inc    %r13
  0x00007f8f8f72fbd2: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72fbdc: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
i2c  146 i2c  [0x00007f8f8f72fc00, 0x00007f8f8f72fc20]  32 bytes

  0x00007f8f8f72fc00: mov    (%rsp),%eax
  0x00007f8f8f72fc03: add    $0x8,%rsp
  0x00007f8f8f72fc07: movzwl %ax,%eax
  0x00007f8f8f72fc0a: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72fc0f: inc    %r13
  0x00007f8f8f72fc12: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72fc1c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
i2s  147 i2s  [0x00007f8f8f72fc40, 0x00007f8f8f72fc60]  32 bytes

  0x00007f8f8f72fc40: mov    (%rsp),%eax
  0x00007f8f8f72fc43: add    $0x8,%rsp
  0x00007f8f8f72fc47: movswl %ax,%eax
  0x00007f8f8f72fc4a: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72fc4f: inc    %r13
  0x00007f8f8f72fc52: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72fc5c: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
lcmp  148 lcmp  [0x00007f8f8f72fc80, 0x00007f8f8f72fcc0]  64 bytes

  0x00007f8f8f72fc80: mov    (%rsp),%rax
  0x00007f8f8f72fc84: add    $0x10,%rsp
  0x00007f8f8f72fc88: mov    (%rsp),%rdx
  0x00007f8f8f72fc8c: add    $0x10,%rsp
  0x00007f8f8f72fc90: cmp    %rax,%rdx
  0x00007f8f8f72fc93: mov    $0xffffffff,%eax
  0x00007f8f8f72fc98: jl     0x00007f8f8f72fca0
  0x00007f8f8f72fc9a: setne  %al
  0x00007f8f8f72fc9d: movzbl %al,%eax
  0x00007f8f8f72fca0: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72fca5: inc    %r13
  0x00007f8f8f72fca8: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72fcb2: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72fcb6: xchg   %ax,%ax
  0x00007f8f8f72fcb8: add    %al,(%rax)
  0x00007f8f8f72fcba: add    %al,(%rax)
  0x00007f8f8f72fcbc: add    %al,(%rax)
  0x00007f8f8f72fcbe: add    %al,(%rax)

----------------------------------------------------------------------
fcmpl  149 fcmpl  [0x00007f8f8f72fce0, 0x00007f8f8f72fd20]  64 bytes

  0x00007f8f8f72fce0: vmovss (%rsp),%xmm0
  0x00007f8f8f72fce5: add    $0x8,%rsp
  0x00007f8f8f72fce9: vmovss (%rsp),%xmm1
  0x00007f8f8f72fcee: add    $0x8,%rsp
  0x00007f8f8f72fcf2: vucomiss %xmm0,%xmm1
  0x00007f8f8f72fcf6: mov    $0xffffffff,%eax
  0x00007f8f8f72fcfb: jp     0x00007f8f8f72fd05
  0x00007f8f8f72fcfd: jb     0x00007f8f8f72fd05
  0x00007f8f8f72fcff: setne  %dl
  0x00007f8f8f72fd02: movzbl %dl,%eax
  0x00007f8f8f72fd05: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72fd0a: inc    %r13
  0x00007f8f8f72fd0d: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72fd17: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72fd1b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fcmpg  150 fcmpg  [0x00007f8f8f72fd40, 0x00007f8f8f72fd80]  64 bytes

  0x00007f8f8f72fd40: vmovss (%rsp),%xmm0
  0x00007f8f8f72fd45: add    $0x8,%rsp
  0x00007f8f8f72fd49: vmovss (%rsp),%xmm1
  0x00007f8f8f72fd4e: add    $0x8,%rsp
  0x00007f8f8f72fd52: vucomiss %xmm0,%xmm1
  0x00007f8f8f72fd56: mov    $0x1,%eax
  0x00007f8f8f72fd5b: jp     0x00007f8f8f72fd68
  0x00007f8f8f72fd5d: ja     0x00007f8f8f72fd68
  0x00007f8f8f72fd5f: mov    $0x0,%eax
  0x00007f8f8f72fd64: je     0x00007f8f8f72fd68
  0x00007f8f8f72fd66: dec    %eax
  0x00007f8f8f72fd68: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72fd6d: inc    %r13
  0x00007f8f8f72fd70: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72fd7a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72fd7e: xchg   %ax,%ax

----------------------------------------------------------------------
dcmpl  151 dcmpl  [0x00007f8f8f72fda0, 0x00007f8f8f72fde0]  64 bytes

  0x00007f8f8f72fda0: vmovsd (%rsp),%xmm0
  0x00007f8f8f72fda5: add    $0x10,%rsp
  0x00007f8f8f72fda9: vmovsd (%rsp),%xmm1
  0x00007f8f8f72fdae: add    $0x10,%rsp
  0x00007f8f8f72fdb2: vucomisd %xmm0,%xmm1
  0x00007f8f8f72fdb6: mov    $0xffffffff,%eax
  0x00007f8f8f72fdbb: jp     0x00007f8f8f72fdc5
  0x00007f8f8f72fdbd: jb     0x00007f8f8f72fdc5
  0x00007f8f8f72fdbf: setne  %dl
  0x00007f8f8f72fdc2: movzbl %dl,%eax
  0x00007f8f8f72fdc5: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72fdca: inc    %r13
  0x00007f8f8f72fdcd: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72fdd7: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72fddb: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
dcmpg  152 dcmpg  [0x00007f8f8f72fe00, 0x00007f8f8f72fe40]  64 bytes

  0x00007f8f8f72fe00: vmovsd (%rsp),%xmm0
  0x00007f8f8f72fe05: add    $0x10,%rsp
  0x00007f8f8f72fe09: vmovsd (%rsp),%xmm1
  0x00007f8f8f72fe0e: add    $0x10,%rsp
  0x00007f8f8f72fe12: vucomisd %xmm0,%xmm1
  0x00007f8f8f72fe16: mov    $0x1,%eax
  0x00007f8f8f72fe1b: jp     0x00007f8f8f72fe28
  0x00007f8f8f72fe1d: ja     0x00007f8f8f72fe28
  0x00007f8f8f72fe1f: mov    $0x0,%eax
  0x00007f8f8f72fe24: je     0x00007f8f8f72fe28
  0x00007f8f8f72fe26: dec    %eax
  0x00007f8f8f72fe28: movzbl 0x1(%r13),%ebx
  0x00007f8f8f72fe2d: inc    %r13
  0x00007f8f8f72fe30: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f72fe3a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72fe3e: xchg   %ax,%ax

----------------------------------------------------------------------
ifeq  153 ifeq  [0x00007f8f8f72fe60, 0x00007f8f8f730280]  1056 bytes

  0x00007f8f8f72fe60: mov    (%rsp),%eax
  0x00007f8f8f72fe63: add    $0x8,%rsp
  0x00007f8f8f72fe67: test   %eax,%eax
  0x00007f8f8f72fe69: jne    0x00007f8f8f730237
  0x00007f8f8f72fe6f: mov    -0x18(%rbp),%rcx
  0x00007f8f8f72fe73: mov    -0x28(%rbp),%rax
  0x00007f8f8f72fe77: test   %rax,%rax
  0x00007f8f8f72fe7a: je     0x00007f8f8f72fe98
  0x00007f8f8f72fe80: mov    0x8(%rax),%rbx
  0x00007f8f8f72fe84: add    $0x1,%rbx
  0x00007f8f8f72fe88: sbb    $0x0,%rbx
  0x00007f8f8f72fe8c: mov    %rbx,0x8(%rax)
  0x00007f8f8f72fe90: add    0x10(%rax),%rax
  0x00007f8f8f72fe94: mov    %rax,-0x28(%rbp)
  0x00007f8f8f72fe98: movswl 0x1(%r13),%edx
  0x00007f8f8f72fe9d: bswap  %edx
  0x00007f8f8f72fe9f: sar    $0x10,%edx
  0x00007f8f8f72fea2: movslq %edx,%rdx
  0x00007f8f8f72fea5: add    %rdx,%r13
  0x00007f8f8f72fea8: test   %edx,%edx
  0x00007f8f8f72feaa: jns    0x00007f8f8f72ffac
  0x00007f8f8f72feb0: mov    0x18(%rcx),%rax
  0x00007f8f8f72feb4: test   %rax,%rax
  0x00007f8f8f72feb7: jne    0x00007f8f8f72ff6d
  0x00007f8f8f72febd: push   %rdx
  0x00007f8f8f72febe: push   %rcx
  0x00007f8f8f72febf: callq  0x00007f8f8f72fec9
  0x00007f8f8f72fec4: jmpq   0x00007f8f8f72ff5e
  0x00007f8f8f72fec9: mov    %rcx,%rsi
  0x00007f8f8f72fecc: lea    0x8(%rsp),%rax
  0x00007f8f8f72fed1: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72fed5: mov    %r15,%rdi
  0x00007f8f8f72fed8: vzeroupper 
  0x00007f8f8f72fedb: mov    %rbp,0x330(%r15)
  0x00007f8f8f72fee2: mov    %rax,0x320(%r15)
  0x00007f8f8f72fee9: test   $0xf,%esp
  0x00007f8f8f72feef: je     0x00007f8f8f72ff07
  0x00007f8f8f72fef5: sub    $0x8,%rsp
  0x00007f8f8f72fef9: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f72fefe: add    $0x8,%rsp
  0x00007f8f8f72ff02: jmpq   0x00007f8f8f72ff0c
  0x00007f8f8f72ff07: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f72ff0c: movabs $0x0,%r10
  0x00007f8f8f72ff16: mov    %r10,0x320(%r15)
  0x00007f8f8f72ff1d: movabs $0x0,%r10
  0x00007f8f8f72ff27: mov    %r10,0x330(%r15)
  0x00007f8f8f72ff2e: movabs $0x0,%r10
  0x00007f8f8f72ff38: mov    %r10,0x328(%r15)
  0x00007f8f8f72ff3f: vzeroupper 
  0x00007f8f8f72ff42: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f72ff4a: je     0x00007f8f8f72ff55
  0x00007f8f8f72ff50: jmpq   0x00007f8f8f71a780
  0x00007f8f8f72ff55: mov    -0x40(%rbp),%r13
  0x00007f8f8f72ff59: mov    -0x38(%rbp),%r14
  0x00007f8f8f72ff5d: retq   
  0x00007f8f8f72ff5e: pop    %rcx
  0x00007f8f8f72ff5f: pop    %rdx
  0x00007f8f8f72ff60: mov    0x18(%rcx),%rax
  0x00007f8f8f72ff64: test   %rax,%rax
  0x00007f8f8f72ff67: je     0x00007f8f8f72ffac
  0x00007f8f8f72ff6d: mov    0x10(%rcx),%rbx
  0x00007f8f8f72ff71: test   %rbx,%rbx
  0x00007f8f8f72ff74: je     0x00007f8f8f72ff96
  0x00007f8f8f72ff76: mov    0x108(%rbx),%eax
  0x00007f8f8f72ff7c: add    $0x8,%eax
  0x00007f8f8f72ff7f: mov    %eax,0x108(%rbx)
  0x00007f8f8f72ff85: and    0x11c(%rbx),%eax
  0x00007f8f8f72ff8b: je     0x00007f8f8f7300c6
  0x00007f8f8f72ff91: jmpq   0x00007f8f8f72ffac
  0x00007f8f8f72ff96: mov    0x18(%rcx),%rcx
  0x00007f8f8f72ff9a: mov    0x1c(%rcx),%eax
  0x00007f8f8f72ff9d: add    $0x8,%eax
  0x00007f8f8f72ffa0: mov    %eax,0x1c(%rcx)
  0x00007f8f8f72ffa3: and    0x34(%rcx),%eax
  0x00007f8f8f72ffa6: je     0x00007f8f8f7300c6
  0x00007f8f8f72ffac: movzbl 0x0(%r13),%ebx
  0x00007f8f8f72ffb1: testb  $0x8,0x108(%r15)
  0x00007f8f8f72ffb9: je     0x00007f8f8f72ffc7
  0x00007f8f8f72ffbb: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f72ffc5: jmp    0x00007f8f8f72ffd1
  0x00007f8f8f72ffc7: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f72ffd1: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f72ffd5: callq  0x00007f8f8f72ffdf
  0x00007f8f8f72ffda: jmpq   0x00007f8f8f730071
  0x00007f8f8f72ffdf: lea    0x8(%rsp),%rax
  0x00007f8f8f72ffe4: mov    %r13,-0x40(%rbp)
  0x00007f8f8f72ffe8: mov    %r15,%rdi
  0x00007f8f8f72ffeb: vzeroupper 
  0x00007f8f8f72ffee: mov    %rbp,0x330(%r15)
  0x00007f8f8f72fff5: mov    %rax,0x320(%r15)
  0x00007f8f8f72fffc: test   $0xf,%esp
  0x00007f8f8f730002: je     0x00007f8f8f73001a
  0x00007f8f8f730008: sub    $0x8,%rsp
  0x00007f8f8f73000c: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f730011: add    $0x8,%rsp
  0x00007f8f8f730015: jmpq   0x00007f8f8f73001f
  0x00007f8f8f73001a: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73001f: movabs $0x0,%r10
  0x00007f8f8f730029: mov    %r10,0x320(%r15)
  0x00007f8f8f730030: movabs $0x0,%r10
  0x00007f8f8f73003a: mov    %r10,0x330(%r15)
  0x00007f8f8f730041: movabs $0x0,%r10
  0x00007f8f8f73004b: mov    %r10,0x328(%r15)
  0x00007f8f8f730052: vzeroupper 
  0x00007f8f8f730055: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73005d: je     0x00007f8f8f730068
  0x00007f8f8f730063: jmpq   0x00007f8f8f71a780
  0x00007f8f8f730068: mov    -0x40(%rbp),%r13
  0x00007f8f8f73006c: mov    -0x38(%rbp),%r14
  0x00007f8f8f730070: retq   
  0x00007f8f8f730071: push   %rax
  0x00007f8f8f730072: push   %rbx
  0x00007f8f8f730073: mov    -0x18(%rbp),%rbx
  0x00007f8f8f730077: mov    0x10(%rbx),%rax
  0x00007f8f8f73007b: test   %rax,%rax
  0x00007f8f8f73007e: je     0x00007f8f8f7300bb
  0x00007f8f8f730084: mov    %r13,%rsi
  0x00007f8f8f730087: mov    %rbx,%rdi
  0x00007f8f8f73008a: test   $0xf,%esp
  0x00007f8f8f730090: je     0x00007f8f8f7300a8
  0x00007f8f8f730096: sub    $0x8,%rsp
  0x00007f8f8f73009a: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f73009f: add    $0x8,%rsp
  0x00007f8f8f7300a3: jmpq   0x00007f8f8f7300ad
  0x00007f8f8f7300a8: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7300ad: mov    0x10(%rbx),%rbx
  0x00007f8f8f7300b1: add    $0x138,%rbx
  0x00007f8f8f7300b8: add    %rbx,%rax
  0x00007f8f8f7300bb: mov    %rax,-0x28(%rbp)
  0x00007f8f8f7300bf: pop    %rbx
  0x00007f8f8f7300c0: pop    %rax
  0x00007f8f8f7300c1: jmpq   0x00007f8f8f72ffac
  0x00007f8f8f7300c6: neg    %rdx
  0x00007f8f8f7300c9: add    %r13,%rdx
  0x00007f8f8f7300cc: callq  0x00007f8f8f7300d6
  0x00007f8f8f7300d1: jmpq   0x00007f8f8f73016b
  0x00007f8f8f7300d6: mov    %rdx,%rsi
  0x00007f8f8f7300d9: lea    0x8(%rsp),%rax
  0x00007f8f8f7300de: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7300e2: mov    %r15,%rdi
  0x00007f8f8f7300e5: vzeroupper 
  0x00007f8f8f7300e8: mov    %rbp,0x330(%r15)
  0x00007f8f8f7300ef: mov    %rax,0x320(%r15)
  0x00007f8f8f7300f6: test   $0xf,%esp
  0x00007f8f8f7300fc: je     0x00007f8f8f730114
  0x00007f8f8f730102: sub    $0x8,%rsp
  0x00007f8f8f730106: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f73010b: add    $0x8,%rsp
  0x00007f8f8f73010f: jmpq   0x00007f8f8f730119
  0x00007f8f8f730114: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f730119: movabs $0x0,%r10
  0x00007f8f8f730123: mov    %r10,0x320(%r15)
  0x00007f8f8f73012a: movabs $0x0,%r10
  0x00007f8f8f730134: mov    %r10,0x330(%r15)
  0x00007f8f8f73013b: movabs $0x0,%r10
  0x00007f8f8f730145: mov    %r10,0x328(%r15)
  0x00007f8f8f73014c: vzeroupper 
  0x00007f8f8f73014f: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f730157: je     0x00007f8f8f730162
  0x00007f8f8f73015d: jmpq   0x00007f8f8f71a780
  0x00007f8f8f730162: mov    -0x40(%rbp),%r13
  0x00007f8f8f730166: mov    -0x38(%rbp),%r14
  0x00007f8f8f73016a: retq   
  0x00007f8f8f73016b: test   %rax,%rax
  0x00007f8f8f73016e: je     0x00007f8f8f72ffac
  0x00007f8f8f730174: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f73017b: jne    0x00007f8f8f72ffac
  0x00007f8f8f730181: mov    %rax,%rbx
  0x00007f8f8f730184: callq  0x00007f8f8f73018e
  0x00007f8f8f730189: jmpq   0x00007f8f8f730220
  0x00007f8f8f73018e: lea    0x8(%rsp),%rax
  0x00007f8f8f730193: mov    %r13,-0x40(%rbp)
  0x00007f8f8f730197: mov    %r15,%rdi
  0x00007f8f8f73019a: vzeroupper 
  0x00007f8f8f73019d: mov    %rbp,0x330(%r15)
  0x00007f8f8f7301a4: mov    %rax,0x320(%r15)
  0x00007f8f8f7301ab: test   $0xf,%esp
  0x00007f8f8f7301b1: je     0x00007f8f8f7301c9
  0x00007f8f8f7301b7: sub    $0x8,%rsp
  0x00007f8f8f7301bb: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f7301c0: add    $0x8,%rsp
  0x00007f8f8f7301c4: jmpq   0x00007f8f8f7301ce
  0x00007f8f8f7301c9: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f7301ce: movabs $0x0,%r10
  0x00007f8f8f7301d8: mov    %r10,0x320(%r15)
  0x00007f8f8f7301df: movabs $0x0,%r10
  0x00007f8f8f7301e9: mov    %r10,0x330(%r15)
  0x00007f8f8f7301f0: movabs $0x0,%r10
  0x00007f8f8f7301fa: mov    %r10,0x328(%r15)
  0x00007f8f8f730201: vzeroupper 
  0x00007f8f8f730204: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73020c: je     0x00007f8f8f730217
  0x00007f8f8f730212: jmpq   0x00007f8f8f71a780
  0x00007f8f8f730217: mov    -0x40(%rbp),%r13
  0x00007f8f8f73021b: mov    -0x38(%rbp),%r14
  0x00007f8f8f73021f: retq   
  0x00007f8f8f730220: mov    %rax,%rsi
  0x00007f8f8f730223: mov    -0x8(%rbp),%rdx
  0x00007f8f8f730227: leaveq 
  0x00007f8f8f730228: pop    %rcx
  0x00007f8f8f730229: mov    %rdx,%rsp
  0x00007f8f8f73022c: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f730230: push   %rcx
  0x00007f8f8f730231: jmpq   *0x110(%rbx)
  0x00007f8f8f730237: mov    -0x28(%rbp),%rax
  0x00007f8f8f73023b: test   %rax,%rax
  0x00007f8f8f73023e: je     0x00007f8f8f730256
  0x00007f8f8f730244: addq   $0x1,0x18(%rax)
  0x00007f8f8f730249: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f73024e: add    $0x20,%rax
  0x00007f8f8f730252: mov    %rax,-0x28(%rbp)
  0x00007f8f8f730256: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73025b: add    $0x3,%r13
  0x00007f8f8f73025f: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f730269: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73026d: data16 xchg %ax,%ax
  0x00007f8f8f730270: add    %al,(%rax)
  0x00007f8f8f730272: add    %al,(%rax)
  0x00007f8f8f730274: add    %al,(%rax)
  0x00007f8f8f730276: add    %al,(%rax)
  0x00007f8f8f730278: add    %al,(%rax)
  0x00007f8f8f73027a: add    %al,(%rax)
  0x00007f8f8f73027c: add    %al,(%rax)
  0x00007f8f8f73027e: add    %al,(%rax)

----------------------------------------------------------------------
ifne  154 ifne  [0x00007f8f8f7302a0, 0x00007f8f8f7306c0]  1056 bytes

  0x00007f8f8f7302a0: mov    (%rsp),%eax
  0x00007f8f8f7302a3: add    $0x8,%rsp
  0x00007f8f8f7302a7: test   %eax,%eax
  0x00007f8f8f7302a9: je     0x00007f8f8f730677
  0x00007f8f8f7302af: mov    -0x18(%rbp),%rcx
  0x00007f8f8f7302b3: mov    -0x28(%rbp),%rax
  0x00007f8f8f7302b7: test   %rax,%rax
  0x00007f8f8f7302ba: je     0x00007f8f8f7302d8
  0x00007f8f8f7302c0: mov    0x8(%rax),%rbx
  0x00007f8f8f7302c4: add    $0x1,%rbx
  0x00007f8f8f7302c8: sbb    $0x0,%rbx
  0x00007f8f8f7302cc: mov    %rbx,0x8(%rax)
  0x00007f8f8f7302d0: add    0x10(%rax),%rax
  0x00007f8f8f7302d4: mov    %rax,-0x28(%rbp)
  0x00007f8f8f7302d8: movswl 0x1(%r13),%edx
  0x00007f8f8f7302dd: bswap  %edx
  0x00007f8f8f7302df: sar    $0x10,%edx
  0x00007f8f8f7302e2: movslq %edx,%rdx
  0x00007f8f8f7302e5: add    %rdx,%r13
  0x00007f8f8f7302e8: test   %edx,%edx
  0x00007f8f8f7302ea: jns    0x00007f8f8f7303ec
  0x00007f8f8f7302f0: mov    0x18(%rcx),%rax
  0x00007f8f8f7302f4: test   %rax,%rax
  0x00007f8f8f7302f7: jne    0x00007f8f8f7303ad
  0x00007f8f8f7302fd: push   %rdx
  0x00007f8f8f7302fe: push   %rcx
  0x00007f8f8f7302ff: callq  0x00007f8f8f730309
  0x00007f8f8f730304: jmpq   0x00007f8f8f73039e
  0x00007f8f8f730309: mov    %rcx,%rsi
  0x00007f8f8f73030c: lea    0x8(%rsp),%rax
  0x00007f8f8f730311: mov    %r13,-0x40(%rbp)
  0x00007f8f8f730315: mov    %r15,%rdi
  0x00007f8f8f730318: vzeroupper 
  0x00007f8f8f73031b: mov    %rbp,0x330(%r15)
  0x00007f8f8f730322: mov    %rax,0x320(%r15)
  0x00007f8f8f730329: test   $0xf,%esp
  0x00007f8f8f73032f: je     0x00007f8f8f730347
  0x00007f8f8f730335: sub    $0x8,%rsp
  0x00007f8f8f730339: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f73033e: add    $0x8,%rsp
  0x00007f8f8f730342: jmpq   0x00007f8f8f73034c
  0x00007f8f8f730347: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f73034c: movabs $0x0,%r10
  0x00007f8f8f730356: mov    %r10,0x320(%r15)
  0x00007f8f8f73035d: movabs $0x0,%r10
  0x00007f8f8f730367: mov    %r10,0x330(%r15)
  0x00007f8f8f73036e: movabs $0x0,%r10
  0x00007f8f8f730378: mov    %r10,0x328(%r15)
  0x00007f8f8f73037f: vzeroupper 
  0x00007f8f8f730382: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73038a: je     0x00007f8f8f730395
  0x00007f8f8f730390: jmpq   0x00007f8f8f71a780
  0x00007f8f8f730395: mov    -0x40(%rbp),%r13
  0x00007f8f8f730399: mov    -0x38(%rbp),%r14
  0x00007f8f8f73039d: retq   
  0x00007f8f8f73039e: pop    %rcx
  0x00007f8f8f73039f: pop    %rdx
  0x00007f8f8f7303a0: mov    0x18(%rcx),%rax
  0x00007f8f8f7303a4: test   %rax,%rax
  0x00007f8f8f7303a7: je     0x00007f8f8f7303ec
  0x00007f8f8f7303ad: mov    0x10(%rcx),%rbx
  0x00007f8f8f7303b1: test   %rbx,%rbx
  0x00007f8f8f7303b4: je     0x00007f8f8f7303d6
  0x00007f8f8f7303b6: mov    0x108(%rbx),%eax
  0x00007f8f8f7303bc: add    $0x8,%eax
  0x00007f8f8f7303bf: mov    %eax,0x108(%rbx)
  0x00007f8f8f7303c5: and    0x11c(%rbx),%eax
  0x00007f8f8f7303cb: je     0x00007f8f8f730506
  0x00007f8f8f7303d1: jmpq   0x00007f8f8f7303ec
  0x00007f8f8f7303d6: mov    0x18(%rcx),%rcx
  0x00007f8f8f7303da: mov    0x1c(%rcx),%eax
  0x00007f8f8f7303dd: add    $0x8,%eax
  0x00007f8f8f7303e0: mov    %eax,0x1c(%rcx)
  0x00007f8f8f7303e3: and    0x34(%rcx),%eax
  0x00007f8f8f7303e6: je     0x00007f8f8f730506
  0x00007f8f8f7303ec: movzbl 0x0(%r13),%ebx
  0x00007f8f8f7303f1: testb  $0x8,0x108(%r15)
  0x00007f8f8f7303f9: je     0x00007f8f8f730407
  0x00007f8f8f7303fb: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f730405: jmp    0x00007f8f8f730411
  0x00007f8f8f730407: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f730411: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f730415: callq  0x00007f8f8f73041f
  0x00007f8f8f73041a: jmpq   0x00007f8f8f7304b1
  0x00007f8f8f73041f: lea    0x8(%rsp),%rax
  0x00007f8f8f730424: mov    %r13,-0x40(%rbp)
  0x00007f8f8f730428: mov    %r15,%rdi
  0x00007f8f8f73042b: vzeroupper 
  0x00007f8f8f73042e: mov    %rbp,0x330(%r15)
  0x00007f8f8f730435: mov    %rax,0x320(%r15)
  0x00007f8f8f73043c: test   $0xf,%esp
  0x00007f8f8f730442: je     0x00007f8f8f73045a
  0x00007f8f8f730448: sub    $0x8,%rsp
  0x00007f8f8f73044c: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f730451: add    $0x8,%rsp
  0x00007f8f8f730455: jmpq   0x00007f8f8f73045f
  0x00007f8f8f73045a: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73045f: movabs $0x0,%r10
  0x00007f8f8f730469: mov    %r10,0x320(%r15)
  0x00007f8f8f730470: movabs $0x0,%r10
  0x00007f8f8f73047a: mov    %r10,0x330(%r15)
  0x00007f8f8f730481: movabs $0x0,%r10
  0x00007f8f8f73048b: mov    %r10,0x328(%r15)
  0x00007f8f8f730492: vzeroupper 
  0x00007f8f8f730495: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73049d: je     0x00007f8f8f7304a8
  0x00007f8f8f7304a3: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7304a8: mov    -0x40(%rbp),%r13
  0x00007f8f8f7304ac: mov    -0x38(%rbp),%r14
  0x00007f8f8f7304b0: retq   
  0x00007f8f8f7304b1: push   %rax
  0x00007f8f8f7304b2: push   %rbx
  0x00007f8f8f7304b3: mov    -0x18(%rbp),%rbx
  0x00007f8f8f7304b7: mov    0x10(%rbx),%rax
  0x00007f8f8f7304bb: test   %rax,%rax
  0x00007f8f8f7304be: je     0x00007f8f8f7304fb
  0x00007f8f8f7304c4: mov    %r13,%rsi
  0x00007f8f8f7304c7: mov    %rbx,%rdi
  0x00007f8f8f7304ca: test   $0xf,%esp
  0x00007f8f8f7304d0: je     0x00007f8f8f7304e8
  0x00007f8f8f7304d6: sub    $0x8,%rsp
  0x00007f8f8f7304da: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7304df: add    $0x8,%rsp
  0x00007f8f8f7304e3: jmpq   0x00007f8f8f7304ed
  0x00007f8f8f7304e8: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7304ed: mov    0x10(%rbx),%rbx
  0x00007f8f8f7304f1: add    $0x138,%rbx
  0x00007f8f8f7304f8: add    %rbx,%rax
  0x00007f8f8f7304fb: mov    %rax,-0x28(%rbp)
  0x00007f8f8f7304ff: pop    %rbx
  0x00007f8f8f730500: pop    %rax
  0x00007f8f8f730501: jmpq   0x00007f8f8f7303ec
  0x00007f8f8f730506: neg    %rdx
  0x00007f8f8f730509: add    %r13,%rdx
  0x00007f8f8f73050c: callq  0x00007f8f8f730516
  0x00007f8f8f730511: jmpq   0x00007f8f8f7305ab
  0x00007f8f8f730516: mov    %rdx,%rsi
  0x00007f8f8f730519: lea    0x8(%rsp),%rax
  0x00007f8f8f73051e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f730522: mov    %r15,%rdi
  0x00007f8f8f730525: vzeroupper 
  0x00007f8f8f730528: mov    %rbp,0x330(%r15)
  0x00007f8f8f73052f: mov    %rax,0x320(%r15)
  0x00007f8f8f730536: test   $0xf,%esp
  0x00007f8f8f73053c: je     0x00007f8f8f730554
  0x00007f8f8f730542: sub    $0x8,%rsp
  0x00007f8f8f730546: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f73054b: add    $0x8,%rsp
  0x00007f8f8f73054f: jmpq   0x00007f8f8f730559
  0x00007f8f8f730554: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f730559: movabs $0x0,%r10
  0x00007f8f8f730563: mov    %r10,0x320(%r15)
  0x00007f8f8f73056a: movabs $0x0,%r10
  0x00007f8f8f730574: mov    %r10,0x330(%r15)
  0x00007f8f8f73057b: movabs $0x0,%r10
  0x00007f8f8f730585: mov    %r10,0x328(%r15)
  0x00007f8f8f73058c: vzeroupper 
  0x00007f8f8f73058f: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f730597: je     0x00007f8f8f7305a2
  0x00007f8f8f73059d: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7305a2: mov    -0x40(%rbp),%r13
  0x00007f8f8f7305a6: mov    -0x38(%rbp),%r14
  0x00007f8f8f7305aa: retq   
  0x00007f8f8f7305ab: test   %rax,%rax
  0x00007f8f8f7305ae: je     0x00007f8f8f7303ec
  0x00007f8f8f7305b4: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f7305bb: jne    0x00007f8f8f7303ec
  0x00007f8f8f7305c1: mov    %rax,%rbx
  0x00007f8f8f7305c4: callq  0x00007f8f8f7305ce
  0x00007f8f8f7305c9: jmpq   0x00007f8f8f730660
  0x00007f8f8f7305ce: lea    0x8(%rsp),%rax
  0x00007f8f8f7305d3: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7305d7: mov    %r15,%rdi
  0x00007f8f8f7305da: vzeroupper 
  0x00007f8f8f7305dd: mov    %rbp,0x330(%r15)
  0x00007f8f8f7305e4: mov    %rax,0x320(%r15)
  0x00007f8f8f7305eb: test   $0xf,%esp
  0x00007f8f8f7305f1: je     0x00007f8f8f730609
  0x00007f8f8f7305f7: sub    $0x8,%rsp
  0x00007f8f8f7305fb: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f730600: add    $0x8,%rsp
  0x00007f8f8f730604: jmpq   0x00007f8f8f73060e
  0x00007f8f8f730609: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f73060e: movabs $0x0,%r10
  0x00007f8f8f730618: mov    %r10,0x320(%r15)
  0x00007f8f8f73061f: movabs $0x0,%r10
  0x00007f8f8f730629: mov    %r10,0x330(%r15)
  0x00007f8f8f730630: movabs $0x0,%r10
  0x00007f8f8f73063a: mov    %r10,0x328(%r15)
  0x00007f8f8f730641: vzeroupper 
  0x00007f8f8f730644: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73064c: je     0x00007f8f8f730657
  0x00007f8f8f730652: jmpq   0x00007f8f8f71a780
  0x00007f8f8f730657: mov    -0x40(%rbp),%r13
  0x00007f8f8f73065b: mov    -0x38(%rbp),%r14
  0x00007f8f8f73065f: retq   
  0x00007f8f8f730660: mov    %rax,%rsi
  0x00007f8f8f730663: mov    -0x8(%rbp),%rdx
  0x00007f8f8f730667: leaveq 
  0x00007f8f8f730668: pop    %rcx
  0x00007f8f8f730669: mov    %rdx,%rsp
  0x00007f8f8f73066c: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f730670: push   %rcx
  0x00007f8f8f730671: jmpq   *0x110(%rbx)
  0x00007f8f8f730677: mov    -0x28(%rbp),%rax
  0x00007f8f8f73067b: test   %rax,%rax
  0x00007f8f8f73067e: je     0x00007f8f8f730696
  0x00007f8f8f730684: addq   $0x1,0x18(%rax)
  0x00007f8f8f730689: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f73068e: add    $0x20,%rax
  0x00007f8f8f730692: mov    %rax,-0x28(%rbp)
  0x00007f8f8f730696: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73069b: add    $0x3,%r13
  0x00007f8f8f73069f: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f7306a9: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7306ad: data16 xchg %ax,%ax
  0x00007f8f8f7306b0: add    %al,(%rax)
  0x00007f8f8f7306b2: add    %al,(%rax)
  0x00007f8f8f7306b4: add    %al,(%rax)
  0x00007f8f8f7306b6: add    %al,(%rax)
  0x00007f8f8f7306b8: add    %al,(%rax)
  0x00007f8f8f7306ba: add    %al,(%rax)
  0x00007f8f8f7306bc: add    %al,(%rax)
  0x00007f8f8f7306be: add    %al,(%rax)

----------------------------------------------------------------------
iflt  155 iflt  [0x00007f8f8f7306e0, 0x00007f8f8f730b00]  1056 bytes

  0x00007f8f8f7306e0: mov    (%rsp),%eax
  0x00007f8f8f7306e3: add    $0x8,%rsp
  0x00007f8f8f7306e7: test   %eax,%eax
  0x00007f8f8f7306e9: jge    0x00007f8f8f730ab7
  0x00007f8f8f7306ef: mov    -0x18(%rbp),%rcx
  0x00007f8f8f7306f3: mov    -0x28(%rbp),%rax
  0x00007f8f8f7306f7: test   %rax,%rax
  0x00007f8f8f7306fa: je     0x00007f8f8f730718
  0x00007f8f8f730700: mov    0x8(%rax),%rbx
  0x00007f8f8f730704: add    $0x1,%rbx
  0x00007f8f8f730708: sbb    $0x0,%rbx
  0x00007f8f8f73070c: mov    %rbx,0x8(%rax)
  0x00007f8f8f730710: add    0x10(%rax),%rax
  0x00007f8f8f730714: mov    %rax,-0x28(%rbp)
  0x00007f8f8f730718: movswl 0x1(%r13),%edx
  0x00007f8f8f73071d: bswap  %edx
  0x00007f8f8f73071f: sar    $0x10,%edx
  0x00007f8f8f730722: movslq %edx,%rdx
  0x00007f8f8f730725: add    %rdx,%r13
  0x00007f8f8f730728: test   %edx,%edx
  0x00007f8f8f73072a: jns    0x00007f8f8f73082c
  0x00007f8f8f730730: mov    0x18(%rcx),%rax
  0x00007f8f8f730734: test   %rax,%rax
  0x00007f8f8f730737: jne    0x00007f8f8f7307ed
  0x00007f8f8f73073d: push   %rdx
  0x00007f8f8f73073e: push   %rcx
  0x00007f8f8f73073f: callq  0x00007f8f8f730749
  0x00007f8f8f730744: jmpq   0x00007f8f8f7307de
  0x00007f8f8f730749: mov    %rcx,%rsi
  0x00007f8f8f73074c: lea    0x8(%rsp),%rax
  0x00007f8f8f730751: mov    %r13,-0x40(%rbp)
  0x00007f8f8f730755: mov    %r15,%rdi
  0x00007f8f8f730758: vzeroupper 
  0x00007f8f8f73075b: mov    %rbp,0x330(%r15)
  0x00007f8f8f730762: mov    %rax,0x320(%r15)
  0x00007f8f8f730769: test   $0xf,%esp
  0x00007f8f8f73076f: je     0x00007f8f8f730787
  0x00007f8f8f730775: sub    $0x8,%rsp
  0x00007f8f8f730779: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f73077e: add    $0x8,%rsp
  0x00007f8f8f730782: jmpq   0x00007f8f8f73078c
  0x00007f8f8f730787: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f73078c: movabs $0x0,%r10
  0x00007f8f8f730796: mov    %r10,0x320(%r15)
  0x00007f8f8f73079d: movabs $0x0,%r10
  0x00007f8f8f7307a7: mov    %r10,0x330(%r15)
  0x00007f8f8f7307ae: movabs $0x0,%r10
  0x00007f8f8f7307b8: mov    %r10,0x328(%r15)
  0x00007f8f8f7307bf: vzeroupper 
  0x00007f8f8f7307c2: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7307ca: je     0x00007f8f8f7307d5
  0x00007f8f8f7307d0: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7307d5: mov    -0x40(%rbp),%r13
  0x00007f8f8f7307d9: mov    -0x38(%rbp),%r14
  0x00007f8f8f7307dd: retq   
  0x00007f8f8f7307de: pop    %rcx
  0x00007f8f8f7307df: pop    %rdx
  0x00007f8f8f7307e0: mov    0x18(%rcx),%rax
  0x00007f8f8f7307e4: test   %rax,%rax
  0x00007f8f8f7307e7: je     0x00007f8f8f73082c
  0x00007f8f8f7307ed: mov    0x10(%rcx),%rbx
  0x00007f8f8f7307f1: test   %rbx,%rbx
  0x00007f8f8f7307f4: je     0x00007f8f8f730816
  0x00007f8f8f7307f6: mov    0x108(%rbx),%eax
  0x00007f8f8f7307fc: add    $0x8,%eax
  0x00007f8f8f7307ff: mov    %eax,0x108(%rbx)
  0x00007f8f8f730805: and    0x11c(%rbx),%eax
  0x00007f8f8f73080b: je     0x00007f8f8f730946
  0x00007f8f8f730811: jmpq   0x00007f8f8f73082c
  0x00007f8f8f730816: mov    0x18(%rcx),%rcx
  0x00007f8f8f73081a: mov    0x1c(%rcx),%eax
  0x00007f8f8f73081d: add    $0x8,%eax
  0x00007f8f8f730820: mov    %eax,0x1c(%rcx)
  0x00007f8f8f730823: and    0x34(%rcx),%eax
  0x00007f8f8f730826: je     0x00007f8f8f730946
  0x00007f8f8f73082c: movzbl 0x0(%r13),%ebx
  0x00007f8f8f730831: testb  $0x8,0x108(%r15)
  0x00007f8f8f730839: je     0x00007f8f8f730847
  0x00007f8f8f73083b: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f730845: jmp    0x00007f8f8f730851
  0x00007f8f8f730847: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f730851: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f730855: callq  0x00007f8f8f73085f
  0x00007f8f8f73085a: jmpq   0x00007f8f8f7308f1
  0x00007f8f8f73085f: lea    0x8(%rsp),%rax
  0x00007f8f8f730864: mov    %r13,-0x40(%rbp)
  0x00007f8f8f730868: mov    %r15,%rdi
  0x00007f8f8f73086b: vzeroupper 
  0x00007f8f8f73086e: mov    %rbp,0x330(%r15)
  0x00007f8f8f730875: mov    %rax,0x320(%r15)
  0x00007f8f8f73087c: test   $0xf,%esp
  0x00007f8f8f730882: je     0x00007f8f8f73089a
  0x00007f8f8f730888: sub    $0x8,%rsp
  0x00007f8f8f73088c: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f730891: add    $0x8,%rsp
  0x00007f8f8f730895: jmpq   0x00007f8f8f73089f
  0x00007f8f8f73089a: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73089f: movabs $0x0,%r10
  0x00007f8f8f7308a9: mov    %r10,0x320(%r15)
  0x00007f8f8f7308b0: movabs $0x0,%r10
  0x00007f8f8f7308ba: mov    %r10,0x330(%r15)
  0x00007f8f8f7308c1: movabs $0x0,%r10
  0x00007f8f8f7308cb: mov    %r10,0x328(%r15)
  0x00007f8f8f7308d2: vzeroupper 
  0x00007f8f8f7308d5: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7308dd: je     0x00007f8f8f7308e8
  0x00007f8f8f7308e3: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7308e8: mov    -0x40(%rbp),%r13
  0x00007f8f8f7308ec: mov    -0x38(%rbp),%r14
  0x00007f8f8f7308f0: retq   
  0x00007f8f8f7308f1: push   %rax
  0x00007f8f8f7308f2: push   %rbx
  0x00007f8f8f7308f3: mov    -0x18(%rbp),%rbx
  0x00007f8f8f7308f7: mov    0x10(%rbx),%rax
  0x00007f8f8f7308fb: test   %rax,%rax
  0x00007f8f8f7308fe: je     0x00007f8f8f73093b
  0x00007f8f8f730904: mov    %r13,%rsi
  0x00007f8f8f730907: mov    %rbx,%rdi
  0x00007f8f8f73090a: test   $0xf,%esp
  0x00007f8f8f730910: je     0x00007f8f8f730928
  0x00007f8f8f730916: sub    $0x8,%rsp
  0x00007f8f8f73091a: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f73091f: add    $0x8,%rsp
  0x00007f8f8f730923: jmpq   0x00007f8f8f73092d
  0x00007f8f8f730928: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f73092d: mov    0x10(%rbx),%rbx
  0x00007f8f8f730931: add    $0x138,%rbx
  0x00007f8f8f730938: add    %rbx,%rax
  0x00007f8f8f73093b: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73093f: pop    %rbx
  0x00007f8f8f730940: pop    %rax
  0x00007f8f8f730941: jmpq   0x00007f8f8f73082c
  0x00007f8f8f730946: neg    %rdx
  0x00007f8f8f730949: add    %r13,%rdx
  0x00007f8f8f73094c: callq  0x00007f8f8f730956
  0x00007f8f8f730951: jmpq   0x00007f8f8f7309eb
  0x00007f8f8f730956: mov    %rdx,%rsi
  0x00007f8f8f730959: lea    0x8(%rsp),%rax
  0x00007f8f8f73095e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f730962: mov    %r15,%rdi
  0x00007f8f8f730965: vzeroupper 
  0x00007f8f8f730968: mov    %rbp,0x330(%r15)
  0x00007f8f8f73096f: mov    %rax,0x320(%r15)
  0x00007f8f8f730976: test   $0xf,%esp
  0x00007f8f8f73097c: je     0x00007f8f8f730994
  0x00007f8f8f730982: sub    $0x8,%rsp
  0x00007f8f8f730986: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f73098b: add    $0x8,%rsp
  0x00007f8f8f73098f: jmpq   0x00007f8f8f730999
  0x00007f8f8f730994: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f730999: movabs $0x0,%r10
  0x00007f8f8f7309a3: mov    %r10,0x320(%r15)
  0x00007f8f8f7309aa: movabs $0x0,%r10
  0x00007f8f8f7309b4: mov    %r10,0x330(%r15)
  0x00007f8f8f7309bb: movabs $0x0,%r10
  0x00007f8f8f7309c5: mov    %r10,0x328(%r15)
  0x00007f8f8f7309cc: vzeroupper 
  0x00007f8f8f7309cf: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7309d7: je     0x00007f8f8f7309e2
  0x00007f8f8f7309dd: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7309e2: mov    -0x40(%rbp),%r13
  0x00007f8f8f7309e6: mov    -0x38(%rbp),%r14
  0x00007f8f8f7309ea: retq   
  0x00007f8f8f7309eb: test   %rax,%rax
  0x00007f8f8f7309ee: je     0x00007f8f8f73082c
  0x00007f8f8f7309f4: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f7309fb: jne    0x00007f8f8f73082c
  0x00007f8f8f730a01: mov    %rax,%rbx
  0x00007f8f8f730a04: callq  0x00007f8f8f730a0e
  0x00007f8f8f730a09: jmpq   0x00007f8f8f730aa0
  0x00007f8f8f730a0e: lea    0x8(%rsp),%rax
  0x00007f8f8f730a13: mov    %r13,-0x40(%rbp)
  0x00007f8f8f730a17: mov    %r15,%rdi
  0x00007f8f8f730a1a: vzeroupper 
  0x00007f8f8f730a1d: mov    %rbp,0x330(%r15)
  0x00007f8f8f730a24: mov    %rax,0x320(%r15)
  0x00007f8f8f730a2b: test   $0xf,%esp
  0x00007f8f8f730a31: je     0x00007f8f8f730a49
  0x00007f8f8f730a37: sub    $0x8,%rsp
  0x00007f8f8f730a3b: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f730a40: add    $0x8,%rsp
  0x00007f8f8f730a44: jmpq   0x00007f8f8f730a4e
  0x00007f8f8f730a49: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f730a4e: movabs $0x0,%r10
  0x00007f8f8f730a58: mov    %r10,0x320(%r15)
  0x00007f8f8f730a5f: movabs $0x0,%r10
  0x00007f8f8f730a69: mov    %r10,0x330(%r15)
  0x00007f8f8f730a70: movabs $0x0,%r10
  0x00007f8f8f730a7a: mov    %r10,0x328(%r15)
  0x00007f8f8f730a81: vzeroupper 
  0x00007f8f8f730a84: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f730a8c: je     0x00007f8f8f730a97
  0x00007f8f8f730a92: jmpq   0x00007f8f8f71a780
  0x00007f8f8f730a97: mov    -0x40(%rbp),%r13
  0x00007f8f8f730a9b: mov    -0x38(%rbp),%r14
  0x00007f8f8f730a9f: retq   
  0x00007f8f8f730aa0: mov    %rax,%rsi
  0x00007f8f8f730aa3: mov    -0x8(%rbp),%rdx
  0x00007f8f8f730aa7: leaveq 
  0x00007f8f8f730aa8: pop    %rcx
  0x00007f8f8f730aa9: mov    %rdx,%rsp
  0x00007f8f8f730aac: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f730ab0: push   %rcx
  0x00007f8f8f730ab1: jmpq   *0x110(%rbx)
  0x00007f8f8f730ab7: mov    -0x28(%rbp),%rax
  0x00007f8f8f730abb: test   %rax,%rax
  0x00007f8f8f730abe: je     0x00007f8f8f730ad6
  0x00007f8f8f730ac4: addq   $0x1,0x18(%rax)
  0x00007f8f8f730ac9: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f730ace: add    $0x20,%rax
  0x00007f8f8f730ad2: mov    %rax,-0x28(%rbp)
  0x00007f8f8f730ad6: movzbl 0x3(%r13),%ebx
  0x00007f8f8f730adb: add    $0x3,%r13
  0x00007f8f8f730adf: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f730ae9: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f730aed: data16 xchg %ax,%ax
  0x00007f8f8f730af0: add    %al,(%rax)
  0x00007f8f8f730af2: add    %al,(%rax)
  0x00007f8f8f730af4: add    %al,(%rax)
  0x00007f8f8f730af6: add    %al,(%rax)
  0x00007f8f8f730af8: add    %al,(%rax)
  0x00007f8f8f730afa: add    %al,(%rax)
  0x00007f8f8f730afc: add    %al,(%rax)
  0x00007f8f8f730afe: add    %al,(%rax)

----------------------------------------------------------------------
ifge  156 ifge  [0x00007f8f8f730b20, 0x00007f8f8f730f40]  1056 bytes

  0x00007f8f8f730b20: mov    (%rsp),%eax
  0x00007f8f8f730b23: add    $0x8,%rsp
  0x00007f8f8f730b27: test   %eax,%eax
  0x00007f8f8f730b29: jl     0x00007f8f8f730ef7
  0x00007f8f8f730b2f: mov    -0x18(%rbp),%rcx
  0x00007f8f8f730b33: mov    -0x28(%rbp),%rax
  0x00007f8f8f730b37: test   %rax,%rax
  0x00007f8f8f730b3a: je     0x00007f8f8f730b58
  0x00007f8f8f730b40: mov    0x8(%rax),%rbx
  0x00007f8f8f730b44: add    $0x1,%rbx
  0x00007f8f8f730b48: sbb    $0x0,%rbx
  0x00007f8f8f730b4c: mov    %rbx,0x8(%rax)
  0x00007f8f8f730b50: add    0x10(%rax),%rax
  0x00007f8f8f730b54: mov    %rax,-0x28(%rbp)
  0x00007f8f8f730b58: movswl 0x1(%r13),%edx
  0x00007f8f8f730b5d: bswap  %edx
  0x00007f8f8f730b5f: sar    $0x10,%edx
  0x00007f8f8f730b62: movslq %edx,%rdx
  0x00007f8f8f730b65: add    %rdx,%r13
  0x00007f8f8f730b68: test   %edx,%edx
  0x00007f8f8f730b6a: jns    0x00007f8f8f730c6c
  0x00007f8f8f730b70: mov    0x18(%rcx),%rax
  0x00007f8f8f730b74: test   %rax,%rax
  0x00007f8f8f730b77: jne    0x00007f8f8f730c2d
  0x00007f8f8f730b7d: push   %rdx
  0x00007f8f8f730b7e: push   %rcx
  0x00007f8f8f730b7f: callq  0x00007f8f8f730b89
  0x00007f8f8f730b84: jmpq   0x00007f8f8f730c1e
  0x00007f8f8f730b89: mov    %rcx,%rsi
  0x00007f8f8f730b8c: lea    0x8(%rsp),%rax
  0x00007f8f8f730b91: mov    %r13,-0x40(%rbp)
  0x00007f8f8f730b95: mov    %r15,%rdi
  0x00007f8f8f730b98: vzeroupper 
  0x00007f8f8f730b9b: mov    %rbp,0x330(%r15)
  0x00007f8f8f730ba2: mov    %rax,0x320(%r15)
  0x00007f8f8f730ba9: test   $0xf,%esp
  0x00007f8f8f730baf: je     0x00007f8f8f730bc7
  0x00007f8f8f730bb5: sub    $0x8,%rsp
  0x00007f8f8f730bb9: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f730bbe: add    $0x8,%rsp
  0x00007f8f8f730bc2: jmpq   0x00007f8f8f730bcc
  0x00007f8f8f730bc7: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f730bcc: movabs $0x0,%r10
  0x00007f8f8f730bd6: mov    %r10,0x320(%r15)
  0x00007f8f8f730bdd: movabs $0x0,%r10
  0x00007f8f8f730be7: mov    %r10,0x330(%r15)
  0x00007f8f8f730bee: movabs $0x0,%r10
  0x00007f8f8f730bf8: mov    %r10,0x328(%r15)
  0x00007f8f8f730bff: vzeroupper 
  0x00007f8f8f730c02: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f730c0a: je     0x00007f8f8f730c15
  0x00007f8f8f730c10: jmpq   0x00007f8f8f71a780
  0x00007f8f8f730c15: mov    -0x40(%rbp),%r13
  0x00007f8f8f730c19: mov    -0x38(%rbp),%r14
  0x00007f8f8f730c1d: retq   
  0x00007f8f8f730c1e: pop    %rcx
  0x00007f8f8f730c1f: pop    %rdx
  0x00007f8f8f730c20: mov    0x18(%rcx),%rax
  0x00007f8f8f730c24: test   %rax,%rax
  0x00007f8f8f730c27: je     0x00007f8f8f730c6c
  0x00007f8f8f730c2d: mov    0x10(%rcx),%rbx
  0x00007f8f8f730c31: test   %rbx,%rbx
  0x00007f8f8f730c34: je     0x00007f8f8f730c56
  0x00007f8f8f730c36: mov    0x108(%rbx),%eax
  0x00007f8f8f730c3c: add    $0x8,%eax
  0x00007f8f8f730c3f: mov    %eax,0x108(%rbx)
  0x00007f8f8f730c45: and    0x11c(%rbx),%eax
  0x00007f8f8f730c4b: je     0x00007f8f8f730d86
  0x00007f8f8f730c51: jmpq   0x00007f8f8f730c6c
  0x00007f8f8f730c56: mov    0x18(%rcx),%rcx
  0x00007f8f8f730c5a: mov    0x1c(%rcx),%eax
  0x00007f8f8f730c5d: add    $0x8,%eax
  0x00007f8f8f730c60: mov    %eax,0x1c(%rcx)
  0x00007f8f8f730c63: and    0x34(%rcx),%eax
  0x00007f8f8f730c66: je     0x00007f8f8f730d86
  0x00007f8f8f730c6c: movzbl 0x0(%r13),%ebx
  0x00007f8f8f730c71: testb  $0x8,0x108(%r15)
  0x00007f8f8f730c79: je     0x00007f8f8f730c87
  0x00007f8f8f730c7b: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f730c85: jmp    0x00007f8f8f730c91
  0x00007f8f8f730c87: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f730c91: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f730c95: callq  0x00007f8f8f730c9f
  0x00007f8f8f730c9a: jmpq   0x00007f8f8f730d31
  0x00007f8f8f730c9f: lea    0x8(%rsp),%rax
  0x00007f8f8f730ca4: mov    %r13,-0x40(%rbp)
  0x00007f8f8f730ca8: mov    %r15,%rdi
  0x00007f8f8f730cab: vzeroupper 
  0x00007f8f8f730cae: mov    %rbp,0x330(%r15)
  0x00007f8f8f730cb5: mov    %rax,0x320(%r15)
  0x00007f8f8f730cbc: test   $0xf,%esp
  0x00007f8f8f730cc2: je     0x00007f8f8f730cda
  0x00007f8f8f730cc8: sub    $0x8,%rsp
  0x00007f8f8f730ccc: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f730cd1: add    $0x8,%rsp
  0x00007f8f8f730cd5: jmpq   0x00007f8f8f730cdf
  0x00007f8f8f730cda: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f730cdf: movabs $0x0,%r10
  0x00007f8f8f730ce9: mov    %r10,0x320(%r15)
  0x00007f8f8f730cf0: movabs $0x0,%r10
  0x00007f8f8f730cfa: mov    %r10,0x330(%r15)
  0x00007f8f8f730d01: movabs $0x0,%r10
  0x00007f8f8f730d0b: mov    %r10,0x328(%r15)
  0x00007f8f8f730d12: vzeroupper 
  0x00007f8f8f730d15: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f730d1d: je     0x00007f8f8f730d28
  0x00007f8f8f730d23: jmpq   0x00007f8f8f71a780
  0x00007f8f8f730d28: mov    -0x40(%rbp),%r13
  0x00007f8f8f730d2c: mov    -0x38(%rbp),%r14
  0x00007f8f8f730d30: retq   
  0x00007f8f8f730d31: push   %rax
  0x00007f8f8f730d32: push   %rbx
  0x00007f8f8f730d33: mov    -0x18(%rbp),%rbx
  0x00007f8f8f730d37: mov    0x10(%rbx),%rax
  0x00007f8f8f730d3b: test   %rax,%rax
  0x00007f8f8f730d3e: je     0x00007f8f8f730d7b
  0x00007f8f8f730d44: mov    %r13,%rsi
  0x00007f8f8f730d47: mov    %rbx,%rdi
  0x00007f8f8f730d4a: test   $0xf,%esp
  0x00007f8f8f730d50: je     0x00007f8f8f730d68
  0x00007f8f8f730d56: sub    $0x8,%rsp
  0x00007f8f8f730d5a: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f730d5f: add    $0x8,%rsp
  0x00007f8f8f730d63: jmpq   0x00007f8f8f730d6d
  0x00007f8f8f730d68: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f730d6d: mov    0x10(%rbx),%rbx
  0x00007f8f8f730d71: add    $0x138,%rbx
  0x00007f8f8f730d78: add    %rbx,%rax
  0x00007f8f8f730d7b: mov    %rax,-0x28(%rbp)
  0x00007f8f8f730d7f: pop    %rbx
  0x00007f8f8f730d80: pop    %rax
  0x00007f8f8f730d81: jmpq   0x00007f8f8f730c6c
  0x00007f8f8f730d86: neg    %rdx
  0x00007f8f8f730d89: add    %r13,%rdx
  0x00007f8f8f730d8c: callq  0x00007f8f8f730d96
  0x00007f8f8f730d91: jmpq   0x00007f8f8f730e2b
  0x00007f8f8f730d96: mov    %rdx,%rsi
  0x00007f8f8f730d99: lea    0x8(%rsp),%rax
  0x00007f8f8f730d9e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f730da2: mov    %r15,%rdi
  0x00007f8f8f730da5: vzeroupper 
  0x00007f8f8f730da8: mov    %rbp,0x330(%r15)
  0x00007f8f8f730daf: mov    %rax,0x320(%r15)
  0x00007f8f8f730db6: test   $0xf,%esp
  0x00007f8f8f730dbc: je     0x00007f8f8f730dd4
  0x00007f8f8f730dc2: sub    $0x8,%rsp
  0x00007f8f8f730dc6: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f730dcb: add    $0x8,%rsp
  0x00007f8f8f730dcf: jmpq   0x00007f8f8f730dd9
  0x00007f8f8f730dd4: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f730dd9: movabs $0x0,%r10
  0x00007f8f8f730de3: mov    %r10,0x320(%r15)
  0x00007f8f8f730dea: movabs $0x0,%r10
  0x00007f8f8f730df4: mov    %r10,0x330(%r15)
  0x00007f8f8f730dfb: movabs $0x0,%r10
  0x00007f8f8f730e05: mov    %r10,0x328(%r15)
  0x00007f8f8f730e0c: vzeroupper 
  0x00007f8f8f730e0f: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f730e17: je     0x00007f8f8f730e22
  0x00007f8f8f730e1d: jmpq   0x00007f8f8f71a780
  0x00007f8f8f730e22: mov    -0x40(%rbp),%r13
  0x00007f8f8f730e26: mov    -0x38(%rbp),%r14
  0x00007f8f8f730e2a: retq   
  0x00007f8f8f730e2b: test   %rax,%rax
  0x00007f8f8f730e2e: je     0x00007f8f8f730c6c
  0x00007f8f8f730e34: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f730e3b: jne    0x00007f8f8f730c6c
  0x00007f8f8f730e41: mov    %rax,%rbx
  0x00007f8f8f730e44: callq  0x00007f8f8f730e4e
  0x00007f8f8f730e49: jmpq   0x00007f8f8f730ee0
  0x00007f8f8f730e4e: lea    0x8(%rsp),%rax
  0x00007f8f8f730e53: mov    %r13,-0x40(%rbp)
  0x00007f8f8f730e57: mov    %r15,%rdi
  0x00007f8f8f730e5a: vzeroupper 
  0x00007f8f8f730e5d: mov    %rbp,0x330(%r15)
  0x00007f8f8f730e64: mov    %rax,0x320(%r15)
  0x00007f8f8f730e6b: test   $0xf,%esp
  0x00007f8f8f730e71: je     0x00007f8f8f730e89
  0x00007f8f8f730e77: sub    $0x8,%rsp
  0x00007f8f8f730e7b: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f730e80: add    $0x8,%rsp
  0x00007f8f8f730e84: jmpq   0x00007f8f8f730e8e
  0x00007f8f8f730e89: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f730e8e: movabs $0x0,%r10
  0x00007f8f8f730e98: mov    %r10,0x320(%r15)
  0x00007f8f8f730e9f: movabs $0x0,%r10
  0x00007f8f8f730ea9: mov    %r10,0x330(%r15)
  0x00007f8f8f730eb0: movabs $0x0,%r10
  0x00007f8f8f730eba: mov    %r10,0x328(%r15)
  0x00007f8f8f730ec1: vzeroupper 
  0x00007f8f8f730ec4: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f730ecc: je     0x00007f8f8f730ed7
  0x00007f8f8f730ed2: jmpq   0x00007f8f8f71a780
  0x00007f8f8f730ed7: mov    -0x40(%rbp),%r13
  0x00007f8f8f730edb: mov    -0x38(%rbp),%r14
  0x00007f8f8f730edf: retq   
  0x00007f8f8f730ee0: mov    %rax,%rsi
  0x00007f8f8f730ee3: mov    -0x8(%rbp),%rdx
  0x00007f8f8f730ee7: leaveq 
  0x00007f8f8f730ee8: pop    %rcx
  0x00007f8f8f730ee9: mov    %rdx,%rsp
  0x00007f8f8f730eec: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f730ef0: push   %rcx
  0x00007f8f8f730ef1: jmpq   *0x110(%rbx)
  0x00007f8f8f730ef7: mov    -0x28(%rbp),%rax
  0x00007f8f8f730efb: test   %rax,%rax
  0x00007f8f8f730efe: je     0x00007f8f8f730f16
  0x00007f8f8f730f04: addq   $0x1,0x18(%rax)
  0x00007f8f8f730f09: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f730f0e: add    $0x20,%rax
  0x00007f8f8f730f12: mov    %rax,-0x28(%rbp)
  0x00007f8f8f730f16: movzbl 0x3(%r13),%ebx
  0x00007f8f8f730f1b: add    $0x3,%r13
  0x00007f8f8f730f1f: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f730f29: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f730f2d: data16 xchg %ax,%ax
  0x00007f8f8f730f30: add    %al,(%rax)
  0x00007f8f8f730f32: add    %al,(%rax)
  0x00007f8f8f730f34: add    %al,(%rax)
  0x00007f8f8f730f36: add    %al,(%rax)
  0x00007f8f8f730f38: add    %al,(%rax)
  0x00007f8f8f730f3a: add    %al,(%rax)
  0x00007f8f8f730f3c: add    %al,(%rax)
  0x00007f8f8f730f3e: add    %al,(%rax)

----------------------------------------------------------------------
ifgt  157 ifgt  [0x00007f8f8f730f60, 0x00007f8f8f731380]  1056 bytes

  0x00007f8f8f730f60: mov    (%rsp),%eax
  0x00007f8f8f730f63: add    $0x8,%rsp
  0x00007f8f8f730f67: test   %eax,%eax
  0x00007f8f8f730f69: jle    0x00007f8f8f731337
  0x00007f8f8f730f6f: mov    -0x18(%rbp),%rcx
  0x00007f8f8f730f73: mov    -0x28(%rbp),%rax
  0x00007f8f8f730f77: test   %rax,%rax
  0x00007f8f8f730f7a: je     0x00007f8f8f730f98
  0x00007f8f8f730f80: mov    0x8(%rax),%rbx
  0x00007f8f8f730f84: add    $0x1,%rbx
  0x00007f8f8f730f88: sbb    $0x0,%rbx
  0x00007f8f8f730f8c: mov    %rbx,0x8(%rax)
  0x00007f8f8f730f90: add    0x10(%rax),%rax
  0x00007f8f8f730f94: mov    %rax,-0x28(%rbp)
  0x00007f8f8f730f98: movswl 0x1(%r13),%edx
  0x00007f8f8f730f9d: bswap  %edx
  0x00007f8f8f730f9f: sar    $0x10,%edx
  0x00007f8f8f730fa2: movslq %edx,%rdx
  0x00007f8f8f730fa5: add    %rdx,%r13
  0x00007f8f8f730fa8: test   %edx,%edx
  0x00007f8f8f730faa: jns    0x00007f8f8f7310ac
  0x00007f8f8f730fb0: mov    0x18(%rcx),%rax
  0x00007f8f8f730fb4: test   %rax,%rax
  0x00007f8f8f730fb7: jne    0x00007f8f8f73106d
  0x00007f8f8f730fbd: push   %rdx
  0x00007f8f8f730fbe: push   %rcx
  0x00007f8f8f730fbf: callq  0x00007f8f8f730fc9
  0x00007f8f8f730fc4: jmpq   0x00007f8f8f73105e
  0x00007f8f8f730fc9: mov    %rcx,%rsi
  0x00007f8f8f730fcc: lea    0x8(%rsp),%rax
  0x00007f8f8f730fd1: mov    %r13,-0x40(%rbp)
  0x00007f8f8f730fd5: mov    %r15,%rdi
  0x00007f8f8f730fd8: vzeroupper 
  0x00007f8f8f730fdb: mov    %rbp,0x330(%r15)
  0x00007f8f8f730fe2: mov    %rax,0x320(%r15)
  0x00007f8f8f730fe9: test   $0xf,%esp
  0x00007f8f8f730fef: je     0x00007f8f8f731007
  0x00007f8f8f730ff5: sub    $0x8,%rsp
  0x00007f8f8f730ff9: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f730ffe: add    $0x8,%rsp
  0x00007f8f8f731002: jmpq   0x00007f8f8f73100c
  0x00007f8f8f731007: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f73100c: movabs $0x0,%r10
  0x00007f8f8f731016: mov    %r10,0x320(%r15)
  0x00007f8f8f73101d: movabs $0x0,%r10
  0x00007f8f8f731027: mov    %r10,0x330(%r15)
  0x00007f8f8f73102e: movabs $0x0,%r10
  0x00007f8f8f731038: mov    %r10,0x328(%r15)
  0x00007f8f8f73103f: vzeroupper 
  0x00007f8f8f731042: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73104a: je     0x00007f8f8f731055
  0x00007f8f8f731050: jmpq   0x00007f8f8f71a780
  0x00007f8f8f731055: mov    -0x40(%rbp),%r13
  0x00007f8f8f731059: mov    -0x38(%rbp),%r14
  0x00007f8f8f73105d: retq   
  0x00007f8f8f73105e: pop    %rcx
  0x00007f8f8f73105f: pop    %rdx
  0x00007f8f8f731060: mov    0x18(%rcx),%rax
  0x00007f8f8f731064: test   %rax,%rax
  0x00007f8f8f731067: je     0x00007f8f8f7310ac
  0x00007f8f8f73106d: mov    0x10(%rcx),%rbx
  0x00007f8f8f731071: test   %rbx,%rbx
  0x00007f8f8f731074: je     0x00007f8f8f731096
  0x00007f8f8f731076: mov    0x108(%rbx),%eax
  0x00007f8f8f73107c: add    $0x8,%eax
  0x00007f8f8f73107f: mov    %eax,0x108(%rbx)
  0x00007f8f8f731085: and    0x11c(%rbx),%eax
  0x00007f8f8f73108b: je     0x00007f8f8f7311c6
  0x00007f8f8f731091: jmpq   0x00007f8f8f7310ac
  0x00007f8f8f731096: mov    0x18(%rcx),%rcx
  0x00007f8f8f73109a: mov    0x1c(%rcx),%eax
  0x00007f8f8f73109d: add    $0x8,%eax
  0x00007f8f8f7310a0: mov    %eax,0x1c(%rcx)
  0x00007f8f8f7310a3: and    0x34(%rcx),%eax
  0x00007f8f8f7310a6: je     0x00007f8f8f7311c6
  0x00007f8f8f7310ac: movzbl 0x0(%r13),%ebx
  0x00007f8f8f7310b1: testb  $0x8,0x108(%r15)
  0x00007f8f8f7310b9: je     0x00007f8f8f7310c7
  0x00007f8f8f7310bb: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f7310c5: jmp    0x00007f8f8f7310d1
  0x00007f8f8f7310c7: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f7310d1: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7310d5: callq  0x00007f8f8f7310df
  0x00007f8f8f7310da: jmpq   0x00007f8f8f731171
  0x00007f8f8f7310df: lea    0x8(%rsp),%rax
  0x00007f8f8f7310e4: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7310e8: mov    %r15,%rdi
  0x00007f8f8f7310eb: vzeroupper 
  0x00007f8f8f7310ee: mov    %rbp,0x330(%r15)
  0x00007f8f8f7310f5: mov    %rax,0x320(%r15)
  0x00007f8f8f7310fc: test   $0xf,%esp
  0x00007f8f8f731102: je     0x00007f8f8f73111a
  0x00007f8f8f731108: sub    $0x8,%rsp
  0x00007f8f8f73110c: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f731111: add    $0x8,%rsp
  0x00007f8f8f731115: jmpq   0x00007f8f8f73111f
  0x00007f8f8f73111a: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73111f: movabs $0x0,%r10
  0x00007f8f8f731129: mov    %r10,0x320(%r15)
  0x00007f8f8f731130: movabs $0x0,%r10
  0x00007f8f8f73113a: mov    %r10,0x330(%r15)
  0x00007f8f8f731141: movabs $0x0,%r10
  0x00007f8f8f73114b: mov    %r10,0x328(%r15)
  0x00007f8f8f731152: vzeroupper 
  0x00007f8f8f731155: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73115d: je     0x00007f8f8f731168
  0x00007f8f8f731163: jmpq   0x00007f8f8f71a780
  0x00007f8f8f731168: mov    -0x40(%rbp),%r13
  0x00007f8f8f73116c: mov    -0x38(%rbp),%r14
  0x00007f8f8f731170: retq   
  0x00007f8f8f731171: push   %rax
  0x00007f8f8f731172: push   %rbx
  0x00007f8f8f731173: mov    -0x18(%rbp),%rbx
  0x00007f8f8f731177: mov    0x10(%rbx),%rax
  0x00007f8f8f73117b: test   %rax,%rax
  0x00007f8f8f73117e: je     0x00007f8f8f7311bb
  0x00007f8f8f731184: mov    %r13,%rsi
  0x00007f8f8f731187: mov    %rbx,%rdi
  0x00007f8f8f73118a: test   $0xf,%esp
  0x00007f8f8f731190: je     0x00007f8f8f7311a8
  0x00007f8f8f731196: sub    $0x8,%rsp
  0x00007f8f8f73119a: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f73119f: add    $0x8,%rsp
  0x00007f8f8f7311a3: jmpq   0x00007f8f8f7311ad
  0x00007f8f8f7311a8: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7311ad: mov    0x10(%rbx),%rbx
  0x00007f8f8f7311b1: add    $0x138,%rbx
  0x00007f8f8f7311b8: add    %rbx,%rax
  0x00007f8f8f7311bb: mov    %rax,-0x28(%rbp)
  0x00007f8f8f7311bf: pop    %rbx
  0x00007f8f8f7311c0: pop    %rax
  0x00007f8f8f7311c1: jmpq   0x00007f8f8f7310ac
  0x00007f8f8f7311c6: neg    %rdx
  0x00007f8f8f7311c9: add    %r13,%rdx
  0x00007f8f8f7311cc: callq  0x00007f8f8f7311d6
  0x00007f8f8f7311d1: jmpq   0x00007f8f8f73126b
  0x00007f8f8f7311d6: mov    %rdx,%rsi
  0x00007f8f8f7311d9: lea    0x8(%rsp),%rax
  0x00007f8f8f7311de: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7311e2: mov    %r15,%rdi
  0x00007f8f8f7311e5: vzeroupper 
  0x00007f8f8f7311e8: mov    %rbp,0x330(%r15)
  0x00007f8f8f7311ef: mov    %rax,0x320(%r15)
  0x00007f8f8f7311f6: test   $0xf,%esp
  0x00007f8f8f7311fc: je     0x00007f8f8f731214
  0x00007f8f8f731202: sub    $0x8,%rsp
  0x00007f8f8f731206: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f73120b: add    $0x8,%rsp
  0x00007f8f8f73120f: jmpq   0x00007f8f8f731219
  0x00007f8f8f731214: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f731219: movabs $0x0,%r10
  0x00007f8f8f731223: mov    %r10,0x320(%r15)
  0x00007f8f8f73122a: movabs $0x0,%r10
  0x00007f8f8f731234: mov    %r10,0x330(%r15)
  0x00007f8f8f73123b: movabs $0x0,%r10
  0x00007f8f8f731245: mov    %r10,0x328(%r15)
  0x00007f8f8f73124c: vzeroupper 
  0x00007f8f8f73124f: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f731257: je     0x00007f8f8f731262
  0x00007f8f8f73125d: jmpq   0x00007f8f8f71a780
  0x00007f8f8f731262: mov    -0x40(%rbp),%r13
  0x00007f8f8f731266: mov    -0x38(%rbp),%r14
  0x00007f8f8f73126a: retq   
  0x00007f8f8f73126b: test   %rax,%rax
  0x00007f8f8f73126e: je     0x00007f8f8f7310ac
  0x00007f8f8f731274: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f73127b: jne    0x00007f8f8f7310ac
  0x00007f8f8f731281: mov    %rax,%rbx
  0x00007f8f8f731284: callq  0x00007f8f8f73128e
  0x00007f8f8f731289: jmpq   0x00007f8f8f731320
  0x00007f8f8f73128e: lea    0x8(%rsp),%rax
  0x00007f8f8f731293: mov    %r13,-0x40(%rbp)
  0x00007f8f8f731297: mov    %r15,%rdi
  0x00007f8f8f73129a: vzeroupper 
  0x00007f8f8f73129d: mov    %rbp,0x330(%r15)
  0x00007f8f8f7312a4: mov    %rax,0x320(%r15)
  0x00007f8f8f7312ab: test   $0xf,%esp
  0x00007f8f8f7312b1: je     0x00007f8f8f7312c9
  0x00007f8f8f7312b7: sub    $0x8,%rsp
  0x00007f8f8f7312bb: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f7312c0: add    $0x8,%rsp
  0x00007f8f8f7312c4: jmpq   0x00007f8f8f7312ce
  0x00007f8f8f7312c9: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f7312ce: movabs $0x0,%r10
  0x00007f8f8f7312d8: mov    %r10,0x320(%r15)
  0x00007f8f8f7312df: movabs $0x0,%r10
  0x00007f8f8f7312e9: mov    %r10,0x330(%r15)
  0x00007f8f8f7312f0: movabs $0x0,%r10
  0x00007f8f8f7312fa: mov    %r10,0x328(%r15)
  0x00007f8f8f731301: vzeroupper 
  0x00007f8f8f731304: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73130c: je     0x00007f8f8f731317
  0x00007f8f8f731312: jmpq   0x00007f8f8f71a780
  0x00007f8f8f731317: mov    -0x40(%rbp),%r13
  0x00007f8f8f73131b: mov    -0x38(%rbp),%r14
  0x00007f8f8f73131f: retq   
  0x00007f8f8f731320: mov    %rax,%rsi
  0x00007f8f8f731323: mov    -0x8(%rbp),%rdx
  0x00007f8f8f731327: leaveq 
  0x00007f8f8f731328: pop    %rcx
  0x00007f8f8f731329: mov    %rdx,%rsp
  0x00007f8f8f73132c: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f731330: push   %rcx
  0x00007f8f8f731331: jmpq   *0x110(%rbx)
  0x00007f8f8f731337: mov    -0x28(%rbp),%rax
  0x00007f8f8f73133b: test   %rax,%rax
  0x00007f8f8f73133e: je     0x00007f8f8f731356
  0x00007f8f8f731344: addq   $0x1,0x18(%rax)
  0x00007f8f8f731349: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f73134e: add    $0x20,%rax
  0x00007f8f8f731352: mov    %rax,-0x28(%rbp)
  0x00007f8f8f731356: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73135b: add    $0x3,%r13
  0x00007f8f8f73135f: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f731369: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73136d: data16 xchg %ax,%ax
  0x00007f8f8f731370: add    %al,(%rax)
  0x00007f8f8f731372: add    %al,(%rax)
  0x00007f8f8f731374: add    %al,(%rax)
  0x00007f8f8f731376: add    %al,(%rax)
  0x00007f8f8f731378: add    %al,(%rax)
  0x00007f8f8f73137a: add    %al,(%rax)
  0x00007f8f8f73137c: add    %al,(%rax)
  0x00007f8f8f73137e: add    %al,(%rax)

----------------------------------------------------------------------
ifle  158 ifle  [0x00007f8f8f7313a0, 0x00007f8f8f7317c0]  1056 bytes

  0x00007f8f8f7313a0: mov    (%rsp),%eax
  0x00007f8f8f7313a3: add    $0x8,%rsp
  0x00007f8f8f7313a7: test   %eax,%eax
  0x00007f8f8f7313a9: jg     0x00007f8f8f731777
  0x00007f8f8f7313af: mov    -0x18(%rbp),%rcx
  0x00007f8f8f7313b3: mov    -0x28(%rbp),%rax
  0x00007f8f8f7313b7: test   %rax,%rax
  0x00007f8f8f7313ba: je     0x00007f8f8f7313d8
  0x00007f8f8f7313c0: mov    0x8(%rax),%rbx
  0x00007f8f8f7313c4: add    $0x1,%rbx
  0x00007f8f8f7313c8: sbb    $0x0,%rbx
  0x00007f8f8f7313cc: mov    %rbx,0x8(%rax)
  0x00007f8f8f7313d0: add    0x10(%rax),%rax
  0x00007f8f8f7313d4: mov    %rax,-0x28(%rbp)
  0x00007f8f8f7313d8: movswl 0x1(%r13),%edx
  0x00007f8f8f7313dd: bswap  %edx
  0x00007f8f8f7313df: sar    $0x10,%edx
  0x00007f8f8f7313e2: movslq %edx,%rdx
  0x00007f8f8f7313e5: add    %rdx,%r13
  0x00007f8f8f7313e8: test   %edx,%edx
  0x00007f8f8f7313ea: jns    0x00007f8f8f7314ec
  0x00007f8f8f7313f0: mov    0x18(%rcx),%rax
  0x00007f8f8f7313f4: test   %rax,%rax
  0x00007f8f8f7313f7: jne    0x00007f8f8f7314ad
  0x00007f8f8f7313fd: push   %rdx
  0x00007f8f8f7313fe: push   %rcx
  0x00007f8f8f7313ff: callq  0x00007f8f8f731409
  0x00007f8f8f731404: jmpq   0x00007f8f8f73149e
  0x00007f8f8f731409: mov    %rcx,%rsi
  0x00007f8f8f73140c: lea    0x8(%rsp),%rax
  0x00007f8f8f731411: mov    %r13,-0x40(%rbp)
  0x00007f8f8f731415: mov    %r15,%rdi
  0x00007f8f8f731418: vzeroupper 
  0x00007f8f8f73141b: mov    %rbp,0x330(%r15)
  0x00007f8f8f731422: mov    %rax,0x320(%r15)
  0x00007f8f8f731429: test   $0xf,%esp
  0x00007f8f8f73142f: je     0x00007f8f8f731447
  0x00007f8f8f731435: sub    $0x8,%rsp
  0x00007f8f8f731439: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f73143e: add    $0x8,%rsp
  0x00007f8f8f731442: jmpq   0x00007f8f8f73144c
  0x00007f8f8f731447: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f73144c: movabs $0x0,%r10
  0x00007f8f8f731456: mov    %r10,0x320(%r15)
  0x00007f8f8f73145d: movabs $0x0,%r10
  0x00007f8f8f731467: mov    %r10,0x330(%r15)
  0x00007f8f8f73146e: movabs $0x0,%r10
  0x00007f8f8f731478: mov    %r10,0x328(%r15)
  0x00007f8f8f73147f: vzeroupper 
  0x00007f8f8f731482: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73148a: je     0x00007f8f8f731495
  0x00007f8f8f731490: jmpq   0x00007f8f8f71a780
  0x00007f8f8f731495: mov    -0x40(%rbp),%r13
  0x00007f8f8f731499: mov    -0x38(%rbp),%r14
  0x00007f8f8f73149d: retq   
  0x00007f8f8f73149e: pop    %rcx
  0x00007f8f8f73149f: pop    %rdx
  0x00007f8f8f7314a0: mov    0x18(%rcx),%rax
  0x00007f8f8f7314a4: test   %rax,%rax
  0x00007f8f8f7314a7: je     0x00007f8f8f7314ec
  0x00007f8f8f7314ad: mov    0x10(%rcx),%rbx
  0x00007f8f8f7314b1: test   %rbx,%rbx
  0x00007f8f8f7314b4: je     0x00007f8f8f7314d6
  0x00007f8f8f7314b6: mov    0x108(%rbx),%eax
  0x00007f8f8f7314bc: add    $0x8,%eax
  0x00007f8f8f7314bf: mov    %eax,0x108(%rbx)
  0x00007f8f8f7314c5: and    0x11c(%rbx),%eax
  0x00007f8f8f7314cb: je     0x00007f8f8f731606
  0x00007f8f8f7314d1: jmpq   0x00007f8f8f7314ec
  0x00007f8f8f7314d6: mov    0x18(%rcx),%rcx
  0x00007f8f8f7314da: mov    0x1c(%rcx),%eax
  0x00007f8f8f7314dd: add    $0x8,%eax
  0x00007f8f8f7314e0: mov    %eax,0x1c(%rcx)
  0x00007f8f8f7314e3: and    0x34(%rcx),%eax
  0x00007f8f8f7314e6: je     0x00007f8f8f731606
  0x00007f8f8f7314ec: movzbl 0x0(%r13),%ebx
  0x00007f8f8f7314f1: testb  $0x8,0x108(%r15)
  0x00007f8f8f7314f9: je     0x00007f8f8f731507
  0x00007f8f8f7314fb: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f731505: jmp    0x00007f8f8f731511
  0x00007f8f8f731507: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f731511: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f731515: callq  0x00007f8f8f73151f
  0x00007f8f8f73151a: jmpq   0x00007f8f8f7315b1
  0x00007f8f8f73151f: lea    0x8(%rsp),%rax
  0x00007f8f8f731524: mov    %r13,-0x40(%rbp)
  0x00007f8f8f731528: mov    %r15,%rdi
  0x00007f8f8f73152b: vzeroupper 
  0x00007f8f8f73152e: mov    %rbp,0x330(%r15)
  0x00007f8f8f731535: mov    %rax,0x320(%r15)
  0x00007f8f8f73153c: test   $0xf,%esp
  0x00007f8f8f731542: je     0x00007f8f8f73155a
  0x00007f8f8f731548: sub    $0x8,%rsp
  0x00007f8f8f73154c: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f731551: add    $0x8,%rsp
  0x00007f8f8f731555: jmpq   0x00007f8f8f73155f
  0x00007f8f8f73155a: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73155f: movabs $0x0,%r10
  0x00007f8f8f731569: mov    %r10,0x320(%r15)
  0x00007f8f8f731570: movabs $0x0,%r10
  0x00007f8f8f73157a: mov    %r10,0x330(%r15)
  0x00007f8f8f731581: movabs $0x0,%r10
  0x00007f8f8f73158b: mov    %r10,0x328(%r15)
  0x00007f8f8f731592: vzeroupper 
  0x00007f8f8f731595: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73159d: je     0x00007f8f8f7315a8
  0x00007f8f8f7315a3: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7315a8: mov    -0x40(%rbp),%r13
  0x00007f8f8f7315ac: mov    -0x38(%rbp),%r14
  0x00007f8f8f7315b0: retq   
  0x00007f8f8f7315b1: push   %rax
  0x00007f8f8f7315b2: push   %rbx
  0x00007f8f8f7315b3: mov    -0x18(%rbp),%rbx
  0x00007f8f8f7315b7: mov    0x10(%rbx),%rax
  0x00007f8f8f7315bb: test   %rax,%rax
  0x00007f8f8f7315be: je     0x00007f8f8f7315fb
  0x00007f8f8f7315c4: mov    %r13,%rsi
  0x00007f8f8f7315c7: mov    %rbx,%rdi
  0x00007f8f8f7315ca: test   $0xf,%esp
  0x00007f8f8f7315d0: je     0x00007f8f8f7315e8
  0x00007f8f8f7315d6: sub    $0x8,%rsp
  0x00007f8f8f7315da: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7315df: add    $0x8,%rsp
  0x00007f8f8f7315e3: jmpq   0x00007f8f8f7315ed
  0x00007f8f8f7315e8: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7315ed: mov    0x10(%rbx),%rbx
  0x00007f8f8f7315f1: add    $0x138,%rbx
  0x00007f8f8f7315f8: add    %rbx,%rax
  0x00007f8f8f7315fb: mov    %rax,-0x28(%rbp)
  0x00007f8f8f7315ff: pop    %rbx
  0x00007f8f8f731600: pop    %rax
  0x00007f8f8f731601: jmpq   0x00007f8f8f7314ec
  0x00007f8f8f731606: neg    %rdx
  0x00007f8f8f731609: add    %r13,%rdx
  0x00007f8f8f73160c: callq  0x00007f8f8f731616
  0x00007f8f8f731611: jmpq   0x00007f8f8f7316ab
  0x00007f8f8f731616: mov    %rdx,%rsi
  0x00007f8f8f731619: lea    0x8(%rsp),%rax
  0x00007f8f8f73161e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f731622: mov    %r15,%rdi
  0x00007f8f8f731625: vzeroupper 
  0x00007f8f8f731628: mov    %rbp,0x330(%r15)
  0x00007f8f8f73162f: mov    %rax,0x320(%r15)
  0x00007f8f8f731636: test   $0xf,%esp
  0x00007f8f8f73163c: je     0x00007f8f8f731654
  0x00007f8f8f731642: sub    $0x8,%rsp
  0x00007f8f8f731646: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f73164b: add    $0x8,%rsp
  0x00007f8f8f73164f: jmpq   0x00007f8f8f731659
  0x00007f8f8f731654: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f731659: movabs $0x0,%r10
  0x00007f8f8f731663: mov    %r10,0x320(%r15)
  0x00007f8f8f73166a: movabs $0x0,%r10
  0x00007f8f8f731674: mov    %r10,0x330(%r15)
  0x00007f8f8f73167b: movabs $0x0,%r10
  0x00007f8f8f731685: mov    %r10,0x328(%r15)
  0x00007f8f8f73168c: vzeroupper 
  0x00007f8f8f73168f: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f731697: je     0x00007f8f8f7316a2
  0x00007f8f8f73169d: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7316a2: mov    -0x40(%rbp),%r13
  0x00007f8f8f7316a6: mov    -0x38(%rbp),%r14
  0x00007f8f8f7316aa: retq   
  0x00007f8f8f7316ab: test   %rax,%rax
  0x00007f8f8f7316ae: je     0x00007f8f8f7314ec
  0x00007f8f8f7316b4: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f7316bb: jne    0x00007f8f8f7314ec
  0x00007f8f8f7316c1: mov    %rax,%rbx
  0x00007f8f8f7316c4: callq  0x00007f8f8f7316ce
  0x00007f8f8f7316c9: jmpq   0x00007f8f8f731760
  0x00007f8f8f7316ce: lea    0x8(%rsp),%rax
  0x00007f8f8f7316d3: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7316d7: mov    %r15,%rdi
  0x00007f8f8f7316da: vzeroupper 
  0x00007f8f8f7316dd: mov    %rbp,0x330(%r15)
  0x00007f8f8f7316e4: mov    %rax,0x320(%r15)
  0x00007f8f8f7316eb: test   $0xf,%esp
  0x00007f8f8f7316f1: je     0x00007f8f8f731709
  0x00007f8f8f7316f7: sub    $0x8,%rsp
  0x00007f8f8f7316fb: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f731700: add    $0x8,%rsp
  0x00007f8f8f731704: jmpq   0x00007f8f8f73170e
  0x00007f8f8f731709: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f73170e: movabs $0x0,%r10
  0x00007f8f8f731718: mov    %r10,0x320(%r15)
  0x00007f8f8f73171f: movabs $0x0,%r10
  0x00007f8f8f731729: mov    %r10,0x330(%r15)
  0x00007f8f8f731730: movabs $0x0,%r10
  0x00007f8f8f73173a: mov    %r10,0x328(%r15)
  0x00007f8f8f731741: vzeroupper 
  0x00007f8f8f731744: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73174c: je     0x00007f8f8f731757
  0x00007f8f8f731752: jmpq   0x00007f8f8f71a780
  0x00007f8f8f731757: mov    -0x40(%rbp),%r13
  0x00007f8f8f73175b: mov    -0x38(%rbp),%r14
  0x00007f8f8f73175f: retq   
  0x00007f8f8f731760: mov    %rax,%rsi
  0x00007f8f8f731763: mov    -0x8(%rbp),%rdx
  0x00007f8f8f731767: leaveq 
  0x00007f8f8f731768: pop    %rcx
  0x00007f8f8f731769: mov    %rdx,%rsp
  0x00007f8f8f73176c: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f731770: push   %rcx
  0x00007f8f8f731771: jmpq   *0x110(%rbx)
  0x00007f8f8f731777: mov    -0x28(%rbp),%rax
  0x00007f8f8f73177b: test   %rax,%rax
  0x00007f8f8f73177e: je     0x00007f8f8f731796
  0x00007f8f8f731784: addq   $0x1,0x18(%rax)
  0x00007f8f8f731789: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f73178e: add    $0x20,%rax
  0x00007f8f8f731792: mov    %rax,-0x28(%rbp)
  0x00007f8f8f731796: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73179b: add    $0x3,%r13
  0x00007f8f8f73179f: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f7317a9: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7317ad: data16 xchg %ax,%ax
  0x00007f8f8f7317b0: add    %al,(%rax)
  0x00007f8f8f7317b2: add    %al,(%rax)
  0x00007f8f8f7317b4: add    %al,(%rax)
  0x00007f8f8f7317b6: add    %al,(%rax)
  0x00007f8f8f7317b8: add    %al,(%rax)
  0x00007f8f8f7317ba: add    %al,(%rax)
  0x00007f8f8f7317bc: add    %al,(%rax)
  0x00007f8f8f7317be: add    %al,(%rax)

----------------------------------------------------------------------
if_icmpeq  159 if_icmpeq  [0x00007f8f8f7317e0, 0x00007f8f8f731c00]  1056 bytes

  0x00007f8f8f7317e0: mov    (%rsp),%eax
  0x00007f8f8f7317e3: add    $0x8,%rsp
  0x00007f8f8f7317e7: mov    (%rsp),%edx
  0x00007f8f8f7317ea: add    $0x8,%rsp
  0x00007f8f8f7317ee: cmp    %eax,%edx
  0x00007f8f8f7317f0: jne    0x00007f8f8f731bbe
  0x00007f8f8f7317f6: mov    -0x18(%rbp),%rcx
  0x00007f8f8f7317fa: mov    -0x28(%rbp),%rax
  0x00007f8f8f7317fe: test   %rax,%rax
  0x00007f8f8f731801: je     0x00007f8f8f73181f
  0x00007f8f8f731807: mov    0x8(%rax),%rbx
  0x00007f8f8f73180b: add    $0x1,%rbx
  0x00007f8f8f73180f: sbb    $0x0,%rbx
  0x00007f8f8f731813: mov    %rbx,0x8(%rax)
  0x00007f8f8f731817: add    0x10(%rax),%rax
  0x00007f8f8f73181b: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73181f: movswl 0x1(%r13),%edx
  0x00007f8f8f731824: bswap  %edx
  0x00007f8f8f731826: sar    $0x10,%edx
  0x00007f8f8f731829: movslq %edx,%rdx
  0x00007f8f8f73182c: add    %rdx,%r13
  0x00007f8f8f73182f: test   %edx,%edx
  0x00007f8f8f731831: jns    0x00007f8f8f731933
  0x00007f8f8f731837: mov    0x18(%rcx),%rax
  0x00007f8f8f73183b: test   %rax,%rax
  0x00007f8f8f73183e: jne    0x00007f8f8f7318f4
  0x00007f8f8f731844: push   %rdx
  0x00007f8f8f731845: push   %rcx
  0x00007f8f8f731846: callq  0x00007f8f8f731850
  0x00007f8f8f73184b: jmpq   0x00007f8f8f7318e5
  0x00007f8f8f731850: mov    %rcx,%rsi
  0x00007f8f8f731853: lea    0x8(%rsp),%rax
  0x00007f8f8f731858: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73185c: mov    %r15,%rdi
  0x00007f8f8f73185f: vzeroupper 
  0x00007f8f8f731862: mov    %rbp,0x330(%r15)
  0x00007f8f8f731869: mov    %rax,0x320(%r15)
  0x00007f8f8f731870: test   $0xf,%esp
  0x00007f8f8f731876: je     0x00007f8f8f73188e
  0x00007f8f8f73187c: sub    $0x8,%rsp
  0x00007f8f8f731880: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f731885: add    $0x8,%rsp
  0x00007f8f8f731889: jmpq   0x00007f8f8f731893
  0x00007f8f8f73188e: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f731893: movabs $0x0,%r10
  0x00007f8f8f73189d: mov    %r10,0x320(%r15)
  0x00007f8f8f7318a4: movabs $0x0,%r10
  0x00007f8f8f7318ae: mov    %r10,0x330(%r15)
  0x00007f8f8f7318b5: movabs $0x0,%r10
  0x00007f8f8f7318bf: mov    %r10,0x328(%r15)
  0x00007f8f8f7318c6: vzeroupper 
  0x00007f8f8f7318c9: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7318d1: je     0x00007f8f8f7318dc
  0x00007f8f8f7318d7: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7318dc: mov    -0x40(%rbp),%r13
  0x00007f8f8f7318e0: mov    -0x38(%rbp),%r14
  0x00007f8f8f7318e4: retq   
  0x00007f8f8f7318e5: pop    %rcx
  0x00007f8f8f7318e6: pop    %rdx
  0x00007f8f8f7318e7: mov    0x18(%rcx),%rax
  0x00007f8f8f7318eb: test   %rax,%rax
  0x00007f8f8f7318ee: je     0x00007f8f8f731933
  0x00007f8f8f7318f4: mov    0x10(%rcx),%rbx
  0x00007f8f8f7318f8: test   %rbx,%rbx
  0x00007f8f8f7318fb: je     0x00007f8f8f73191d
  0x00007f8f8f7318fd: mov    0x108(%rbx),%eax
  0x00007f8f8f731903: add    $0x8,%eax
  0x00007f8f8f731906: mov    %eax,0x108(%rbx)
  0x00007f8f8f73190c: and    0x11c(%rbx),%eax
  0x00007f8f8f731912: je     0x00007f8f8f731a4d
  0x00007f8f8f731918: jmpq   0x00007f8f8f731933
  0x00007f8f8f73191d: mov    0x18(%rcx),%rcx
  0x00007f8f8f731921: mov    0x1c(%rcx),%eax
  0x00007f8f8f731924: add    $0x8,%eax
  0x00007f8f8f731927: mov    %eax,0x1c(%rcx)
  0x00007f8f8f73192a: and    0x34(%rcx),%eax
  0x00007f8f8f73192d: je     0x00007f8f8f731a4d
  0x00007f8f8f731933: movzbl 0x0(%r13),%ebx
  0x00007f8f8f731938: testb  $0x8,0x108(%r15)
  0x00007f8f8f731940: je     0x00007f8f8f73194e
  0x00007f8f8f731942: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f73194c: jmp    0x00007f8f8f731958
  0x00007f8f8f73194e: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f731958: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73195c: callq  0x00007f8f8f731966
  0x00007f8f8f731961: jmpq   0x00007f8f8f7319f8
  0x00007f8f8f731966: lea    0x8(%rsp),%rax
  0x00007f8f8f73196b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73196f: mov    %r15,%rdi
  0x00007f8f8f731972: vzeroupper 
  0x00007f8f8f731975: mov    %rbp,0x330(%r15)
  0x00007f8f8f73197c: mov    %rax,0x320(%r15)
  0x00007f8f8f731983: test   $0xf,%esp
  0x00007f8f8f731989: je     0x00007f8f8f7319a1
  0x00007f8f8f73198f: sub    $0x8,%rsp
  0x00007f8f8f731993: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f731998: add    $0x8,%rsp
  0x00007f8f8f73199c: jmpq   0x00007f8f8f7319a6
  0x00007f8f8f7319a1: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f7319a6: movabs $0x0,%r10
  0x00007f8f8f7319b0: mov    %r10,0x320(%r15)
  0x00007f8f8f7319b7: movabs $0x0,%r10
  0x00007f8f8f7319c1: mov    %r10,0x330(%r15)
  0x00007f8f8f7319c8: movabs $0x0,%r10
  0x00007f8f8f7319d2: mov    %r10,0x328(%r15)
  0x00007f8f8f7319d9: vzeroupper 
  0x00007f8f8f7319dc: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7319e4: je     0x00007f8f8f7319ef
  0x00007f8f8f7319ea: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7319ef: mov    -0x40(%rbp),%r13
  0x00007f8f8f7319f3: mov    -0x38(%rbp),%r14
  0x00007f8f8f7319f7: retq   
  0x00007f8f8f7319f8: push   %rax
  0x00007f8f8f7319f9: push   %rbx
  0x00007f8f8f7319fa: mov    -0x18(%rbp),%rbx
  0x00007f8f8f7319fe: mov    0x10(%rbx),%rax
  0x00007f8f8f731a02: test   %rax,%rax
  0x00007f8f8f731a05: je     0x00007f8f8f731a42
  0x00007f8f8f731a0b: mov    %r13,%rsi
  0x00007f8f8f731a0e: mov    %rbx,%rdi
  0x00007f8f8f731a11: test   $0xf,%esp
  0x00007f8f8f731a17: je     0x00007f8f8f731a2f
  0x00007f8f8f731a1d: sub    $0x8,%rsp
  0x00007f8f8f731a21: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f731a26: add    $0x8,%rsp
  0x00007f8f8f731a2a: jmpq   0x00007f8f8f731a34
  0x00007f8f8f731a2f: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f731a34: mov    0x10(%rbx),%rbx
  0x00007f8f8f731a38: add    $0x138,%rbx
  0x00007f8f8f731a3f: add    %rbx,%rax
  0x00007f8f8f731a42: mov    %rax,-0x28(%rbp)
  0x00007f8f8f731a46: pop    %rbx
  0x00007f8f8f731a47: pop    %rax
  0x00007f8f8f731a48: jmpq   0x00007f8f8f731933
  0x00007f8f8f731a4d: neg    %rdx
  0x00007f8f8f731a50: add    %r13,%rdx
  0x00007f8f8f731a53: callq  0x00007f8f8f731a5d
  0x00007f8f8f731a58: jmpq   0x00007f8f8f731af2
  0x00007f8f8f731a5d: mov    %rdx,%rsi
  0x00007f8f8f731a60: lea    0x8(%rsp),%rax
  0x00007f8f8f731a65: mov    %r13,-0x40(%rbp)
  0x00007f8f8f731a69: mov    %r15,%rdi
  0x00007f8f8f731a6c: vzeroupper 
  0x00007f8f8f731a6f: mov    %rbp,0x330(%r15)
  0x00007f8f8f731a76: mov    %rax,0x320(%r15)
  0x00007f8f8f731a7d: test   $0xf,%esp
  0x00007f8f8f731a83: je     0x00007f8f8f731a9b
  0x00007f8f8f731a89: sub    $0x8,%rsp
  0x00007f8f8f731a8d: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f731a92: add    $0x8,%rsp
  0x00007f8f8f731a96: jmpq   0x00007f8f8f731aa0
  0x00007f8f8f731a9b: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f731aa0: movabs $0x0,%r10
  0x00007f8f8f731aaa: mov    %r10,0x320(%r15)
  0x00007f8f8f731ab1: movabs $0x0,%r10
  0x00007f8f8f731abb: mov    %r10,0x330(%r15)
  0x00007f8f8f731ac2: movabs $0x0,%r10
  0x00007f8f8f731acc: mov    %r10,0x328(%r15)
  0x00007f8f8f731ad3: vzeroupper 
  0x00007f8f8f731ad6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f731ade: je     0x00007f8f8f731ae9
  0x00007f8f8f731ae4: jmpq   0x00007f8f8f71a780
  0x00007f8f8f731ae9: mov    -0x40(%rbp),%r13
  0x00007f8f8f731aed: mov    -0x38(%rbp),%r14
  0x00007f8f8f731af1: retq   
  0x00007f8f8f731af2: test   %rax,%rax
  0x00007f8f8f731af5: je     0x00007f8f8f731933
  0x00007f8f8f731afb: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f731b02: jne    0x00007f8f8f731933
  0x00007f8f8f731b08: mov    %rax,%rbx
  0x00007f8f8f731b0b: callq  0x00007f8f8f731b15
  0x00007f8f8f731b10: jmpq   0x00007f8f8f731ba7
  0x00007f8f8f731b15: lea    0x8(%rsp),%rax
  0x00007f8f8f731b1a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f731b1e: mov    %r15,%rdi
  0x00007f8f8f731b21: vzeroupper 
  0x00007f8f8f731b24: mov    %rbp,0x330(%r15)
  0x00007f8f8f731b2b: mov    %rax,0x320(%r15)
  0x00007f8f8f731b32: test   $0xf,%esp
  0x00007f8f8f731b38: je     0x00007f8f8f731b50
  0x00007f8f8f731b3e: sub    $0x8,%rsp
  0x00007f8f8f731b42: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f731b47: add    $0x8,%rsp
  0x00007f8f8f731b4b: jmpq   0x00007f8f8f731b55
  0x00007f8f8f731b50: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f731b55: movabs $0x0,%r10
  0x00007f8f8f731b5f: mov    %r10,0x320(%r15)
  0x00007f8f8f731b66: movabs $0x0,%r10
  0x00007f8f8f731b70: mov    %r10,0x330(%r15)
  0x00007f8f8f731b77: movabs $0x0,%r10
  0x00007f8f8f731b81: mov    %r10,0x328(%r15)
  0x00007f8f8f731b88: vzeroupper 
  0x00007f8f8f731b8b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f731b93: je     0x00007f8f8f731b9e
  0x00007f8f8f731b99: jmpq   0x00007f8f8f71a780
  0x00007f8f8f731b9e: mov    -0x40(%rbp),%r13
  0x00007f8f8f731ba2: mov    -0x38(%rbp),%r14
  0x00007f8f8f731ba6: retq   
  0x00007f8f8f731ba7: mov    %rax,%rsi
  0x00007f8f8f731baa: mov    -0x8(%rbp),%rdx
  0x00007f8f8f731bae: leaveq 
  0x00007f8f8f731baf: pop    %rcx
  0x00007f8f8f731bb0: mov    %rdx,%rsp
  0x00007f8f8f731bb3: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f731bb7: push   %rcx
  0x00007f8f8f731bb8: jmpq   *0x110(%rbx)
  0x00007f8f8f731bbe: mov    -0x28(%rbp),%rax
  0x00007f8f8f731bc2: test   %rax,%rax
  0x00007f8f8f731bc5: je     0x00007f8f8f731bdd
  0x00007f8f8f731bcb: addq   $0x1,0x18(%rax)
  0x00007f8f8f731bd0: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f731bd5: add    $0x20,%rax
  0x00007f8f8f731bd9: mov    %rax,-0x28(%rbp)
  0x00007f8f8f731bdd: movzbl 0x3(%r13),%ebx
  0x00007f8f8f731be2: add    $0x3,%r13
  0x00007f8f8f731be6: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f731bf0: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f731bf4: nopl   0x0(%rax)
  0x00007f8f8f731bf8: add    %al,(%rax)
  0x00007f8f8f731bfa: add    %al,(%rax)
  0x00007f8f8f731bfc: add    %al,(%rax)
  0x00007f8f8f731bfe: add    %al,(%rax)

----------------------------------------------------------------------
if_icmpne  160 if_icmpne  [0x00007f8f8f731c20, 0x00007f8f8f732040]  1056 bytes

  0x00007f8f8f731c20: mov    (%rsp),%eax
  0x00007f8f8f731c23: add    $0x8,%rsp
  0x00007f8f8f731c27: mov    (%rsp),%edx
  0x00007f8f8f731c2a: add    $0x8,%rsp
  0x00007f8f8f731c2e: cmp    %eax,%edx
  0x00007f8f8f731c30: je     0x00007f8f8f731ffe
  0x00007f8f8f731c36: mov    -0x18(%rbp),%rcx
  0x00007f8f8f731c3a: mov    -0x28(%rbp),%rax
  0x00007f8f8f731c3e: test   %rax,%rax
  0x00007f8f8f731c41: je     0x00007f8f8f731c5f
  0x00007f8f8f731c47: mov    0x8(%rax),%rbx
  0x00007f8f8f731c4b: add    $0x1,%rbx
  0x00007f8f8f731c4f: sbb    $0x0,%rbx
  0x00007f8f8f731c53: mov    %rbx,0x8(%rax)
  0x00007f8f8f731c57: add    0x10(%rax),%rax
  0x00007f8f8f731c5b: mov    %rax,-0x28(%rbp)
  0x00007f8f8f731c5f: movswl 0x1(%r13),%edx
  0x00007f8f8f731c64: bswap  %edx
  0x00007f8f8f731c66: sar    $0x10,%edx
  0x00007f8f8f731c69: movslq %edx,%rdx
  0x00007f8f8f731c6c: add    %rdx,%r13
  0x00007f8f8f731c6f: test   %edx,%edx
  0x00007f8f8f731c71: jns    0x00007f8f8f731d73
  0x00007f8f8f731c77: mov    0x18(%rcx),%rax
  0x00007f8f8f731c7b: test   %rax,%rax
  0x00007f8f8f731c7e: jne    0x00007f8f8f731d34
  0x00007f8f8f731c84: push   %rdx
  0x00007f8f8f731c85: push   %rcx
  0x00007f8f8f731c86: callq  0x00007f8f8f731c90
  0x00007f8f8f731c8b: jmpq   0x00007f8f8f731d25
  0x00007f8f8f731c90: mov    %rcx,%rsi
  0x00007f8f8f731c93: lea    0x8(%rsp),%rax
  0x00007f8f8f731c98: mov    %r13,-0x40(%rbp)
  0x00007f8f8f731c9c: mov    %r15,%rdi
  0x00007f8f8f731c9f: vzeroupper 
  0x00007f8f8f731ca2: mov    %rbp,0x330(%r15)
  0x00007f8f8f731ca9: mov    %rax,0x320(%r15)
  0x00007f8f8f731cb0: test   $0xf,%esp
  0x00007f8f8f731cb6: je     0x00007f8f8f731cce
  0x00007f8f8f731cbc: sub    $0x8,%rsp
  0x00007f8f8f731cc0: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f731cc5: add    $0x8,%rsp
  0x00007f8f8f731cc9: jmpq   0x00007f8f8f731cd3
  0x00007f8f8f731cce: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f731cd3: movabs $0x0,%r10
  0x00007f8f8f731cdd: mov    %r10,0x320(%r15)
  0x00007f8f8f731ce4: movabs $0x0,%r10
  0x00007f8f8f731cee: mov    %r10,0x330(%r15)
  0x00007f8f8f731cf5: movabs $0x0,%r10
  0x00007f8f8f731cff: mov    %r10,0x328(%r15)
  0x00007f8f8f731d06: vzeroupper 
  0x00007f8f8f731d09: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f731d11: je     0x00007f8f8f731d1c
  0x00007f8f8f731d17: jmpq   0x00007f8f8f71a780
  0x00007f8f8f731d1c: mov    -0x40(%rbp),%r13
  0x00007f8f8f731d20: mov    -0x38(%rbp),%r14
  0x00007f8f8f731d24: retq   
  0x00007f8f8f731d25: pop    %rcx
  0x00007f8f8f731d26: pop    %rdx
  0x00007f8f8f731d27: mov    0x18(%rcx),%rax
  0x00007f8f8f731d2b: test   %rax,%rax
  0x00007f8f8f731d2e: je     0x00007f8f8f731d73
  0x00007f8f8f731d34: mov    0x10(%rcx),%rbx
  0x00007f8f8f731d38: test   %rbx,%rbx
  0x00007f8f8f731d3b: je     0x00007f8f8f731d5d
  0x00007f8f8f731d3d: mov    0x108(%rbx),%eax
  0x00007f8f8f731d43: add    $0x8,%eax
  0x00007f8f8f731d46: mov    %eax,0x108(%rbx)
  0x00007f8f8f731d4c: and    0x11c(%rbx),%eax
  0x00007f8f8f731d52: je     0x00007f8f8f731e8d
  0x00007f8f8f731d58: jmpq   0x00007f8f8f731d73
  0x00007f8f8f731d5d: mov    0x18(%rcx),%rcx
  0x00007f8f8f731d61: mov    0x1c(%rcx),%eax
  0x00007f8f8f731d64: add    $0x8,%eax
  0x00007f8f8f731d67: mov    %eax,0x1c(%rcx)
  0x00007f8f8f731d6a: and    0x34(%rcx),%eax
  0x00007f8f8f731d6d: je     0x00007f8f8f731e8d
  0x00007f8f8f731d73: movzbl 0x0(%r13),%ebx
  0x00007f8f8f731d78: testb  $0x8,0x108(%r15)
  0x00007f8f8f731d80: je     0x00007f8f8f731d8e
  0x00007f8f8f731d82: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f731d8c: jmp    0x00007f8f8f731d98
  0x00007f8f8f731d8e: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f731d98: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f731d9c: callq  0x00007f8f8f731da6
  0x00007f8f8f731da1: jmpq   0x00007f8f8f731e38
  0x00007f8f8f731da6: lea    0x8(%rsp),%rax
  0x00007f8f8f731dab: mov    %r13,-0x40(%rbp)
  0x00007f8f8f731daf: mov    %r15,%rdi
  0x00007f8f8f731db2: vzeroupper 
  0x00007f8f8f731db5: mov    %rbp,0x330(%r15)
  0x00007f8f8f731dbc: mov    %rax,0x320(%r15)
  0x00007f8f8f731dc3: test   $0xf,%esp
  0x00007f8f8f731dc9: je     0x00007f8f8f731de1
  0x00007f8f8f731dcf: sub    $0x8,%rsp
  0x00007f8f8f731dd3: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f731dd8: add    $0x8,%rsp
  0x00007f8f8f731ddc: jmpq   0x00007f8f8f731de6
  0x00007f8f8f731de1: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f731de6: movabs $0x0,%r10
  0x00007f8f8f731df0: mov    %r10,0x320(%r15)
  0x00007f8f8f731df7: movabs $0x0,%r10
  0x00007f8f8f731e01: mov    %r10,0x330(%r15)
  0x00007f8f8f731e08: movabs $0x0,%r10
  0x00007f8f8f731e12: mov    %r10,0x328(%r15)
  0x00007f8f8f731e19: vzeroupper 
  0x00007f8f8f731e1c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f731e24: je     0x00007f8f8f731e2f
  0x00007f8f8f731e2a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f731e2f: mov    -0x40(%rbp),%r13
  0x00007f8f8f731e33: mov    -0x38(%rbp),%r14
  0x00007f8f8f731e37: retq   
  0x00007f8f8f731e38: push   %rax
  0x00007f8f8f731e39: push   %rbx
  0x00007f8f8f731e3a: mov    -0x18(%rbp),%rbx
  0x00007f8f8f731e3e: mov    0x10(%rbx),%rax
  0x00007f8f8f731e42: test   %rax,%rax
  0x00007f8f8f731e45: je     0x00007f8f8f731e82
  0x00007f8f8f731e4b: mov    %r13,%rsi
  0x00007f8f8f731e4e: mov    %rbx,%rdi
  0x00007f8f8f731e51: test   $0xf,%esp
  0x00007f8f8f731e57: je     0x00007f8f8f731e6f
  0x00007f8f8f731e5d: sub    $0x8,%rsp
  0x00007f8f8f731e61: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f731e66: add    $0x8,%rsp
  0x00007f8f8f731e6a: jmpq   0x00007f8f8f731e74
  0x00007f8f8f731e6f: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f731e74: mov    0x10(%rbx),%rbx
  0x00007f8f8f731e78: add    $0x138,%rbx
  0x00007f8f8f731e7f: add    %rbx,%rax
  0x00007f8f8f731e82: mov    %rax,-0x28(%rbp)
  0x00007f8f8f731e86: pop    %rbx
  0x00007f8f8f731e87: pop    %rax
  0x00007f8f8f731e88: jmpq   0x00007f8f8f731d73
  0x00007f8f8f731e8d: neg    %rdx
  0x00007f8f8f731e90: add    %r13,%rdx
  0x00007f8f8f731e93: callq  0x00007f8f8f731e9d
  0x00007f8f8f731e98: jmpq   0x00007f8f8f731f32
  0x00007f8f8f731e9d: mov    %rdx,%rsi
  0x00007f8f8f731ea0: lea    0x8(%rsp),%rax
  0x00007f8f8f731ea5: mov    %r13,-0x40(%rbp)
  0x00007f8f8f731ea9: mov    %r15,%rdi
  0x00007f8f8f731eac: vzeroupper 
  0x00007f8f8f731eaf: mov    %rbp,0x330(%r15)
  0x00007f8f8f731eb6: mov    %rax,0x320(%r15)
  0x00007f8f8f731ebd: test   $0xf,%esp
  0x00007f8f8f731ec3: je     0x00007f8f8f731edb
  0x00007f8f8f731ec9: sub    $0x8,%rsp
  0x00007f8f8f731ecd: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f731ed2: add    $0x8,%rsp
  0x00007f8f8f731ed6: jmpq   0x00007f8f8f731ee0
  0x00007f8f8f731edb: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f731ee0: movabs $0x0,%r10
  0x00007f8f8f731eea: mov    %r10,0x320(%r15)
  0x00007f8f8f731ef1: movabs $0x0,%r10
  0x00007f8f8f731efb: mov    %r10,0x330(%r15)
  0x00007f8f8f731f02: movabs $0x0,%r10
  0x00007f8f8f731f0c: mov    %r10,0x328(%r15)
  0x00007f8f8f731f13: vzeroupper 
  0x00007f8f8f731f16: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f731f1e: je     0x00007f8f8f731f29
  0x00007f8f8f731f24: jmpq   0x00007f8f8f71a780
  0x00007f8f8f731f29: mov    -0x40(%rbp),%r13
  0x00007f8f8f731f2d: mov    -0x38(%rbp),%r14
  0x00007f8f8f731f31: retq   
  0x00007f8f8f731f32: test   %rax,%rax
  0x00007f8f8f731f35: je     0x00007f8f8f731d73
  0x00007f8f8f731f3b: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f731f42: jne    0x00007f8f8f731d73
  0x00007f8f8f731f48: mov    %rax,%rbx
  0x00007f8f8f731f4b: callq  0x00007f8f8f731f55
  0x00007f8f8f731f50: jmpq   0x00007f8f8f731fe7
  0x00007f8f8f731f55: lea    0x8(%rsp),%rax
  0x00007f8f8f731f5a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f731f5e: mov    %r15,%rdi
  0x00007f8f8f731f61: vzeroupper 
  0x00007f8f8f731f64: mov    %rbp,0x330(%r15)
  0x00007f8f8f731f6b: mov    %rax,0x320(%r15)
  0x00007f8f8f731f72: test   $0xf,%esp
  0x00007f8f8f731f78: je     0x00007f8f8f731f90
  0x00007f8f8f731f7e: sub    $0x8,%rsp
  0x00007f8f8f731f82: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f731f87: add    $0x8,%rsp
  0x00007f8f8f731f8b: jmpq   0x00007f8f8f731f95
  0x00007f8f8f731f90: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f731f95: movabs $0x0,%r10
  0x00007f8f8f731f9f: mov    %r10,0x320(%r15)
  0x00007f8f8f731fa6: movabs $0x0,%r10
  0x00007f8f8f731fb0: mov    %r10,0x330(%r15)
  0x00007f8f8f731fb7: movabs $0x0,%r10
  0x00007f8f8f731fc1: mov    %r10,0x328(%r15)
  0x00007f8f8f731fc8: vzeroupper 
  0x00007f8f8f731fcb: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f731fd3: je     0x00007f8f8f731fde
  0x00007f8f8f731fd9: jmpq   0x00007f8f8f71a780
  0x00007f8f8f731fde: mov    -0x40(%rbp),%r13
  0x00007f8f8f731fe2: mov    -0x38(%rbp),%r14
  0x00007f8f8f731fe6: retq   
  0x00007f8f8f731fe7: mov    %rax,%rsi
  0x00007f8f8f731fea: mov    -0x8(%rbp),%rdx
  0x00007f8f8f731fee: leaveq 
  0x00007f8f8f731fef: pop    %rcx
  0x00007f8f8f731ff0: mov    %rdx,%rsp
  0x00007f8f8f731ff3: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f731ff7: push   %rcx
  0x00007f8f8f731ff8: jmpq   *0x110(%rbx)
  0x00007f8f8f731ffe: mov    -0x28(%rbp),%rax
  0x00007f8f8f732002: test   %rax,%rax
  0x00007f8f8f732005: je     0x00007f8f8f73201d
  0x00007f8f8f73200b: addq   $0x1,0x18(%rax)
  0x00007f8f8f732010: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f732015: add    $0x20,%rax
  0x00007f8f8f732019: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73201d: movzbl 0x3(%r13),%ebx
  0x00007f8f8f732022: add    $0x3,%r13
  0x00007f8f8f732026: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f732030: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f732034: nopl   0x0(%rax)
  0x00007f8f8f732038: add    %al,(%rax)
  0x00007f8f8f73203a: add    %al,(%rax)
  0x00007f8f8f73203c: add    %al,(%rax)
  0x00007f8f8f73203e: add    %al,(%rax)

----------------------------------------------------------------------
if_icmplt  161 if_icmplt  [0x00007f8f8f732060, 0x00007f8f8f732480]  1056 bytes

  0x00007f8f8f732060: mov    (%rsp),%eax
  0x00007f8f8f732063: add    $0x8,%rsp
  0x00007f8f8f732067: mov    (%rsp),%edx
  0x00007f8f8f73206a: add    $0x8,%rsp
  0x00007f8f8f73206e: cmp    %eax,%edx
  0x00007f8f8f732070: jge    0x00007f8f8f73243e
  0x00007f8f8f732076: mov    -0x18(%rbp),%rcx
  0x00007f8f8f73207a: mov    -0x28(%rbp),%rax
  0x00007f8f8f73207e: test   %rax,%rax
  0x00007f8f8f732081: je     0x00007f8f8f73209f
  0x00007f8f8f732087: mov    0x8(%rax),%rbx
  0x00007f8f8f73208b: add    $0x1,%rbx
  0x00007f8f8f73208f: sbb    $0x0,%rbx
  0x00007f8f8f732093: mov    %rbx,0x8(%rax)
  0x00007f8f8f732097: add    0x10(%rax),%rax
  0x00007f8f8f73209b: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73209f: movswl 0x1(%r13),%edx
  0x00007f8f8f7320a4: bswap  %edx
  0x00007f8f8f7320a6: sar    $0x10,%edx
  0x00007f8f8f7320a9: movslq %edx,%rdx
  0x00007f8f8f7320ac: add    %rdx,%r13
  0x00007f8f8f7320af: test   %edx,%edx
  0x00007f8f8f7320b1: jns    0x00007f8f8f7321b3
  0x00007f8f8f7320b7: mov    0x18(%rcx),%rax
  0x00007f8f8f7320bb: test   %rax,%rax
  0x00007f8f8f7320be: jne    0x00007f8f8f732174
  0x00007f8f8f7320c4: push   %rdx
  0x00007f8f8f7320c5: push   %rcx
  0x00007f8f8f7320c6: callq  0x00007f8f8f7320d0
  0x00007f8f8f7320cb: jmpq   0x00007f8f8f732165
  0x00007f8f8f7320d0: mov    %rcx,%rsi
  0x00007f8f8f7320d3: lea    0x8(%rsp),%rax
  0x00007f8f8f7320d8: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7320dc: mov    %r15,%rdi
  0x00007f8f8f7320df: vzeroupper 
  0x00007f8f8f7320e2: mov    %rbp,0x330(%r15)
  0x00007f8f8f7320e9: mov    %rax,0x320(%r15)
  0x00007f8f8f7320f0: test   $0xf,%esp
  0x00007f8f8f7320f6: je     0x00007f8f8f73210e
  0x00007f8f8f7320fc: sub    $0x8,%rsp
  0x00007f8f8f732100: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f732105: add    $0x8,%rsp
  0x00007f8f8f732109: jmpq   0x00007f8f8f732113
  0x00007f8f8f73210e: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f732113: movabs $0x0,%r10
  0x00007f8f8f73211d: mov    %r10,0x320(%r15)
  0x00007f8f8f732124: movabs $0x0,%r10
  0x00007f8f8f73212e: mov    %r10,0x330(%r15)
  0x00007f8f8f732135: movabs $0x0,%r10
  0x00007f8f8f73213f: mov    %r10,0x328(%r15)
  0x00007f8f8f732146: vzeroupper 
  0x00007f8f8f732149: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f732151: je     0x00007f8f8f73215c
  0x00007f8f8f732157: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73215c: mov    -0x40(%rbp),%r13
  0x00007f8f8f732160: mov    -0x38(%rbp),%r14
  0x00007f8f8f732164: retq   
  0x00007f8f8f732165: pop    %rcx
  0x00007f8f8f732166: pop    %rdx
  0x00007f8f8f732167: mov    0x18(%rcx),%rax
  0x00007f8f8f73216b: test   %rax,%rax
  0x00007f8f8f73216e: je     0x00007f8f8f7321b3
  0x00007f8f8f732174: mov    0x10(%rcx),%rbx
  0x00007f8f8f732178: test   %rbx,%rbx
  0x00007f8f8f73217b: je     0x00007f8f8f73219d
  0x00007f8f8f73217d: mov    0x108(%rbx),%eax
  0x00007f8f8f732183: add    $0x8,%eax
  0x00007f8f8f732186: mov    %eax,0x108(%rbx)
  0x00007f8f8f73218c: and    0x11c(%rbx),%eax
  0x00007f8f8f732192: je     0x00007f8f8f7322cd
  0x00007f8f8f732198: jmpq   0x00007f8f8f7321b3
  0x00007f8f8f73219d: mov    0x18(%rcx),%rcx
  0x00007f8f8f7321a1: mov    0x1c(%rcx),%eax
  0x00007f8f8f7321a4: add    $0x8,%eax
  0x00007f8f8f7321a7: mov    %eax,0x1c(%rcx)
  0x00007f8f8f7321aa: and    0x34(%rcx),%eax
  0x00007f8f8f7321ad: je     0x00007f8f8f7322cd
  0x00007f8f8f7321b3: movzbl 0x0(%r13),%ebx
  0x00007f8f8f7321b8: testb  $0x8,0x108(%r15)
  0x00007f8f8f7321c0: je     0x00007f8f8f7321ce
  0x00007f8f8f7321c2: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f7321cc: jmp    0x00007f8f8f7321d8
  0x00007f8f8f7321ce: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f7321d8: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7321dc: callq  0x00007f8f8f7321e6
  0x00007f8f8f7321e1: jmpq   0x00007f8f8f732278
  0x00007f8f8f7321e6: lea    0x8(%rsp),%rax
  0x00007f8f8f7321eb: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7321ef: mov    %r15,%rdi
  0x00007f8f8f7321f2: vzeroupper 
  0x00007f8f8f7321f5: mov    %rbp,0x330(%r15)
  0x00007f8f8f7321fc: mov    %rax,0x320(%r15)
  0x00007f8f8f732203: test   $0xf,%esp
  0x00007f8f8f732209: je     0x00007f8f8f732221
  0x00007f8f8f73220f: sub    $0x8,%rsp
  0x00007f8f8f732213: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f732218: add    $0x8,%rsp
  0x00007f8f8f73221c: jmpq   0x00007f8f8f732226
  0x00007f8f8f732221: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f732226: movabs $0x0,%r10
  0x00007f8f8f732230: mov    %r10,0x320(%r15)
  0x00007f8f8f732237: movabs $0x0,%r10
  0x00007f8f8f732241: mov    %r10,0x330(%r15)
  0x00007f8f8f732248: movabs $0x0,%r10
  0x00007f8f8f732252: mov    %r10,0x328(%r15)
  0x00007f8f8f732259: vzeroupper 
  0x00007f8f8f73225c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f732264: je     0x00007f8f8f73226f
  0x00007f8f8f73226a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73226f: mov    -0x40(%rbp),%r13
  0x00007f8f8f732273: mov    -0x38(%rbp),%r14
  0x00007f8f8f732277: retq   
  0x00007f8f8f732278: push   %rax
  0x00007f8f8f732279: push   %rbx
  0x00007f8f8f73227a: mov    -0x18(%rbp),%rbx
  0x00007f8f8f73227e: mov    0x10(%rbx),%rax
  0x00007f8f8f732282: test   %rax,%rax
  0x00007f8f8f732285: je     0x00007f8f8f7322c2
  0x00007f8f8f73228b: mov    %r13,%rsi
  0x00007f8f8f73228e: mov    %rbx,%rdi
  0x00007f8f8f732291: test   $0xf,%esp
  0x00007f8f8f732297: je     0x00007f8f8f7322af
  0x00007f8f8f73229d: sub    $0x8,%rsp
  0x00007f8f8f7322a1: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7322a6: add    $0x8,%rsp
  0x00007f8f8f7322aa: jmpq   0x00007f8f8f7322b4
  0x00007f8f8f7322af: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7322b4: mov    0x10(%rbx),%rbx
  0x00007f8f8f7322b8: add    $0x138,%rbx
  0x00007f8f8f7322bf: add    %rbx,%rax
  0x00007f8f8f7322c2: mov    %rax,-0x28(%rbp)
  0x00007f8f8f7322c6: pop    %rbx
  0x00007f8f8f7322c7: pop    %rax
  0x00007f8f8f7322c8: jmpq   0x00007f8f8f7321b3
  0x00007f8f8f7322cd: neg    %rdx
  0x00007f8f8f7322d0: add    %r13,%rdx
  0x00007f8f8f7322d3: callq  0x00007f8f8f7322dd
  0x00007f8f8f7322d8: jmpq   0x00007f8f8f732372
  0x00007f8f8f7322dd: mov    %rdx,%rsi
  0x00007f8f8f7322e0: lea    0x8(%rsp),%rax
  0x00007f8f8f7322e5: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7322e9: mov    %r15,%rdi
  0x00007f8f8f7322ec: vzeroupper 
  0x00007f8f8f7322ef: mov    %rbp,0x330(%r15)
  0x00007f8f8f7322f6: mov    %rax,0x320(%r15)
  0x00007f8f8f7322fd: test   $0xf,%esp
  0x00007f8f8f732303: je     0x00007f8f8f73231b
  0x00007f8f8f732309: sub    $0x8,%rsp
  0x00007f8f8f73230d: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f732312: add    $0x8,%rsp
  0x00007f8f8f732316: jmpq   0x00007f8f8f732320
  0x00007f8f8f73231b: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f732320: movabs $0x0,%r10
  0x00007f8f8f73232a: mov    %r10,0x320(%r15)
  0x00007f8f8f732331: movabs $0x0,%r10
  0x00007f8f8f73233b: mov    %r10,0x330(%r15)
  0x00007f8f8f732342: movabs $0x0,%r10
  0x00007f8f8f73234c: mov    %r10,0x328(%r15)
  0x00007f8f8f732353: vzeroupper 
  0x00007f8f8f732356: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73235e: je     0x00007f8f8f732369
  0x00007f8f8f732364: jmpq   0x00007f8f8f71a780
  0x00007f8f8f732369: mov    -0x40(%rbp),%r13
  0x00007f8f8f73236d: mov    -0x38(%rbp),%r14
  0x00007f8f8f732371: retq   
  0x00007f8f8f732372: test   %rax,%rax
  0x00007f8f8f732375: je     0x00007f8f8f7321b3
  0x00007f8f8f73237b: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f732382: jne    0x00007f8f8f7321b3
  0x00007f8f8f732388: mov    %rax,%rbx
  0x00007f8f8f73238b: callq  0x00007f8f8f732395
  0x00007f8f8f732390: jmpq   0x00007f8f8f732427
  0x00007f8f8f732395: lea    0x8(%rsp),%rax
  0x00007f8f8f73239a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73239e: mov    %r15,%rdi
  0x00007f8f8f7323a1: vzeroupper 
  0x00007f8f8f7323a4: mov    %rbp,0x330(%r15)
  0x00007f8f8f7323ab: mov    %rax,0x320(%r15)
  0x00007f8f8f7323b2: test   $0xf,%esp
  0x00007f8f8f7323b8: je     0x00007f8f8f7323d0
  0x00007f8f8f7323be: sub    $0x8,%rsp
  0x00007f8f8f7323c2: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f7323c7: add    $0x8,%rsp
  0x00007f8f8f7323cb: jmpq   0x00007f8f8f7323d5
  0x00007f8f8f7323d0: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f7323d5: movabs $0x0,%r10
  0x00007f8f8f7323df: mov    %r10,0x320(%r15)
  0x00007f8f8f7323e6: movabs $0x0,%r10
  0x00007f8f8f7323f0: mov    %r10,0x330(%r15)
  0x00007f8f8f7323f7: movabs $0x0,%r10
  0x00007f8f8f732401: mov    %r10,0x328(%r15)
  0x00007f8f8f732408: vzeroupper 
  0x00007f8f8f73240b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f732413: je     0x00007f8f8f73241e
  0x00007f8f8f732419: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73241e: mov    -0x40(%rbp),%r13
  0x00007f8f8f732422: mov    -0x38(%rbp),%r14
  0x00007f8f8f732426: retq   
  0x00007f8f8f732427: mov    %rax,%rsi
  0x00007f8f8f73242a: mov    -0x8(%rbp),%rdx
  0x00007f8f8f73242e: leaveq 
  0x00007f8f8f73242f: pop    %rcx
  0x00007f8f8f732430: mov    %rdx,%rsp
  0x00007f8f8f732433: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f732437: push   %rcx
  0x00007f8f8f732438: jmpq   *0x110(%rbx)
  0x00007f8f8f73243e: mov    -0x28(%rbp),%rax
  0x00007f8f8f732442: test   %rax,%rax
  0x00007f8f8f732445: je     0x00007f8f8f73245d
  0x00007f8f8f73244b: addq   $0x1,0x18(%rax)
  0x00007f8f8f732450: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f732455: add    $0x20,%rax
  0x00007f8f8f732459: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73245d: movzbl 0x3(%r13),%ebx
  0x00007f8f8f732462: add    $0x3,%r13
  0x00007f8f8f732466: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f732470: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f732474: nopl   0x0(%rax)
  0x00007f8f8f732478: add    %al,(%rax)
  0x00007f8f8f73247a: add    %al,(%rax)
  0x00007f8f8f73247c: add    %al,(%rax)
  0x00007f8f8f73247e: add    %al,(%rax)

----------------------------------------------------------------------
if_icmpge  162 if_icmpge  [0x00007f8f8f7324a0, 0x00007f8f8f7328c0]  1056 bytes

  0x00007f8f8f7324a0: mov    (%rsp),%eax
  0x00007f8f8f7324a3: add    $0x8,%rsp
  0x00007f8f8f7324a7: mov    (%rsp),%edx
  0x00007f8f8f7324aa: add    $0x8,%rsp
  0x00007f8f8f7324ae: cmp    %eax,%edx
  0x00007f8f8f7324b0: jl     0x00007f8f8f73287e
  0x00007f8f8f7324b6: mov    -0x18(%rbp),%rcx
  0x00007f8f8f7324ba: mov    -0x28(%rbp),%rax
  0x00007f8f8f7324be: test   %rax,%rax
  0x00007f8f8f7324c1: je     0x00007f8f8f7324df
  0x00007f8f8f7324c7: mov    0x8(%rax),%rbx
  0x00007f8f8f7324cb: add    $0x1,%rbx
  0x00007f8f8f7324cf: sbb    $0x0,%rbx
  0x00007f8f8f7324d3: mov    %rbx,0x8(%rax)
  0x00007f8f8f7324d7: add    0x10(%rax),%rax
  0x00007f8f8f7324db: mov    %rax,-0x28(%rbp)
  0x00007f8f8f7324df: movswl 0x1(%r13),%edx
  0x00007f8f8f7324e4: bswap  %edx
  0x00007f8f8f7324e6: sar    $0x10,%edx
  0x00007f8f8f7324e9: movslq %edx,%rdx
  0x00007f8f8f7324ec: add    %rdx,%r13
  0x00007f8f8f7324ef: test   %edx,%edx
  0x00007f8f8f7324f1: jns    0x00007f8f8f7325f3
  0x00007f8f8f7324f7: mov    0x18(%rcx),%rax
  0x00007f8f8f7324fb: test   %rax,%rax
  0x00007f8f8f7324fe: jne    0x00007f8f8f7325b4
  0x00007f8f8f732504: push   %rdx
  0x00007f8f8f732505: push   %rcx
  0x00007f8f8f732506: callq  0x00007f8f8f732510
  0x00007f8f8f73250b: jmpq   0x00007f8f8f7325a5
  0x00007f8f8f732510: mov    %rcx,%rsi
  0x00007f8f8f732513: lea    0x8(%rsp),%rax
  0x00007f8f8f732518: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73251c: mov    %r15,%rdi
  0x00007f8f8f73251f: vzeroupper 
  0x00007f8f8f732522: mov    %rbp,0x330(%r15)
  0x00007f8f8f732529: mov    %rax,0x320(%r15)
  0x00007f8f8f732530: test   $0xf,%esp
  0x00007f8f8f732536: je     0x00007f8f8f73254e
  0x00007f8f8f73253c: sub    $0x8,%rsp
  0x00007f8f8f732540: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f732545: add    $0x8,%rsp
  0x00007f8f8f732549: jmpq   0x00007f8f8f732553
  0x00007f8f8f73254e: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f732553: movabs $0x0,%r10
  0x00007f8f8f73255d: mov    %r10,0x320(%r15)
  0x00007f8f8f732564: movabs $0x0,%r10
  0x00007f8f8f73256e: mov    %r10,0x330(%r15)
  0x00007f8f8f732575: movabs $0x0,%r10
  0x00007f8f8f73257f: mov    %r10,0x328(%r15)
  0x00007f8f8f732586: vzeroupper 
  0x00007f8f8f732589: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f732591: je     0x00007f8f8f73259c
  0x00007f8f8f732597: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73259c: mov    -0x40(%rbp),%r13
  0x00007f8f8f7325a0: mov    -0x38(%rbp),%r14
  0x00007f8f8f7325a4: retq   
  0x00007f8f8f7325a5: pop    %rcx
  0x00007f8f8f7325a6: pop    %rdx
  0x00007f8f8f7325a7: mov    0x18(%rcx),%rax
  0x00007f8f8f7325ab: test   %rax,%rax
  0x00007f8f8f7325ae: je     0x00007f8f8f7325f3
  0x00007f8f8f7325b4: mov    0x10(%rcx),%rbx
  0x00007f8f8f7325b8: test   %rbx,%rbx
  0x00007f8f8f7325bb: je     0x00007f8f8f7325dd
  0x00007f8f8f7325bd: mov    0x108(%rbx),%eax
  0x00007f8f8f7325c3: add    $0x8,%eax
  0x00007f8f8f7325c6: mov    %eax,0x108(%rbx)
  0x00007f8f8f7325cc: and    0x11c(%rbx),%eax
  0x00007f8f8f7325d2: je     0x00007f8f8f73270d
  0x00007f8f8f7325d8: jmpq   0x00007f8f8f7325f3
  0x00007f8f8f7325dd: mov    0x18(%rcx),%rcx
  0x00007f8f8f7325e1: mov    0x1c(%rcx),%eax
  0x00007f8f8f7325e4: add    $0x8,%eax
  0x00007f8f8f7325e7: mov    %eax,0x1c(%rcx)
  0x00007f8f8f7325ea: and    0x34(%rcx),%eax
  0x00007f8f8f7325ed: je     0x00007f8f8f73270d
  0x00007f8f8f7325f3: movzbl 0x0(%r13),%ebx
  0x00007f8f8f7325f8: testb  $0x8,0x108(%r15)
  0x00007f8f8f732600: je     0x00007f8f8f73260e
  0x00007f8f8f732602: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f73260c: jmp    0x00007f8f8f732618
  0x00007f8f8f73260e: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f732618: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73261c: callq  0x00007f8f8f732626
  0x00007f8f8f732621: jmpq   0x00007f8f8f7326b8
  0x00007f8f8f732626: lea    0x8(%rsp),%rax
  0x00007f8f8f73262b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73262f: mov    %r15,%rdi
  0x00007f8f8f732632: vzeroupper 
  0x00007f8f8f732635: mov    %rbp,0x330(%r15)
  0x00007f8f8f73263c: mov    %rax,0x320(%r15)
  0x00007f8f8f732643: test   $0xf,%esp
  0x00007f8f8f732649: je     0x00007f8f8f732661
  0x00007f8f8f73264f: sub    $0x8,%rsp
  0x00007f8f8f732653: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f732658: add    $0x8,%rsp
  0x00007f8f8f73265c: jmpq   0x00007f8f8f732666
  0x00007f8f8f732661: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f732666: movabs $0x0,%r10
  0x00007f8f8f732670: mov    %r10,0x320(%r15)
  0x00007f8f8f732677: movabs $0x0,%r10
  0x00007f8f8f732681: mov    %r10,0x330(%r15)
  0x00007f8f8f732688: movabs $0x0,%r10
  0x00007f8f8f732692: mov    %r10,0x328(%r15)
  0x00007f8f8f732699: vzeroupper 
  0x00007f8f8f73269c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7326a4: je     0x00007f8f8f7326af
  0x00007f8f8f7326aa: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7326af: mov    -0x40(%rbp),%r13
  0x00007f8f8f7326b3: mov    -0x38(%rbp),%r14
  0x00007f8f8f7326b7: retq   
  0x00007f8f8f7326b8: push   %rax
  0x00007f8f8f7326b9: push   %rbx
  0x00007f8f8f7326ba: mov    -0x18(%rbp),%rbx
  0x00007f8f8f7326be: mov    0x10(%rbx),%rax
  0x00007f8f8f7326c2: test   %rax,%rax
  0x00007f8f8f7326c5: je     0x00007f8f8f732702
  0x00007f8f8f7326cb: mov    %r13,%rsi
  0x00007f8f8f7326ce: mov    %rbx,%rdi
  0x00007f8f8f7326d1: test   $0xf,%esp
  0x00007f8f8f7326d7: je     0x00007f8f8f7326ef
  0x00007f8f8f7326dd: sub    $0x8,%rsp
  0x00007f8f8f7326e1: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7326e6: add    $0x8,%rsp
  0x00007f8f8f7326ea: jmpq   0x00007f8f8f7326f4
  0x00007f8f8f7326ef: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7326f4: mov    0x10(%rbx),%rbx
  0x00007f8f8f7326f8: add    $0x138,%rbx
  0x00007f8f8f7326ff: add    %rbx,%rax
  0x00007f8f8f732702: mov    %rax,-0x28(%rbp)
  0x00007f8f8f732706: pop    %rbx
  0x00007f8f8f732707: pop    %rax
  0x00007f8f8f732708: jmpq   0x00007f8f8f7325f3
  0x00007f8f8f73270d: neg    %rdx
  0x00007f8f8f732710: add    %r13,%rdx
  0x00007f8f8f732713: callq  0x00007f8f8f73271d
  0x00007f8f8f732718: jmpq   0x00007f8f8f7327b2
  0x00007f8f8f73271d: mov    %rdx,%rsi
  0x00007f8f8f732720: lea    0x8(%rsp),%rax
  0x00007f8f8f732725: mov    %r13,-0x40(%rbp)
  0x00007f8f8f732729: mov    %r15,%rdi
  0x00007f8f8f73272c: vzeroupper 
  0x00007f8f8f73272f: mov    %rbp,0x330(%r15)
  0x00007f8f8f732736: mov    %rax,0x320(%r15)
  0x00007f8f8f73273d: test   $0xf,%esp
  0x00007f8f8f732743: je     0x00007f8f8f73275b
  0x00007f8f8f732749: sub    $0x8,%rsp
  0x00007f8f8f73274d: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f732752: add    $0x8,%rsp
  0x00007f8f8f732756: jmpq   0x00007f8f8f732760
  0x00007f8f8f73275b: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f732760: movabs $0x0,%r10
  0x00007f8f8f73276a: mov    %r10,0x320(%r15)
  0x00007f8f8f732771: movabs $0x0,%r10
  0x00007f8f8f73277b: mov    %r10,0x330(%r15)
  0x00007f8f8f732782: movabs $0x0,%r10
  0x00007f8f8f73278c: mov    %r10,0x328(%r15)
  0x00007f8f8f732793: vzeroupper 
  0x00007f8f8f732796: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73279e: je     0x00007f8f8f7327a9
  0x00007f8f8f7327a4: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7327a9: mov    -0x40(%rbp),%r13
  0x00007f8f8f7327ad: mov    -0x38(%rbp),%r14
  0x00007f8f8f7327b1: retq   
  0x00007f8f8f7327b2: test   %rax,%rax
  0x00007f8f8f7327b5: je     0x00007f8f8f7325f3
  0x00007f8f8f7327bb: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f7327c2: jne    0x00007f8f8f7325f3
  0x00007f8f8f7327c8: mov    %rax,%rbx
  0x00007f8f8f7327cb: callq  0x00007f8f8f7327d5
  0x00007f8f8f7327d0: jmpq   0x00007f8f8f732867
  0x00007f8f8f7327d5: lea    0x8(%rsp),%rax
  0x00007f8f8f7327da: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7327de: mov    %r15,%rdi
  0x00007f8f8f7327e1: vzeroupper 
  0x00007f8f8f7327e4: mov    %rbp,0x330(%r15)
  0x00007f8f8f7327eb: mov    %rax,0x320(%r15)
  0x00007f8f8f7327f2: test   $0xf,%esp
  0x00007f8f8f7327f8: je     0x00007f8f8f732810
  0x00007f8f8f7327fe: sub    $0x8,%rsp
  0x00007f8f8f732802: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f732807: add    $0x8,%rsp
  0x00007f8f8f73280b: jmpq   0x00007f8f8f732815
  0x00007f8f8f732810: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f732815: movabs $0x0,%r10
  0x00007f8f8f73281f: mov    %r10,0x320(%r15)
  0x00007f8f8f732826: movabs $0x0,%r10
  0x00007f8f8f732830: mov    %r10,0x330(%r15)
  0x00007f8f8f732837: movabs $0x0,%r10
  0x00007f8f8f732841: mov    %r10,0x328(%r15)
  0x00007f8f8f732848: vzeroupper 
  0x00007f8f8f73284b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f732853: je     0x00007f8f8f73285e
  0x00007f8f8f732859: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73285e: mov    -0x40(%rbp),%r13
  0x00007f8f8f732862: mov    -0x38(%rbp),%r14
  0x00007f8f8f732866: retq   
  0x00007f8f8f732867: mov    %rax,%rsi
  0x00007f8f8f73286a: mov    -0x8(%rbp),%rdx
  0x00007f8f8f73286e: leaveq 
  0x00007f8f8f73286f: pop    %rcx
  0x00007f8f8f732870: mov    %rdx,%rsp
  0x00007f8f8f732873: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f732877: push   %rcx
  0x00007f8f8f732878: jmpq   *0x110(%rbx)
  0x00007f8f8f73287e: mov    -0x28(%rbp),%rax
  0x00007f8f8f732882: test   %rax,%rax
  0x00007f8f8f732885: je     0x00007f8f8f73289d
  0x00007f8f8f73288b: addq   $0x1,0x18(%rax)
  0x00007f8f8f732890: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f732895: add    $0x20,%rax
  0x00007f8f8f732899: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73289d: movzbl 0x3(%r13),%ebx
  0x00007f8f8f7328a2: add    $0x3,%r13
  0x00007f8f8f7328a6: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f7328b0: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7328b4: nopl   0x0(%rax)
  0x00007f8f8f7328b8: add    %al,(%rax)
  0x00007f8f8f7328ba: add    %al,(%rax)
  0x00007f8f8f7328bc: add    %al,(%rax)
  0x00007f8f8f7328be: add    %al,(%rax)

----------------------------------------------------------------------
if_icmpgt  163 if_icmpgt  [0x00007f8f8f7328e0, 0x00007f8f8f732d00]  1056 bytes

  0x00007f8f8f7328e0: mov    (%rsp),%eax
  0x00007f8f8f7328e3: add    $0x8,%rsp
  0x00007f8f8f7328e7: mov    (%rsp),%edx
  0x00007f8f8f7328ea: add    $0x8,%rsp
  0x00007f8f8f7328ee: cmp    %eax,%edx
  0x00007f8f8f7328f0: jle    0x00007f8f8f732cbe
  0x00007f8f8f7328f6: mov    -0x18(%rbp),%rcx
  0x00007f8f8f7328fa: mov    -0x28(%rbp),%rax
  0x00007f8f8f7328fe: test   %rax,%rax
  0x00007f8f8f732901: je     0x00007f8f8f73291f
  0x00007f8f8f732907: mov    0x8(%rax),%rbx
  0x00007f8f8f73290b: add    $0x1,%rbx
  0x00007f8f8f73290f: sbb    $0x0,%rbx
  0x00007f8f8f732913: mov    %rbx,0x8(%rax)
  0x00007f8f8f732917: add    0x10(%rax),%rax
  0x00007f8f8f73291b: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73291f: movswl 0x1(%r13),%edx
  0x00007f8f8f732924: bswap  %edx
  0x00007f8f8f732926: sar    $0x10,%edx
  0x00007f8f8f732929: movslq %edx,%rdx
  0x00007f8f8f73292c: add    %rdx,%r13
  0x00007f8f8f73292f: test   %edx,%edx
  0x00007f8f8f732931: jns    0x00007f8f8f732a33
  0x00007f8f8f732937: mov    0x18(%rcx),%rax
  0x00007f8f8f73293b: test   %rax,%rax
  0x00007f8f8f73293e: jne    0x00007f8f8f7329f4
  0x00007f8f8f732944: push   %rdx
  0x00007f8f8f732945: push   %rcx
  0x00007f8f8f732946: callq  0x00007f8f8f732950
  0x00007f8f8f73294b: jmpq   0x00007f8f8f7329e5
  0x00007f8f8f732950: mov    %rcx,%rsi
  0x00007f8f8f732953: lea    0x8(%rsp),%rax
  0x00007f8f8f732958: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73295c: mov    %r15,%rdi
  0x00007f8f8f73295f: vzeroupper 
  0x00007f8f8f732962: mov    %rbp,0x330(%r15)
  0x00007f8f8f732969: mov    %rax,0x320(%r15)
  0x00007f8f8f732970: test   $0xf,%esp
  0x00007f8f8f732976: je     0x00007f8f8f73298e
  0x00007f8f8f73297c: sub    $0x8,%rsp
  0x00007f8f8f732980: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f732985: add    $0x8,%rsp
  0x00007f8f8f732989: jmpq   0x00007f8f8f732993
  0x00007f8f8f73298e: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f732993: movabs $0x0,%r10
  0x00007f8f8f73299d: mov    %r10,0x320(%r15)
  0x00007f8f8f7329a4: movabs $0x0,%r10
  0x00007f8f8f7329ae: mov    %r10,0x330(%r15)
  0x00007f8f8f7329b5: movabs $0x0,%r10
  0x00007f8f8f7329bf: mov    %r10,0x328(%r15)
  0x00007f8f8f7329c6: vzeroupper 
  0x00007f8f8f7329c9: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7329d1: je     0x00007f8f8f7329dc
  0x00007f8f8f7329d7: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7329dc: mov    -0x40(%rbp),%r13
  0x00007f8f8f7329e0: mov    -0x38(%rbp),%r14
  0x00007f8f8f7329e4: retq   
  0x00007f8f8f7329e5: pop    %rcx
  0x00007f8f8f7329e6: pop    %rdx
  0x00007f8f8f7329e7: mov    0x18(%rcx),%rax
  0x00007f8f8f7329eb: test   %rax,%rax
  0x00007f8f8f7329ee: je     0x00007f8f8f732a33
  0x00007f8f8f7329f4: mov    0x10(%rcx),%rbx
  0x00007f8f8f7329f8: test   %rbx,%rbx
  0x00007f8f8f7329fb: je     0x00007f8f8f732a1d
  0x00007f8f8f7329fd: mov    0x108(%rbx),%eax
  0x00007f8f8f732a03: add    $0x8,%eax
  0x00007f8f8f732a06: mov    %eax,0x108(%rbx)
  0x00007f8f8f732a0c: and    0x11c(%rbx),%eax
  0x00007f8f8f732a12: je     0x00007f8f8f732b4d
  0x00007f8f8f732a18: jmpq   0x00007f8f8f732a33
  0x00007f8f8f732a1d: mov    0x18(%rcx),%rcx
  0x00007f8f8f732a21: mov    0x1c(%rcx),%eax
  0x00007f8f8f732a24: add    $0x8,%eax
  0x00007f8f8f732a27: mov    %eax,0x1c(%rcx)
  0x00007f8f8f732a2a: and    0x34(%rcx),%eax
  0x00007f8f8f732a2d: je     0x00007f8f8f732b4d
  0x00007f8f8f732a33: movzbl 0x0(%r13),%ebx
  0x00007f8f8f732a38: testb  $0x8,0x108(%r15)
  0x00007f8f8f732a40: je     0x00007f8f8f732a4e
  0x00007f8f8f732a42: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f732a4c: jmp    0x00007f8f8f732a58
  0x00007f8f8f732a4e: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f732a58: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f732a5c: callq  0x00007f8f8f732a66
  0x00007f8f8f732a61: jmpq   0x00007f8f8f732af8
  0x00007f8f8f732a66: lea    0x8(%rsp),%rax
  0x00007f8f8f732a6b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f732a6f: mov    %r15,%rdi
  0x00007f8f8f732a72: vzeroupper 
  0x00007f8f8f732a75: mov    %rbp,0x330(%r15)
  0x00007f8f8f732a7c: mov    %rax,0x320(%r15)
  0x00007f8f8f732a83: test   $0xf,%esp
  0x00007f8f8f732a89: je     0x00007f8f8f732aa1
  0x00007f8f8f732a8f: sub    $0x8,%rsp
  0x00007f8f8f732a93: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f732a98: add    $0x8,%rsp
  0x00007f8f8f732a9c: jmpq   0x00007f8f8f732aa6
  0x00007f8f8f732aa1: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f732aa6: movabs $0x0,%r10
  0x00007f8f8f732ab0: mov    %r10,0x320(%r15)
  0x00007f8f8f732ab7: movabs $0x0,%r10
  0x00007f8f8f732ac1: mov    %r10,0x330(%r15)
  0x00007f8f8f732ac8: movabs $0x0,%r10
  0x00007f8f8f732ad2: mov    %r10,0x328(%r15)
  0x00007f8f8f732ad9: vzeroupper 
  0x00007f8f8f732adc: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f732ae4: je     0x00007f8f8f732aef
  0x00007f8f8f732aea: jmpq   0x00007f8f8f71a780
  0x00007f8f8f732aef: mov    -0x40(%rbp),%r13
  0x00007f8f8f732af3: mov    -0x38(%rbp),%r14
  0x00007f8f8f732af7: retq   
  0x00007f8f8f732af8: push   %rax
  0x00007f8f8f732af9: push   %rbx
  0x00007f8f8f732afa: mov    -0x18(%rbp),%rbx
  0x00007f8f8f732afe: mov    0x10(%rbx),%rax
  0x00007f8f8f732b02: test   %rax,%rax
  0x00007f8f8f732b05: je     0x00007f8f8f732b42
  0x00007f8f8f732b0b: mov    %r13,%rsi
  0x00007f8f8f732b0e: mov    %rbx,%rdi
  0x00007f8f8f732b11: test   $0xf,%esp
  0x00007f8f8f732b17: je     0x00007f8f8f732b2f
  0x00007f8f8f732b1d: sub    $0x8,%rsp
  0x00007f8f8f732b21: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f732b26: add    $0x8,%rsp
  0x00007f8f8f732b2a: jmpq   0x00007f8f8f732b34
  0x00007f8f8f732b2f: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f732b34: mov    0x10(%rbx),%rbx
  0x00007f8f8f732b38: add    $0x138,%rbx
  0x00007f8f8f732b3f: add    %rbx,%rax
  0x00007f8f8f732b42: mov    %rax,-0x28(%rbp)
  0x00007f8f8f732b46: pop    %rbx
  0x00007f8f8f732b47: pop    %rax
  0x00007f8f8f732b48: jmpq   0x00007f8f8f732a33
  0x00007f8f8f732b4d: neg    %rdx
  0x00007f8f8f732b50: add    %r13,%rdx
  0x00007f8f8f732b53: callq  0x00007f8f8f732b5d
  0x00007f8f8f732b58: jmpq   0x00007f8f8f732bf2
  0x00007f8f8f732b5d: mov    %rdx,%rsi
  0x00007f8f8f732b60: lea    0x8(%rsp),%rax
  0x00007f8f8f732b65: mov    %r13,-0x40(%rbp)
  0x00007f8f8f732b69: mov    %r15,%rdi
  0x00007f8f8f732b6c: vzeroupper 
  0x00007f8f8f732b6f: mov    %rbp,0x330(%r15)
  0x00007f8f8f732b76: mov    %rax,0x320(%r15)
  0x00007f8f8f732b7d: test   $0xf,%esp
  0x00007f8f8f732b83: je     0x00007f8f8f732b9b
  0x00007f8f8f732b89: sub    $0x8,%rsp
  0x00007f8f8f732b8d: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f732b92: add    $0x8,%rsp
  0x00007f8f8f732b96: jmpq   0x00007f8f8f732ba0
  0x00007f8f8f732b9b: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f732ba0: movabs $0x0,%r10
  0x00007f8f8f732baa: mov    %r10,0x320(%r15)
  0x00007f8f8f732bb1: movabs $0x0,%r10
  0x00007f8f8f732bbb: mov    %r10,0x330(%r15)
  0x00007f8f8f732bc2: movabs $0x0,%r10
  0x00007f8f8f732bcc: mov    %r10,0x328(%r15)
  0x00007f8f8f732bd3: vzeroupper 
  0x00007f8f8f732bd6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f732bde: je     0x00007f8f8f732be9
  0x00007f8f8f732be4: jmpq   0x00007f8f8f71a780
  0x00007f8f8f732be9: mov    -0x40(%rbp),%r13
  0x00007f8f8f732bed: mov    -0x38(%rbp),%r14
  0x00007f8f8f732bf1: retq   
  0x00007f8f8f732bf2: test   %rax,%rax
  0x00007f8f8f732bf5: je     0x00007f8f8f732a33
  0x00007f8f8f732bfb: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f732c02: jne    0x00007f8f8f732a33
  0x00007f8f8f732c08: mov    %rax,%rbx
  0x00007f8f8f732c0b: callq  0x00007f8f8f732c15
  0x00007f8f8f732c10: jmpq   0x00007f8f8f732ca7
  0x00007f8f8f732c15: lea    0x8(%rsp),%rax
  0x00007f8f8f732c1a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f732c1e: mov    %r15,%rdi
  0x00007f8f8f732c21: vzeroupper 
  0x00007f8f8f732c24: mov    %rbp,0x330(%r15)
  0x00007f8f8f732c2b: mov    %rax,0x320(%r15)
  0x00007f8f8f732c32: test   $0xf,%esp
  0x00007f8f8f732c38: je     0x00007f8f8f732c50
  0x00007f8f8f732c3e: sub    $0x8,%rsp
  0x00007f8f8f732c42: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f732c47: add    $0x8,%rsp
  0x00007f8f8f732c4b: jmpq   0x00007f8f8f732c55
  0x00007f8f8f732c50: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f732c55: movabs $0x0,%r10
  0x00007f8f8f732c5f: mov    %r10,0x320(%r15)
  0x00007f8f8f732c66: movabs $0x0,%r10
  0x00007f8f8f732c70: mov    %r10,0x330(%r15)
  0x00007f8f8f732c77: movabs $0x0,%r10
  0x00007f8f8f732c81: mov    %r10,0x328(%r15)
  0x00007f8f8f732c88: vzeroupper 
  0x00007f8f8f732c8b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f732c93: je     0x00007f8f8f732c9e
  0x00007f8f8f732c99: jmpq   0x00007f8f8f71a780
  0x00007f8f8f732c9e: mov    -0x40(%rbp),%r13
  0x00007f8f8f732ca2: mov    -0x38(%rbp),%r14
  0x00007f8f8f732ca6: retq   
  0x00007f8f8f732ca7: mov    %rax,%rsi
  0x00007f8f8f732caa: mov    -0x8(%rbp),%rdx
  0x00007f8f8f732cae: leaveq 
  0x00007f8f8f732caf: pop    %rcx
  0x00007f8f8f732cb0: mov    %rdx,%rsp
  0x00007f8f8f732cb3: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f732cb7: push   %rcx
  0x00007f8f8f732cb8: jmpq   *0x110(%rbx)
  0x00007f8f8f732cbe: mov    -0x28(%rbp),%rax
  0x00007f8f8f732cc2: test   %rax,%rax
  0x00007f8f8f732cc5: je     0x00007f8f8f732cdd
  0x00007f8f8f732ccb: addq   $0x1,0x18(%rax)
  0x00007f8f8f732cd0: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f732cd5: add    $0x20,%rax
  0x00007f8f8f732cd9: mov    %rax,-0x28(%rbp)
  0x00007f8f8f732cdd: movzbl 0x3(%r13),%ebx
  0x00007f8f8f732ce2: add    $0x3,%r13
  0x00007f8f8f732ce6: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f732cf0: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f732cf4: nopl   0x0(%rax)
  0x00007f8f8f732cf8: add    %al,(%rax)
  0x00007f8f8f732cfa: add    %al,(%rax)
  0x00007f8f8f732cfc: add    %al,(%rax)
  0x00007f8f8f732cfe: add    %al,(%rax)

----------------------------------------------------------------------
if_icmple  164 if_icmple  [0x00007f8f8f732d20, 0x00007f8f8f733140]  1056 bytes

  0x00007f8f8f732d20: mov    (%rsp),%eax
  0x00007f8f8f732d23: add    $0x8,%rsp
  0x00007f8f8f732d27: mov    (%rsp),%edx
  0x00007f8f8f732d2a: add    $0x8,%rsp
  0x00007f8f8f732d2e: cmp    %eax,%edx
  0x00007f8f8f732d30: jg     0x00007f8f8f7330fe
  0x00007f8f8f732d36: mov    -0x18(%rbp),%rcx
  0x00007f8f8f732d3a: mov    -0x28(%rbp),%rax
  0x00007f8f8f732d3e: test   %rax,%rax
  0x00007f8f8f732d41: je     0x00007f8f8f732d5f
  0x00007f8f8f732d47: mov    0x8(%rax),%rbx
  0x00007f8f8f732d4b: add    $0x1,%rbx
  0x00007f8f8f732d4f: sbb    $0x0,%rbx
  0x00007f8f8f732d53: mov    %rbx,0x8(%rax)
  0x00007f8f8f732d57: add    0x10(%rax),%rax
  0x00007f8f8f732d5b: mov    %rax,-0x28(%rbp)
  0x00007f8f8f732d5f: movswl 0x1(%r13),%edx
  0x00007f8f8f732d64: bswap  %edx
  0x00007f8f8f732d66: sar    $0x10,%edx
  0x00007f8f8f732d69: movslq %edx,%rdx
  0x00007f8f8f732d6c: add    %rdx,%r13
  0x00007f8f8f732d6f: test   %edx,%edx
  0x00007f8f8f732d71: jns    0x00007f8f8f732e73
  0x00007f8f8f732d77: mov    0x18(%rcx),%rax
  0x00007f8f8f732d7b: test   %rax,%rax
  0x00007f8f8f732d7e: jne    0x00007f8f8f732e34
  0x00007f8f8f732d84: push   %rdx
  0x00007f8f8f732d85: push   %rcx
  0x00007f8f8f732d86: callq  0x00007f8f8f732d90
  0x00007f8f8f732d8b: jmpq   0x00007f8f8f732e25
  0x00007f8f8f732d90: mov    %rcx,%rsi
  0x00007f8f8f732d93: lea    0x8(%rsp),%rax
  0x00007f8f8f732d98: mov    %r13,-0x40(%rbp)
  0x00007f8f8f732d9c: mov    %r15,%rdi
  0x00007f8f8f732d9f: vzeroupper 
  0x00007f8f8f732da2: mov    %rbp,0x330(%r15)
  0x00007f8f8f732da9: mov    %rax,0x320(%r15)
  0x00007f8f8f732db0: test   $0xf,%esp
  0x00007f8f8f732db6: je     0x00007f8f8f732dce
  0x00007f8f8f732dbc: sub    $0x8,%rsp
  0x00007f8f8f732dc0: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f732dc5: add    $0x8,%rsp
  0x00007f8f8f732dc9: jmpq   0x00007f8f8f732dd3
  0x00007f8f8f732dce: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f732dd3: movabs $0x0,%r10
  0x00007f8f8f732ddd: mov    %r10,0x320(%r15)
  0x00007f8f8f732de4: movabs $0x0,%r10
  0x00007f8f8f732dee: mov    %r10,0x330(%r15)
  0x00007f8f8f732df5: movabs $0x0,%r10
  0x00007f8f8f732dff: mov    %r10,0x328(%r15)
  0x00007f8f8f732e06: vzeroupper 
  0x00007f8f8f732e09: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f732e11: je     0x00007f8f8f732e1c
  0x00007f8f8f732e17: jmpq   0x00007f8f8f71a780
  0x00007f8f8f732e1c: mov    -0x40(%rbp),%r13
  0x00007f8f8f732e20: mov    -0x38(%rbp),%r14
  0x00007f8f8f732e24: retq   
  0x00007f8f8f732e25: pop    %rcx
  0x00007f8f8f732e26: pop    %rdx
  0x00007f8f8f732e27: mov    0x18(%rcx),%rax
  0x00007f8f8f732e2b: test   %rax,%rax
  0x00007f8f8f732e2e: je     0x00007f8f8f732e73
  0x00007f8f8f732e34: mov    0x10(%rcx),%rbx
  0x00007f8f8f732e38: test   %rbx,%rbx
  0x00007f8f8f732e3b: je     0x00007f8f8f732e5d
  0x00007f8f8f732e3d: mov    0x108(%rbx),%eax
  0x00007f8f8f732e43: add    $0x8,%eax
  0x00007f8f8f732e46: mov    %eax,0x108(%rbx)
  0x00007f8f8f732e4c: and    0x11c(%rbx),%eax
  0x00007f8f8f732e52: je     0x00007f8f8f732f8d
  0x00007f8f8f732e58: jmpq   0x00007f8f8f732e73
  0x00007f8f8f732e5d: mov    0x18(%rcx),%rcx
  0x00007f8f8f732e61: mov    0x1c(%rcx),%eax
  0x00007f8f8f732e64: add    $0x8,%eax
  0x00007f8f8f732e67: mov    %eax,0x1c(%rcx)
  0x00007f8f8f732e6a: and    0x34(%rcx),%eax
  0x00007f8f8f732e6d: je     0x00007f8f8f732f8d
  0x00007f8f8f732e73: movzbl 0x0(%r13),%ebx
  0x00007f8f8f732e78: testb  $0x8,0x108(%r15)
  0x00007f8f8f732e80: je     0x00007f8f8f732e8e
  0x00007f8f8f732e82: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f732e8c: jmp    0x00007f8f8f732e98
  0x00007f8f8f732e8e: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f732e98: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f732e9c: callq  0x00007f8f8f732ea6
  0x00007f8f8f732ea1: jmpq   0x00007f8f8f732f38
  0x00007f8f8f732ea6: lea    0x8(%rsp),%rax
  0x00007f8f8f732eab: mov    %r13,-0x40(%rbp)
  0x00007f8f8f732eaf: mov    %r15,%rdi
  0x00007f8f8f732eb2: vzeroupper 
  0x00007f8f8f732eb5: mov    %rbp,0x330(%r15)
  0x00007f8f8f732ebc: mov    %rax,0x320(%r15)
  0x00007f8f8f732ec3: test   $0xf,%esp
  0x00007f8f8f732ec9: je     0x00007f8f8f732ee1
  0x00007f8f8f732ecf: sub    $0x8,%rsp
  0x00007f8f8f732ed3: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f732ed8: add    $0x8,%rsp
  0x00007f8f8f732edc: jmpq   0x00007f8f8f732ee6
  0x00007f8f8f732ee1: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f732ee6: movabs $0x0,%r10
  0x00007f8f8f732ef0: mov    %r10,0x320(%r15)
  0x00007f8f8f732ef7: movabs $0x0,%r10
  0x00007f8f8f732f01: mov    %r10,0x330(%r15)
  0x00007f8f8f732f08: movabs $0x0,%r10
  0x00007f8f8f732f12: mov    %r10,0x328(%r15)
  0x00007f8f8f732f19: vzeroupper 
  0x00007f8f8f732f1c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f732f24: je     0x00007f8f8f732f2f
  0x00007f8f8f732f2a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f732f2f: mov    -0x40(%rbp),%r13
  0x00007f8f8f732f33: mov    -0x38(%rbp),%r14
  0x00007f8f8f732f37: retq   
  0x00007f8f8f732f38: push   %rax
  0x00007f8f8f732f39: push   %rbx
  0x00007f8f8f732f3a: mov    -0x18(%rbp),%rbx
  0x00007f8f8f732f3e: mov    0x10(%rbx),%rax
  0x00007f8f8f732f42: test   %rax,%rax
  0x00007f8f8f732f45: je     0x00007f8f8f732f82
  0x00007f8f8f732f4b: mov    %r13,%rsi
  0x00007f8f8f732f4e: mov    %rbx,%rdi
  0x00007f8f8f732f51: test   $0xf,%esp
  0x00007f8f8f732f57: je     0x00007f8f8f732f6f
  0x00007f8f8f732f5d: sub    $0x8,%rsp
  0x00007f8f8f732f61: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f732f66: add    $0x8,%rsp
  0x00007f8f8f732f6a: jmpq   0x00007f8f8f732f74
  0x00007f8f8f732f6f: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f732f74: mov    0x10(%rbx),%rbx
  0x00007f8f8f732f78: add    $0x138,%rbx
  0x00007f8f8f732f7f: add    %rbx,%rax
  0x00007f8f8f732f82: mov    %rax,-0x28(%rbp)
  0x00007f8f8f732f86: pop    %rbx
  0x00007f8f8f732f87: pop    %rax
  0x00007f8f8f732f88: jmpq   0x00007f8f8f732e73
  0x00007f8f8f732f8d: neg    %rdx
  0x00007f8f8f732f90: add    %r13,%rdx
  0x00007f8f8f732f93: callq  0x00007f8f8f732f9d
  0x00007f8f8f732f98: jmpq   0x00007f8f8f733032
  0x00007f8f8f732f9d: mov    %rdx,%rsi
  0x00007f8f8f732fa0: lea    0x8(%rsp),%rax
  0x00007f8f8f732fa5: mov    %r13,-0x40(%rbp)
  0x00007f8f8f732fa9: mov    %r15,%rdi
  0x00007f8f8f732fac: vzeroupper 
  0x00007f8f8f732faf: mov    %rbp,0x330(%r15)
  0x00007f8f8f732fb6: mov    %rax,0x320(%r15)
  0x00007f8f8f732fbd: test   $0xf,%esp
  0x00007f8f8f732fc3: je     0x00007f8f8f732fdb
  0x00007f8f8f732fc9: sub    $0x8,%rsp
  0x00007f8f8f732fcd: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f732fd2: add    $0x8,%rsp
  0x00007f8f8f732fd6: jmpq   0x00007f8f8f732fe0
  0x00007f8f8f732fdb: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f732fe0: movabs $0x0,%r10
  0x00007f8f8f732fea: mov    %r10,0x320(%r15)
  0x00007f8f8f732ff1: movabs $0x0,%r10
  0x00007f8f8f732ffb: mov    %r10,0x330(%r15)
  0x00007f8f8f733002: movabs $0x0,%r10
  0x00007f8f8f73300c: mov    %r10,0x328(%r15)
  0x00007f8f8f733013: vzeroupper 
  0x00007f8f8f733016: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73301e: je     0x00007f8f8f733029
  0x00007f8f8f733024: jmpq   0x00007f8f8f71a780
  0x00007f8f8f733029: mov    -0x40(%rbp),%r13
  0x00007f8f8f73302d: mov    -0x38(%rbp),%r14
  0x00007f8f8f733031: retq   
  0x00007f8f8f733032: test   %rax,%rax
  0x00007f8f8f733035: je     0x00007f8f8f732e73
  0x00007f8f8f73303b: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f733042: jne    0x00007f8f8f732e73
  0x00007f8f8f733048: mov    %rax,%rbx
  0x00007f8f8f73304b: callq  0x00007f8f8f733055
  0x00007f8f8f733050: jmpq   0x00007f8f8f7330e7
  0x00007f8f8f733055: lea    0x8(%rsp),%rax
  0x00007f8f8f73305a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73305e: mov    %r15,%rdi
  0x00007f8f8f733061: vzeroupper 
  0x00007f8f8f733064: mov    %rbp,0x330(%r15)
  0x00007f8f8f73306b: mov    %rax,0x320(%r15)
  0x00007f8f8f733072: test   $0xf,%esp
  0x00007f8f8f733078: je     0x00007f8f8f733090
  0x00007f8f8f73307e: sub    $0x8,%rsp
  0x00007f8f8f733082: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f733087: add    $0x8,%rsp
  0x00007f8f8f73308b: jmpq   0x00007f8f8f733095
  0x00007f8f8f733090: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f733095: movabs $0x0,%r10
  0x00007f8f8f73309f: mov    %r10,0x320(%r15)
  0x00007f8f8f7330a6: movabs $0x0,%r10
  0x00007f8f8f7330b0: mov    %r10,0x330(%r15)
  0x00007f8f8f7330b7: movabs $0x0,%r10
  0x00007f8f8f7330c1: mov    %r10,0x328(%r15)
  0x00007f8f8f7330c8: vzeroupper 
  0x00007f8f8f7330cb: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7330d3: je     0x00007f8f8f7330de
  0x00007f8f8f7330d9: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7330de: mov    -0x40(%rbp),%r13
  0x00007f8f8f7330e2: mov    -0x38(%rbp),%r14
  0x00007f8f8f7330e6: retq   
  0x00007f8f8f7330e7: mov    %rax,%rsi
  0x00007f8f8f7330ea: mov    -0x8(%rbp),%rdx
  0x00007f8f8f7330ee: leaveq 
  0x00007f8f8f7330ef: pop    %rcx
  0x00007f8f8f7330f0: mov    %rdx,%rsp
  0x00007f8f8f7330f3: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f7330f7: push   %rcx
  0x00007f8f8f7330f8: jmpq   *0x110(%rbx)
  0x00007f8f8f7330fe: mov    -0x28(%rbp),%rax
  0x00007f8f8f733102: test   %rax,%rax
  0x00007f8f8f733105: je     0x00007f8f8f73311d
  0x00007f8f8f73310b: addq   $0x1,0x18(%rax)
  0x00007f8f8f733110: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f733115: add    $0x20,%rax
  0x00007f8f8f733119: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73311d: movzbl 0x3(%r13),%ebx
  0x00007f8f8f733122: add    $0x3,%r13
  0x00007f8f8f733126: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f733130: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f733134: nopl   0x0(%rax)
  0x00007f8f8f733138: add    %al,(%rax)
  0x00007f8f8f73313a: add    %al,(%rax)
  0x00007f8f8f73313c: add    %al,(%rax)
  0x00007f8f8f73313e: add    %al,(%rax)

----------------------------------------------------------------------
if_acmpeq  165 if_acmpeq  [0x00007f8f8f733160, 0x00007f8f8f733580]  1056 bytes

  0x00007f8f8f733160: pop    %rax
  0x00007f8f8f733161: pop    %rdx
  0x00007f8f8f733162: cmp    %rax,%rdx
  0x00007f8f8f733165: jne    0x00007f8f8f733533
  0x00007f8f8f73316b: mov    -0x18(%rbp),%rcx
  0x00007f8f8f73316f: mov    -0x28(%rbp),%rax
  0x00007f8f8f733173: test   %rax,%rax
  0x00007f8f8f733176: je     0x00007f8f8f733194
  0x00007f8f8f73317c: mov    0x8(%rax),%rbx
  0x00007f8f8f733180: add    $0x1,%rbx
  0x00007f8f8f733184: sbb    $0x0,%rbx
  0x00007f8f8f733188: mov    %rbx,0x8(%rax)
  0x00007f8f8f73318c: add    0x10(%rax),%rax
  0x00007f8f8f733190: mov    %rax,-0x28(%rbp)
  0x00007f8f8f733194: movswl 0x1(%r13),%edx
  0x00007f8f8f733199: bswap  %edx
  0x00007f8f8f73319b: sar    $0x10,%edx
  0x00007f8f8f73319e: movslq %edx,%rdx
  0x00007f8f8f7331a1: add    %rdx,%r13
  0x00007f8f8f7331a4: test   %edx,%edx
  0x00007f8f8f7331a6: jns    0x00007f8f8f7332a8
  0x00007f8f8f7331ac: mov    0x18(%rcx),%rax
  0x00007f8f8f7331b0: test   %rax,%rax
  0x00007f8f8f7331b3: jne    0x00007f8f8f733269
  0x00007f8f8f7331b9: push   %rdx
  0x00007f8f8f7331ba: push   %rcx
  0x00007f8f8f7331bb: callq  0x00007f8f8f7331c5
  0x00007f8f8f7331c0: jmpq   0x00007f8f8f73325a
  0x00007f8f8f7331c5: mov    %rcx,%rsi
  0x00007f8f8f7331c8: lea    0x8(%rsp),%rax
  0x00007f8f8f7331cd: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7331d1: mov    %r15,%rdi
  0x00007f8f8f7331d4: vzeroupper 
  0x00007f8f8f7331d7: mov    %rbp,0x330(%r15)
  0x00007f8f8f7331de: mov    %rax,0x320(%r15)
  0x00007f8f8f7331e5: test   $0xf,%esp
  0x00007f8f8f7331eb: je     0x00007f8f8f733203
  0x00007f8f8f7331f1: sub    $0x8,%rsp
  0x00007f8f8f7331f5: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f7331fa: add    $0x8,%rsp
  0x00007f8f8f7331fe: jmpq   0x00007f8f8f733208
  0x00007f8f8f733203: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f733208: movabs $0x0,%r10
  0x00007f8f8f733212: mov    %r10,0x320(%r15)
  0x00007f8f8f733219: movabs $0x0,%r10
  0x00007f8f8f733223: mov    %r10,0x330(%r15)
  0x00007f8f8f73322a: movabs $0x0,%r10
  0x00007f8f8f733234: mov    %r10,0x328(%r15)
  0x00007f8f8f73323b: vzeroupper 
  0x00007f8f8f73323e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f733246: je     0x00007f8f8f733251
  0x00007f8f8f73324c: jmpq   0x00007f8f8f71a780
  0x00007f8f8f733251: mov    -0x40(%rbp),%r13
  0x00007f8f8f733255: mov    -0x38(%rbp),%r14
  0x00007f8f8f733259: retq   
  0x00007f8f8f73325a: pop    %rcx
  0x00007f8f8f73325b: pop    %rdx
  0x00007f8f8f73325c: mov    0x18(%rcx),%rax
  0x00007f8f8f733260: test   %rax,%rax
  0x00007f8f8f733263: je     0x00007f8f8f7332a8
  0x00007f8f8f733269: mov    0x10(%rcx),%rbx
  0x00007f8f8f73326d: test   %rbx,%rbx
  0x00007f8f8f733270: je     0x00007f8f8f733292
  0x00007f8f8f733272: mov    0x108(%rbx),%eax
  0x00007f8f8f733278: add    $0x8,%eax
  0x00007f8f8f73327b: mov    %eax,0x108(%rbx)
  0x00007f8f8f733281: and    0x11c(%rbx),%eax
  0x00007f8f8f733287: je     0x00007f8f8f7333c2
  0x00007f8f8f73328d: jmpq   0x00007f8f8f7332a8
  0x00007f8f8f733292: mov    0x18(%rcx),%rcx
  0x00007f8f8f733296: mov    0x1c(%rcx),%eax
  0x00007f8f8f733299: add    $0x8,%eax
  0x00007f8f8f73329c: mov    %eax,0x1c(%rcx)
  0x00007f8f8f73329f: and    0x34(%rcx),%eax
  0x00007f8f8f7332a2: je     0x00007f8f8f7333c2
  0x00007f8f8f7332a8: movzbl 0x0(%r13),%ebx
  0x00007f8f8f7332ad: testb  $0x8,0x108(%r15)
  0x00007f8f8f7332b5: je     0x00007f8f8f7332c3
  0x00007f8f8f7332b7: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f7332c1: jmp    0x00007f8f8f7332cd
  0x00007f8f8f7332c3: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f7332cd: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7332d1: callq  0x00007f8f8f7332db
  0x00007f8f8f7332d6: jmpq   0x00007f8f8f73336d
  0x00007f8f8f7332db: lea    0x8(%rsp),%rax
  0x00007f8f8f7332e0: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7332e4: mov    %r15,%rdi
  0x00007f8f8f7332e7: vzeroupper 
  0x00007f8f8f7332ea: mov    %rbp,0x330(%r15)
  0x00007f8f8f7332f1: mov    %rax,0x320(%r15)
  0x00007f8f8f7332f8: test   $0xf,%esp
  0x00007f8f8f7332fe: je     0x00007f8f8f733316
  0x00007f8f8f733304: sub    $0x8,%rsp
  0x00007f8f8f733308: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73330d: add    $0x8,%rsp
  0x00007f8f8f733311: jmpq   0x00007f8f8f73331b
  0x00007f8f8f733316: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73331b: movabs $0x0,%r10
  0x00007f8f8f733325: mov    %r10,0x320(%r15)
  0x00007f8f8f73332c: movabs $0x0,%r10
  0x00007f8f8f733336: mov    %r10,0x330(%r15)
  0x00007f8f8f73333d: movabs $0x0,%r10
  0x00007f8f8f733347: mov    %r10,0x328(%r15)
  0x00007f8f8f73334e: vzeroupper 
  0x00007f8f8f733351: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f733359: je     0x00007f8f8f733364
  0x00007f8f8f73335f: jmpq   0x00007f8f8f71a780
  0x00007f8f8f733364: mov    -0x40(%rbp),%r13
  0x00007f8f8f733368: mov    -0x38(%rbp),%r14
  0x00007f8f8f73336c: retq   
  0x00007f8f8f73336d: push   %rax
  0x00007f8f8f73336e: push   %rbx
  0x00007f8f8f73336f: mov    -0x18(%rbp),%rbx
  0x00007f8f8f733373: mov    0x10(%rbx),%rax
  0x00007f8f8f733377: test   %rax,%rax
  0x00007f8f8f73337a: je     0x00007f8f8f7333b7
  0x00007f8f8f733380: mov    %r13,%rsi
  0x00007f8f8f733383: mov    %rbx,%rdi
  0x00007f8f8f733386: test   $0xf,%esp
  0x00007f8f8f73338c: je     0x00007f8f8f7333a4
  0x00007f8f8f733392: sub    $0x8,%rsp
  0x00007f8f8f733396: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f73339b: add    $0x8,%rsp
  0x00007f8f8f73339f: jmpq   0x00007f8f8f7333a9
  0x00007f8f8f7333a4: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7333a9: mov    0x10(%rbx),%rbx
  0x00007f8f8f7333ad: add    $0x138,%rbx
  0x00007f8f8f7333b4: add    %rbx,%rax
  0x00007f8f8f7333b7: mov    %rax,-0x28(%rbp)
  0x00007f8f8f7333bb: pop    %rbx
  0x00007f8f8f7333bc: pop    %rax
  0x00007f8f8f7333bd: jmpq   0x00007f8f8f7332a8
  0x00007f8f8f7333c2: neg    %rdx
  0x00007f8f8f7333c5: add    %r13,%rdx
  0x00007f8f8f7333c8: callq  0x00007f8f8f7333d2
  0x00007f8f8f7333cd: jmpq   0x00007f8f8f733467
  0x00007f8f8f7333d2: mov    %rdx,%rsi
  0x00007f8f8f7333d5: lea    0x8(%rsp),%rax
  0x00007f8f8f7333da: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7333de: mov    %r15,%rdi
  0x00007f8f8f7333e1: vzeroupper 
  0x00007f8f8f7333e4: mov    %rbp,0x330(%r15)
  0x00007f8f8f7333eb: mov    %rax,0x320(%r15)
  0x00007f8f8f7333f2: test   $0xf,%esp
  0x00007f8f8f7333f8: je     0x00007f8f8f733410
  0x00007f8f8f7333fe: sub    $0x8,%rsp
  0x00007f8f8f733402: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f733407: add    $0x8,%rsp
  0x00007f8f8f73340b: jmpq   0x00007f8f8f733415
  0x00007f8f8f733410: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f733415: movabs $0x0,%r10
  0x00007f8f8f73341f: mov    %r10,0x320(%r15)
  0x00007f8f8f733426: movabs $0x0,%r10
  0x00007f8f8f733430: mov    %r10,0x330(%r15)
  0x00007f8f8f733437: movabs $0x0,%r10
  0x00007f8f8f733441: mov    %r10,0x328(%r15)
  0x00007f8f8f733448: vzeroupper 
  0x00007f8f8f73344b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f733453: je     0x00007f8f8f73345e
  0x00007f8f8f733459: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73345e: mov    -0x40(%rbp),%r13
  0x00007f8f8f733462: mov    -0x38(%rbp),%r14
  0x00007f8f8f733466: retq   
  0x00007f8f8f733467: test   %rax,%rax
  0x00007f8f8f73346a: je     0x00007f8f8f7332a8
  0x00007f8f8f733470: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f733477: jne    0x00007f8f8f7332a8
  0x00007f8f8f73347d: mov    %rax,%rbx
  0x00007f8f8f733480: callq  0x00007f8f8f73348a
  0x00007f8f8f733485: jmpq   0x00007f8f8f73351c
  0x00007f8f8f73348a: lea    0x8(%rsp),%rax
  0x00007f8f8f73348f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f733493: mov    %r15,%rdi
  0x00007f8f8f733496: vzeroupper 
  0x00007f8f8f733499: mov    %rbp,0x330(%r15)
  0x00007f8f8f7334a0: mov    %rax,0x320(%r15)
  0x00007f8f8f7334a7: test   $0xf,%esp
  0x00007f8f8f7334ad: je     0x00007f8f8f7334c5
  0x00007f8f8f7334b3: sub    $0x8,%rsp
  0x00007f8f8f7334b7: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f7334bc: add    $0x8,%rsp
  0x00007f8f8f7334c0: jmpq   0x00007f8f8f7334ca
  0x00007f8f8f7334c5: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f7334ca: movabs $0x0,%r10
  0x00007f8f8f7334d4: mov    %r10,0x320(%r15)
  0x00007f8f8f7334db: movabs $0x0,%r10
  0x00007f8f8f7334e5: mov    %r10,0x330(%r15)
  0x00007f8f8f7334ec: movabs $0x0,%r10
  0x00007f8f8f7334f6: mov    %r10,0x328(%r15)
  0x00007f8f8f7334fd: vzeroupper 
  0x00007f8f8f733500: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f733508: je     0x00007f8f8f733513
  0x00007f8f8f73350e: jmpq   0x00007f8f8f71a780
  0x00007f8f8f733513: mov    -0x40(%rbp),%r13
  0x00007f8f8f733517: mov    -0x38(%rbp),%r14
  0x00007f8f8f73351b: retq   
  0x00007f8f8f73351c: mov    %rax,%rsi
  0x00007f8f8f73351f: mov    -0x8(%rbp),%rdx
  0x00007f8f8f733523: leaveq 
  0x00007f8f8f733524: pop    %rcx
  0x00007f8f8f733525: mov    %rdx,%rsp
  0x00007f8f8f733528: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73352c: push   %rcx
  0x00007f8f8f73352d: jmpq   *0x110(%rbx)
  0x00007f8f8f733533: mov    -0x28(%rbp),%rax
  0x00007f8f8f733537: test   %rax,%rax
  0x00007f8f8f73353a: je     0x00007f8f8f733552
  0x00007f8f8f733540: addq   $0x1,0x18(%rax)
  0x00007f8f8f733545: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f73354a: add    $0x20,%rax
  0x00007f8f8f73354e: mov    %rax,-0x28(%rbp)
  0x00007f8f8f733552: movzbl 0x3(%r13),%ebx
  0x00007f8f8f733557: add    $0x3,%r13
  0x00007f8f8f73355b: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f733565: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f733569: nopl   0x0(%rax)
  0x00007f8f8f733570: add    %al,(%rax)
  0x00007f8f8f733572: add    %al,(%rax)
  0x00007f8f8f733574: add    %al,(%rax)
  0x00007f8f8f733576: add    %al,(%rax)
  0x00007f8f8f733578: add    %al,(%rax)
  0x00007f8f8f73357a: add    %al,(%rax)
  0x00007f8f8f73357c: add    %al,(%rax)
  0x00007f8f8f73357e: add    %al,(%rax)

----------------------------------------------------------------------
if_acmpne  166 if_acmpne  [0x00007f8f8f7335a0, 0x00007f8f8f7339c0]  1056 bytes

  0x00007f8f8f7335a0: pop    %rax
  0x00007f8f8f7335a1: pop    %rdx
  0x00007f8f8f7335a2: cmp    %rax,%rdx
  0x00007f8f8f7335a5: je     0x00007f8f8f733973
  0x00007f8f8f7335ab: mov    -0x18(%rbp),%rcx
  0x00007f8f8f7335af: mov    -0x28(%rbp),%rax
  0x00007f8f8f7335b3: test   %rax,%rax
  0x00007f8f8f7335b6: je     0x00007f8f8f7335d4
  0x00007f8f8f7335bc: mov    0x8(%rax),%rbx
  0x00007f8f8f7335c0: add    $0x1,%rbx
  0x00007f8f8f7335c4: sbb    $0x0,%rbx
  0x00007f8f8f7335c8: mov    %rbx,0x8(%rax)
  0x00007f8f8f7335cc: add    0x10(%rax),%rax
  0x00007f8f8f7335d0: mov    %rax,-0x28(%rbp)
  0x00007f8f8f7335d4: movswl 0x1(%r13),%edx
  0x00007f8f8f7335d9: bswap  %edx
  0x00007f8f8f7335db: sar    $0x10,%edx
  0x00007f8f8f7335de: movslq %edx,%rdx
  0x00007f8f8f7335e1: add    %rdx,%r13
  0x00007f8f8f7335e4: test   %edx,%edx
  0x00007f8f8f7335e6: jns    0x00007f8f8f7336e8
  0x00007f8f8f7335ec: mov    0x18(%rcx),%rax
  0x00007f8f8f7335f0: test   %rax,%rax
  0x00007f8f8f7335f3: jne    0x00007f8f8f7336a9
  0x00007f8f8f7335f9: push   %rdx
  0x00007f8f8f7335fa: push   %rcx
  0x00007f8f8f7335fb: callq  0x00007f8f8f733605
  0x00007f8f8f733600: jmpq   0x00007f8f8f73369a
  0x00007f8f8f733605: mov    %rcx,%rsi
  0x00007f8f8f733608: lea    0x8(%rsp),%rax
  0x00007f8f8f73360d: mov    %r13,-0x40(%rbp)
  0x00007f8f8f733611: mov    %r15,%rdi
  0x00007f8f8f733614: vzeroupper 
  0x00007f8f8f733617: mov    %rbp,0x330(%r15)
  0x00007f8f8f73361e: mov    %rax,0x320(%r15)
  0x00007f8f8f733625: test   $0xf,%esp
  0x00007f8f8f73362b: je     0x00007f8f8f733643
  0x00007f8f8f733631: sub    $0x8,%rsp
  0x00007f8f8f733635: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f73363a: add    $0x8,%rsp
  0x00007f8f8f73363e: jmpq   0x00007f8f8f733648
  0x00007f8f8f733643: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f733648: movabs $0x0,%r10
  0x00007f8f8f733652: mov    %r10,0x320(%r15)
  0x00007f8f8f733659: movabs $0x0,%r10
  0x00007f8f8f733663: mov    %r10,0x330(%r15)
  0x00007f8f8f73366a: movabs $0x0,%r10
  0x00007f8f8f733674: mov    %r10,0x328(%r15)
  0x00007f8f8f73367b: vzeroupper 
  0x00007f8f8f73367e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f733686: je     0x00007f8f8f733691
  0x00007f8f8f73368c: jmpq   0x00007f8f8f71a780
  0x00007f8f8f733691: mov    -0x40(%rbp),%r13
  0x00007f8f8f733695: mov    -0x38(%rbp),%r14
  0x00007f8f8f733699: retq   
  0x00007f8f8f73369a: pop    %rcx
  0x00007f8f8f73369b: pop    %rdx
  0x00007f8f8f73369c: mov    0x18(%rcx),%rax
  0x00007f8f8f7336a0: test   %rax,%rax
  0x00007f8f8f7336a3: je     0x00007f8f8f7336e8
  0x00007f8f8f7336a9: mov    0x10(%rcx),%rbx
  0x00007f8f8f7336ad: test   %rbx,%rbx
  0x00007f8f8f7336b0: je     0x00007f8f8f7336d2
  0x00007f8f8f7336b2: mov    0x108(%rbx),%eax
  0x00007f8f8f7336b8: add    $0x8,%eax
  0x00007f8f8f7336bb: mov    %eax,0x108(%rbx)
  0x00007f8f8f7336c1: and    0x11c(%rbx),%eax
  0x00007f8f8f7336c7: je     0x00007f8f8f733802
  0x00007f8f8f7336cd: jmpq   0x00007f8f8f7336e8
  0x00007f8f8f7336d2: mov    0x18(%rcx),%rcx
  0x00007f8f8f7336d6: mov    0x1c(%rcx),%eax
  0x00007f8f8f7336d9: add    $0x8,%eax
  0x00007f8f8f7336dc: mov    %eax,0x1c(%rcx)
  0x00007f8f8f7336df: and    0x34(%rcx),%eax
  0x00007f8f8f7336e2: je     0x00007f8f8f733802
  0x00007f8f8f7336e8: movzbl 0x0(%r13),%ebx
  0x00007f8f8f7336ed: testb  $0x8,0x108(%r15)
  0x00007f8f8f7336f5: je     0x00007f8f8f733703
  0x00007f8f8f7336f7: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f733701: jmp    0x00007f8f8f73370d
  0x00007f8f8f733703: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73370d: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f733711: callq  0x00007f8f8f73371b
  0x00007f8f8f733716: jmpq   0x00007f8f8f7337ad
  0x00007f8f8f73371b: lea    0x8(%rsp),%rax
  0x00007f8f8f733720: mov    %r13,-0x40(%rbp)
  0x00007f8f8f733724: mov    %r15,%rdi
  0x00007f8f8f733727: vzeroupper 
  0x00007f8f8f73372a: mov    %rbp,0x330(%r15)
  0x00007f8f8f733731: mov    %rax,0x320(%r15)
  0x00007f8f8f733738: test   $0xf,%esp
  0x00007f8f8f73373e: je     0x00007f8f8f733756
  0x00007f8f8f733744: sub    $0x8,%rsp
  0x00007f8f8f733748: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73374d: add    $0x8,%rsp
  0x00007f8f8f733751: jmpq   0x00007f8f8f73375b
  0x00007f8f8f733756: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73375b: movabs $0x0,%r10
  0x00007f8f8f733765: mov    %r10,0x320(%r15)
  0x00007f8f8f73376c: movabs $0x0,%r10
  0x00007f8f8f733776: mov    %r10,0x330(%r15)
  0x00007f8f8f73377d: movabs $0x0,%r10
  0x00007f8f8f733787: mov    %r10,0x328(%r15)
  0x00007f8f8f73378e: vzeroupper 
  0x00007f8f8f733791: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f733799: je     0x00007f8f8f7337a4
  0x00007f8f8f73379f: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7337a4: mov    -0x40(%rbp),%r13
  0x00007f8f8f7337a8: mov    -0x38(%rbp),%r14
  0x00007f8f8f7337ac: retq   
  0x00007f8f8f7337ad: push   %rax
  0x00007f8f8f7337ae: push   %rbx
  0x00007f8f8f7337af: mov    -0x18(%rbp),%rbx
  0x00007f8f8f7337b3: mov    0x10(%rbx),%rax
  0x00007f8f8f7337b7: test   %rax,%rax
  0x00007f8f8f7337ba: je     0x00007f8f8f7337f7
  0x00007f8f8f7337c0: mov    %r13,%rsi
  0x00007f8f8f7337c3: mov    %rbx,%rdi
  0x00007f8f8f7337c6: test   $0xf,%esp
  0x00007f8f8f7337cc: je     0x00007f8f8f7337e4
  0x00007f8f8f7337d2: sub    $0x8,%rsp
  0x00007f8f8f7337d6: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7337db: add    $0x8,%rsp
  0x00007f8f8f7337df: jmpq   0x00007f8f8f7337e9
  0x00007f8f8f7337e4: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f7337e9: mov    0x10(%rbx),%rbx
  0x00007f8f8f7337ed: add    $0x138,%rbx
  0x00007f8f8f7337f4: add    %rbx,%rax
  0x00007f8f8f7337f7: mov    %rax,-0x28(%rbp)
  0x00007f8f8f7337fb: pop    %rbx
  0x00007f8f8f7337fc: pop    %rax
  0x00007f8f8f7337fd: jmpq   0x00007f8f8f7336e8
  0x00007f8f8f733802: neg    %rdx
  0x00007f8f8f733805: add    %r13,%rdx
  0x00007f8f8f733808: callq  0x00007f8f8f733812
  0x00007f8f8f73380d: jmpq   0x00007f8f8f7338a7
  0x00007f8f8f733812: mov    %rdx,%rsi
  0x00007f8f8f733815: lea    0x8(%rsp),%rax
  0x00007f8f8f73381a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73381e: mov    %r15,%rdi
  0x00007f8f8f733821: vzeroupper 
  0x00007f8f8f733824: mov    %rbp,0x330(%r15)
  0x00007f8f8f73382b: mov    %rax,0x320(%r15)
  0x00007f8f8f733832: test   $0xf,%esp
  0x00007f8f8f733838: je     0x00007f8f8f733850
  0x00007f8f8f73383e: sub    $0x8,%rsp
  0x00007f8f8f733842: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f733847: add    $0x8,%rsp
  0x00007f8f8f73384b: jmpq   0x00007f8f8f733855
  0x00007f8f8f733850: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f733855: movabs $0x0,%r10
  0x00007f8f8f73385f: mov    %r10,0x320(%r15)
  0x00007f8f8f733866: movabs $0x0,%r10
  0x00007f8f8f733870: mov    %r10,0x330(%r15)
  0x00007f8f8f733877: movabs $0x0,%r10
  0x00007f8f8f733881: mov    %r10,0x328(%r15)
  0x00007f8f8f733888: vzeroupper 
  0x00007f8f8f73388b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f733893: je     0x00007f8f8f73389e
  0x00007f8f8f733899: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73389e: mov    -0x40(%rbp),%r13
  0x00007f8f8f7338a2: mov    -0x38(%rbp),%r14
  0x00007f8f8f7338a6: retq   
  0x00007f8f8f7338a7: test   %rax,%rax
  0x00007f8f8f7338aa: je     0x00007f8f8f7336e8
  0x00007f8f8f7338b0: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f7338b7: jne    0x00007f8f8f7336e8
  0x00007f8f8f7338bd: mov    %rax,%rbx
  0x00007f8f8f7338c0: callq  0x00007f8f8f7338ca
  0x00007f8f8f7338c5: jmpq   0x00007f8f8f73395c
  0x00007f8f8f7338ca: lea    0x8(%rsp),%rax
  0x00007f8f8f7338cf: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7338d3: mov    %r15,%rdi
  0x00007f8f8f7338d6: vzeroupper 
  0x00007f8f8f7338d9: mov    %rbp,0x330(%r15)
  0x00007f8f8f7338e0: mov    %rax,0x320(%r15)
  0x00007f8f8f7338e7: test   $0xf,%esp
  0x00007f8f8f7338ed: je     0x00007f8f8f733905
  0x00007f8f8f7338f3: sub    $0x8,%rsp
  0x00007f8f8f7338f7: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f7338fc: add    $0x8,%rsp
  0x00007f8f8f733900: jmpq   0x00007f8f8f73390a
  0x00007f8f8f733905: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f73390a: movabs $0x0,%r10
  0x00007f8f8f733914: mov    %r10,0x320(%r15)
  0x00007f8f8f73391b: movabs $0x0,%r10
  0x00007f8f8f733925: mov    %r10,0x330(%r15)
  0x00007f8f8f73392c: movabs $0x0,%r10
  0x00007f8f8f733936: mov    %r10,0x328(%r15)
  0x00007f8f8f73393d: vzeroupper 
  0x00007f8f8f733940: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f733948: je     0x00007f8f8f733953
  0x00007f8f8f73394e: jmpq   0x00007f8f8f71a780
  0x00007f8f8f733953: mov    -0x40(%rbp),%r13
  0x00007f8f8f733957: mov    -0x38(%rbp),%r14
  0x00007f8f8f73395b: retq   
  0x00007f8f8f73395c: mov    %rax,%rsi
  0x00007f8f8f73395f: mov    -0x8(%rbp),%rdx
  0x00007f8f8f733963: leaveq 
  0x00007f8f8f733964: pop    %rcx
  0x00007f8f8f733965: mov    %rdx,%rsp
  0x00007f8f8f733968: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73396c: push   %rcx
  0x00007f8f8f73396d: jmpq   *0x110(%rbx)
  0x00007f8f8f733973: mov    -0x28(%rbp),%rax
  0x00007f8f8f733977: test   %rax,%rax
  0x00007f8f8f73397a: je     0x00007f8f8f733992
  0x00007f8f8f733980: addq   $0x1,0x18(%rax)
  0x00007f8f8f733985: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f73398a: add    $0x20,%rax
  0x00007f8f8f73398e: mov    %rax,-0x28(%rbp)
  0x00007f8f8f733992: movzbl 0x3(%r13),%ebx
  0x00007f8f8f733997: add    $0x3,%r13
  0x00007f8f8f73399b: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f7339a5: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7339a9: nopl   0x0(%rax)
  0x00007f8f8f7339b0: add    %al,(%rax)
  0x00007f8f8f7339b2: add    %al,(%rax)
  0x00007f8f8f7339b4: add    %al,(%rax)
  0x00007f8f8f7339b6: add    %al,(%rax)
  0x00007f8f8f7339b8: add    %al,(%rax)
  0x00007f8f8f7339ba: add    %al,(%rax)
  0x00007f8f8f7339bc: add    %al,(%rax)
  0x00007f8f8f7339be: add    %al,(%rax)

----------------------------------------------------------------------
goto  167 goto  [0x00007f8f8f7339e0, 0x00007f8f8f733e00]  1056 bytes

  0x00007f8f8f7339e0: push   %rax
  0x00007f8f8f7339e1: jmpq   0x00007f8f8f733a1f
  0x00007f8f8f7339e6: sub    $0x8,%rsp
  0x00007f8f8f7339ea: vmovss %xmm0,(%rsp)
  0x00007f8f8f7339ef: jmpq   0x00007f8f8f733a1f
  0x00007f8f8f7339f4: sub    $0x10,%rsp
  0x00007f8f8f7339f8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f7339fd: jmpq   0x00007f8f8f733a1f
  0x00007f8f8f733a02: sub    $0x10,%rsp
  0x00007f8f8f733a06: mov    %rax,(%rsp)
  0x00007f8f8f733a0a: movabs $0x0,%r10
  0x00007f8f8f733a14: mov    %r10,0x8(%rsp)
  0x00007f8f8f733a19: jmpq   0x00007f8f8f733a1f
  0x00007f8f8f733a1e: push   %rax
  0x00007f8f8f733a1f: mov    -0x18(%rbp),%rcx
  0x00007f8f8f733a23: mov    -0x28(%rbp),%rax
  0x00007f8f8f733a27: test   %rax,%rax
  0x00007f8f8f733a2a: je     0x00007f8f8f733a48
  0x00007f8f8f733a30: mov    0x8(%rax),%rbx
  0x00007f8f8f733a34: add    $0x1,%rbx
  0x00007f8f8f733a38: sbb    $0x0,%rbx
  0x00007f8f8f733a3c: mov    %rbx,0x8(%rax)
  0x00007f8f8f733a40: add    0x10(%rax),%rax
  0x00007f8f8f733a44: mov    %rax,-0x28(%rbp)
  0x00007f8f8f733a48: movswl 0x1(%r13),%edx
  0x00007f8f8f733a4d: bswap  %edx
  0x00007f8f8f733a4f: sar    $0x10,%edx
  0x00007f8f8f733a52: movslq %edx,%rdx
  0x00007f8f8f733a55: add    %rdx,%r13
  0x00007f8f8f733a58: test   %edx,%edx
  0x00007f8f8f733a5a: jns    0x00007f8f8f733b5c
  0x00007f8f8f733a60: mov    0x18(%rcx),%rax
  0x00007f8f8f733a64: test   %rax,%rax
  0x00007f8f8f733a67: jne    0x00007f8f8f733b1d
  0x00007f8f8f733a6d: push   %rdx
  0x00007f8f8f733a6e: push   %rcx
  0x00007f8f8f733a6f: callq  0x00007f8f8f733a79
  0x00007f8f8f733a74: jmpq   0x00007f8f8f733b0e
  0x00007f8f8f733a79: mov    %rcx,%rsi
  0x00007f8f8f733a7c: lea    0x8(%rsp),%rax
  0x00007f8f8f733a81: mov    %r13,-0x40(%rbp)
  0x00007f8f8f733a85: mov    %r15,%rdi
  0x00007f8f8f733a88: vzeroupper 
  0x00007f8f8f733a8b: mov    %rbp,0x330(%r15)
  0x00007f8f8f733a92: mov    %rax,0x320(%r15)
  0x00007f8f8f733a99: test   $0xf,%esp
  0x00007f8f8f733a9f: je     0x00007f8f8f733ab7
  0x00007f8f8f733aa5: sub    $0x8,%rsp
  0x00007f8f8f733aa9: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f733aae: add    $0x8,%rsp
  0x00007f8f8f733ab2: jmpq   0x00007f8f8f733abc
  0x00007f8f8f733ab7: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f733abc: movabs $0x0,%r10
  0x00007f8f8f733ac6: mov    %r10,0x320(%r15)
  0x00007f8f8f733acd: movabs $0x0,%r10
  0x00007f8f8f733ad7: mov    %r10,0x330(%r15)
  0x00007f8f8f733ade: movabs $0x0,%r10
  0x00007f8f8f733ae8: mov    %r10,0x328(%r15)
  0x00007f8f8f733aef: vzeroupper 
  0x00007f8f8f733af2: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f733afa: je     0x00007f8f8f733b05
  0x00007f8f8f733b00: jmpq   0x00007f8f8f71a780
  0x00007f8f8f733b05: mov    -0x40(%rbp),%r13
  0x00007f8f8f733b09: mov    -0x38(%rbp),%r14
  0x00007f8f8f733b0d: retq   
  0x00007f8f8f733b0e: pop    %rcx
  0x00007f8f8f733b0f: pop    %rdx
  0x00007f8f8f733b10: mov    0x18(%rcx),%rax
  0x00007f8f8f733b14: test   %rax,%rax
  0x00007f8f8f733b17: je     0x00007f8f8f733b5c
  0x00007f8f8f733b1d: mov    0x10(%rcx),%rbx
  0x00007f8f8f733b21: test   %rbx,%rbx
  0x00007f8f8f733b24: je     0x00007f8f8f733b46
  0x00007f8f8f733b26: mov    0x108(%rbx),%eax
  0x00007f8f8f733b2c: add    $0x8,%eax
  0x00007f8f8f733b2f: mov    %eax,0x108(%rbx)
  0x00007f8f8f733b35: and    0x11c(%rbx),%eax
  0x00007f8f8f733b3b: je     0x00007f8f8f733c76
  0x00007f8f8f733b41: jmpq   0x00007f8f8f733b5c
  0x00007f8f8f733b46: mov    0x18(%rcx),%rcx
  0x00007f8f8f733b4a: mov    0x1c(%rcx),%eax
  0x00007f8f8f733b4d: add    $0x8,%eax
  0x00007f8f8f733b50: mov    %eax,0x1c(%rcx)
  0x00007f8f8f733b53: and    0x34(%rcx),%eax
  0x00007f8f8f733b56: je     0x00007f8f8f733c76
  0x00007f8f8f733b5c: movzbl 0x0(%r13),%ebx
  0x00007f8f8f733b61: testb  $0x8,0x108(%r15)
  0x00007f8f8f733b69: je     0x00007f8f8f733b77
  0x00007f8f8f733b6b: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f733b75: jmp    0x00007f8f8f733b81
  0x00007f8f8f733b77: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f733b81: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f733b85: callq  0x00007f8f8f733b8f
  0x00007f8f8f733b8a: jmpq   0x00007f8f8f733c21
  0x00007f8f8f733b8f: lea    0x8(%rsp),%rax
  0x00007f8f8f733b94: mov    %r13,-0x40(%rbp)
  0x00007f8f8f733b98: mov    %r15,%rdi
  0x00007f8f8f733b9b: vzeroupper 
  0x00007f8f8f733b9e: mov    %rbp,0x330(%r15)
  0x00007f8f8f733ba5: mov    %rax,0x320(%r15)
  0x00007f8f8f733bac: test   $0xf,%esp
  0x00007f8f8f733bb2: je     0x00007f8f8f733bca
  0x00007f8f8f733bb8: sub    $0x8,%rsp
  0x00007f8f8f733bbc: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f733bc1: add    $0x8,%rsp
  0x00007f8f8f733bc5: jmpq   0x00007f8f8f733bcf
  0x00007f8f8f733bca: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f733bcf: movabs $0x0,%r10
  0x00007f8f8f733bd9: mov    %r10,0x320(%r15)
  0x00007f8f8f733be0: movabs $0x0,%r10
  0x00007f8f8f733bea: mov    %r10,0x330(%r15)
  0x00007f8f8f733bf1: movabs $0x0,%r10
  0x00007f8f8f733bfb: mov    %r10,0x328(%r15)
  0x00007f8f8f733c02: vzeroupper 
  0x00007f8f8f733c05: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f733c0d: je     0x00007f8f8f733c18
  0x00007f8f8f733c13: jmpq   0x00007f8f8f71a780
  0x00007f8f8f733c18: mov    -0x40(%rbp),%r13
  0x00007f8f8f733c1c: mov    -0x38(%rbp),%r14
  0x00007f8f8f733c20: retq   
  0x00007f8f8f733c21: push   %rax
  0x00007f8f8f733c22: push   %rbx
  0x00007f8f8f733c23: mov    -0x18(%rbp),%rbx
  0x00007f8f8f733c27: mov    0x10(%rbx),%rax
  0x00007f8f8f733c2b: test   %rax,%rax
  0x00007f8f8f733c2e: je     0x00007f8f8f733c6b
  0x00007f8f8f733c34: mov    %r13,%rsi
  0x00007f8f8f733c37: mov    %rbx,%rdi
  0x00007f8f8f733c3a: test   $0xf,%esp
  0x00007f8f8f733c40: je     0x00007f8f8f733c58
  0x00007f8f8f733c46: sub    $0x8,%rsp
  0x00007f8f8f733c4a: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f733c4f: add    $0x8,%rsp
  0x00007f8f8f733c53: jmpq   0x00007f8f8f733c5d
  0x00007f8f8f733c58: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f733c5d: mov    0x10(%rbx),%rbx
  0x00007f8f8f733c61: add    $0x138,%rbx
  0x00007f8f8f733c68: add    %rbx,%rax
  0x00007f8f8f733c6b: mov    %rax,-0x28(%rbp)
  0x00007f8f8f733c6f: pop    %rbx
  0x00007f8f8f733c70: pop    %rax
  0x00007f8f8f733c71: jmpq   0x00007f8f8f733b5c
  0x00007f8f8f733c76: neg    %rdx
  0x00007f8f8f733c79: add    %r13,%rdx
  0x00007f8f8f733c7c: callq  0x00007f8f8f733c86
  0x00007f8f8f733c81: jmpq   0x00007f8f8f733d1b
  0x00007f8f8f733c86: mov    %rdx,%rsi
  0x00007f8f8f733c89: lea    0x8(%rsp),%rax
  0x00007f8f8f733c8e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f733c92: mov    %r15,%rdi
  0x00007f8f8f733c95: vzeroupper 
  0x00007f8f8f733c98: mov    %rbp,0x330(%r15)
  0x00007f8f8f733c9f: mov    %rax,0x320(%r15)
  0x00007f8f8f733ca6: test   $0xf,%esp
  0x00007f8f8f733cac: je     0x00007f8f8f733cc4
  0x00007f8f8f733cb2: sub    $0x8,%rsp
  0x00007f8f8f733cb6: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f733cbb: add    $0x8,%rsp
  0x00007f8f8f733cbf: jmpq   0x00007f8f8f733cc9
  0x00007f8f8f733cc4: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f733cc9: movabs $0x0,%r10
  0x00007f8f8f733cd3: mov    %r10,0x320(%r15)
  0x00007f8f8f733cda: movabs $0x0,%r10
  0x00007f8f8f733ce4: mov    %r10,0x330(%r15)
  0x00007f8f8f733ceb: movabs $0x0,%r10
  0x00007f8f8f733cf5: mov    %r10,0x328(%r15)
  0x00007f8f8f733cfc: vzeroupper 
  0x00007f8f8f733cff: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f733d07: je     0x00007f8f8f733d12
  0x00007f8f8f733d0d: jmpq   0x00007f8f8f71a780
  0x00007f8f8f733d12: mov    -0x40(%rbp),%r13
  0x00007f8f8f733d16: mov    -0x38(%rbp),%r14
  0x00007f8f8f733d1a: retq   
  0x00007f8f8f733d1b: test   %rax,%rax
  0x00007f8f8f733d1e: je     0x00007f8f8f733b5c
  0x00007f8f8f733d24: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f733d2b: jne    0x00007f8f8f733b5c
  0x00007f8f8f733d31: mov    %rax,%rbx
  0x00007f8f8f733d34: callq  0x00007f8f8f733d3e
  0x00007f8f8f733d39: jmpq   0x00007f8f8f733dd0
  0x00007f8f8f733d3e: lea    0x8(%rsp),%rax
  0x00007f8f8f733d43: mov    %r13,-0x40(%rbp)
  0x00007f8f8f733d47: mov    %r15,%rdi
  0x00007f8f8f733d4a: vzeroupper 
  0x00007f8f8f733d4d: mov    %rbp,0x330(%r15)
  0x00007f8f8f733d54: mov    %rax,0x320(%r15)
  0x00007f8f8f733d5b: test   $0xf,%esp
  0x00007f8f8f733d61: je     0x00007f8f8f733d79
  0x00007f8f8f733d67: sub    $0x8,%rsp
  0x00007f8f8f733d6b: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f733d70: add    $0x8,%rsp
  0x00007f8f8f733d74: jmpq   0x00007f8f8f733d7e
  0x00007f8f8f733d79: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f733d7e: movabs $0x0,%r10
  0x00007f8f8f733d88: mov    %r10,0x320(%r15)
  0x00007f8f8f733d8f: movabs $0x0,%r10
  0x00007f8f8f733d99: mov    %r10,0x330(%r15)
  0x00007f8f8f733da0: movabs $0x0,%r10
  0x00007f8f8f733daa: mov    %r10,0x328(%r15)
  0x00007f8f8f733db1: vzeroupper 
  0x00007f8f8f733db4: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f733dbc: je     0x00007f8f8f733dc7
  0x00007f8f8f733dc2: jmpq   0x00007f8f8f71a780
  0x00007f8f8f733dc7: mov    -0x40(%rbp),%r13
  0x00007f8f8f733dcb: mov    -0x38(%rbp),%r14
  0x00007f8f8f733dcf: retq   
  0x00007f8f8f733dd0: mov    %rax,%rsi
  0x00007f8f8f733dd3: mov    -0x8(%rbp),%rdx
  0x00007f8f8f733dd7: leaveq 
  0x00007f8f8f733dd8: pop    %rcx
  0x00007f8f8f733dd9: mov    %rdx,%rsp
  0x00007f8f8f733ddc: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f733de0: push   %rcx
  0x00007f8f8f733de1: jmpq   *0x110(%rbx)
  0x00007f8f8f733de7: nop
  0x00007f8f8f733de8: add    %al,(%rax)
  0x00007f8f8f733dea: add    %al,(%rax)
  0x00007f8f8f733dec: add    %al,(%rax)
  0x00007f8f8f733dee: add    %al,(%rax)
  0x00007f8f8f733df0: add    %al,(%rax)
  0x00007f8f8f733df2: add    %al,(%rax)
  0x00007f8f8f733df4: add    %al,(%rax)
  0x00007f8f8f733df6: add    %al,(%rax)
  0x00007f8f8f733df8: add    %al,(%rax)
  0x00007f8f8f733dfa: add    %al,(%rax)
  0x00007f8f8f733dfc: add    %al,(%rax)
  0x00007f8f8f733dfe: add    %al,(%rax)

----------------------------------------------------------------------
jsr  168 jsr  [0x00007f8f8f733e20, 0x00007f8f8f733ee0]  192 bytes

  0x00007f8f8f733e20: push   %rax
  0x00007f8f8f733e21: jmpq   0x00007f8f8f733e5f
  0x00007f8f8f733e26: sub    $0x8,%rsp
  0x00007f8f8f733e2a: vmovss %xmm0,(%rsp)
  0x00007f8f8f733e2f: jmpq   0x00007f8f8f733e5f
  0x00007f8f8f733e34: sub    $0x10,%rsp
  0x00007f8f8f733e38: vmovsd %xmm0,(%rsp)
  0x00007f8f8f733e3d: jmpq   0x00007f8f8f733e5f
  0x00007f8f8f733e42: sub    $0x10,%rsp
  0x00007f8f8f733e46: mov    %rax,(%rsp)
  0x00007f8f8f733e4a: movabs $0x0,%r10
  0x00007f8f8f733e54: mov    %r10,0x8(%rsp)
  0x00007f8f8f733e59: jmpq   0x00007f8f8f733e5f
  0x00007f8f8f733e5e: push   %rax
  0x00007f8f8f733e5f: mov    -0x18(%rbp),%rcx
  0x00007f8f8f733e63: mov    -0x28(%rbp),%rax
  0x00007f8f8f733e67: test   %rax,%rax
  0x00007f8f8f733e6a: je     0x00007f8f8f733e88
  0x00007f8f8f733e70: mov    0x8(%rax),%rbx
  0x00007f8f8f733e74: add    $0x1,%rbx
  0x00007f8f8f733e78: sbb    $0x0,%rbx
  0x00007f8f8f733e7c: mov    %rbx,0x8(%rax)
  0x00007f8f8f733e80: add    0x10(%rax),%rax
  0x00007f8f8f733e84: mov    %rax,-0x28(%rbp)
  0x00007f8f8f733e88: movswl 0x1(%r13),%edx
  0x00007f8f8f733e8d: bswap  %edx
  0x00007f8f8f733e8f: sar    $0x10,%edx
  0x00007f8f8f733e92: movslq %edx,%rdx
  0x00007f8f8f733e95: movzbl 0x0(%r13,%rdx,1),%ebx
  0x00007f8f8f733e9b: lea    -0x35(%r13),%rax
  0x00007f8f8f733e9f: sub    0x8(%rcx),%rax
  0x00007f8f8f733ea3: add    %rdx,%r13
  0x00007f8f8f733ea6: push   %rax
  0x00007f8f8f733ea7: testb  $0x8,0x108(%r15)
  0x00007f8f8f733eaf: je     0x00007f8f8f733ebd
  0x00007f8f8f733eb1: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f733ebb: jmp    0x00007f8f8f733ec7
  0x00007f8f8f733ebd: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f733ec7: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f733ecb: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f733ed0: add    %al,(%rax)
  0x00007f8f8f733ed2: add    %al,(%rax)
  0x00007f8f8f733ed4: add    %al,(%rax)
  0x00007f8f8f733ed6: add    %al,(%rax)
  0x00007f8f8f733ed8: add    %al,(%rax)
  0x00007f8f8f733eda: add    %al,(%rax)
  0x00007f8f8f733edc: add    %al,(%rax)
  0x00007f8f8f733ede: add    %al,(%rax)

----------------------------------------------------------------------
ret  169 ret  [0x00007f8f8f733f00, 0x00007f8f8f7341c0]  704 bytes

  0x00007f8f8f733f00: push   %rax
  0x00007f8f8f733f01: jmpq   0x00007f8f8f733f3f
  0x00007f8f8f733f06: sub    $0x8,%rsp
  0x00007f8f8f733f0a: vmovss %xmm0,(%rsp)
  0x00007f8f8f733f0f: jmpq   0x00007f8f8f733f3f
  0x00007f8f8f733f14: sub    $0x10,%rsp
  0x00007f8f8f733f18: vmovsd %xmm0,(%rsp)
  0x00007f8f8f733f1d: jmpq   0x00007f8f8f733f3f
  0x00007f8f8f733f22: sub    $0x10,%rsp
  0x00007f8f8f733f26: mov    %rax,(%rsp)
  0x00007f8f8f733f2a: movabs $0x0,%r10
  0x00007f8f8f733f34: mov    %r10,0x8(%rsp)
  0x00007f8f8f733f39: jmpq   0x00007f8f8f733f3f
  0x00007f8f8f733f3e: push   %rax
  0x00007f8f8f733f3f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f733f44: neg    %rbx
  0x00007f8f8f733f47: movslq (%r14,%rbx,8),%rbx
  0x00007f8f8f733f4b: mov    -0x28(%rbp),%rcx
  0x00007f8f8f733f4f: test   %rcx,%rcx
  0x00007f8f8f733f52: je     0x00007f8f8f734045
  0x00007f8f8f733f58: addq   $0x1,0x8(%rcx)
  0x00007f8f8f733f5d: sbbq   $0x0,0x8(%rcx)
  0x00007f8f8f733f62: cmp    0x10(%rcx),%rbx
  0x00007f8f8f733f66: jne    0x00007f8f8f733f83
  0x00007f8f8f733f6c: addq   $0x1,0x18(%rcx)
  0x00007f8f8f733f71: sbbq   $0x0,0x18(%rcx)
  0x00007f8f8f733f76: add    0x20(%rcx),%rcx
  0x00007f8f8f733f7a: mov    %rcx,-0x28(%rbp)
  0x00007f8f8f733f7e: jmpq   0x00007f8f8f734045
  0x00007f8f8f733f83: cmp    0x28(%rcx),%rbx
  0x00007f8f8f733f87: jne    0x00007f8f8f733fa4
  0x00007f8f8f733f8d: addq   $0x1,0x30(%rcx)
  0x00007f8f8f733f92: sbbq   $0x0,0x30(%rcx)
  0x00007f8f8f733f97: add    0x38(%rcx),%rcx
  0x00007f8f8f733f9b: mov    %rcx,-0x28(%rbp)
  0x00007f8f8f733f9f: jmpq   0x00007f8f8f734045
  0x00007f8f8f733fa4: push   %rbx
  0x00007f8f8f733fa5: callq  0x00007f8f8f733faf
  0x00007f8f8f733faa: jmpq   0x00007f8f8f734044
  0x00007f8f8f733faf: mov    %rbx,%rsi
  0x00007f8f8f733fb2: lea    0x8(%rsp),%rax
  0x00007f8f8f733fb7: mov    %r13,-0x40(%rbp)
  0x00007f8f8f733fbb: mov    %r15,%rdi
  0x00007f8f8f733fbe: vzeroupper 
  0x00007f8f8f733fc1: mov    %rbp,0x330(%r15)
  0x00007f8f8f733fc8: mov    %rax,0x320(%r15)
  0x00007f8f8f733fcf: test   $0xf,%esp
  0x00007f8f8f733fd5: je     0x00007f8f8f733fed
  0x00007f8f8f733fdb: sub    $0x8,%rsp
  0x00007f8f8f733fdf: callq  0x00007f8fad02f060 = InterpreterRuntime::update_mdp_for_ret(JavaThread*, int)
  0x00007f8f8f733fe4: add    $0x8,%rsp
  0x00007f8f8f733fe8: jmpq   0x00007f8f8f733ff2
  0x00007f8f8f733fed: callq  0x00007f8fad02f060 = InterpreterRuntime::update_mdp_for_ret(JavaThread*, int)
  0x00007f8f8f733ff2: movabs $0x0,%r10
  0x00007f8f8f733ffc: mov    %r10,0x320(%r15)
  0x00007f8f8f734003: movabs $0x0,%r10
  0x00007f8f8f73400d: mov    %r10,0x330(%r15)
  0x00007f8f8f734014: movabs $0x0,%r10
  0x00007f8f8f73401e: mov    %r10,0x328(%r15)
  0x00007f8f8f734025: vzeroupper 
  0x00007f8f8f734028: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f734030: je     0x00007f8f8f73403b
  0x00007f8f8f734036: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73403b: mov    -0x40(%rbp),%r13
  0x00007f8f8f73403f: mov    -0x38(%rbp),%r14
  0x00007f8f8f734043: retq   
  0x00007f8f8f734044: pop    %rbx
  0x00007f8f8f734045: mov    -0x18(%rbp),%rax
  0x00007f8f8f734049: mov    0x8(%rax),%r13
  0x00007f8f8f73404d: lea    0x38(%r13,%rbx,1),%r13
  0x00007f8f8f734052: movzbl 0x0(%r13),%ebx
  0x00007f8f8f734057: testb  $0x8,0x108(%r15)
  0x00007f8f8f73405f: je     0x00007f8f8f73406d
  0x00007f8f8f734061: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f73406b: jmp    0x00007f8f8f734077
  0x00007f8f8f73406d: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f734077: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73407b: movzwl 0x2(%r13),%ebx
  0x00007f8f8f734080: bswap  %ebx
  0x00007f8f8f734082: shr    $0x10,%ebx
  0x00007f8f8f734085: neg    %rbx
  0x00007f8f8f734088: mov    (%r14,%rbx,8),%rbx
  0x00007f8f8f73408c: mov    -0x28(%rbp),%rcx
  0x00007f8f8f734090: test   %rcx,%rcx
  0x00007f8f8f734093: je     0x00007f8f8f734186
  0x00007f8f8f734099: addq   $0x1,0x8(%rcx)
  0x00007f8f8f73409e: sbbq   $0x0,0x8(%rcx)
  0x00007f8f8f7340a3: cmp    0x10(%rcx),%rbx
  0x00007f8f8f7340a7: jne    0x00007f8f8f7340c4
  0x00007f8f8f7340ad: addq   $0x1,0x18(%rcx)
  0x00007f8f8f7340b2: sbbq   $0x0,0x18(%rcx)
  0x00007f8f8f7340b7: add    0x20(%rcx),%rcx
  0x00007f8f8f7340bb: mov    %rcx,-0x28(%rbp)
  0x00007f8f8f7340bf: jmpq   0x00007f8f8f734186
  0x00007f8f8f7340c4: cmp    0x28(%rcx),%rbx
  0x00007f8f8f7340c8: jne    0x00007f8f8f7340e5
  0x00007f8f8f7340ce: addq   $0x1,0x30(%rcx)
  0x00007f8f8f7340d3: sbbq   $0x0,0x30(%rcx)
  0x00007f8f8f7340d8: add    0x38(%rcx),%rcx
  0x00007f8f8f7340dc: mov    %rcx,-0x28(%rbp)
  0x00007f8f8f7340e0: jmpq   0x00007f8f8f734186
  0x00007f8f8f7340e5: push   %rbx
  0x00007f8f8f7340e6: callq  0x00007f8f8f7340f0
  0x00007f8f8f7340eb: jmpq   0x00007f8f8f734185
  0x00007f8f8f7340f0: mov    %rbx,%rsi
  0x00007f8f8f7340f3: lea    0x8(%rsp),%rax
  0x00007f8f8f7340f8: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7340fc: mov    %r15,%rdi
  0x00007f8f8f7340ff: vzeroupper 
  0x00007f8f8f734102: mov    %rbp,0x330(%r15)
  0x00007f8f8f734109: mov    %rax,0x320(%r15)
  0x00007f8f8f734110: test   $0xf,%esp
  0x00007f8f8f734116: je     0x00007f8f8f73412e
  0x00007f8f8f73411c: sub    $0x8,%rsp
  0x00007f8f8f734120: callq  0x00007f8fad02f060 = InterpreterRuntime::update_mdp_for_ret(JavaThread*, int)
  0x00007f8f8f734125: add    $0x8,%rsp
  0x00007f8f8f734129: jmpq   0x00007f8f8f734133
  0x00007f8f8f73412e: callq  0x00007f8fad02f060 = InterpreterRuntime::update_mdp_for_ret(JavaThread*, int)
  0x00007f8f8f734133: movabs $0x0,%r10
  0x00007f8f8f73413d: mov    %r10,0x320(%r15)
  0x00007f8f8f734144: movabs $0x0,%r10
  0x00007f8f8f73414e: mov    %r10,0x330(%r15)
  0x00007f8f8f734155: movabs $0x0,%r10
  0x00007f8f8f73415f: mov    %r10,0x328(%r15)
  0x00007f8f8f734166: vzeroupper 
  0x00007f8f8f734169: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f734171: je     0x00007f8f8f73417c
  0x00007f8f8f734177: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73417c: mov    -0x40(%rbp),%r13
  0x00007f8f8f734180: mov    -0x38(%rbp),%r14
  0x00007f8f8f734184: retq   
  0x00007f8f8f734185: pop    %rbx
  0x00007f8f8f734186: mov    -0x18(%rbp),%rax
  0x00007f8f8f73418a: mov    0x8(%rax),%r13
  0x00007f8f8f73418e: lea    0x38(%r13,%rbx,1),%r13
  0x00007f8f8f734193: movzbl 0x0(%r13),%ebx
  0x00007f8f8f734198: testb  $0x8,0x108(%r15)
  0x00007f8f8f7341a0: je     0x00007f8f8f7341ae
  0x00007f8f8f7341a2: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f7341ac: jmp    0x00007f8f8f7341b8
  0x00007f8f8f7341ae: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f7341b8: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7341bc: nopl   0x0(%rax)

----------------------------------------------------------------------
tableswitch  170 tableswitch  [0x00007f8f8f7341e0, 0x00007f8f8f7342a0]  192 bytes

  0x00007f8f8f7341e0: mov    (%rsp),%eax
  0x00007f8f8f7341e3: add    $0x8,%rsp
  0x00007f8f8f7341e7: lea    0x4(%r13),%rbx
  0x00007f8f8f7341eb: and    $0xfffffffffffffffc,%rbx
  0x00007f8f8f7341ef: mov    0x4(%rbx),%ecx
  0x00007f8f8f7341f2: mov    0x8(%rbx),%edx
  0x00007f8f8f7341f5: bswap  %ecx
  0x00007f8f8f7341f7: bswap  %edx
  0x00007f8f8f7341f9: cmp    %ecx,%eax
  0x00007f8f8f7341fb: jl     0x00007f8f8f73426e
  0x00007f8f8f734201: cmp    %edx,%eax
  0x00007f8f8f734203: jg     0x00007f8f8f73426e
  0x00007f8f8f734209: sub    %ecx,%eax
  0x00007f8f8f73420b: mov    0xc(%rbx,%rax,4),%edx
  0x00007f8f8f73420f: mov    -0x28(%rbp),%rbx
  0x00007f8f8f734213: test   %rbx,%rbx
  0x00007f8f8f734216: je     0x00007f8f8f73423c
  0x00007f8f8f73421c: mov    $0x10,%ecx
  0x00007f8f8f734221: imul   %rcx,%rax
  0x00007f8f8f734225: add    $0x20,%rax
  0x00007f8f8f734229: addq   $0x1,(%rbx,%rax,1)
  0x00007f8f8f73422e: sbbq   $0x0,(%rbx,%rax,1)
  0x00007f8f8f734233: add    0x8(%rbx,%rax,1),%rbx
  0x00007f8f8f734238: mov    %rbx,-0x28(%rbp)
  0x00007f8f8f73423c: bswap  %edx
  0x00007f8f8f73423e: movslq %edx,%rdx
  0x00007f8f8f734241: movzbl 0x0(%r13,%rdx,1),%ebx
  0x00007f8f8f734247: add    %rdx,%r13
  0x00007f8f8f73424a: testb  $0x8,0x108(%r15)
  0x00007f8f8f734252: je     0x00007f8f8f734260
  0x00007f8f8f734254: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f73425e: jmp    0x00007f8f8f73426a
  0x00007f8f8f734260: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73426a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73426e: mov    -0x28(%rbp),%rax
  0x00007f8f8f734272: test   %rax,%rax
  0x00007f8f8f734275: je     0x00007f8f8f73428d
  0x00007f8f8f73427b: addq   $0x1,0x10(%rax)
  0x00007f8f8f734280: sbbq   $0x0,0x10(%rax)
  0x00007f8f8f734285: add    0x18(%rax),%rax
  0x00007f8f8f734289: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73428d: mov    (%rbx),%edx
  0x00007f8f8f73428f: jmp    0x00007f8f8f73423c
  0x00007f8f8f734291: nopl   0x0(%rax)
  0x00007f8f8f734298: add    %al,(%rax)
  0x00007f8f8f73429a: add    %al,(%rax)
  0x00007f8f8f73429c: add    %al,(%rax)
  0x00007f8f8f73429e: add    %al,(%rax)

----------------------------------------------------------------------
lookupswitch  171 lookupswitch  [0x00007f8f8f7342c0, 0x00007f8f8f734340]  128 bytes

  0x00007f8f8f7342c0: mov    (%rsp),%eax
  0x00007f8f8f7342c3: add    $0x8,%rsp
  0x00007f8f8f7342c7: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f7342cc: sub    $0x80,%rsp
  0x00007f8f8f7342d3: mov    %rax,0x78(%rsp)
  0x00007f8f8f7342d8: mov    %rcx,0x70(%rsp)
  0x00007f8f8f7342dd: mov    %rdx,0x68(%rsp)
  0x00007f8f8f7342e2: mov    %rbx,0x60(%rsp)
  0x00007f8f8f7342e7: mov    %rbp,0x50(%rsp)
  0x00007f8f8f7342ec: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7342f1: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7342f6: mov    %r8,0x38(%rsp)
  0x00007f8f8f7342fb: mov    %r9,0x30(%rsp)
  0x00007f8f8f734300: mov    %r10,0x28(%rsp)
  0x00007f8f8f734305: mov    %r11,0x20(%rsp)
  0x00007f8f8f73430a: mov    %r12,0x18(%rsp)
  0x00007f8f8f73430f: mov    %r13,0x10(%rsp)
  0x00007f8f8f734314: mov    %r14,0x8(%rsp)
  0x00007f8f8f734319: mov    %r15,(%rsp)
  0x00007f8f8f73431d: movabs $0x7f8fad6abd30,%rdi
  0x00007f8f8f734327: movabs $0x7f8f8f7342c7,%rsi
  0x00007f8f8f734331: mov    %rsp,%rdx
  0x00007f8f8f734334: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f734338: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73433d: hlt    
  0x00007f8f8f73433e: xchg   %ax,%ax

----------------------------------------------------------------------
ireturn  172 ireturn  [0x00007f8f8f734360, 0x00007f8f8f734980]  1568 bytes

  0x00007f8f8f734360: mov    (%rsp),%eax
  0x00007f8f8f734363: add    $0x8,%rsp
  0x00007f8f8f734367: testb  $0x8,0x108(%r15)
  0x00007f8f8f73436f: je     0x00007f8f8f734419
  0x00007f8f8f734375: push   %rax
  0x00007f8f8f734376: callq  0x00007f8f8f734380
  0x00007f8f8f73437b: jmpq   0x00007f8f8f734412
  0x00007f8f8f734380: lea    0x8(%rsp),%rax
  0x00007f8f8f734385: mov    %r13,-0x40(%rbp)
  0x00007f8f8f734389: mov    %r15,%rdi
  0x00007f8f8f73438c: vzeroupper 
  0x00007f8f8f73438f: mov    %rbp,0x330(%r15)
  0x00007f8f8f734396: mov    %rax,0x320(%r15)
  0x00007f8f8f73439d: test   $0xf,%esp
  0x00007f8f8f7343a3: je     0x00007f8f8f7343bb
  0x00007f8f8f7343a9: sub    $0x8,%rsp
  0x00007f8f8f7343ad: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f7343b2: add    $0x8,%rsp
  0x00007f8f8f7343b6: jmpq   0x00007f8f8f7343c0
  0x00007f8f8f7343bb: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f7343c0: movabs $0x0,%r10
  0x00007f8f8f7343ca: mov    %r10,0x320(%r15)
  0x00007f8f8f7343d1: movabs $0x0,%r10
  0x00007f8f8f7343db: mov    %r10,0x330(%r15)
  0x00007f8f8f7343e2: movabs $0x0,%r10
  0x00007f8f8f7343ec: mov    %r10,0x328(%r15)
  0x00007f8f8f7343f3: vzeroupper 
  0x00007f8f8f7343f6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7343fe: je     0x00007f8f8f734409
  0x00007f8f8f734404: jmpq   0x00007f8f8f71a780
  0x00007f8f8f734409: mov    -0x40(%rbp),%r13
  0x00007f8f8f73440d: mov    -0x38(%rbp),%r14
  0x00007f8f8f734411: retq   
  0x00007f8f8f734412: mov    (%rsp),%eax
  0x00007f8f8f734415: add    $0x8,%rsp
  0x00007f8f8f734419: mov    -0x18(%rbp),%rcx
  0x00007f8f8f73441d: mov    0x8(%rcx),%rcx
  0x00007f8f8f734421: movzbl 0x26(%rcx),%ecx
  0x00007f8f8f734425: cmp    $0xa,%ecx
  0x00007f8f8f734428: je     0x00007f8f8f734464
  0x00007f8f8f73442e: cmp    $0x4,%ecx
  0x00007f8f8f734431: jne    0x00007f8f8f73443f
  0x00007f8f8f734437: and    $0x1,%eax
  0x00007f8f8f73443a: jmpq   0x00007f8f8f734464
  0x00007f8f8f73443f: cmp    $0x8,%ecx
  0x00007f8f8f734442: jne    0x00007f8f8f734450
  0x00007f8f8f734448: movsbl %al,%eax
  0x00007f8f8f73444b: jmpq   0x00007f8f8f734464
  0x00007f8f8f734450: cmp    $0x5,%ecx
  0x00007f8f8f734453: jne    0x00007f8f8f734461
  0x00007f8f8f734459: movzwl %ax,%eax
  0x00007f8f8f73445c: jmpq   0x00007f8f8f734464
  0x00007f8f8f734461: movswl %ax,%eax
  0x00007f8f8f734464: mov    0x3dd(%r15),%bl
  0x00007f8f8f73446b: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f734473: mov    -0x18(%rbp),%rcx
  0x00007f8f8f734477: mov    0x20(%rcx),%ecx
  0x00007f8f8f73447a: test   $0x20,%ecx
  0x00007f8f8f734480: je     0x00007f8f8f7346a1
  0x00007f8f8f734486: test   $0xff,%bl
  0x00007f8f8f734489: jne    0x00007f8f8f7347d8
  0x00007f8f8f73448f: push   %rax
  0x00007f8f8f734490: lea    -0x58(%rbp),%rsi
  0x00007f8f8f734494: mov    0x8(%rsi),%rax
  0x00007f8f8f734498: test   %rax,%rax
  0x00007f8f8f73449b: jne    0x00007f8f8f7345bb
  0x00007f8f8f7344a1: mov    (%rsp),%eax
  0x00007f8f8f7344a4: add    $0x8,%rsp
  0x00007f8f8f7344a8: callq  0x00007f8f8f7344b2
  0x00007f8f8f7344ad: jmpq   0x00007f8f8f734544
  0x00007f8f8f7344b2: lea    0x8(%rsp),%rax
  0x00007f8f8f7344b7: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7344bb: mov    %r15,%rdi
  0x00007f8f8f7344be: vzeroupper 
  0x00007f8f8f7344c1: mov    %rbp,0x330(%r15)
  0x00007f8f8f7344c8: mov    %rax,0x320(%r15)
  0x00007f8f8f7344cf: test   $0xf,%esp
  0x00007f8f8f7344d5: je     0x00007f8f8f7344ed
  0x00007f8f8f7344db: sub    $0x8,%rsp
  0x00007f8f8f7344df: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f7344e4: add    $0x8,%rsp
  0x00007f8f8f7344e8: jmpq   0x00007f8f8f7344f2
  0x00007f8f8f7344ed: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f7344f2: movabs $0x0,%r10
  0x00007f8f8f7344fc: mov    %r10,0x320(%r15)
  0x00007f8f8f734503: movabs $0x0,%r10
  0x00007f8f8f73450d: mov    %r10,0x330(%r15)
  0x00007f8f8f734514: movabs $0x0,%r10
  0x00007f8f8f73451e: mov    %r10,0x328(%r15)
  0x00007f8f8f734525: vzeroupper 
  0x00007f8f8f734528: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f734530: je     0x00007f8f8f73453b
  0x00007f8f8f734536: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73453b: mov    -0x40(%rbp),%r13
  0x00007f8f8f73453f: mov    -0x38(%rbp),%r14
  0x00007f8f8f734543: retq   
  0x00007f8f8f734544: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f734549: sub    $0x80,%rsp
  0x00007f8f8f734550: mov    %rax,0x78(%rsp)
  0x00007f8f8f734555: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73455a: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73455f: mov    %rbx,0x60(%rsp)
  0x00007f8f8f734564: mov    %rbp,0x50(%rsp)
  0x00007f8f8f734569: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73456e: mov    %rdi,0x40(%rsp)
  0x00007f8f8f734573: mov    %r8,0x38(%rsp)
  0x00007f8f8f734578: mov    %r9,0x30(%rsp)
  0x00007f8f8f73457d: mov    %r10,0x28(%rsp)
  0x00007f8f8f734582: mov    %r11,0x20(%rsp)
  0x00007f8f8f734587: mov    %r12,0x18(%rsp)
  0x00007f8f8f73458c: mov    %r13,0x10(%rsp)
  0x00007f8f8f734591: mov    %r14,0x8(%rsp)
  0x00007f8f8f734596: mov    %r15,(%rsp)
  0x00007f8f8f73459a: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f7345a4: movabs $0x7f8f8f734544,%rsi
  0x00007f8f8f7345ae: mov    %rsp,%rdx
  0x00007f8f8f7345b1: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f7345b5: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f7345ba: hlt    
  0x00007f8f8f7345bb: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7345bf: lea    (%rsi),%rax
  0x00007f8f8f7345c2: mov    0x8(%rsi),%rcx
  0x00007f8f8f7345c6: movq   $0x0,0x8(%rsi)
  0x00007f8f8f7345ce: mov    (%rcx),%rdx
  0x00007f8f8f7345d1: and    $0x7,%rdx
  0x00007f8f8f7345d5: cmp    $0x5,%rdx
  0x00007f8f8f7345d9: je     0x00007f8f8f734696
  0x00007f8f8f7345df: mov    (%rax),%rdx
  0x00007f8f8f7345e2: test   %rdx,%rdx
  0x00007f8f8f7345e5: je     0x00007f8f8f734696
  0x00007f8f8f7345eb: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f7345f0: je     0x00007f8f8f734696
  0x00007f8f8f7345f6: mov    %rcx,0x8(%rsi)
  0x00007f8f8f7345fa: callq  0x00007f8f8f734604
  0x00007f8f8f7345ff: jmpq   0x00007f8f8f734696
  0x00007f8f8f734604: lea    0x8(%rsp),%rax
  0x00007f8f8f734609: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73460d: mov    %r15,%rdi
  0x00007f8f8f734610: vzeroupper 
  0x00007f8f8f734613: mov    %rbp,0x330(%r15)
  0x00007f8f8f73461a: mov    %rax,0x320(%r15)
  0x00007f8f8f734621: test   $0xf,%esp
  0x00007f8f8f734627: je     0x00007f8f8f73463f
  0x00007f8f8f73462d: sub    $0x8,%rsp
  0x00007f8f8f734631: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f734636: add    $0x8,%rsp
  0x00007f8f8f73463a: jmpq   0x00007f8f8f734644
  0x00007f8f8f73463f: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f734644: movabs $0x0,%r10
  0x00007f8f8f73464e: mov    %r10,0x320(%r15)
  0x00007f8f8f734655: movabs $0x0,%r10
  0x00007f8f8f73465f: mov    %r10,0x330(%r15)
  0x00007f8f8f734666: movabs $0x0,%r10
  0x00007f8f8f734670: mov    %r10,0x328(%r15)
  0x00007f8f8f734677: vzeroupper 
  0x00007f8f8f73467a: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f734682: je     0x00007f8f8f73468d
  0x00007f8f8f734688: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73468d: mov    -0x40(%rbp),%r13
  0x00007f8f8f734691: mov    -0x38(%rbp),%r14
  0x00007f8f8f734695: retq   
  0x00007f8f8f734696: mov    -0x40(%rbp),%r13
  0x00007f8f8f73469a: mov    (%rsp),%eax
  0x00007f8f8f73469d: add    $0x8,%rsp
  0x00007f8f8f7346a1: mov    -0x48(%rbp),%rsi
  0x00007f8f8f7346a5: lea    -0x48(%rbp),%rbx
  0x00007f8f8f7346a9: jmpq   0x00007f8f8f7347d3
  0x00007f8f8f7346ae: callq  0x00007f8f8f7346b8
  0x00007f8f8f7346b3: jmpq   0x00007f8f8f73474a
  0x00007f8f8f7346b8: lea    0x8(%rsp),%rax
  0x00007f8f8f7346bd: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7346c1: mov    %r15,%rdi
  0x00007f8f8f7346c4: vzeroupper 
  0x00007f8f8f7346c7: mov    %rbp,0x330(%r15)
  0x00007f8f8f7346ce: mov    %rax,0x320(%r15)
  0x00007f8f8f7346d5: test   $0xf,%esp
  0x00007f8f8f7346db: je     0x00007f8f8f7346f3
  0x00007f8f8f7346e1: sub    $0x8,%rsp
  0x00007f8f8f7346e5: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f7346ea: add    $0x8,%rsp
  0x00007f8f8f7346ee: jmpq   0x00007f8f8f7346f8
  0x00007f8f8f7346f3: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f7346f8: movabs $0x0,%r10
  0x00007f8f8f734702: mov    %r10,0x320(%r15)
  0x00007f8f8f734709: movabs $0x0,%r10
  0x00007f8f8f734713: mov    %r10,0x330(%r15)
  0x00007f8f8f73471a: movabs $0x0,%r10
  0x00007f8f8f734724: mov    %r10,0x328(%r15)
  0x00007f8f8f73472b: vzeroupper 
  0x00007f8f8f73472e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f734736: je     0x00007f8f8f734741
  0x00007f8f8f73473c: jmpq   0x00007f8f8f71a780
  0x00007f8f8f734741: mov    -0x40(%rbp),%r13
  0x00007f8f8f734745: mov    -0x38(%rbp),%r14
  0x00007f8f8f734749: retq   
  0x00007f8f8f73474a: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73474f: sub    $0x80,%rsp
  0x00007f8f8f734756: mov    %rax,0x78(%rsp)
  0x00007f8f8f73475b: mov    %rcx,0x70(%rsp)
  0x00007f8f8f734760: mov    %rdx,0x68(%rsp)
  0x00007f8f8f734765: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73476a: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73476f: mov    %rsi,0x48(%rsp)
  0x00007f8f8f734774: mov    %rdi,0x40(%rsp)
  0x00007f8f8f734779: mov    %r8,0x38(%rsp)
  0x00007f8f8f73477e: mov    %r9,0x30(%rsp)
  0x00007f8f8f734783: mov    %r10,0x28(%rsp)
  0x00007f8f8f734788: mov    %r11,0x20(%rsp)
  0x00007f8f8f73478d: mov    %r12,0x18(%rsp)
  0x00007f8f8f734792: mov    %r13,0x10(%rsp)
  0x00007f8f8f734797: mov    %r14,0x8(%rsp)
  0x00007f8f8f73479c: mov    %r15,(%rsp)
  0x00007f8f8f7347a0: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f7347aa: movabs $0x7f8f8f73474a,%rsi
  0x00007f8f8f7347b4: mov    %rsp,%rdx
  0x00007f8f8f7347b7: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f7347bb: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f7347c0: hlt    
  0x00007f8f8f7347c1: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f7347c9: jne    0x00007f8f8f7346ae
  0x00007f8f8f7347cf: add    $0x10,%rsi
  0x00007f8f8f7347d3: cmp    %rbx,%rsi
  0x00007f8f8f7347d6: jne    0x00007f8f8f7347c1
  0x00007f8f8f7347d8: cmpb   $0x0,0x1e4829a8(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f7347df: je     0x00007f8f8f734817
  0x00007f8f8f7347e5: push   %rax
  0x00007f8f8f7347e6: mov    -0x18(%rbp),%rsi
  0x00007f8f8f7347ea: mov    %r15,%rdi
  0x00007f8f8f7347ed: test   $0xf,%esp
  0x00007f8f8f7347f3: je     0x00007f8f8f73480b
  0x00007f8f8f7347f9: sub    $0x8,%rsp
  0x00007f8f8f7347fd: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f734802: add    $0x8,%rsp
  0x00007f8f8f734806: jmpq   0x00007f8f8f734810
  0x00007f8f8f73480b: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f734810: mov    (%rsp),%eax
  0x00007f8f8f734813: add    $0x8,%rsp
  0x00007f8f8f734817: mov    -0x8(%rbp),%rbx
  0x00007f8f8f73481b: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f734826: je     0x00007f8f8f734972
  0x00007f8f8f73482c: cmp    0x418(%r15),%rbx
  0x00007f8f8f734833: jle    0x00007f8f8f734972
  0x00007f8f8f734839: mov    %r15,%rdi
  0x00007f8f8f73483c: test   $0xf,%esp
  0x00007f8f8f734842: je     0x00007f8f8f73485a
  0x00007f8f8f734848: sub    $0x8,%rsp
  0x00007f8f8f73484c: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f734851: add    $0x8,%rsp
  0x00007f8f8f734855: jmpq   0x00007f8f8f73485f
  0x00007f8f8f73485a: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f73485f: callq  0x00007f8f8f734869
  0x00007f8f8f734864: jmpq   0x00007f8f8f7348fb
  0x00007f8f8f734869: lea    0x8(%rsp),%rax
  0x00007f8f8f73486e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f734872: mov    %r15,%rdi
  0x00007f8f8f734875: vzeroupper 
  0x00007f8f8f734878: mov    %rbp,0x330(%r15)
  0x00007f8f8f73487f: mov    %rax,0x320(%r15)
  0x00007f8f8f734886: test   $0xf,%esp
  0x00007f8f8f73488c: je     0x00007f8f8f7348a4
  0x00007f8f8f734892: sub    $0x8,%rsp
  0x00007f8f8f734896: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f73489b: add    $0x8,%rsp
  0x00007f8f8f73489f: jmpq   0x00007f8f8f7348a9
  0x00007f8f8f7348a4: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f7348a9: movabs $0x0,%r10
  0x00007f8f8f7348b3: mov    %r10,0x320(%r15)
  0x00007f8f8f7348ba: movabs $0x0,%r10
  0x00007f8f8f7348c4: mov    %r10,0x330(%r15)
  0x00007f8f8f7348cb: movabs $0x0,%r10
  0x00007f8f8f7348d5: mov    %r10,0x328(%r15)
  0x00007f8f8f7348dc: vzeroupper 
  0x00007f8f8f7348df: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7348e7: je     0x00007f8f8f7348f2
  0x00007f8f8f7348ed: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7348f2: mov    -0x40(%rbp),%r13
  0x00007f8f8f7348f6: mov    -0x38(%rbp),%r14
  0x00007f8f8f7348fa: retq   
  0x00007f8f8f7348fb: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f734900: sub    $0x80,%rsp
  0x00007f8f8f734907: mov    %rax,0x78(%rsp)
  0x00007f8f8f73490c: mov    %rcx,0x70(%rsp)
  0x00007f8f8f734911: mov    %rdx,0x68(%rsp)
  0x00007f8f8f734916: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73491b: mov    %rbp,0x50(%rsp)
  0x00007f8f8f734920: mov    %rsi,0x48(%rsp)
  0x00007f8f8f734925: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73492a: mov    %r8,0x38(%rsp)
  0x00007f8f8f73492f: mov    %r9,0x30(%rsp)
  0x00007f8f8f734934: mov    %r10,0x28(%rsp)
  0x00007f8f8f734939: mov    %r11,0x20(%rsp)
  0x00007f8f8f73493e: mov    %r12,0x18(%rsp)
  0x00007f8f8f734943: mov    %r13,0x10(%rsp)
  0x00007f8f8f734948: mov    %r14,0x8(%rsp)
  0x00007f8f8f73494d: mov    %r15,(%rsp)
  0x00007f8f8f734951: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73495b: movabs $0x7f8f8f7348fb,%rsi
  0x00007f8f8f734965: mov    %rsp,%rdx
  0x00007f8f8f734968: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73496c: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f734971: hlt    
  0x00007f8f8f734972: leaveq 
  0x00007f8f8f734973: pop    %r13
  0x00007f8f8f734975: mov    %rbx,%rsp
  0x00007f8f8f734978: jmpq   *%r13
  0x00007f8f8f73497b: nopl   0x0(%rax,%rax,1)

----------------------------------------------------------------------
lreturn  173 lreturn  [0x00007f8f8f7349a0, 0x00007f8f8f734fc0]  1568 bytes

  0x00007f8f8f7349a0: mov    (%rsp),%rax
  0x00007f8f8f7349a4: add    $0x10,%rsp
  0x00007f8f8f7349a8: testb  $0x8,0x108(%r15)
  0x00007f8f8f7349b0: je     0x00007f8f8f734a71
  0x00007f8f8f7349b6: sub    $0x10,%rsp
  0x00007f8f8f7349ba: mov    %rax,(%rsp)
  0x00007f8f8f7349be: movabs $0x0,%r10
  0x00007f8f8f7349c8: mov    %r10,0x8(%rsp)
  0x00007f8f8f7349cd: callq  0x00007f8f8f7349d7
  0x00007f8f8f7349d2: jmpq   0x00007f8f8f734a69
  0x00007f8f8f7349d7: lea    0x8(%rsp),%rax
  0x00007f8f8f7349dc: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7349e0: mov    %r15,%rdi
  0x00007f8f8f7349e3: vzeroupper 
  0x00007f8f8f7349e6: mov    %rbp,0x330(%r15)
  0x00007f8f8f7349ed: mov    %rax,0x320(%r15)
  0x00007f8f8f7349f4: test   $0xf,%esp
  0x00007f8f8f7349fa: je     0x00007f8f8f734a12
  0x00007f8f8f734a00: sub    $0x8,%rsp
  0x00007f8f8f734a04: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f734a09: add    $0x8,%rsp
  0x00007f8f8f734a0d: jmpq   0x00007f8f8f734a17
  0x00007f8f8f734a12: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f734a17: movabs $0x0,%r10
  0x00007f8f8f734a21: mov    %r10,0x320(%r15)
  0x00007f8f8f734a28: movabs $0x0,%r10
  0x00007f8f8f734a32: mov    %r10,0x330(%r15)
  0x00007f8f8f734a39: movabs $0x0,%r10
  0x00007f8f8f734a43: mov    %r10,0x328(%r15)
  0x00007f8f8f734a4a: vzeroupper 
  0x00007f8f8f734a4d: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f734a55: je     0x00007f8f8f734a60
  0x00007f8f8f734a5b: jmpq   0x00007f8f8f71a780
  0x00007f8f8f734a60: mov    -0x40(%rbp),%r13
  0x00007f8f8f734a64: mov    -0x38(%rbp),%r14
  0x00007f8f8f734a68: retq   
  0x00007f8f8f734a69: mov    (%rsp),%rax
  0x00007f8f8f734a6d: add    $0x10,%rsp
  0x00007f8f8f734a71: mov    0x3dd(%r15),%bl
  0x00007f8f8f734a78: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f734a80: mov    -0x18(%rbp),%rcx
  0x00007f8f8f734a84: mov    0x20(%rcx),%ecx
  0x00007f8f8f734a87: test   $0x20,%ecx
  0x00007f8f8f734a8d: je     0x00007f8f8f734cc6
  0x00007f8f8f734a93: test   $0xff,%bl
  0x00007f8f8f734a96: jne    0x00007f8f8f734dfd
  0x00007f8f8f734a9c: sub    $0x10,%rsp
  0x00007f8f8f734aa0: mov    %rax,(%rsp)
  0x00007f8f8f734aa4: movabs $0x0,%r10
  0x00007f8f8f734aae: mov    %r10,0x8(%rsp)
  0x00007f8f8f734ab3: lea    -0x58(%rbp),%rsi
  0x00007f8f8f734ab7: mov    0x8(%rsi),%rax
  0x00007f8f8f734abb: test   %rax,%rax
  0x00007f8f8f734abe: jne    0x00007f8f8f734bdf
  0x00007f8f8f734ac4: mov    (%rsp),%rax
  0x00007f8f8f734ac8: add    $0x10,%rsp
  0x00007f8f8f734acc: callq  0x00007f8f8f734ad6
  0x00007f8f8f734ad1: jmpq   0x00007f8f8f734b68
  0x00007f8f8f734ad6: lea    0x8(%rsp),%rax
  0x00007f8f8f734adb: mov    %r13,-0x40(%rbp)
  0x00007f8f8f734adf: mov    %r15,%rdi
  0x00007f8f8f734ae2: vzeroupper 
  0x00007f8f8f734ae5: mov    %rbp,0x330(%r15)
  0x00007f8f8f734aec: mov    %rax,0x320(%r15)
  0x00007f8f8f734af3: test   $0xf,%esp
  0x00007f8f8f734af9: je     0x00007f8f8f734b11
  0x00007f8f8f734aff: sub    $0x8,%rsp
  0x00007f8f8f734b03: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f734b08: add    $0x8,%rsp
  0x00007f8f8f734b0c: jmpq   0x00007f8f8f734b16
  0x00007f8f8f734b11: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f734b16: movabs $0x0,%r10
  0x00007f8f8f734b20: mov    %r10,0x320(%r15)
  0x00007f8f8f734b27: movabs $0x0,%r10
  0x00007f8f8f734b31: mov    %r10,0x330(%r15)
  0x00007f8f8f734b38: movabs $0x0,%r10
  0x00007f8f8f734b42: mov    %r10,0x328(%r15)
  0x00007f8f8f734b49: vzeroupper 
  0x00007f8f8f734b4c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f734b54: je     0x00007f8f8f734b5f
  0x00007f8f8f734b5a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f734b5f: mov    -0x40(%rbp),%r13
  0x00007f8f8f734b63: mov    -0x38(%rbp),%r14
  0x00007f8f8f734b67: retq   
  0x00007f8f8f734b68: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f734b6d: sub    $0x80,%rsp
  0x00007f8f8f734b74: mov    %rax,0x78(%rsp)
  0x00007f8f8f734b79: mov    %rcx,0x70(%rsp)
  0x00007f8f8f734b7e: mov    %rdx,0x68(%rsp)
  0x00007f8f8f734b83: mov    %rbx,0x60(%rsp)
  0x00007f8f8f734b88: mov    %rbp,0x50(%rsp)
  0x00007f8f8f734b8d: mov    %rsi,0x48(%rsp)
  0x00007f8f8f734b92: mov    %rdi,0x40(%rsp)
  0x00007f8f8f734b97: mov    %r8,0x38(%rsp)
  0x00007f8f8f734b9c: mov    %r9,0x30(%rsp)
  0x00007f8f8f734ba1: mov    %r10,0x28(%rsp)
  0x00007f8f8f734ba6: mov    %r11,0x20(%rsp)
  0x00007f8f8f734bab: mov    %r12,0x18(%rsp)
  0x00007f8f8f734bb0: mov    %r13,0x10(%rsp)
  0x00007f8f8f734bb5: mov    %r14,0x8(%rsp)
  0x00007f8f8f734bba: mov    %r15,(%rsp)
  0x00007f8f8f734bbe: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f734bc8: movabs $0x7f8f8f734b68,%rsi
  0x00007f8f8f734bd2: mov    %rsp,%rdx
  0x00007f8f8f734bd5: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f734bd9: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f734bde: hlt    
  0x00007f8f8f734bdf: mov    %r13,-0x40(%rbp)
  0x00007f8f8f734be3: lea    (%rsi),%rax
  0x00007f8f8f734be6: mov    0x8(%rsi),%rcx
  0x00007f8f8f734bea: movq   $0x0,0x8(%rsi)
  0x00007f8f8f734bf2: mov    (%rcx),%rdx
  0x00007f8f8f734bf5: and    $0x7,%rdx
  0x00007f8f8f734bf9: cmp    $0x5,%rdx
  0x00007f8f8f734bfd: je     0x00007f8f8f734cba
  0x00007f8f8f734c03: mov    (%rax),%rdx
  0x00007f8f8f734c06: test   %rdx,%rdx
  0x00007f8f8f734c09: je     0x00007f8f8f734cba
  0x00007f8f8f734c0f: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f734c14: je     0x00007f8f8f734cba
  0x00007f8f8f734c1a: mov    %rcx,0x8(%rsi)
  0x00007f8f8f734c1e: callq  0x00007f8f8f734c28
  0x00007f8f8f734c23: jmpq   0x00007f8f8f734cba
  0x00007f8f8f734c28: lea    0x8(%rsp),%rax
  0x00007f8f8f734c2d: mov    %r13,-0x40(%rbp)
  0x00007f8f8f734c31: mov    %r15,%rdi
  0x00007f8f8f734c34: vzeroupper 
  0x00007f8f8f734c37: mov    %rbp,0x330(%r15)
  0x00007f8f8f734c3e: mov    %rax,0x320(%r15)
  0x00007f8f8f734c45: test   $0xf,%esp
  0x00007f8f8f734c4b: je     0x00007f8f8f734c63
  0x00007f8f8f734c51: sub    $0x8,%rsp
  0x00007f8f8f734c55: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f734c5a: add    $0x8,%rsp
  0x00007f8f8f734c5e: jmpq   0x00007f8f8f734c68
  0x00007f8f8f734c63: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f734c68: movabs $0x0,%r10
  0x00007f8f8f734c72: mov    %r10,0x320(%r15)
  0x00007f8f8f734c79: movabs $0x0,%r10
  0x00007f8f8f734c83: mov    %r10,0x330(%r15)
  0x00007f8f8f734c8a: movabs $0x0,%r10
  0x00007f8f8f734c94: mov    %r10,0x328(%r15)
  0x00007f8f8f734c9b: vzeroupper 
  0x00007f8f8f734c9e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f734ca6: je     0x00007f8f8f734cb1
  0x00007f8f8f734cac: jmpq   0x00007f8f8f71a780
  0x00007f8f8f734cb1: mov    -0x40(%rbp),%r13
  0x00007f8f8f734cb5: mov    -0x38(%rbp),%r14
  0x00007f8f8f734cb9: retq   
  0x00007f8f8f734cba: mov    -0x40(%rbp),%r13
  0x00007f8f8f734cbe: mov    (%rsp),%rax
  0x00007f8f8f734cc2: add    $0x10,%rsp
  0x00007f8f8f734cc6: mov    -0x48(%rbp),%rsi
  0x00007f8f8f734cca: lea    -0x48(%rbp),%rbx
  0x00007f8f8f734cce: jmpq   0x00007f8f8f734df8
  0x00007f8f8f734cd3: callq  0x00007f8f8f734cdd
  0x00007f8f8f734cd8: jmpq   0x00007f8f8f734d6f
  0x00007f8f8f734cdd: lea    0x8(%rsp),%rax
  0x00007f8f8f734ce2: mov    %r13,-0x40(%rbp)
  0x00007f8f8f734ce6: mov    %r15,%rdi
  0x00007f8f8f734ce9: vzeroupper 
  0x00007f8f8f734cec: mov    %rbp,0x330(%r15)
  0x00007f8f8f734cf3: mov    %rax,0x320(%r15)
  0x00007f8f8f734cfa: test   $0xf,%esp
  0x00007f8f8f734d00: je     0x00007f8f8f734d18
  0x00007f8f8f734d06: sub    $0x8,%rsp
  0x00007f8f8f734d0a: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f734d0f: add    $0x8,%rsp
  0x00007f8f8f734d13: jmpq   0x00007f8f8f734d1d
  0x00007f8f8f734d18: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f734d1d: movabs $0x0,%r10
  0x00007f8f8f734d27: mov    %r10,0x320(%r15)
  0x00007f8f8f734d2e: movabs $0x0,%r10
  0x00007f8f8f734d38: mov    %r10,0x330(%r15)
  0x00007f8f8f734d3f: movabs $0x0,%r10
  0x00007f8f8f734d49: mov    %r10,0x328(%r15)
  0x00007f8f8f734d50: vzeroupper 
  0x00007f8f8f734d53: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f734d5b: je     0x00007f8f8f734d66
  0x00007f8f8f734d61: jmpq   0x00007f8f8f71a780
  0x00007f8f8f734d66: mov    -0x40(%rbp),%r13
  0x00007f8f8f734d6a: mov    -0x38(%rbp),%r14
  0x00007f8f8f734d6e: retq   
  0x00007f8f8f734d6f: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f734d74: sub    $0x80,%rsp
  0x00007f8f8f734d7b: mov    %rax,0x78(%rsp)
  0x00007f8f8f734d80: mov    %rcx,0x70(%rsp)
  0x00007f8f8f734d85: mov    %rdx,0x68(%rsp)
  0x00007f8f8f734d8a: mov    %rbx,0x60(%rsp)
  0x00007f8f8f734d8f: mov    %rbp,0x50(%rsp)
  0x00007f8f8f734d94: mov    %rsi,0x48(%rsp)
  0x00007f8f8f734d99: mov    %rdi,0x40(%rsp)
  0x00007f8f8f734d9e: mov    %r8,0x38(%rsp)
  0x00007f8f8f734da3: mov    %r9,0x30(%rsp)
  0x00007f8f8f734da8: mov    %r10,0x28(%rsp)
  0x00007f8f8f734dad: mov    %r11,0x20(%rsp)
  0x00007f8f8f734db2: mov    %r12,0x18(%rsp)
  0x00007f8f8f734db7: mov    %r13,0x10(%rsp)
  0x00007f8f8f734dbc: mov    %r14,0x8(%rsp)
  0x00007f8f8f734dc1: mov    %r15,(%rsp)
  0x00007f8f8f734dc5: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f734dcf: movabs $0x7f8f8f734d6f,%rsi
  0x00007f8f8f734dd9: mov    %rsp,%rdx
  0x00007f8f8f734ddc: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f734de0: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f734de5: hlt    
  0x00007f8f8f734de6: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f734dee: jne    0x00007f8f8f734cd3
  0x00007f8f8f734df4: add    $0x10,%rsi
  0x00007f8f8f734df8: cmp    %rbx,%rsi
  0x00007f8f8f734dfb: jne    0x00007f8f8f734de6
  0x00007f8f8f734dfd: cmpb   $0x0,0x1e482383(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f734e04: je     0x00007f8f8f734e53
  0x00007f8f8f734e0a: sub    $0x10,%rsp
  0x00007f8f8f734e0e: mov    %rax,(%rsp)
  0x00007f8f8f734e12: movabs $0x0,%r10
  0x00007f8f8f734e1c: mov    %r10,0x8(%rsp)
  0x00007f8f8f734e21: mov    -0x18(%rbp),%rsi
  0x00007f8f8f734e25: mov    %r15,%rdi
  0x00007f8f8f734e28: test   $0xf,%esp
  0x00007f8f8f734e2e: je     0x00007f8f8f734e46
  0x00007f8f8f734e34: sub    $0x8,%rsp
  0x00007f8f8f734e38: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f734e3d: add    $0x8,%rsp
  0x00007f8f8f734e41: jmpq   0x00007f8f8f734e4b
  0x00007f8f8f734e46: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f734e4b: mov    (%rsp),%rax
  0x00007f8f8f734e4f: add    $0x10,%rsp
  0x00007f8f8f734e53: mov    -0x8(%rbp),%rbx
  0x00007f8f8f734e57: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f734e62: je     0x00007f8f8f734fae
  0x00007f8f8f734e68: cmp    0x418(%r15),%rbx
  0x00007f8f8f734e6f: jle    0x00007f8f8f734fae
  0x00007f8f8f734e75: mov    %r15,%rdi
  0x00007f8f8f734e78: test   $0xf,%esp
  0x00007f8f8f734e7e: je     0x00007f8f8f734e96
  0x00007f8f8f734e84: sub    $0x8,%rsp
  0x00007f8f8f734e88: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f734e8d: add    $0x8,%rsp
  0x00007f8f8f734e91: jmpq   0x00007f8f8f734e9b
  0x00007f8f8f734e96: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f734e9b: callq  0x00007f8f8f734ea5
  0x00007f8f8f734ea0: jmpq   0x00007f8f8f734f37
  0x00007f8f8f734ea5: lea    0x8(%rsp),%rax
  0x00007f8f8f734eaa: mov    %r13,-0x40(%rbp)
  0x00007f8f8f734eae: mov    %r15,%rdi
  0x00007f8f8f734eb1: vzeroupper 
  0x00007f8f8f734eb4: mov    %rbp,0x330(%r15)
  0x00007f8f8f734ebb: mov    %rax,0x320(%r15)
  0x00007f8f8f734ec2: test   $0xf,%esp
  0x00007f8f8f734ec8: je     0x00007f8f8f734ee0
  0x00007f8f8f734ece: sub    $0x8,%rsp
  0x00007f8f8f734ed2: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f734ed7: add    $0x8,%rsp
  0x00007f8f8f734edb: jmpq   0x00007f8f8f734ee5
  0x00007f8f8f734ee0: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f734ee5: movabs $0x0,%r10
  0x00007f8f8f734eef: mov    %r10,0x320(%r15)
  0x00007f8f8f734ef6: movabs $0x0,%r10
  0x00007f8f8f734f00: mov    %r10,0x330(%r15)
  0x00007f8f8f734f07: movabs $0x0,%r10
  0x00007f8f8f734f11: mov    %r10,0x328(%r15)
  0x00007f8f8f734f18: vzeroupper 
  0x00007f8f8f734f1b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f734f23: je     0x00007f8f8f734f2e
  0x00007f8f8f734f29: jmpq   0x00007f8f8f71a780
  0x00007f8f8f734f2e: mov    -0x40(%rbp),%r13
  0x00007f8f8f734f32: mov    -0x38(%rbp),%r14
  0x00007f8f8f734f36: retq   
  0x00007f8f8f734f37: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f734f3c: sub    $0x80,%rsp
  0x00007f8f8f734f43: mov    %rax,0x78(%rsp)
  0x00007f8f8f734f48: mov    %rcx,0x70(%rsp)
  0x00007f8f8f734f4d: mov    %rdx,0x68(%rsp)
  0x00007f8f8f734f52: mov    %rbx,0x60(%rsp)
  0x00007f8f8f734f57: mov    %rbp,0x50(%rsp)
  0x00007f8f8f734f5c: mov    %rsi,0x48(%rsp)
  0x00007f8f8f734f61: mov    %rdi,0x40(%rsp)
  0x00007f8f8f734f66: mov    %r8,0x38(%rsp)
  0x00007f8f8f734f6b: mov    %r9,0x30(%rsp)
  0x00007f8f8f734f70: mov    %r10,0x28(%rsp)
  0x00007f8f8f734f75: mov    %r11,0x20(%rsp)
  0x00007f8f8f734f7a: mov    %r12,0x18(%rsp)
  0x00007f8f8f734f7f: mov    %r13,0x10(%rsp)
  0x00007f8f8f734f84: mov    %r14,0x8(%rsp)
  0x00007f8f8f734f89: mov    %r15,(%rsp)
  0x00007f8f8f734f8d: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f734f97: movabs $0x7f8f8f734f37,%rsi
  0x00007f8f8f734fa1: mov    %rsp,%rdx
  0x00007f8f8f734fa4: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f734fa8: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f734fad: hlt    
  0x00007f8f8f734fae: leaveq 
  0x00007f8f8f734faf: pop    %r13
  0x00007f8f8f734fb1: mov    %rbx,%rsp
  0x00007f8f8f734fb4: jmpq   *%r13
  0x00007f8f8f734fb7: nop
  0x00007f8f8f734fb8: add    %al,(%rax)
  0x00007f8f8f734fba: add    %al,(%rax)
  0x00007f8f8f734fbc: add    %al,(%rax)
  0x00007f8f8f734fbe: add    %al,(%rax)

----------------------------------------------------------------------
freturn  174 freturn  [0x00007f8f8f734fe0, 0x00007f8f8f7355e0]  1536 bytes

  0x00007f8f8f734fe0: vmovss (%rsp),%xmm0
  0x00007f8f8f734fe5: add    $0x8,%rsp
  0x00007f8f8f734fe9: testb  $0x8,0x108(%r15)
  0x00007f8f8f734ff1: je     0x00007f8f8f7350a5
  0x00007f8f8f734ff7: sub    $0x8,%rsp
  0x00007f8f8f734ffb: vmovss %xmm0,(%rsp)
  0x00007f8f8f735000: callq  0x00007f8f8f73500a
  0x00007f8f8f735005: jmpq   0x00007f8f8f73509c
  0x00007f8f8f73500a: lea    0x8(%rsp),%rax
  0x00007f8f8f73500f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f735013: mov    %r15,%rdi
  0x00007f8f8f735016: vzeroupper 
  0x00007f8f8f735019: mov    %rbp,0x330(%r15)
  0x00007f8f8f735020: mov    %rax,0x320(%r15)
  0x00007f8f8f735027: test   $0xf,%esp
  0x00007f8f8f73502d: je     0x00007f8f8f735045
  0x00007f8f8f735033: sub    $0x8,%rsp
  0x00007f8f8f735037: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f73503c: add    $0x8,%rsp
  0x00007f8f8f735040: jmpq   0x00007f8f8f73504a
  0x00007f8f8f735045: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f73504a: movabs $0x0,%r10
  0x00007f8f8f735054: mov    %r10,0x320(%r15)
  0x00007f8f8f73505b: movabs $0x0,%r10
  0x00007f8f8f735065: mov    %r10,0x330(%r15)
  0x00007f8f8f73506c: movabs $0x0,%r10
  0x00007f8f8f735076: mov    %r10,0x328(%r15)
  0x00007f8f8f73507d: vzeroupper 
  0x00007f8f8f735080: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f735088: je     0x00007f8f8f735093
  0x00007f8f8f73508e: jmpq   0x00007f8f8f71a780
  0x00007f8f8f735093: mov    -0x40(%rbp),%r13
  0x00007f8f8f735097: mov    -0x38(%rbp),%r14
  0x00007f8f8f73509b: retq   
  0x00007f8f8f73509c: vmovss (%rsp),%xmm0
  0x00007f8f8f7350a1: add    $0x8,%rsp
  0x00007f8f8f7350a5: mov    0x3dd(%r15),%bl
  0x00007f8f8f7350ac: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f7350b4: mov    -0x18(%rbp),%rcx
  0x00007f8f8f7350b8: mov    0x20(%rcx),%ecx
  0x00007f8f8f7350bb: test   $0x20,%ecx
  0x00007f8f8f7350c1: je     0x00007f8f8f7352ee
  0x00007f8f8f7350c7: test   $0xff,%bl
  0x00007f8f8f7350ca: jne    0x00007f8f8f735425
  0x00007f8f8f7350d0: sub    $0x8,%rsp
  0x00007f8f8f7350d4: vmovss %xmm0,(%rsp)
  0x00007f8f8f7350d9: lea    -0x58(%rbp),%rsi
  0x00007f8f8f7350dd: mov    0x8(%rsi),%rax
  0x00007f8f8f7350e1: test   %rax,%rax
  0x00007f8f8f7350e4: jne    0x00007f8f8f735206
  0x00007f8f8f7350ea: vmovss (%rsp),%xmm0
  0x00007f8f8f7350ef: add    $0x8,%rsp
  0x00007f8f8f7350f3: callq  0x00007f8f8f7350fd
  0x00007f8f8f7350f8: jmpq   0x00007f8f8f73518f
  0x00007f8f8f7350fd: lea    0x8(%rsp),%rax
  0x00007f8f8f735102: mov    %r13,-0x40(%rbp)
  0x00007f8f8f735106: mov    %r15,%rdi
  0x00007f8f8f735109: vzeroupper 
  0x00007f8f8f73510c: mov    %rbp,0x330(%r15)
  0x00007f8f8f735113: mov    %rax,0x320(%r15)
  0x00007f8f8f73511a: test   $0xf,%esp
  0x00007f8f8f735120: je     0x00007f8f8f735138
  0x00007f8f8f735126: sub    $0x8,%rsp
  0x00007f8f8f73512a: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f73512f: add    $0x8,%rsp
  0x00007f8f8f735133: jmpq   0x00007f8f8f73513d
  0x00007f8f8f735138: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f73513d: movabs $0x0,%r10
  0x00007f8f8f735147: mov    %r10,0x320(%r15)
  0x00007f8f8f73514e: movabs $0x0,%r10
  0x00007f8f8f735158: mov    %r10,0x330(%r15)
  0x00007f8f8f73515f: movabs $0x0,%r10
  0x00007f8f8f735169: mov    %r10,0x328(%r15)
  0x00007f8f8f735170: vzeroupper 
  0x00007f8f8f735173: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73517b: je     0x00007f8f8f735186
  0x00007f8f8f735181: jmpq   0x00007f8f8f71a780
  0x00007f8f8f735186: mov    -0x40(%rbp),%r13
  0x00007f8f8f73518a: mov    -0x38(%rbp),%r14
  0x00007f8f8f73518e: retq   
  0x00007f8f8f73518f: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f735194: sub    $0x80,%rsp
  0x00007f8f8f73519b: mov    %rax,0x78(%rsp)
  0x00007f8f8f7351a0: mov    %rcx,0x70(%rsp)
  0x00007f8f8f7351a5: mov    %rdx,0x68(%rsp)
  0x00007f8f8f7351aa: mov    %rbx,0x60(%rsp)
  0x00007f8f8f7351af: mov    %rbp,0x50(%rsp)
  0x00007f8f8f7351b4: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7351b9: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7351be: mov    %r8,0x38(%rsp)
  0x00007f8f8f7351c3: mov    %r9,0x30(%rsp)
  0x00007f8f8f7351c8: mov    %r10,0x28(%rsp)
  0x00007f8f8f7351cd: mov    %r11,0x20(%rsp)
  0x00007f8f8f7351d2: mov    %r12,0x18(%rsp)
  0x00007f8f8f7351d7: mov    %r13,0x10(%rsp)
  0x00007f8f8f7351dc: mov    %r14,0x8(%rsp)
  0x00007f8f8f7351e1: mov    %r15,(%rsp)
  0x00007f8f8f7351e5: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f7351ef: movabs $0x7f8f8f73518f,%rsi
  0x00007f8f8f7351f9: mov    %rsp,%rdx
  0x00007f8f8f7351fc: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f735200: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f735205: hlt    
  0x00007f8f8f735206: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73520a: lea    (%rsi),%rax
  0x00007f8f8f73520d: mov    0x8(%rsi),%rcx
  0x00007f8f8f735211: movq   $0x0,0x8(%rsi)
  0x00007f8f8f735219: mov    (%rcx),%rdx
  0x00007f8f8f73521c: and    $0x7,%rdx
  0x00007f8f8f735220: cmp    $0x5,%rdx
  0x00007f8f8f735224: je     0x00007f8f8f7352e1
  0x00007f8f8f73522a: mov    (%rax),%rdx
  0x00007f8f8f73522d: test   %rdx,%rdx
  0x00007f8f8f735230: je     0x00007f8f8f7352e1
  0x00007f8f8f735236: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f73523b: je     0x00007f8f8f7352e1
  0x00007f8f8f735241: mov    %rcx,0x8(%rsi)
  0x00007f8f8f735245: callq  0x00007f8f8f73524f
  0x00007f8f8f73524a: jmpq   0x00007f8f8f7352e1
  0x00007f8f8f73524f: lea    0x8(%rsp),%rax
  0x00007f8f8f735254: mov    %r13,-0x40(%rbp)
  0x00007f8f8f735258: mov    %r15,%rdi
  0x00007f8f8f73525b: vzeroupper 
  0x00007f8f8f73525e: mov    %rbp,0x330(%r15)
  0x00007f8f8f735265: mov    %rax,0x320(%r15)
  0x00007f8f8f73526c: test   $0xf,%esp
  0x00007f8f8f735272: je     0x00007f8f8f73528a
  0x00007f8f8f735278: sub    $0x8,%rsp
  0x00007f8f8f73527c: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f735281: add    $0x8,%rsp
  0x00007f8f8f735285: jmpq   0x00007f8f8f73528f
  0x00007f8f8f73528a: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f73528f: movabs $0x0,%r10
  0x00007f8f8f735299: mov    %r10,0x320(%r15)
  0x00007f8f8f7352a0: movabs $0x0,%r10
  0x00007f8f8f7352aa: mov    %r10,0x330(%r15)
  0x00007f8f8f7352b1: movabs $0x0,%r10
  0x00007f8f8f7352bb: mov    %r10,0x328(%r15)
  0x00007f8f8f7352c2: vzeroupper 
  0x00007f8f8f7352c5: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7352cd: je     0x00007f8f8f7352d8
  0x00007f8f8f7352d3: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7352d8: mov    -0x40(%rbp),%r13
  0x00007f8f8f7352dc: mov    -0x38(%rbp),%r14
  0x00007f8f8f7352e0: retq   
  0x00007f8f8f7352e1: mov    -0x40(%rbp),%r13
  0x00007f8f8f7352e5: vmovss (%rsp),%xmm0
  0x00007f8f8f7352ea: add    $0x8,%rsp
  0x00007f8f8f7352ee: mov    -0x48(%rbp),%rsi
  0x00007f8f8f7352f2: lea    -0x48(%rbp),%rbx
  0x00007f8f8f7352f6: jmpq   0x00007f8f8f735420
  0x00007f8f8f7352fb: callq  0x00007f8f8f735305
  0x00007f8f8f735300: jmpq   0x00007f8f8f735397
  0x00007f8f8f735305: lea    0x8(%rsp),%rax
  0x00007f8f8f73530a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73530e: mov    %r15,%rdi
  0x00007f8f8f735311: vzeroupper 
  0x00007f8f8f735314: mov    %rbp,0x330(%r15)
  0x00007f8f8f73531b: mov    %rax,0x320(%r15)
  0x00007f8f8f735322: test   $0xf,%esp
  0x00007f8f8f735328: je     0x00007f8f8f735340
  0x00007f8f8f73532e: sub    $0x8,%rsp
  0x00007f8f8f735332: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f735337: add    $0x8,%rsp
  0x00007f8f8f73533b: jmpq   0x00007f8f8f735345
  0x00007f8f8f735340: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f735345: movabs $0x0,%r10
  0x00007f8f8f73534f: mov    %r10,0x320(%r15)
  0x00007f8f8f735356: movabs $0x0,%r10
  0x00007f8f8f735360: mov    %r10,0x330(%r15)
  0x00007f8f8f735367: movabs $0x0,%r10
  0x00007f8f8f735371: mov    %r10,0x328(%r15)
  0x00007f8f8f735378: vzeroupper 
  0x00007f8f8f73537b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f735383: je     0x00007f8f8f73538e
  0x00007f8f8f735389: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73538e: mov    -0x40(%rbp),%r13
  0x00007f8f8f735392: mov    -0x38(%rbp),%r14
  0x00007f8f8f735396: retq   
  0x00007f8f8f735397: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73539c: sub    $0x80,%rsp
  0x00007f8f8f7353a3: mov    %rax,0x78(%rsp)
  0x00007f8f8f7353a8: mov    %rcx,0x70(%rsp)
  0x00007f8f8f7353ad: mov    %rdx,0x68(%rsp)
  0x00007f8f8f7353b2: mov    %rbx,0x60(%rsp)
  0x00007f8f8f7353b7: mov    %rbp,0x50(%rsp)
  0x00007f8f8f7353bc: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7353c1: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7353c6: mov    %r8,0x38(%rsp)
  0x00007f8f8f7353cb: mov    %r9,0x30(%rsp)
  0x00007f8f8f7353d0: mov    %r10,0x28(%rsp)
  0x00007f8f8f7353d5: mov    %r11,0x20(%rsp)
  0x00007f8f8f7353da: mov    %r12,0x18(%rsp)
  0x00007f8f8f7353df: mov    %r13,0x10(%rsp)
  0x00007f8f8f7353e4: mov    %r14,0x8(%rsp)
  0x00007f8f8f7353e9: mov    %r15,(%rsp)
  0x00007f8f8f7353ed: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f7353f7: movabs $0x7f8f8f735397,%rsi
  0x00007f8f8f735401: mov    %rsp,%rdx
  0x00007f8f8f735404: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f735408: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73540d: hlt    
  0x00007f8f8f73540e: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f735416: jne    0x00007f8f8f7352fb
  0x00007f8f8f73541c: add    $0x10,%rsi
  0x00007f8f8f735420: cmp    %rbx,%rsi
  0x00007f8f8f735423: jne    0x00007f8f8f73540e
  0x00007f8f8f735425: cmpb   $0x0,0x1e481d5b(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f73542c: je     0x00007f8f8f73546e
  0x00007f8f8f735432: sub    $0x8,%rsp
  0x00007f8f8f735436: vmovss %xmm0,(%rsp)
  0x00007f8f8f73543b: mov    -0x18(%rbp),%rsi
  0x00007f8f8f73543f: mov    %r15,%rdi
  0x00007f8f8f735442: test   $0xf,%esp
  0x00007f8f8f735448: je     0x00007f8f8f735460
  0x00007f8f8f73544e: sub    $0x8,%rsp
  0x00007f8f8f735452: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f735457: add    $0x8,%rsp
  0x00007f8f8f73545b: jmpq   0x00007f8f8f735465
  0x00007f8f8f735460: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f735465: vmovss (%rsp),%xmm0
  0x00007f8f8f73546a: add    $0x8,%rsp
  0x00007f8f8f73546e: mov    -0x8(%rbp),%rbx
  0x00007f8f8f735472: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f73547d: je     0x00007f8f8f7355c9
  0x00007f8f8f735483: cmp    0x418(%r15),%rbx
  0x00007f8f8f73548a: jle    0x00007f8f8f7355c9
  0x00007f8f8f735490: mov    %r15,%rdi
  0x00007f8f8f735493: test   $0xf,%esp
  0x00007f8f8f735499: je     0x00007f8f8f7354b1
  0x00007f8f8f73549f: sub    $0x8,%rsp
  0x00007f8f8f7354a3: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f7354a8: add    $0x8,%rsp
  0x00007f8f8f7354ac: jmpq   0x00007f8f8f7354b6
  0x00007f8f8f7354b1: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f7354b6: callq  0x00007f8f8f7354c0
  0x00007f8f8f7354bb: jmpq   0x00007f8f8f735552
  0x00007f8f8f7354c0: lea    0x8(%rsp),%rax
  0x00007f8f8f7354c5: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7354c9: mov    %r15,%rdi
  0x00007f8f8f7354cc: vzeroupper 
  0x00007f8f8f7354cf: mov    %rbp,0x330(%r15)
  0x00007f8f8f7354d6: mov    %rax,0x320(%r15)
  0x00007f8f8f7354dd: test   $0xf,%esp
  0x00007f8f8f7354e3: je     0x00007f8f8f7354fb
  0x00007f8f8f7354e9: sub    $0x8,%rsp
  0x00007f8f8f7354ed: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f7354f2: add    $0x8,%rsp
  0x00007f8f8f7354f6: jmpq   0x00007f8f8f735500
  0x00007f8f8f7354fb: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f735500: movabs $0x0,%r10
  0x00007f8f8f73550a: mov    %r10,0x320(%r15)
  0x00007f8f8f735511: movabs $0x0,%r10
  0x00007f8f8f73551b: mov    %r10,0x330(%r15)
  0x00007f8f8f735522: movabs $0x0,%r10
  0x00007f8f8f73552c: mov    %r10,0x328(%r15)
  0x00007f8f8f735533: vzeroupper 
  0x00007f8f8f735536: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73553e: je     0x00007f8f8f735549
  0x00007f8f8f735544: jmpq   0x00007f8f8f71a780
  0x00007f8f8f735549: mov    -0x40(%rbp),%r13
  0x00007f8f8f73554d: mov    -0x38(%rbp),%r14
  0x00007f8f8f735551: retq   
  0x00007f8f8f735552: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f735557: sub    $0x80,%rsp
  0x00007f8f8f73555e: mov    %rax,0x78(%rsp)
  0x00007f8f8f735563: mov    %rcx,0x70(%rsp)
  0x00007f8f8f735568: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73556d: mov    %rbx,0x60(%rsp)
  0x00007f8f8f735572: mov    %rbp,0x50(%rsp)
  0x00007f8f8f735577: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73557c: mov    %rdi,0x40(%rsp)
  0x00007f8f8f735581: mov    %r8,0x38(%rsp)
  0x00007f8f8f735586: mov    %r9,0x30(%rsp)
  0x00007f8f8f73558b: mov    %r10,0x28(%rsp)
  0x00007f8f8f735590: mov    %r11,0x20(%rsp)
  0x00007f8f8f735595: mov    %r12,0x18(%rsp)
  0x00007f8f8f73559a: mov    %r13,0x10(%rsp)
  0x00007f8f8f73559f: mov    %r14,0x8(%rsp)
  0x00007f8f8f7355a4: mov    %r15,(%rsp)
  0x00007f8f8f7355a8: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f7355b2: movabs $0x7f8f8f735552,%rsi
  0x00007f8f8f7355bc: mov    %rsp,%rdx
  0x00007f8f8f7355bf: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f7355c3: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f7355c8: hlt    
  0x00007f8f8f7355c9: leaveq 
  0x00007f8f8f7355ca: pop    %r13
  0x00007f8f8f7355cc: mov    %rbx,%rsp
  0x00007f8f8f7355cf: jmpq   *%r13
  0x00007f8f8f7355d2: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f7355d8: add    %al,(%rax)
  0x00007f8f8f7355da: add    %al,(%rax)
  0x00007f8f8f7355dc: add    %al,(%rax)
  0x00007f8f8f7355de: add    %al,(%rax)

----------------------------------------------------------------------
dreturn  175 dreturn  [0x00007f8f8f735600, 0x00007f8f8f735c00]  1536 bytes

  0x00007f8f8f735600: vmovsd (%rsp),%xmm0
  0x00007f8f8f735605: add    $0x10,%rsp
  0x00007f8f8f735609: testb  $0x8,0x108(%r15)
  0x00007f8f8f735611: je     0x00007f8f8f7356c5
  0x00007f8f8f735617: sub    $0x10,%rsp
  0x00007f8f8f73561b: vmovsd %xmm0,(%rsp)
  0x00007f8f8f735620: callq  0x00007f8f8f73562a
  0x00007f8f8f735625: jmpq   0x00007f8f8f7356bc
  0x00007f8f8f73562a: lea    0x8(%rsp),%rax
  0x00007f8f8f73562f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f735633: mov    %r15,%rdi
  0x00007f8f8f735636: vzeroupper 
  0x00007f8f8f735639: mov    %rbp,0x330(%r15)
  0x00007f8f8f735640: mov    %rax,0x320(%r15)
  0x00007f8f8f735647: test   $0xf,%esp
  0x00007f8f8f73564d: je     0x00007f8f8f735665
  0x00007f8f8f735653: sub    $0x8,%rsp
  0x00007f8f8f735657: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f73565c: add    $0x8,%rsp
  0x00007f8f8f735660: jmpq   0x00007f8f8f73566a
  0x00007f8f8f735665: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f73566a: movabs $0x0,%r10
  0x00007f8f8f735674: mov    %r10,0x320(%r15)
  0x00007f8f8f73567b: movabs $0x0,%r10
  0x00007f8f8f735685: mov    %r10,0x330(%r15)
  0x00007f8f8f73568c: movabs $0x0,%r10
  0x00007f8f8f735696: mov    %r10,0x328(%r15)
  0x00007f8f8f73569d: vzeroupper 
  0x00007f8f8f7356a0: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7356a8: je     0x00007f8f8f7356b3
  0x00007f8f8f7356ae: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7356b3: mov    -0x40(%rbp),%r13
  0x00007f8f8f7356b7: mov    -0x38(%rbp),%r14
  0x00007f8f8f7356bb: retq   
  0x00007f8f8f7356bc: vmovsd (%rsp),%xmm0
  0x00007f8f8f7356c1: add    $0x10,%rsp
  0x00007f8f8f7356c5: mov    0x3dd(%r15),%bl
  0x00007f8f8f7356cc: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f7356d4: mov    -0x18(%rbp),%rcx
  0x00007f8f8f7356d8: mov    0x20(%rcx),%ecx
  0x00007f8f8f7356db: test   $0x20,%ecx
  0x00007f8f8f7356e1: je     0x00007f8f8f73590e
  0x00007f8f8f7356e7: test   $0xff,%bl
  0x00007f8f8f7356ea: jne    0x00007f8f8f735a45
  0x00007f8f8f7356f0: sub    $0x10,%rsp
  0x00007f8f8f7356f4: vmovsd %xmm0,(%rsp)
  0x00007f8f8f7356f9: lea    -0x58(%rbp),%rsi
  0x00007f8f8f7356fd: mov    0x8(%rsi),%rax
  0x00007f8f8f735701: test   %rax,%rax
  0x00007f8f8f735704: jne    0x00007f8f8f735826
  0x00007f8f8f73570a: vmovsd (%rsp),%xmm0
  0x00007f8f8f73570f: add    $0x10,%rsp
  0x00007f8f8f735713: callq  0x00007f8f8f73571d
  0x00007f8f8f735718: jmpq   0x00007f8f8f7357af
  0x00007f8f8f73571d: lea    0x8(%rsp),%rax
  0x00007f8f8f735722: mov    %r13,-0x40(%rbp)
  0x00007f8f8f735726: mov    %r15,%rdi
  0x00007f8f8f735729: vzeroupper 
  0x00007f8f8f73572c: mov    %rbp,0x330(%r15)
  0x00007f8f8f735733: mov    %rax,0x320(%r15)
  0x00007f8f8f73573a: test   $0xf,%esp
  0x00007f8f8f735740: je     0x00007f8f8f735758
  0x00007f8f8f735746: sub    $0x8,%rsp
  0x00007f8f8f73574a: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f73574f: add    $0x8,%rsp
  0x00007f8f8f735753: jmpq   0x00007f8f8f73575d
  0x00007f8f8f735758: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f73575d: movabs $0x0,%r10
  0x00007f8f8f735767: mov    %r10,0x320(%r15)
  0x00007f8f8f73576e: movabs $0x0,%r10
  0x00007f8f8f735778: mov    %r10,0x330(%r15)
  0x00007f8f8f73577f: movabs $0x0,%r10
  0x00007f8f8f735789: mov    %r10,0x328(%r15)
  0x00007f8f8f735790: vzeroupper 
  0x00007f8f8f735793: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73579b: je     0x00007f8f8f7357a6
  0x00007f8f8f7357a1: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7357a6: mov    -0x40(%rbp),%r13
  0x00007f8f8f7357aa: mov    -0x38(%rbp),%r14
  0x00007f8f8f7357ae: retq   
  0x00007f8f8f7357af: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f7357b4: sub    $0x80,%rsp
  0x00007f8f8f7357bb: mov    %rax,0x78(%rsp)
  0x00007f8f8f7357c0: mov    %rcx,0x70(%rsp)
  0x00007f8f8f7357c5: mov    %rdx,0x68(%rsp)
  0x00007f8f8f7357ca: mov    %rbx,0x60(%rsp)
  0x00007f8f8f7357cf: mov    %rbp,0x50(%rsp)
  0x00007f8f8f7357d4: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7357d9: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7357de: mov    %r8,0x38(%rsp)
  0x00007f8f8f7357e3: mov    %r9,0x30(%rsp)
  0x00007f8f8f7357e8: mov    %r10,0x28(%rsp)
  0x00007f8f8f7357ed: mov    %r11,0x20(%rsp)
  0x00007f8f8f7357f2: mov    %r12,0x18(%rsp)
  0x00007f8f8f7357f7: mov    %r13,0x10(%rsp)
  0x00007f8f8f7357fc: mov    %r14,0x8(%rsp)
  0x00007f8f8f735801: mov    %r15,(%rsp)
  0x00007f8f8f735805: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73580f: movabs $0x7f8f8f7357af,%rsi
  0x00007f8f8f735819: mov    %rsp,%rdx
  0x00007f8f8f73581c: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f735820: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f735825: hlt    
  0x00007f8f8f735826: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73582a: lea    (%rsi),%rax
  0x00007f8f8f73582d: mov    0x8(%rsi),%rcx
  0x00007f8f8f735831: movq   $0x0,0x8(%rsi)
  0x00007f8f8f735839: mov    (%rcx),%rdx
  0x00007f8f8f73583c: and    $0x7,%rdx
  0x00007f8f8f735840: cmp    $0x5,%rdx
  0x00007f8f8f735844: je     0x00007f8f8f735901
  0x00007f8f8f73584a: mov    (%rax),%rdx
  0x00007f8f8f73584d: test   %rdx,%rdx
  0x00007f8f8f735850: je     0x00007f8f8f735901
  0x00007f8f8f735856: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f73585b: je     0x00007f8f8f735901
  0x00007f8f8f735861: mov    %rcx,0x8(%rsi)
  0x00007f8f8f735865: callq  0x00007f8f8f73586f
  0x00007f8f8f73586a: jmpq   0x00007f8f8f735901
  0x00007f8f8f73586f: lea    0x8(%rsp),%rax
  0x00007f8f8f735874: mov    %r13,-0x40(%rbp)
  0x00007f8f8f735878: mov    %r15,%rdi
  0x00007f8f8f73587b: vzeroupper 
  0x00007f8f8f73587e: mov    %rbp,0x330(%r15)
  0x00007f8f8f735885: mov    %rax,0x320(%r15)
  0x00007f8f8f73588c: test   $0xf,%esp
  0x00007f8f8f735892: je     0x00007f8f8f7358aa
  0x00007f8f8f735898: sub    $0x8,%rsp
  0x00007f8f8f73589c: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7358a1: add    $0x8,%rsp
  0x00007f8f8f7358a5: jmpq   0x00007f8f8f7358af
  0x00007f8f8f7358aa: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7358af: movabs $0x0,%r10
  0x00007f8f8f7358b9: mov    %r10,0x320(%r15)
  0x00007f8f8f7358c0: movabs $0x0,%r10
  0x00007f8f8f7358ca: mov    %r10,0x330(%r15)
  0x00007f8f8f7358d1: movabs $0x0,%r10
  0x00007f8f8f7358db: mov    %r10,0x328(%r15)
  0x00007f8f8f7358e2: vzeroupper 
  0x00007f8f8f7358e5: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7358ed: je     0x00007f8f8f7358f8
  0x00007f8f8f7358f3: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7358f8: mov    -0x40(%rbp),%r13
  0x00007f8f8f7358fc: mov    -0x38(%rbp),%r14
  0x00007f8f8f735900: retq   
  0x00007f8f8f735901: mov    -0x40(%rbp),%r13
  0x00007f8f8f735905: vmovsd (%rsp),%xmm0
  0x00007f8f8f73590a: add    $0x10,%rsp
  0x00007f8f8f73590e: mov    -0x48(%rbp),%rsi
  0x00007f8f8f735912: lea    -0x48(%rbp),%rbx
  0x00007f8f8f735916: jmpq   0x00007f8f8f735a40
  0x00007f8f8f73591b: callq  0x00007f8f8f735925
  0x00007f8f8f735920: jmpq   0x00007f8f8f7359b7
  0x00007f8f8f735925: lea    0x8(%rsp),%rax
  0x00007f8f8f73592a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73592e: mov    %r15,%rdi
  0x00007f8f8f735931: vzeroupper 
  0x00007f8f8f735934: mov    %rbp,0x330(%r15)
  0x00007f8f8f73593b: mov    %rax,0x320(%r15)
  0x00007f8f8f735942: test   $0xf,%esp
  0x00007f8f8f735948: je     0x00007f8f8f735960
  0x00007f8f8f73594e: sub    $0x8,%rsp
  0x00007f8f8f735952: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f735957: add    $0x8,%rsp
  0x00007f8f8f73595b: jmpq   0x00007f8f8f735965
  0x00007f8f8f735960: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f735965: movabs $0x0,%r10
  0x00007f8f8f73596f: mov    %r10,0x320(%r15)
  0x00007f8f8f735976: movabs $0x0,%r10
  0x00007f8f8f735980: mov    %r10,0x330(%r15)
  0x00007f8f8f735987: movabs $0x0,%r10
  0x00007f8f8f735991: mov    %r10,0x328(%r15)
  0x00007f8f8f735998: vzeroupper 
  0x00007f8f8f73599b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7359a3: je     0x00007f8f8f7359ae
  0x00007f8f8f7359a9: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7359ae: mov    -0x40(%rbp),%r13
  0x00007f8f8f7359b2: mov    -0x38(%rbp),%r14
  0x00007f8f8f7359b6: retq   
  0x00007f8f8f7359b7: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f7359bc: sub    $0x80,%rsp
  0x00007f8f8f7359c3: mov    %rax,0x78(%rsp)
  0x00007f8f8f7359c8: mov    %rcx,0x70(%rsp)
  0x00007f8f8f7359cd: mov    %rdx,0x68(%rsp)
  0x00007f8f8f7359d2: mov    %rbx,0x60(%rsp)
  0x00007f8f8f7359d7: mov    %rbp,0x50(%rsp)
  0x00007f8f8f7359dc: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7359e1: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7359e6: mov    %r8,0x38(%rsp)
  0x00007f8f8f7359eb: mov    %r9,0x30(%rsp)
  0x00007f8f8f7359f0: mov    %r10,0x28(%rsp)
  0x00007f8f8f7359f5: mov    %r11,0x20(%rsp)
  0x00007f8f8f7359fa: mov    %r12,0x18(%rsp)
  0x00007f8f8f7359ff: mov    %r13,0x10(%rsp)
  0x00007f8f8f735a04: mov    %r14,0x8(%rsp)
  0x00007f8f8f735a09: mov    %r15,(%rsp)
  0x00007f8f8f735a0d: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f735a17: movabs $0x7f8f8f7359b7,%rsi
  0x00007f8f8f735a21: mov    %rsp,%rdx
  0x00007f8f8f735a24: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f735a28: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f735a2d: hlt    
  0x00007f8f8f735a2e: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f735a36: jne    0x00007f8f8f73591b
  0x00007f8f8f735a3c: add    $0x10,%rsi
  0x00007f8f8f735a40: cmp    %rbx,%rsi
  0x00007f8f8f735a43: jne    0x00007f8f8f735a2e
  0x00007f8f8f735a45: cmpb   $0x0,0x1e48173b(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f735a4c: je     0x00007f8f8f735a8e
  0x00007f8f8f735a52: sub    $0x10,%rsp
  0x00007f8f8f735a56: vmovsd %xmm0,(%rsp)
  0x00007f8f8f735a5b: mov    -0x18(%rbp),%rsi
  0x00007f8f8f735a5f: mov    %r15,%rdi
  0x00007f8f8f735a62: test   $0xf,%esp
  0x00007f8f8f735a68: je     0x00007f8f8f735a80
  0x00007f8f8f735a6e: sub    $0x8,%rsp
  0x00007f8f8f735a72: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f735a77: add    $0x8,%rsp
  0x00007f8f8f735a7b: jmpq   0x00007f8f8f735a85
  0x00007f8f8f735a80: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f735a85: vmovsd (%rsp),%xmm0
  0x00007f8f8f735a8a: add    $0x10,%rsp
  0x00007f8f8f735a8e: mov    -0x8(%rbp),%rbx
  0x00007f8f8f735a92: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f735a9d: je     0x00007f8f8f735be9
  0x00007f8f8f735aa3: cmp    0x418(%r15),%rbx
  0x00007f8f8f735aaa: jle    0x00007f8f8f735be9
  0x00007f8f8f735ab0: mov    %r15,%rdi
  0x00007f8f8f735ab3: test   $0xf,%esp
  0x00007f8f8f735ab9: je     0x00007f8f8f735ad1
  0x00007f8f8f735abf: sub    $0x8,%rsp
  0x00007f8f8f735ac3: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f735ac8: add    $0x8,%rsp
  0x00007f8f8f735acc: jmpq   0x00007f8f8f735ad6
  0x00007f8f8f735ad1: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f735ad6: callq  0x00007f8f8f735ae0
  0x00007f8f8f735adb: jmpq   0x00007f8f8f735b72
  0x00007f8f8f735ae0: lea    0x8(%rsp),%rax
  0x00007f8f8f735ae5: mov    %r13,-0x40(%rbp)
  0x00007f8f8f735ae9: mov    %r15,%rdi
  0x00007f8f8f735aec: vzeroupper 
  0x00007f8f8f735aef: mov    %rbp,0x330(%r15)
  0x00007f8f8f735af6: mov    %rax,0x320(%r15)
  0x00007f8f8f735afd: test   $0xf,%esp
  0x00007f8f8f735b03: je     0x00007f8f8f735b1b
  0x00007f8f8f735b09: sub    $0x8,%rsp
  0x00007f8f8f735b0d: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f735b12: add    $0x8,%rsp
  0x00007f8f8f735b16: jmpq   0x00007f8f8f735b20
  0x00007f8f8f735b1b: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f735b20: movabs $0x0,%r10
  0x00007f8f8f735b2a: mov    %r10,0x320(%r15)
  0x00007f8f8f735b31: movabs $0x0,%r10
  0x00007f8f8f735b3b: mov    %r10,0x330(%r15)
  0x00007f8f8f735b42: movabs $0x0,%r10
  0x00007f8f8f735b4c: mov    %r10,0x328(%r15)
  0x00007f8f8f735b53: vzeroupper 
  0x00007f8f8f735b56: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f735b5e: je     0x00007f8f8f735b69
  0x00007f8f8f735b64: jmpq   0x00007f8f8f71a780
  0x00007f8f8f735b69: mov    -0x40(%rbp),%r13
  0x00007f8f8f735b6d: mov    -0x38(%rbp),%r14
  0x00007f8f8f735b71: retq   
  0x00007f8f8f735b72: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f735b77: sub    $0x80,%rsp
  0x00007f8f8f735b7e: mov    %rax,0x78(%rsp)
  0x00007f8f8f735b83: mov    %rcx,0x70(%rsp)
  0x00007f8f8f735b88: mov    %rdx,0x68(%rsp)
  0x00007f8f8f735b8d: mov    %rbx,0x60(%rsp)
  0x00007f8f8f735b92: mov    %rbp,0x50(%rsp)
  0x00007f8f8f735b97: mov    %rsi,0x48(%rsp)
  0x00007f8f8f735b9c: mov    %rdi,0x40(%rsp)
  0x00007f8f8f735ba1: mov    %r8,0x38(%rsp)
  0x00007f8f8f735ba6: mov    %r9,0x30(%rsp)
  0x00007f8f8f735bab: mov    %r10,0x28(%rsp)
  0x00007f8f8f735bb0: mov    %r11,0x20(%rsp)
  0x00007f8f8f735bb5: mov    %r12,0x18(%rsp)
  0x00007f8f8f735bba: mov    %r13,0x10(%rsp)
  0x00007f8f8f735bbf: mov    %r14,0x8(%rsp)
  0x00007f8f8f735bc4: mov    %r15,(%rsp)
  0x00007f8f8f735bc8: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f735bd2: movabs $0x7f8f8f735b72,%rsi
  0x00007f8f8f735bdc: mov    %rsp,%rdx
  0x00007f8f8f735bdf: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f735be3: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f735be8: hlt    
  0x00007f8f8f735be9: leaveq 
  0x00007f8f8f735bea: pop    %r13
  0x00007f8f8f735bec: mov    %rbx,%rsp
  0x00007f8f8f735bef: jmpq   *%r13
  0x00007f8f8f735bf2: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f735bf8: add    %al,(%rax)
  0x00007f8f8f735bfa: add    %al,(%rax)
  0x00007f8f8f735bfc: add    %al,(%rax)
  0x00007f8f8f735bfe: add    %al,(%rax)

----------------------------------------------------------------------
areturn  176 areturn  [0x00007f8f8f735c20, 0x00007f8f8f7361e0]  1472 bytes

  0x00007f8f8f735c20: pop    %rax
  0x00007f8f8f735c21: testb  $0x8,0x108(%r15)
  0x00007f8f8f735c29: je     0x00007f8f8f735ccd
  0x00007f8f8f735c2f: push   %rax
  0x00007f8f8f735c30: callq  0x00007f8f8f735c3a
  0x00007f8f8f735c35: jmpq   0x00007f8f8f735ccc
  0x00007f8f8f735c3a: lea    0x8(%rsp),%rax
  0x00007f8f8f735c3f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f735c43: mov    %r15,%rdi
  0x00007f8f8f735c46: vzeroupper 
  0x00007f8f8f735c49: mov    %rbp,0x330(%r15)
  0x00007f8f8f735c50: mov    %rax,0x320(%r15)
  0x00007f8f8f735c57: test   $0xf,%esp
  0x00007f8f8f735c5d: je     0x00007f8f8f735c75
  0x00007f8f8f735c63: sub    $0x8,%rsp
  0x00007f8f8f735c67: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f735c6c: add    $0x8,%rsp
  0x00007f8f8f735c70: jmpq   0x00007f8f8f735c7a
  0x00007f8f8f735c75: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f735c7a: movabs $0x0,%r10
  0x00007f8f8f735c84: mov    %r10,0x320(%r15)
  0x00007f8f8f735c8b: movabs $0x0,%r10
  0x00007f8f8f735c95: mov    %r10,0x330(%r15)
  0x00007f8f8f735c9c: movabs $0x0,%r10
  0x00007f8f8f735ca6: mov    %r10,0x328(%r15)
  0x00007f8f8f735cad: vzeroupper 
  0x00007f8f8f735cb0: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f735cb8: je     0x00007f8f8f735cc3
  0x00007f8f8f735cbe: jmpq   0x00007f8f8f71a780
  0x00007f8f8f735cc3: mov    -0x40(%rbp),%r13
  0x00007f8f8f735cc7: mov    -0x38(%rbp),%r14
  0x00007f8f8f735ccb: retq   
  0x00007f8f8f735ccc: pop    %rax
  0x00007f8f8f735ccd: mov    0x3dd(%r15),%bl
  0x00007f8f8f735cd4: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f735cdc: mov    -0x18(%rbp),%rcx
  0x00007f8f8f735ce0: mov    0x20(%rcx),%ecx
  0x00007f8f8f735ce3: test   $0x20,%ecx
  0x00007f8f8f735ce9: je     0x00007f8f8f735efe
  0x00007f8f8f735cef: test   $0xff,%bl
  0x00007f8f8f735cf2: jne    0x00007f8f8f736035
  0x00007f8f8f735cf8: push   %rax
  0x00007f8f8f735cf9: lea    -0x58(%rbp),%rsi
  0x00007f8f8f735cfd: mov    0x8(%rsi),%rax
  0x00007f8f8f735d01: test   %rax,%rax
  0x00007f8f8f735d04: jne    0x00007f8f8f735e1e
  0x00007f8f8f735d0a: pop    %rax
  0x00007f8f8f735d0b: callq  0x00007f8f8f735d15
  0x00007f8f8f735d10: jmpq   0x00007f8f8f735da7
  0x00007f8f8f735d15: lea    0x8(%rsp),%rax
  0x00007f8f8f735d1a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f735d1e: mov    %r15,%rdi
  0x00007f8f8f735d21: vzeroupper 
  0x00007f8f8f735d24: mov    %rbp,0x330(%r15)
  0x00007f8f8f735d2b: mov    %rax,0x320(%r15)
  0x00007f8f8f735d32: test   $0xf,%esp
  0x00007f8f8f735d38: je     0x00007f8f8f735d50
  0x00007f8f8f735d3e: sub    $0x8,%rsp
  0x00007f8f8f735d42: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f735d47: add    $0x8,%rsp
  0x00007f8f8f735d4b: jmpq   0x00007f8f8f735d55
  0x00007f8f8f735d50: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f735d55: movabs $0x0,%r10
  0x00007f8f8f735d5f: mov    %r10,0x320(%r15)
  0x00007f8f8f735d66: movabs $0x0,%r10
  0x00007f8f8f735d70: mov    %r10,0x330(%r15)
  0x00007f8f8f735d77: movabs $0x0,%r10
  0x00007f8f8f735d81: mov    %r10,0x328(%r15)
  0x00007f8f8f735d88: vzeroupper 
  0x00007f8f8f735d8b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f735d93: je     0x00007f8f8f735d9e
  0x00007f8f8f735d99: jmpq   0x00007f8f8f71a780
  0x00007f8f8f735d9e: mov    -0x40(%rbp),%r13
  0x00007f8f8f735da2: mov    -0x38(%rbp),%r14
  0x00007f8f8f735da6: retq   
  0x00007f8f8f735da7: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f735dac: sub    $0x80,%rsp
  0x00007f8f8f735db3: mov    %rax,0x78(%rsp)
  0x00007f8f8f735db8: mov    %rcx,0x70(%rsp)
  0x00007f8f8f735dbd: mov    %rdx,0x68(%rsp)
  0x00007f8f8f735dc2: mov    %rbx,0x60(%rsp)
  0x00007f8f8f735dc7: mov    %rbp,0x50(%rsp)
  0x00007f8f8f735dcc: mov    %rsi,0x48(%rsp)
  0x00007f8f8f735dd1: mov    %rdi,0x40(%rsp)
  0x00007f8f8f735dd6: mov    %r8,0x38(%rsp)
  0x00007f8f8f735ddb: mov    %r9,0x30(%rsp)
  0x00007f8f8f735de0: mov    %r10,0x28(%rsp)
  0x00007f8f8f735de5: mov    %r11,0x20(%rsp)
  0x00007f8f8f735dea: mov    %r12,0x18(%rsp)
  0x00007f8f8f735def: mov    %r13,0x10(%rsp)
  0x00007f8f8f735df4: mov    %r14,0x8(%rsp)
  0x00007f8f8f735df9: mov    %r15,(%rsp)
  0x00007f8f8f735dfd: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f735e07: movabs $0x7f8f8f735da7,%rsi
  0x00007f8f8f735e11: mov    %rsp,%rdx
  0x00007f8f8f735e14: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f735e18: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f735e1d: hlt    
  0x00007f8f8f735e1e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f735e22: lea    (%rsi),%rax
  0x00007f8f8f735e25: mov    0x8(%rsi),%rcx
  0x00007f8f8f735e29: movq   $0x0,0x8(%rsi)
  0x00007f8f8f735e31: mov    (%rcx),%rdx
  0x00007f8f8f735e34: and    $0x7,%rdx
  0x00007f8f8f735e38: cmp    $0x5,%rdx
  0x00007f8f8f735e3c: je     0x00007f8f8f735ef9
  0x00007f8f8f735e42: mov    (%rax),%rdx
  0x00007f8f8f735e45: test   %rdx,%rdx
  0x00007f8f8f735e48: je     0x00007f8f8f735ef9
  0x00007f8f8f735e4e: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f735e53: je     0x00007f8f8f735ef9
  0x00007f8f8f735e59: mov    %rcx,0x8(%rsi)
  0x00007f8f8f735e5d: callq  0x00007f8f8f735e67
  0x00007f8f8f735e62: jmpq   0x00007f8f8f735ef9
  0x00007f8f8f735e67: lea    0x8(%rsp),%rax
  0x00007f8f8f735e6c: mov    %r13,-0x40(%rbp)
  0x00007f8f8f735e70: mov    %r15,%rdi
  0x00007f8f8f735e73: vzeroupper 
  0x00007f8f8f735e76: mov    %rbp,0x330(%r15)
  0x00007f8f8f735e7d: mov    %rax,0x320(%r15)
  0x00007f8f8f735e84: test   $0xf,%esp
  0x00007f8f8f735e8a: je     0x00007f8f8f735ea2
  0x00007f8f8f735e90: sub    $0x8,%rsp
  0x00007f8f8f735e94: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f735e99: add    $0x8,%rsp
  0x00007f8f8f735e9d: jmpq   0x00007f8f8f735ea7
  0x00007f8f8f735ea2: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f735ea7: movabs $0x0,%r10
  0x00007f8f8f735eb1: mov    %r10,0x320(%r15)
  0x00007f8f8f735eb8: movabs $0x0,%r10
  0x00007f8f8f735ec2: mov    %r10,0x330(%r15)
  0x00007f8f8f735ec9: movabs $0x0,%r10
  0x00007f8f8f735ed3: mov    %r10,0x328(%r15)
  0x00007f8f8f735eda: vzeroupper 
  0x00007f8f8f735edd: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f735ee5: je     0x00007f8f8f735ef0
  0x00007f8f8f735eeb: jmpq   0x00007f8f8f71a780
  0x00007f8f8f735ef0: mov    -0x40(%rbp),%r13
  0x00007f8f8f735ef4: mov    -0x38(%rbp),%r14
  0x00007f8f8f735ef8: retq   
  0x00007f8f8f735ef9: mov    -0x40(%rbp),%r13
  0x00007f8f8f735efd: pop    %rax
  0x00007f8f8f735efe: mov    -0x48(%rbp),%rsi
  0x00007f8f8f735f02: lea    -0x48(%rbp),%rbx
  0x00007f8f8f735f06: jmpq   0x00007f8f8f736030
  0x00007f8f8f735f0b: callq  0x00007f8f8f735f15
  0x00007f8f8f735f10: jmpq   0x00007f8f8f735fa7
  0x00007f8f8f735f15: lea    0x8(%rsp),%rax
  0x00007f8f8f735f1a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f735f1e: mov    %r15,%rdi
  0x00007f8f8f735f21: vzeroupper 
  0x00007f8f8f735f24: mov    %rbp,0x330(%r15)
  0x00007f8f8f735f2b: mov    %rax,0x320(%r15)
  0x00007f8f8f735f32: test   $0xf,%esp
  0x00007f8f8f735f38: je     0x00007f8f8f735f50
  0x00007f8f8f735f3e: sub    $0x8,%rsp
  0x00007f8f8f735f42: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f735f47: add    $0x8,%rsp
  0x00007f8f8f735f4b: jmpq   0x00007f8f8f735f55
  0x00007f8f8f735f50: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f735f55: movabs $0x0,%r10
  0x00007f8f8f735f5f: mov    %r10,0x320(%r15)
  0x00007f8f8f735f66: movabs $0x0,%r10
  0x00007f8f8f735f70: mov    %r10,0x330(%r15)
  0x00007f8f8f735f77: movabs $0x0,%r10
  0x00007f8f8f735f81: mov    %r10,0x328(%r15)
  0x00007f8f8f735f88: vzeroupper 
  0x00007f8f8f735f8b: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f735f93: je     0x00007f8f8f735f9e
  0x00007f8f8f735f99: jmpq   0x00007f8f8f71a780
  0x00007f8f8f735f9e: mov    -0x40(%rbp),%r13
  0x00007f8f8f735fa2: mov    -0x38(%rbp),%r14
  0x00007f8f8f735fa6: retq   
  0x00007f8f8f735fa7: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f735fac: sub    $0x80,%rsp
  0x00007f8f8f735fb3: mov    %rax,0x78(%rsp)
  0x00007f8f8f735fb8: mov    %rcx,0x70(%rsp)
  0x00007f8f8f735fbd: mov    %rdx,0x68(%rsp)
  0x00007f8f8f735fc2: mov    %rbx,0x60(%rsp)
  0x00007f8f8f735fc7: mov    %rbp,0x50(%rsp)
  0x00007f8f8f735fcc: mov    %rsi,0x48(%rsp)
  0x00007f8f8f735fd1: mov    %rdi,0x40(%rsp)
  0x00007f8f8f735fd6: mov    %r8,0x38(%rsp)
  0x00007f8f8f735fdb: mov    %r9,0x30(%rsp)
  0x00007f8f8f735fe0: mov    %r10,0x28(%rsp)
  0x00007f8f8f735fe5: mov    %r11,0x20(%rsp)
  0x00007f8f8f735fea: mov    %r12,0x18(%rsp)
  0x00007f8f8f735fef: mov    %r13,0x10(%rsp)
  0x00007f8f8f735ff4: mov    %r14,0x8(%rsp)
  0x00007f8f8f735ff9: mov    %r15,(%rsp)
  0x00007f8f8f735ffd: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f736007: movabs $0x7f8f8f735fa7,%rsi
  0x00007f8f8f736011: mov    %rsp,%rdx
  0x00007f8f8f736014: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f736018: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73601d: hlt    
  0x00007f8f8f73601e: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f736026: jne    0x00007f8f8f735f0b
  0x00007f8f8f73602c: add    $0x10,%rsi
  0x00007f8f8f736030: cmp    %rbx,%rsi
  0x00007f8f8f736033: jne    0x00007f8f8f73601e
  0x00007f8f8f736035: cmpb   $0x0,0x1e48114b(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f73603c: je     0x00007f8f8f73606e
  0x00007f8f8f736042: push   %rax
  0x00007f8f8f736043: mov    -0x18(%rbp),%rsi
  0x00007f8f8f736047: mov    %r15,%rdi
  0x00007f8f8f73604a: test   $0xf,%esp
  0x00007f8f8f736050: je     0x00007f8f8f736068
  0x00007f8f8f736056: sub    $0x8,%rsp
  0x00007f8f8f73605a: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f73605f: add    $0x8,%rsp
  0x00007f8f8f736063: jmpq   0x00007f8f8f73606d
  0x00007f8f8f736068: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f73606d: pop    %rax
  0x00007f8f8f73606e: mov    -0x8(%rbp),%rbx
  0x00007f8f8f736072: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f73607d: je     0x00007f8f8f7361c9
  0x00007f8f8f736083: cmp    0x418(%r15),%rbx
  0x00007f8f8f73608a: jle    0x00007f8f8f7361c9
  0x00007f8f8f736090: mov    %r15,%rdi
  0x00007f8f8f736093: test   $0xf,%esp
  0x00007f8f8f736099: je     0x00007f8f8f7360b1
  0x00007f8f8f73609f: sub    $0x8,%rsp
  0x00007f8f8f7360a3: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f7360a8: add    $0x8,%rsp
  0x00007f8f8f7360ac: jmpq   0x00007f8f8f7360b6
  0x00007f8f8f7360b1: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f7360b6: callq  0x00007f8f8f7360c0
  0x00007f8f8f7360bb: jmpq   0x00007f8f8f736152
  0x00007f8f8f7360c0: lea    0x8(%rsp),%rax
  0x00007f8f8f7360c5: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7360c9: mov    %r15,%rdi
  0x00007f8f8f7360cc: vzeroupper 
  0x00007f8f8f7360cf: mov    %rbp,0x330(%r15)
  0x00007f8f8f7360d6: mov    %rax,0x320(%r15)
  0x00007f8f8f7360dd: test   $0xf,%esp
  0x00007f8f8f7360e3: je     0x00007f8f8f7360fb
  0x00007f8f8f7360e9: sub    $0x8,%rsp
  0x00007f8f8f7360ed: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f7360f2: add    $0x8,%rsp
  0x00007f8f8f7360f6: jmpq   0x00007f8f8f736100
  0x00007f8f8f7360fb: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f736100: movabs $0x0,%r10
  0x00007f8f8f73610a: mov    %r10,0x320(%r15)
  0x00007f8f8f736111: movabs $0x0,%r10
  0x00007f8f8f73611b: mov    %r10,0x330(%r15)
  0x00007f8f8f736122: movabs $0x0,%r10
  0x00007f8f8f73612c: mov    %r10,0x328(%r15)
  0x00007f8f8f736133: vzeroupper 
  0x00007f8f8f736136: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73613e: je     0x00007f8f8f736149
  0x00007f8f8f736144: jmpq   0x00007f8f8f71a780
  0x00007f8f8f736149: mov    -0x40(%rbp),%r13
  0x00007f8f8f73614d: mov    -0x38(%rbp),%r14
  0x00007f8f8f736151: retq   
  0x00007f8f8f736152: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f736157: sub    $0x80,%rsp
  0x00007f8f8f73615e: mov    %rax,0x78(%rsp)
  0x00007f8f8f736163: mov    %rcx,0x70(%rsp)
  0x00007f8f8f736168: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73616d: mov    %rbx,0x60(%rsp)
  0x00007f8f8f736172: mov    %rbp,0x50(%rsp)
  0x00007f8f8f736177: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73617c: mov    %rdi,0x40(%rsp)
  0x00007f8f8f736181: mov    %r8,0x38(%rsp)
  0x00007f8f8f736186: mov    %r9,0x30(%rsp)
  0x00007f8f8f73618b: mov    %r10,0x28(%rsp)
  0x00007f8f8f736190: mov    %r11,0x20(%rsp)
  0x00007f8f8f736195: mov    %r12,0x18(%rsp)
  0x00007f8f8f73619a: mov    %r13,0x10(%rsp)
  0x00007f8f8f73619f: mov    %r14,0x8(%rsp)
  0x00007f8f8f7361a4: mov    %r15,(%rsp)
  0x00007f8f8f7361a8: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f7361b2: movabs $0x7f8f8f736152,%rsi
  0x00007f8f8f7361bc: mov    %rsp,%rdx
  0x00007f8f8f7361bf: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f7361c3: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f7361c8: hlt    
  0x00007f8f8f7361c9: leaveq 
  0x00007f8f8f7361ca: pop    %r13
  0x00007f8f8f7361cc: mov    %rbx,%rsp
  0x00007f8f8f7361cf: jmpq   *%r13
  0x00007f8f8f7361d2: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f7361d8: add    %al,(%rax)
  0x00007f8f8f7361da: add    %al,(%rax)
  0x00007f8f8f7361dc: add    %al,(%rax)
  0x00007f8f8f7361de: add    %al,(%rax)

----------------------------------------------------------------------
return  177 return  [0x00007f8f8f736200, 0x00007f8f8f736800]  1536 bytes

  0x00007f8f8f736200: push   %rax
  0x00007f8f8f736201: jmpq   0x00007f8f8f73623f
  0x00007f8f8f736206: sub    $0x8,%rsp
  0x00007f8f8f73620a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73620f: jmpq   0x00007f8f8f73623f
  0x00007f8f8f736214: sub    $0x10,%rsp
  0x00007f8f8f736218: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73621d: jmpq   0x00007f8f8f73623f
  0x00007f8f8f736222: sub    $0x10,%rsp
  0x00007f8f8f736226: mov    %rax,(%rsp)
  0x00007f8f8f73622a: movabs $0x0,%r10
  0x00007f8f8f736234: mov    %r10,0x8(%rsp)
  0x00007f8f8f736239: jmpq   0x00007f8f8f73623f
  0x00007f8f8f73623e: push   %rax
  0x00007f8f8f73623f: testb  $0x8,0x108(%r15)
  0x00007f8f8f736247: je     0x00007f8f8f7362e9
  0x00007f8f8f73624d: callq  0x00007f8f8f736257
  0x00007f8f8f736252: jmpq   0x00007f8f8f7362e9
  0x00007f8f8f736257: lea    0x8(%rsp),%rax
  0x00007f8f8f73625c: mov    %r13,-0x40(%rbp)
  0x00007f8f8f736260: mov    %r15,%rdi
  0x00007f8f8f736263: vzeroupper 
  0x00007f8f8f736266: mov    %rbp,0x330(%r15)
  0x00007f8f8f73626d: mov    %rax,0x320(%r15)
  0x00007f8f8f736274: test   $0xf,%esp
  0x00007f8f8f73627a: je     0x00007f8f8f736292
  0x00007f8f8f736280: sub    $0x8,%rsp
  0x00007f8f8f736284: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f736289: add    $0x8,%rsp
  0x00007f8f8f73628d: jmpq   0x00007f8f8f736297
  0x00007f8f8f736292: callq  0x00007f8fad02f600 = InterpreterRuntime::at_safepoint(JavaThread*)
  0x00007f8f8f736297: movabs $0x0,%r10
  0x00007f8f8f7362a1: mov    %r10,0x320(%r15)
  0x00007f8f8f7362a8: movabs $0x0,%r10
  0x00007f8f8f7362b2: mov    %r10,0x330(%r15)
  0x00007f8f8f7362b9: movabs $0x0,%r10
  0x00007f8f8f7362c3: mov    %r10,0x328(%r15)
  0x00007f8f8f7362ca: vzeroupper 
  0x00007f8f8f7362cd: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7362d5: je     0x00007f8f8f7362e0
  0x00007f8f8f7362db: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7362e0: mov    -0x40(%rbp),%r13
  0x00007f8f8f7362e4: mov    -0x38(%rbp),%r14
  0x00007f8f8f7362e8: retq   
  0x00007f8f8f7362e9: mov    0x3dd(%r15),%bl
  0x00007f8f8f7362f0: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f7362f8: mov    -0x18(%rbp),%rcx
  0x00007f8f8f7362fc: mov    0x20(%rcx),%ecx
  0x00007f8f8f7362ff: test   $0x20,%ecx
  0x00007f8f8f736305: je     0x00007f8f8f736517
  0x00007f8f8f73630b: test   $0xff,%bl
  0x00007f8f8f73630e: jne    0x00007f8f8f73664e
  0x00007f8f8f736314: lea    -0x58(%rbp),%rsi
  0x00007f8f8f736318: mov    0x8(%rsi),%rax
  0x00007f8f8f73631c: test   %rax,%rax
  0x00007f8f8f73631f: jne    0x00007f8f8f736438
  0x00007f8f8f736325: callq  0x00007f8f8f73632f
  0x00007f8f8f73632a: jmpq   0x00007f8f8f7363c1
  0x00007f8f8f73632f: lea    0x8(%rsp),%rax
  0x00007f8f8f736334: mov    %r13,-0x40(%rbp)
  0x00007f8f8f736338: mov    %r15,%rdi
  0x00007f8f8f73633b: vzeroupper 
  0x00007f8f8f73633e: mov    %rbp,0x330(%r15)
  0x00007f8f8f736345: mov    %rax,0x320(%r15)
  0x00007f8f8f73634c: test   $0xf,%esp
  0x00007f8f8f736352: je     0x00007f8f8f73636a
  0x00007f8f8f736358: sub    $0x8,%rsp
  0x00007f8f8f73635c: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f736361: add    $0x8,%rsp
  0x00007f8f8f736365: jmpq   0x00007f8f8f73636f
  0x00007f8f8f73636a: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f73636f: movabs $0x0,%r10
  0x00007f8f8f736379: mov    %r10,0x320(%r15)
  0x00007f8f8f736380: movabs $0x0,%r10
  0x00007f8f8f73638a: mov    %r10,0x330(%r15)
  0x00007f8f8f736391: movabs $0x0,%r10
  0x00007f8f8f73639b: mov    %r10,0x328(%r15)
  0x00007f8f8f7363a2: vzeroupper 
  0x00007f8f8f7363a5: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7363ad: je     0x00007f8f8f7363b8
  0x00007f8f8f7363b3: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7363b8: mov    -0x40(%rbp),%r13
  0x00007f8f8f7363bc: mov    -0x38(%rbp),%r14
  0x00007f8f8f7363c0: retq   
  0x00007f8f8f7363c1: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f7363c6: sub    $0x80,%rsp
  0x00007f8f8f7363cd: mov    %rax,0x78(%rsp)
  0x00007f8f8f7363d2: mov    %rcx,0x70(%rsp)
  0x00007f8f8f7363d7: mov    %rdx,0x68(%rsp)
  0x00007f8f8f7363dc: mov    %rbx,0x60(%rsp)
  0x00007f8f8f7363e1: mov    %rbp,0x50(%rsp)
  0x00007f8f8f7363e6: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7363eb: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7363f0: mov    %r8,0x38(%rsp)
  0x00007f8f8f7363f5: mov    %r9,0x30(%rsp)
  0x00007f8f8f7363fa: mov    %r10,0x28(%rsp)
  0x00007f8f8f7363ff: mov    %r11,0x20(%rsp)
  0x00007f8f8f736404: mov    %r12,0x18(%rsp)
  0x00007f8f8f736409: mov    %r13,0x10(%rsp)
  0x00007f8f8f73640e: mov    %r14,0x8(%rsp)
  0x00007f8f8f736413: mov    %r15,(%rsp)
  0x00007f8f8f736417: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f736421: movabs $0x7f8f8f7363c1,%rsi
  0x00007f8f8f73642b: mov    %rsp,%rdx
  0x00007f8f8f73642e: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f736432: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f736437: hlt    
  0x00007f8f8f736438: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73643c: lea    (%rsi),%rax
  0x00007f8f8f73643f: mov    0x8(%rsi),%rcx
  0x00007f8f8f736443: movq   $0x0,0x8(%rsi)
  0x00007f8f8f73644b: mov    (%rcx),%rdx
  0x00007f8f8f73644e: and    $0x7,%rdx
  0x00007f8f8f736452: cmp    $0x5,%rdx
  0x00007f8f8f736456: je     0x00007f8f8f736513
  0x00007f8f8f73645c: mov    (%rax),%rdx
  0x00007f8f8f73645f: test   %rdx,%rdx
  0x00007f8f8f736462: je     0x00007f8f8f736513
  0x00007f8f8f736468: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f73646d: je     0x00007f8f8f736513
  0x00007f8f8f736473: mov    %rcx,0x8(%rsi)
  0x00007f8f8f736477: callq  0x00007f8f8f736481
  0x00007f8f8f73647c: jmpq   0x00007f8f8f736513
  0x00007f8f8f736481: lea    0x8(%rsp),%rax
  0x00007f8f8f736486: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73648a: mov    %r15,%rdi
  0x00007f8f8f73648d: vzeroupper 
  0x00007f8f8f736490: mov    %rbp,0x330(%r15)
  0x00007f8f8f736497: mov    %rax,0x320(%r15)
  0x00007f8f8f73649e: test   $0xf,%esp
  0x00007f8f8f7364a4: je     0x00007f8f8f7364bc
  0x00007f8f8f7364aa: sub    $0x8,%rsp
  0x00007f8f8f7364ae: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7364b3: add    $0x8,%rsp
  0x00007f8f8f7364b7: jmpq   0x00007f8f8f7364c1
  0x00007f8f8f7364bc: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f7364c1: movabs $0x0,%r10
  0x00007f8f8f7364cb: mov    %r10,0x320(%r15)
  0x00007f8f8f7364d2: movabs $0x0,%r10
  0x00007f8f8f7364dc: mov    %r10,0x330(%r15)
  0x00007f8f8f7364e3: movabs $0x0,%r10
  0x00007f8f8f7364ed: mov    %r10,0x328(%r15)
  0x00007f8f8f7364f4: vzeroupper 
  0x00007f8f8f7364f7: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7364ff: je     0x00007f8f8f73650a
  0x00007f8f8f736505: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73650a: mov    -0x40(%rbp),%r13
  0x00007f8f8f73650e: mov    -0x38(%rbp),%r14
  0x00007f8f8f736512: retq   
  0x00007f8f8f736513: mov    -0x40(%rbp),%r13
  0x00007f8f8f736517: mov    -0x48(%rbp),%rsi
  0x00007f8f8f73651b: lea    -0x48(%rbp),%rbx
  0x00007f8f8f73651f: jmpq   0x00007f8f8f736649
  0x00007f8f8f736524: callq  0x00007f8f8f73652e
  0x00007f8f8f736529: jmpq   0x00007f8f8f7365c0
  0x00007f8f8f73652e: lea    0x8(%rsp),%rax
  0x00007f8f8f736533: mov    %r13,-0x40(%rbp)
  0x00007f8f8f736537: mov    %r15,%rdi
  0x00007f8f8f73653a: vzeroupper 
  0x00007f8f8f73653d: mov    %rbp,0x330(%r15)
  0x00007f8f8f736544: mov    %rax,0x320(%r15)
  0x00007f8f8f73654b: test   $0xf,%esp
  0x00007f8f8f736551: je     0x00007f8f8f736569
  0x00007f8f8f736557: sub    $0x8,%rsp
  0x00007f8f8f73655b: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f736560: add    $0x8,%rsp
  0x00007f8f8f736564: jmpq   0x00007f8f8f73656e
  0x00007f8f8f736569: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f73656e: movabs $0x0,%r10
  0x00007f8f8f736578: mov    %r10,0x320(%r15)
  0x00007f8f8f73657f: movabs $0x0,%r10
  0x00007f8f8f736589: mov    %r10,0x330(%r15)
  0x00007f8f8f736590: movabs $0x0,%r10
  0x00007f8f8f73659a: mov    %r10,0x328(%r15)
  0x00007f8f8f7365a1: vzeroupper 
  0x00007f8f8f7365a4: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7365ac: je     0x00007f8f8f7365b7
  0x00007f8f8f7365b2: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7365b7: mov    -0x40(%rbp),%r13
  0x00007f8f8f7365bb: mov    -0x38(%rbp),%r14
  0x00007f8f8f7365bf: retq   
  0x00007f8f8f7365c0: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f7365c5: sub    $0x80,%rsp
  0x00007f8f8f7365cc: mov    %rax,0x78(%rsp)
  0x00007f8f8f7365d1: mov    %rcx,0x70(%rsp)
  0x00007f8f8f7365d6: mov    %rdx,0x68(%rsp)
  0x00007f8f8f7365db: mov    %rbx,0x60(%rsp)
  0x00007f8f8f7365e0: mov    %rbp,0x50(%rsp)
  0x00007f8f8f7365e5: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7365ea: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7365ef: mov    %r8,0x38(%rsp)
  0x00007f8f8f7365f4: mov    %r9,0x30(%rsp)
  0x00007f8f8f7365f9: mov    %r10,0x28(%rsp)
  0x00007f8f8f7365fe: mov    %r11,0x20(%rsp)
  0x00007f8f8f736603: mov    %r12,0x18(%rsp)
  0x00007f8f8f736608: mov    %r13,0x10(%rsp)
  0x00007f8f8f73660d: mov    %r14,0x8(%rsp)
  0x00007f8f8f736612: mov    %r15,(%rsp)
  0x00007f8f8f736616: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f736620: movabs $0x7f8f8f7365c0,%rsi
  0x00007f8f8f73662a: mov    %rsp,%rdx
  0x00007f8f8f73662d: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f736631: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f736636: hlt    
  0x00007f8f8f736637: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f73663f: jne    0x00007f8f8f736524
  0x00007f8f8f736645: add    $0x10,%rsi
  0x00007f8f8f736649: cmp    %rbx,%rsi
  0x00007f8f8f73664c: jne    0x00007f8f8f736637
  0x00007f8f8f73664e: cmpb   $0x0,0x1e480b32(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f736655: je     0x00007f8f8f736685
  0x00007f8f8f73665b: mov    -0x18(%rbp),%rsi
  0x00007f8f8f73665f: mov    %r15,%rdi
  0x00007f8f8f736662: test   $0xf,%esp
  0x00007f8f8f736668: je     0x00007f8f8f736680
  0x00007f8f8f73666e: sub    $0x8,%rsp
  0x00007f8f8f736672: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f736677: add    $0x8,%rsp
  0x00007f8f8f73667b: jmpq   0x00007f8f8f736685
  0x00007f8f8f736680: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f736685: mov    -0x8(%rbp),%rbx
  0x00007f8f8f736689: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f736694: je     0x00007f8f8f7367e0
  0x00007f8f8f73669a: cmp    0x418(%r15),%rbx
  0x00007f8f8f7366a1: jle    0x00007f8f8f7367e0
  0x00007f8f8f7366a7: mov    %r15,%rdi
  0x00007f8f8f7366aa: test   $0xf,%esp
  0x00007f8f8f7366b0: je     0x00007f8f8f7366c8
  0x00007f8f8f7366b6: sub    $0x8,%rsp
  0x00007f8f8f7366ba: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f7366bf: add    $0x8,%rsp
  0x00007f8f8f7366c3: jmpq   0x00007f8f8f7366cd
  0x00007f8f8f7366c8: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f7366cd: callq  0x00007f8f8f7366d7
  0x00007f8f8f7366d2: jmpq   0x00007f8f8f736769
  0x00007f8f8f7366d7: lea    0x8(%rsp),%rax
  0x00007f8f8f7366dc: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7366e0: mov    %r15,%rdi
  0x00007f8f8f7366e3: vzeroupper 
  0x00007f8f8f7366e6: mov    %rbp,0x330(%r15)
  0x00007f8f8f7366ed: mov    %rax,0x320(%r15)
  0x00007f8f8f7366f4: test   $0xf,%esp
  0x00007f8f8f7366fa: je     0x00007f8f8f736712
  0x00007f8f8f736700: sub    $0x8,%rsp
  0x00007f8f8f736704: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f736709: add    $0x8,%rsp
  0x00007f8f8f73670d: jmpq   0x00007f8f8f736717
  0x00007f8f8f736712: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f736717: movabs $0x0,%r10
  0x00007f8f8f736721: mov    %r10,0x320(%r15)
  0x00007f8f8f736728: movabs $0x0,%r10
  0x00007f8f8f736732: mov    %r10,0x330(%r15)
  0x00007f8f8f736739: movabs $0x0,%r10
  0x00007f8f8f736743: mov    %r10,0x328(%r15)
  0x00007f8f8f73674a: vzeroupper 
  0x00007f8f8f73674d: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f736755: je     0x00007f8f8f736760
  0x00007f8f8f73675b: jmpq   0x00007f8f8f71a780
  0x00007f8f8f736760: mov    -0x40(%rbp),%r13
  0x00007f8f8f736764: mov    -0x38(%rbp),%r14
  0x00007f8f8f736768: retq   
  0x00007f8f8f736769: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73676e: sub    $0x80,%rsp
  0x00007f8f8f736775: mov    %rax,0x78(%rsp)
  0x00007f8f8f73677a: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73677f: mov    %rdx,0x68(%rsp)
  0x00007f8f8f736784: mov    %rbx,0x60(%rsp)
  0x00007f8f8f736789: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73678e: mov    %rsi,0x48(%rsp)
  0x00007f8f8f736793: mov    %rdi,0x40(%rsp)
  0x00007f8f8f736798: mov    %r8,0x38(%rsp)
  0x00007f8f8f73679d: mov    %r9,0x30(%rsp)
  0x00007f8f8f7367a2: mov    %r10,0x28(%rsp)
  0x00007f8f8f7367a7: mov    %r11,0x20(%rsp)
  0x00007f8f8f7367ac: mov    %r12,0x18(%rsp)
  0x00007f8f8f7367b1: mov    %r13,0x10(%rsp)
  0x00007f8f8f7367b6: mov    %r14,0x8(%rsp)
  0x00007f8f8f7367bb: mov    %r15,(%rsp)
  0x00007f8f8f7367bf: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f7367c9: movabs $0x7f8f8f736769,%rsi
  0x00007f8f8f7367d3: mov    %rsp,%rdx
  0x00007f8f8f7367d6: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f7367da: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f7367df: hlt    
  0x00007f8f8f7367e0: leaveq 
  0x00007f8f8f7367e1: pop    %r13
  0x00007f8f8f7367e3: mov    %rbx,%rsp
  0x00007f8f8f7367e6: jmpq   *%r13
  0x00007f8f8f7367e9: nopl   0x0(%rax)
  0x00007f8f8f7367f0: add    %al,(%rax)
  0x00007f8f8f7367f2: add    %al,(%rax)
  0x00007f8f8f7367f4: add    %al,(%rax)
  0x00007f8f8f7367f6: add    %al,(%rax)
  0x00007f8f8f7367f8: add    %al,(%rax)
  0x00007f8f8f7367fa: add    %al,(%rax)
  0x00007f8f8f7367fc: add    %al,(%rax)
  0x00007f8f8f7367fe: add    %al,(%rax)

----------------------------------------------------------------------
getstatic  178 getstatic  [0x00007f8f8f736820, 0x00007f8f8f736a40]  544 bytes

  0x00007f8f8f736820: push   %rax
  0x00007f8f8f736821: jmpq   0x00007f8f8f73685f
  0x00007f8f8f736826: sub    $0x8,%rsp
  0x00007f8f8f73682a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73682f: jmpq   0x00007f8f8f73685f
  0x00007f8f8f736834: sub    $0x10,%rsp
  0x00007f8f8f736838: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73683d: jmpq   0x00007f8f8f73685f
  0x00007f8f8f736842: sub    $0x10,%rsp
  0x00007f8f8f736846: mov    %rax,(%rsp)
  0x00007f8f8f73684a: movabs $0x0,%r10
  0x00007f8f8f736854: mov    %r10,0x8(%rsp)
  0x00007f8f8f736859: jmpq   0x00007f8f8f73685f
  0x00007f8f8f73685e: push   %rax
  0x00007f8f8f73685f: movzwl 0x1(%r13),%edx
  0x00007f8f8f736864: mov    -0x30(%rbp),%rcx
  0x00007f8f8f736868: shl    $0x2,%edx
  0x00007f8f8f73686b: mov    0x28(%rcx,%rdx,8),%ebx
  0x00007f8f8f73686f: shr    $0x10,%ebx
  0x00007f8f8f736872: and    $0xff,%ebx
  0x00007f8f8f736878: cmp    $0xb2,%ebx
  0x00007f8f8f73687e: je     0x00007f8f8f736934
  0x00007f8f8f736884: mov    $0xb2,%ebx
  0x00007f8f8f736889: callq  0x00007f8f8f736893
  0x00007f8f8f73688e: jmpq   0x00007f8f8f736928
  0x00007f8f8f736893: mov    %rbx,%rsi
  0x00007f8f8f736896: lea    0x8(%rsp),%rax
  0x00007f8f8f73689b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73689f: mov    %r15,%rdi
  0x00007f8f8f7368a2: vzeroupper 
  0x00007f8f8f7368a5: mov    %rbp,0x330(%r15)
  0x00007f8f8f7368ac: mov    %rax,0x320(%r15)
  0x00007f8f8f7368b3: test   $0xf,%esp
  0x00007f8f8f7368b9: je     0x00007f8f8f7368d1
  0x00007f8f8f7368bf: sub    $0x8,%rsp
  0x00007f8f8f7368c3: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f7368c8: add    $0x8,%rsp
  0x00007f8f8f7368cc: jmpq   0x00007f8f8f7368d6
  0x00007f8f8f7368d1: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f7368d6: movabs $0x0,%r10
  0x00007f8f8f7368e0: mov    %r10,0x320(%r15)
  0x00007f8f8f7368e7: movabs $0x0,%r10
  0x00007f8f8f7368f1: mov    %r10,0x330(%r15)
  0x00007f8f8f7368f8: movabs $0x0,%r10
  0x00007f8f8f736902: mov    %r10,0x328(%r15)
  0x00007f8f8f736909: vzeroupper 
  0x00007f8f8f73690c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f736914: je     0x00007f8f8f73691f
  0x00007f8f8f73691a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73691f: mov    -0x40(%rbp),%r13
  0x00007f8f8f736923: mov    -0x38(%rbp),%r14
  0x00007f8f8f736927: retq   
  0x00007f8f8f736928: movzwl 0x1(%r13),%edx
  0x00007f8f8f73692d: mov    -0x30(%rbp),%rcx
  0x00007f8f8f736931: shl    $0x2,%edx
  0x00007f8f8f736934: mov    0x38(%rcx,%rdx,8),%rbx
  0x00007f8f8f736939: mov    0x40(%rcx,%rdx,8),%eax
  0x00007f8f8f73693d: mov    0x30(%rcx,%rdx,8),%rcx
  0x00007f8f8f736942: mov    0x70(%rcx),%rcx
  0x00007f8f8f736946: mov    (%rcx),%rcx
  0x00007f8f8f736949: shr    $0x1c,%eax
  0x00007f8f8f73694c: and    $0xf,%eax
  0x00007f8f8f73694f: jne    0x00007f8f8f73695f
  0x00007f8f8f736955: movsbl (%rcx,%rbx,1),%eax
  0x00007f8f8f736959: push   %rax
  0x00007f8f8f73695a: jmpq   0x00007f8f8f736a13
  0x00007f8f8f73695f: cmp    $0x1,%eax
  0x00007f8f8f736962: jne    0x00007f8f8f736972
  0x00007f8f8f736968: movzbl (%rcx,%rbx,1),%eax
  0x00007f8f8f73696c: push   %rax
  0x00007f8f8f73696d: jmpq   0x00007f8f8f736a13
  0x00007f8f8f736972: cmp    $0x8,%eax
  0x00007f8f8f736975: jne    0x00007f8f8f736988
  0x00007f8f8f73697b: mov    (%rcx,%rbx,1),%eax
  0x00007f8f8f73697e: shl    $0x3,%rax
  0x00007f8f8f736982: push   %rax
  0x00007f8f8f736983: jmpq   0x00007f8f8f736a13
  0x00007f8f8f736988: cmp    $0x4,%eax
  0x00007f8f8f73698b: jne    0x00007f8f8f73699a
  0x00007f8f8f736991: mov    (%rcx,%rbx,1),%eax
  0x00007f8f8f736994: push   %rax
  0x00007f8f8f736995: jmpq   0x00007f8f8f736a13
  0x00007f8f8f73699a: cmp    $0x2,%eax
  0x00007f8f8f73699d: jne    0x00007f8f8f7369ad
  0x00007f8f8f7369a3: movzwl (%rcx,%rbx,1),%eax
  0x00007f8f8f7369a7: push   %rax
  0x00007f8f8f7369a8: jmpq   0x00007f8f8f736a13
  0x00007f8f8f7369ad: cmp    $0x3,%eax
  0x00007f8f8f7369b0: jne    0x00007f8f8f7369c0
  0x00007f8f8f7369b6: movswl (%rcx,%rbx,1),%eax
  0x00007f8f8f7369ba: push   %rax
  0x00007f8f8f7369bb: jmpq   0x00007f8f8f736a13
  0x00007f8f8f7369c0: cmp    $0x5,%eax
  0x00007f8f8f7369c3: jne    0x00007f8f8f7369e9
  0x00007f8f8f7369c9: mov    (%rcx,%rbx,1),%rax
  0x00007f8f8f7369cd: sub    $0x10,%rsp
  0x00007f8f8f7369d1: mov    %rax,(%rsp)
  0x00007f8f8f7369d5: movabs $0x0,%r10
  0x00007f8f8f7369df: mov    %r10,0x8(%rsp)
  0x00007f8f8f7369e4: jmpq   0x00007f8f8f736a13
  0x00007f8f8f7369e9: cmp    $0x6,%eax
  0x00007f8f8f7369ec: jne    0x00007f8f8f736a05
  0x00007f8f8f7369f2: vmovss (%rcx,%rbx,1),%xmm0
  0x00007f8f8f7369f7: sub    $0x8,%rsp
  0x00007f8f8f7369fb: vmovss %xmm0,(%rsp)
  0x00007f8f8f736a00: jmpq   0x00007f8f8f736a13
  0x00007f8f8f736a05: vmovsd (%rcx,%rbx,1),%xmm0
  0x00007f8f8f736a0a: sub    $0x10,%rsp
  0x00007f8f8f736a0e: vmovsd %xmm0,(%rsp)
  0x00007f8f8f736a13: movzbl 0x3(%r13),%ebx
  0x00007f8f8f736a18: add    $0x3,%r13
  0x00007f8f8f736a1c: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f736a26: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f736a2a: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f736a30: add    %al,(%rax)
  0x00007f8f8f736a32: add    %al,(%rax)
  0x00007f8f8f736a34: add    %al,(%rax)
  0x00007f8f8f736a36: add    %al,(%rax)
  0x00007f8f8f736a38: add    %al,(%rax)
  0x00007f8f8f736a3a: add    %al,(%rax)
  0x00007f8f8f736a3c: add    %al,(%rax)
  0x00007f8f8f736a3e: add    %al,(%rax)

----------------------------------------------------------------------
putstatic  179 putstatic  [0x00007f8f8f736a60, 0x00007f8f8f736dc0]  864 bytes

  0x00007f8f8f736a60: push   %rax
  0x00007f8f8f736a61: jmpq   0x00007f8f8f736a9f
  0x00007f8f8f736a66: sub    $0x8,%rsp
  0x00007f8f8f736a6a: vmovss %xmm0,(%rsp)
  0x00007f8f8f736a6f: jmpq   0x00007f8f8f736a9f
  0x00007f8f8f736a74: sub    $0x10,%rsp
  0x00007f8f8f736a78: vmovsd %xmm0,(%rsp)
  0x00007f8f8f736a7d: jmpq   0x00007f8f8f736a9f
  0x00007f8f8f736a82: sub    $0x10,%rsp
  0x00007f8f8f736a86: mov    %rax,(%rsp)
  0x00007f8f8f736a8a: movabs $0x0,%r10
  0x00007f8f8f736a94: mov    %r10,0x8(%rsp)
  0x00007f8f8f736a99: jmpq   0x00007f8f8f736a9f
  0x00007f8f8f736a9e: push   %rax
  0x00007f8f8f736a9f: movzwl 0x1(%r13),%edx
  0x00007f8f8f736aa4: mov    -0x30(%rbp),%rcx
  0x00007f8f8f736aa8: shl    $0x2,%edx
  0x00007f8f8f736aab: mov    0x28(%rcx,%rdx,8),%ebx
  0x00007f8f8f736aaf: shr    $0x18,%ebx
  0x00007f8f8f736ab2: and    $0xff,%ebx
  0x00007f8f8f736ab8: cmp    $0xb3,%ebx
  0x00007f8f8f736abe: je     0x00007f8f8f736b74
  0x00007f8f8f736ac4: mov    $0xb3,%ebx
  0x00007f8f8f736ac9: callq  0x00007f8f8f736ad3
  0x00007f8f8f736ace: jmpq   0x00007f8f8f736b68
  0x00007f8f8f736ad3: mov    %rbx,%rsi
  0x00007f8f8f736ad6: lea    0x8(%rsp),%rax
  0x00007f8f8f736adb: mov    %r13,-0x40(%rbp)
  0x00007f8f8f736adf: mov    %r15,%rdi
  0x00007f8f8f736ae2: vzeroupper 
  0x00007f8f8f736ae5: mov    %rbp,0x330(%r15)
  0x00007f8f8f736aec: mov    %rax,0x320(%r15)
  0x00007f8f8f736af3: test   $0xf,%esp
  0x00007f8f8f736af9: je     0x00007f8f8f736b11
  0x00007f8f8f736aff: sub    $0x8,%rsp
  0x00007f8f8f736b03: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f736b08: add    $0x8,%rsp
  0x00007f8f8f736b0c: jmpq   0x00007f8f8f736b16
  0x00007f8f8f736b11: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f736b16: movabs $0x0,%r10
  0x00007f8f8f736b20: mov    %r10,0x320(%r15)
  0x00007f8f8f736b27: movabs $0x0,%r10
  0x00007f8f8f736b31: mov    %r10,0x330(%r15)
  0x00007f8f8f736b38: movabs $0x0,%r10
  0x00007f8f8f736b42: mov    %r10,0x328(%r15)
  0x00007f8f8f736b49: vzeroupper 
  0x00007f8f8f736b4c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f736b54: je     0x00007f8f8f736b5f
  0x00007f8f8f736b5a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f736b5f: mov    -0x40(%rbp),%r13
  0x00007f8f8f736b63: mov    -0x38(%rbp),%r14
  0x00007f8f8f736b67: retq   
  0x00007f8f8f736b68: movzwl 0x1(%r13),%edx
  0x00007f8f8f736b6d: mov    -0x30(%rbp),%rcx
  0x00007f8f8f736b71: shl    $0x2,%edx
  0x00007f8f8f736b74: mov    0x38(%rcx,%rdx,8),%rbx
  0x00007f8f8f736b79: mov    0x40(%rcx,%rdx,8),%eax
  0x00007f8f8f736b7d: mov    0x30(%rcx,%rdx,8),%rcx
  0x00007f8f8f736b82: mov    0x70(%rcx),%rcx
  0x00007f8f8f736b86: mov    (%rcx),%rcx
  0x00007f8f8f736b89: mov    %eax,%edx
  0x00007f8f8f736b8b: shr    $0x15,%edx
  0x00007f8f8f736b8e: and    $0x1,%edx
  0x00007f8f8f736b91: shr    $0x1c,%eax
  0x00007f8f8f736b94: and    $0xf,%eax
  0x00007f8f8f736b97: jne    0x00007f8f8f736bac
  0x00007f8f8f736b9d: mov    (%rsp),%eax
  0x00007f8f8f736ba0: add    $0x8,%rsp
  0x00007f8f8f736ba4: mov    %al,(%rcx,%rbx,1)
  0x00007f8f8f736ba7: jmpq   0x00007f8f8f736d7f
  0x00007f8f8f736bac: cmp    $0x1,%eax
  0x00007f8f8f736baf: jne    0x00007f8f8f736bc7
  0x00007f8f8f736bb5: mov    (%rsp),%eax
  0x00007f8f8f736bb8: add    $0x8,%rsp
  0x00007f8f8f736bbc: and    $0x1,%eax
  0x00007f8f8f736bbf: mov    %al,(%rcx,%rbx,1)
  0x00007f8f8f736bc2: jmpq   0x00007f8f8f736d7f
  0x00007f8f8f736bc7: cmp    $0x8,%eax
  0x00007f8f8f736bca: jne    0x00007f8f8f736cf1
  0x00007f8f8f736bd0: pop    %rax
  0x00007f8f8f736bd1: lea    (%rcx,%rbx,1),%rdx
  0x00007f8f8f736bd5: cmpb   $0x0,0x30(%r15)
  0x00007f8f8f736bda: je     0x00007f8f8f736c41
  0x00007f8f8f736be0: mov    (%rdx),%ebx
  0x00007f8f8f736be2: shl    $0x3,%rbx
  0x00007f8f8f736be6: cmp    $0x0,%rbx
  0x00007f8f8f736bea: je     0x00007f8f8f736c41
  0x00007f8f8f736bf0: mov    0x38(%r15),%r8
  0x00007f8f8f736bf4: cmp    $0x0,%r8
  0x00007f8f8f736bf8: je     0x00007f8f8f736c12
  0x00007f8f8f736bfe: sub    $0x8,%r8
  0x00007f8f8f736c02: mov    %r8,0x38(%r15)
  0x00007f8f8f736c06: add    0x48(%r15),%r8
  0x00007f8f8f736c0a: mov    %rbx,(%r8)
  0x00007f8f8f736c0d: jmpq   0x00007f8f8f736c41
  0x00007f8f8f736c12: push   %rax
  0x00007f8f8f736c13: push   %rdx
  0x00007f8f8f736c14: push   %rbx
  0x00007f8f8f736c15: mov    %r15,%rsi
  0x00007f8f8f736c18: mov    %rbx,%rdi
  0x00007f8f8f736c1b: test   $0xf,%esp
  0x00007f8f8f736c21: je     0x00007f8f8f736c39
  0x00007f8f8f736c27: sub    $0x8,%rsp
  0x00007f8f8f736c2b: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f736c30: add    $0x8,%rsp
  0x00007f8f8f736c34: jmpq   0x00007f8f8f736c3e
  0x00007f8f8f736c39: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f736c3e: pop    %rbx
  0x00007f8f8f736c3f: pop    %rdx
  0x00007f8f8f736c40: pop    %rax
  0x00007f8f8f736c41: mov    %rax,%rbx
  0x00007f8f8f736c44: shr    $0x3,%rax
  0x00007f8f8f736c48: mov    %eax,(%rdx)
  0x00007f8f8f736c4a: mov    %rdx,%r8
  0x00007f8f8f736c4d: xor    %rbx,%r8
  0x00007f8f8f736c50: shr    $0x15,%r8
  0x00007f8f8f736c54: je     0x00007f8f8f736cec
  0x00007f8f8f736c5a: cmp    $0x0,%rbx
  0x00007f8f8f736c5e: je     0x00007f8f8f736cec
  0x00007f8f8f736c64: mov    %rdx,%r8
  0x00007f8f8f736c67: shr    $0x9,%r8
  0x00007f8f8f736c6b: movabs $0x7f8f89e7a000,%rbx
  0x00007f8f8f736c75: add    %rbx,%r8
  0x00007f8f8f736c78: cmpb   $0x20,(%r8)
  0x00007f8f8f736c7c: je     0x00007f8f8f736cec
  0x00007f8f8f736c82: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f736c88: cmpb   $0x0,(%r8)
  0x00007f8f8f736c8c: je     0x00007f8f8f736cec
  0x00007f8f8f736c92: movb   $0x0,(%r8)
  0x00007f8f8f736c96: cmpl   $0x0,0x70(%r15)
  0x00007f8f8f736c9e: je     0x00007f8f8f736cbf
  0x00007f8f8f736ca4: subl   $0x8,0x70(%r15)
  0x00007f8f8f736ca9: mov    0x80(%r15),%rbx
  0x00007f8f8f736cb0: movslq 0x70(%r15),%r10
  0x00007f8f8f736cb4: add    %r10,%rbx
  0x00007f8f8f736cb7: mov    %r8,(%rbx)
  0x00007f8f8f736cba: jmpq   0x00007f8f8f736cec
  0x00007f8f8f736cbf: push   %rdx
  0x00007f8f8f736cc0: push   %rbx
  0x00007f8f8f736cc1: mov    %r15,%rsi
  0x00007f8f8f736cc4: mov    %r8,%rdi
  0x00007f8f8f736cc7: test   $0xf,%esp
  0x00007f8f8f736ccd: je     0x00007f8f8f736ce5
  0x00007f8f8f736cd3: sub    $0x8,%rsp
  0x00007f8f8f736cd7: callq  0x00007f8facf1ecb0 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x00007f8f8f736cdc: add    $0x8,%rsp
  0x00007f8f8f736ce0: jmpq   0x00007f8f8f736cea
  0x00007f8f8f736ce5: callq  0x00007f8facf1ecb0 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x00007f8f8f736cea: pop    %rbx
  0x00007f8f8f736ceb: pop    %rdx
  0x00007f8f8f736cec: jmpq   0x00007f8f8f736d7f
  0x00007f8f8f736cf1: cmp    $0x4,%eax
  0x00007f8f8f736cf4: jne    0x00007f8f8f736d09
  0x00007f8f8f736cfa: mov    (%rsp),%eax
  0x00007f8f8f736cfd: add    $0x8,%rsp
  0x00007f8f8f736d01: mov    %eax,(%rcx,%rbx,1)
  0x00007f8f8f736d04: jmpq   0x00007f8f8f736d7f
  0x00007f8f8f736d09: cmp    $0x2,%eax
  0x00007f8f8f736d0c: jne    0x00007f8f8f736d22
  0x00007f8f8f736d12: mov    (%rsp),%eax
  0x00007f8f8f736d15: add    $0x8,%rsp
  0x00007f8f8f736d19: mov    %ax,(%rcx,%rbx,1)
  0x00007f8f8f736d1d: jmpq   0x00007f8f8f736d7f
  0x00007f8f8f736d22: cmp    $0x3,%eax
  0x00007f8f8f736d25: jne    0x00007f8f8f736d3b
  0x00007f8f8f736d2b: mov    (%rsp),%eax
  0x00007f8f8f736d2e: add    $0x8,%rsp
  0x00007f8f8f736d32: mov    %ax,(%rcx,%rbx,1)
  0x00007f8f8f736d36: jmpq   0x00007f8f8f736d7f
  0x00007f8f8f736d3b: cmp    $0x5,%eax
  0x00007f8f8f736d3e: jne    0x00007f8f8f736d55
  0x00007f8f8f736d44: mov    (%rsp),%rax
  0x00007f8f8f736d48: add    $0x10,%rsp
  0x00007f8f8f736d4c: mov    %rax,(%rcx,%rbx,1)
  0x00007f8f8f736d50: jmpq   0x00007f8f8f736d7f
  0x00007f8f8f736d55: cmp    $0x6,%eax
  0x00007f8f8f736d58: jne    0x00007f8f8f736d71
  0x00007f8f8f736d5e: vmovss (%rsp),%xmm0
  0x00007f8f8f736d63: add    $0x8,%rsp
  0x00007f8f8f736d67: vmovss %xmm0,(%rcx,%rbx,1)
  0x00007f8f8f736d6c: jmpq   0x00007f8f8f736d7f
  0x00007f8f8f736d71: vmovsd (%rsp),%xmm0
  0x00007f8f8f736d76: add    $0x10,%rsp
  0x00007f8f8f736d7a: vmovsd %xmm0,(%rcx,%rbx,1)
  0x00007f8f8f736d7f: test   %edx,%edx
  0x00007f8f8f736d81: je     0x00007f8f8f736d8d
  0x00007f8f8f736d87: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f736d8d: movzbl 0x3(%r13),%ebx
  0x00007f8f8f736d92: add    $0x3,%r13
  0x00007f8f8f736d96: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f736da0: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f736da4: nopl   0x0(%rax)
  0x00007f8f8f736da8: add    %al,(%rax)
  0x00007f8f8f736daa: add    %al,(%rax)
  0x00007f8f8f736dac: add    %al,(%rax)
  0x00007f8f8f736dae: add    %al,(%rax)
  0x00007f8f8f736db0: add    %al,(%rax)
  0x00007f8f8f736db2: add    %al,(%rax)
  0x00007f8f8f736db4: add    %al,(%rax)
  0x00007f8f8f736db6: add    %al,(%rax)
  0x00007f8f8f736db8: add    %al,(%rax)
  0x00007f8f8f736dba: add    %al,(%rax)
  0x00007f8f8f736dbc: add    %al,(%rax)
  0x00007f8f8f736dbe: add    %al,(%rax)

----------------------------------------------------------------------
getfield  180 getfield  [0x00007f8f8f736de0, 0x00007f8f8f737040]  608 bytes

  0x00007f8f8f736de0: push   %rax
  0x00007f8f8f736de1: jmpq   0x00007f8f8f736e1f
  0x00007f8f8f736de6: sub    $0x8,%rsp
  0x00007f8f8f736dea: vmovss %xmm0,(%rsp)
  0x00007f8f8f736def: jmpq   0x00007f8f8f736e1f
  0x00007f8f8f736df4: sub    $0x10,%rsp
  0x00007f8f8f736df8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f736dfd: jmpq   0x00007f8f8f736e1f
  0x00007f8f8f736e02: sub    $0x10,%rsp
  0x00007f8f8f736e06: mov    %rax,(%rsp)
  0x00007f8f8f736e0a: movabs $0x0,%r10
  0x00007f8f8f736e14: mov    %r10,0x8(%rsp)
  0x00007f8f8f736e19: jmpq   0x00007f8f8f736e1f
  0x00007f8f8f736e1e: push   %rax
  0x00007f8f8f736e1f: movzwl 0x1(%r13),%edx
  0x00007f8f8f736e24: mov    -0x30(%rbp),%rcx
  0x00007f8f8f736e28: shl    $0x2,%edx
  0x00007f8f8f736e2b: mov    0x28(%rcx,%rdx,8),%ebx
  0x00007f8f8f736e2f: shr    $0x10,%ebx
  0x00007f8f8f736e32: and    $0xff,%ebx
  0x00007f8f8f736e38: cmp    $0xb4,%ebx
  0x00007f8f8f736e3e: je     0x00007f8f8f736ef4
  0x00007f8f8f736e44: mov    $0xb4,%ebx
  0x00007f8f8f736e49: callq  0x00007f8f8f736e53
  0x00007f8f8f736e4e: jmpq   0x00007f8f8f736ee8
  0x00007f8f8f736e53: mov    %rbx,%rsi
  0x00007f8f8f736e56: lea    0x8(%rsp),%rax
  0x00007f8f8f736e5b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f736e5f: mov    %r15,%rdi
  0x00007f8f8f736e62: vzeroupper 
  0x00007f8f8f736e65: mov    %rbp,0x330(%r15)
  0x00007f8f8f736e6c: mov    %rax,0x320(%r15)
  0x00007f8f8f736e73: test   $0xf,%esp
  0x00007f8f8f736e79: je     0x00007f8f8f736e91
  0x00007f8f8f736e7f: sub    $0x8,%rsp
  0x00007f8f8f736e83: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f736e88: add    $0x8,%rsp
  0x00007f8f8f736e8c: jmpq   0x00007f8f8f736e96
  0x00007f8f8f736e91: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f736e96: movabs $0x0,%r10
  0x00007f8f8f736ea0: mov    %r10,0x320(%r15)
  0x00007f8f8f736ea7: movabs $0x0,%r10
  0x00007f8f8f736eb1: mov    %r10,0x330(%r15)
  0x00007f8f8f736eb8: movabs $0x0,%r10
  0x00007f8f8f736ec2: mov    %r10,0x328(%r15)
  0x00007f8f8f736ec9: vzeroupper 
  0x00007f8f8f736ecc: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f736ed4: je     0x00007f8f8f736edf
  0x00007f8f8f736eda: jmpq   0x00007f8f8f71a780
  0x00007f8f8f736edf: mov    -0x40(%rbp),%r13
  0x00007f8f8f736ee3: mov    -0x38(%rbp),%r14
  0x00007f8f8f736ee7: retq   
  0x00007f8f8f736ee8: movzwl 0x1(%r13),%edx
  0x00007f8f8f736eed: mov    -0x30(%rbp),%rcx
  0x00007f8f8f736ef1: shl    $0x2,%edx
  0x00007f8f8f736ef4: mov    0x38(%rcx,%rdx,8),%rbx
  0x00007f8f8f736ef9: mov    0x40(%rcx,%rdx,8),%eax
  0x00007f8f8f736efd: pop    %rcx
  0x00007f8f8f736efe: cmp    (%rcx),%rax
  0x00007f8f8f736f01: shr    $0x1c,%eax
  0x00007f8f8f736f04: and    $0xf,%eax
  0x00007f8f8f736f07: jne    0x00007f8f8f736f20
  0x00007f8f8f736f0d: movsbl (%rcx,%rbx,1),%eax
  0x00007f8f8f736f11: push   %rax
  0x00007f8f8f736f12: mov    $0xcc,%ecx
  0x00007f8f8f736f17: mov    %cl,0x0(%r13)
  0x00007f8f8f736f1b: jmpq   0x00007f8f8f73701c
  0x00007f8f8f736f20: cmp    $0x1,%eax
  0x00007f8f8f736f23: jne    0x00007f8f8f736f3c
  0x00007f8f8f736f29: movzbl (%rcx,%rbx,1),%eax
  0x00007f8f8f736f2d: push   %rax
  0x00007f8f8f736f2e: mov    $0xcc,%ecx
  0x00007f8f8f736f33: mov    %cl,0x0(%r13)
  0x00007f8f8f736f37: jmpq   0x00007f8f8f73701c
  0x00007f8f8f736f3c: cmp    $0x8,%eax
  0x00007f8f8f736f3f: jne    0x00007f8f8f736f5b
  0x00007f8f8f736f45: mov    (%rcx,%rbx,1),%eax
  0x00007f8f8f736f48: shl    $0x3,%rax
  0x00007f8f8f736f4c: push   %rax
  0x00007f8f8f736f4d: mov    $0xcb,%ecx
  0x00007f8f8f736f52: mov    %cl,0x0(%r13)
  0x00007f8f8f736f56: jmpq   0x00007f8f8f73701c
  0x00007f8f8f736f5b: cmp    $0x4,%eax
  0x00007f8f8f736f5e: jne    0x00007f8f8f736f76
  0x00007f8f8f736f64: mov    (%rcx,%rbx,1),%eax
  0x00007f8f8f736f67: push   %rax
  0x00007f8f8f736f68: mov    $0xd0,%ecx
  0x00007f8f8f736f6d: mov    %cl,0x0(%r13)
  0x00007f8f8f736f71: jmpq   0x00007f8f8f73701c
  0x00007f8f8f736f76: cmp    $0x2,%eax
  0x00007f8f8f736f79: jne    0x00007f8f8f736f92
  0x00007f8f8f736f7f: movzwl (%rcx,%rbx,1),%eax
  0x00007f8f8f736f83: push   %rax
  0x00007f8f8f736f84: mov    $0xcd,%ecx
  0x00007f8f8f736f89: mov    %cl,0x0(%r13)
  0x00007f8f8f736f8d: jmpq   0x00007f8f8f73701c
  0x00007f8f8f736f92: cmp    $0x3,%eax
  0x00007f8f8f736f95: jne    0x00007f8f8f736fae
  0x00007f8f8f736f9b: movswl (%rcx,%rbx,1),%eax
  0x00007f8f8f736f9f: push   %rax
  0x00007f8f8f736fa0: mov    $0xd2,%ecx
  0x00007f8f8f736fa5: mov    %cl,0x0(%r13)
  0x00007f8f8f736fa9: jmpq   0x00007f8f8f73701c
  0x00007f8f8f736fae: cmp    $0x5,%eax
  0x00007f8f8f736fb1: jne    0x00007f8f8f736fe0
  0x00007f8f8f736fb7: mov    (%rcx,%rbx,1),%rax
  0x00007f8f8f736fbb: sub    $0x10,%rsp
  0x00007f8f8f736fbf: mov    %rax,(%rsp)
  0x00007f8f8f736fc3: movabs $0x0,%r10
  0x00007f8f8f736fcd: mov    %r10,0x8(%rsp)
  0x00007f8f8f736fd2: mov    $0xd1,%ecx
  0x00007f8f8f736fd7: mov    %cl,0x0(%r13)
  0x00007f8f8f736fdb: jmpq   0x00007f8f8f73701c
  0x00007f8f8f736fe0: cmp    $0x6,%eax
  0x00007f8f8f736fe3: jne    0x00007f8f8f737005
  0x00007f8f8f736fe9: vmovss (%rcx,%rbx,1),%xmm0
  0x00007f8f8f736fee: sub    $0x8,%rsp
  0x00007f8f8f736ff2: vmovss %xmm0,(%rsp)
  0x00007f8f8f736ff7: mov    $0xcf,%ecx
  0x00007f8f8f736ffc: mov    %cl,0x0(%r13)
  0x00007f8f8f737000: jmpq   0x00007f8f8f73701c
  0x00007f8f8f737005: vmovsd (%rcx,%rbx,1),%xmm0
  0x00007f8f8f73700a: sub    $0x10,%rsp
  0x00007f8f8f73700e: vmovsd %xmm0,(%rsp)
  0x00007f8f8f737013: mov    $0xce,%ecx
  0x00007f8f8f737018: mov    %cl,0x0(%r13)
  0x00007f8f8f73701c: movzbl 0x3(%r13),%ebx
  0x00007f8f8f737021: add    $0x3,%r13
  0x00007f8f8f737025: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73702f: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f737033: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f737038: add    %al,(%rax)
  0x00007f8f8f73703a: add    %al,(%rax)
  0x00007f8f8f73703c: add    %al,(%rax)
  0x00007f8f8f73703e: add    %al,(%rax)

----------------------------------------------------------------------
putfield  181 putfield  [0x00007f8f8f737060, 0x00007f8f8f737540]  1248 bytes

  0x00007f8f8f737060: push   %rax
  0x00007f8f8f737061: jmpq   0x00007f8f8f73709f
  0x00007f8f8f737066: sub    $0x8,%rsp
  0x00007f8f8f73706a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73706f: jmpq   0x00007f8f8f73709f
  0x00007f8f8f737074: sub    $0x10,%rsp
  0x00007f8f8f737078: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73707d: jmpq   0x00007f8f8f73709f
  0x00007f8f8f737082: sub    $0x10,%rsp
  0x00007f8f8f737086: mov    %rax,(%rsp)
  0x00007f8f8f73708a: movabs $0x0,%r10
  0x00007f8f8f737094: mov    %r10,0x8(%rsp)
  0x00007f8f8f737099: jmpq   0x00007f8f8f73709f
  0x00007f8f8f73709e: push   %rax
  0x00007f8f8f73709f: movzwl 0x1(%r13),%edx
  0x00007f8f8f7370a4: mov    -0x30(%rbp),%rcx
  0x00007f8f8f7370a8: shl    $0x2,%edx
  0x00007f8f8f7370ab: mov    0x28(%rcx,%rdx,8),%ebx
  0x00007f8f8f7370af: shr    $0x18,%ebx
  0x00007f8f8f7370b2: and    $0xff,%ebx
  0x00007f8f8f7370b8: cmp    $0xb5,%ebx
  0x00007f8f8f7370be: je     0x00007f8f8f737174
  0x00007f8f8f7370c4: mov    $0xb5,%ebx
  0x00007f8f8f7370c9: callq  0x00007f8f8f7370d3
  0x00007f8f8f7370ce: jmpq   0x00007f8f8f737168
  0x00007f8f8f7370d3: mov    %rbx,%rsi
  0x00007f8f8f7370d6: lea    0x8(%rsp),%rax
  0x00007f8f8f7370db: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7370df: mov    %r15,%rdi
  0x00007f8f8f7370e2: vzeroupper 
  0x00007f8f8f7370e5: mov    %rbp,0x330(%r15)
  0x00007f8f8f7370ec: mov    %rax,0x320(%r15)
  0x00007f8f8f7370f3: test   $0xf,%esp
  0x00007f8f8f7370f9: je     0x00007f8f8f737111
  0x00007f8f8f7370ff: sub    $0x8,%rsp
  0x00007f8f8f737103: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f737108: add    $0x8,%rsp
  0x00007f8f8f73710c: jmpq   0x00007f8f8f737116
  0x00007f8f8f737111: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f737116: movabs $0x0,%r10
  0x00007f8f8f737120: mov    %r10,0x320(%r15)
  0x00007f8f8f737127: movabs $0x0,%r10
  0x00007f8f8f737131: mov    %r10,0x330(%r15)
  0x00007f8f8f737138: movabs $0x0,%r10
  0x00007f8f8f737142: mov    %r10,0x328(%r15)
  0x00007f8f8f737149: vzeroupper 
  0x00007f8f8f73714c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f737154: je     0x00007f8f8f73715f
  0x00007f8f8f73715a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73715f: mov    -0x40(%rbp),%r13
  0x00007f8f8f737163: mov    -0x38(%rbp),%r14
  0x00007f8f8f737167: retq   
  0x00007f8f8f737168: movzwl 0x1(%r13),%edx
  0x00007f8f8f73716d: mov    -0x30(%rbp),%rcx
  0x00007f8f8f737171: shl    $0x2,%edx
  0x00007f8f8f737174: mov    0x38(%rcx,%rdx,8),%rbx
  0x00007f8f8f737179: mov    0x40(%rcx,%rdx,8),%eax
  0x00007f8f8f73717d: mov    %eax,%edx
  0x00007f8f8f73717f: shr    $0x15,%edx
  0x00007f8f8f737182: and    $0x1,%edx
  0x00007f8f8f737185: shr    $0x1c,%eax
  0x00007f8f8f737188: and    $0xf,%eax
  0x00007f8f8f73718b: jne    0x00007f8f8f7371cf
  0x00007f8f8f737191: mov    (%rsp),%eax
  0x00007f8f8f737194: add    $0x8,%rsp
  0x00007f8f8f737198: pop    %rcx
  0x00007f8f8f737199: cmp    (%rcx),%rax
  0x00007f8f8f73719c: mov    %al,(%rcx,%rbx,1)
  0x00007f8f8f73719f: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7371a4: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7371a8: shl    $0x2,%ecx
  0x00007f8f8f7371ab: mov    0x28(%rbx,%rcx,8),%ebx
  0x00007f8f8f7371af: shr    $0x18,%ebx
  0x00007f8f8f7371b2: and    $0xff,%ebx
  0x00007f8f8f7371b8: mov    $0xd4,%ecx
  0x00007f8f8f7371bd: cmp    $0x0,%ebx
  0x00007f8f8f7371c0: je     0x00007f8f8f7371ca
  0x00007f8f8f7371c6: mov    %cl,0x0(%r13)
  0x00007f8f8f7371ca: jmpq   0x00007f8f8f73751a
  0x00007f8f8f7371cf: cmp    $0x1,%eax
  0x00007f8f8f7371d2: jne    0x00007f8f8f737219
  0x00007f8f8f7371d8: mov    (%rsp),%eax
  0x00007f8f8f7371db: add    $0x8,%rsp
  0x00007f8f8f7371df: pop    %rcx
  0x00007f8f8f7371e0: cmp    (%rcx),%rax
  0x00007f8f8f7371e3: and    $0x1,%eax
  0x00007f8f8f7371e6: mov    %al,(%rcx,%rbx,1)
  0x00007f8f8f7371e9: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7371ee: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7371f2: shl    $0x2,%ecx
  0x00007f8f8f7371f5: mov    0x28(%rbx,%rcx,8),%ebx
  0x00007f8f8f7371f9: shr    $0x18,%ebx
  0x00007f8f8f7371fc: and    $0xff,%ebx
  0x00007f8f8f737202: mov    $0xd5,%ecx
  0x00007f8f8f737207: cmp    $0x0,%ebx
  0x00007f8f8f73720a: je     0x00007f8f8f737214
  0x00007f8f8f737210: mov    %cl,0x0(%r13)
  0x00007f8f8f737214: jmpq   0x00007f8f8f73751a
  0x00007f8f8f737219: cmp    $0x8,%eax
  0x00007f8f8f73721c: jne    0x00007f8f8f737372
  0x00007f8f8f737222: pop    %rax
  0x00007f8f8f737223: pop    %rcx
  0x00007f8f8f737224: cmp    (%rcx),%rax
  0x00007f8f8f737227: lea    (%rcx,%rbx,1),%rdx
  0x00007f8f8f73722b: cmpb   $0x0,0x30(%r15)
  0x00007f8f8f737230: je     0x00007f8f8f737297
  0x00007f8f8f737236: mov    (%rdx),%ebx
  0x00007f8f8f737238: shl    $0x3,%rbx
  0x00007f8f8f73723c: cmp    $0x0,%rbx
  0x00007f8f8f737240: je     0x00007f8f8f737297
  0x00007f8f8f737246: mov    0x38(%r15),%r8
  0x00007f8f8f73724a: cmp    $0x0,%r8
  0x00007f8f8f73724e: je     0x00007f8f8f737268
  0x00007f8f8f737254: sub    $0x8,%r8
  0x00007f8f8f737258: mov    %r8,0x38(%r15)
  0x00007f8f8f73725c: add    0x48(%r15),%r8
  0x00007f8f8f737260: mov    %rbx,(%r8)
  0x00007f8f8f737263: jmpq   0x00007f8f8f737297
  0x00007f8f8f737268: push   %rax
  0x00007f8f8f737269: push   %rdx
  0x00007f8f8f73726a: push   %rbx
  0x00007f8f8f73726b: mov    %r15,%rsi
  0x00007f8f8f73726e: mov    %rbx,%rdi
  0x00007f8f8f737271: test   $0xf,%esp
  0x00007f8f8f737277: je     0x00007f8f8f73728f
  0x00007f8f8f73727d: sub    $0x8,%rsp
  0x00007f8f8f737281: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f737286: add    $0x8,%rsp
  0x00007f8f8f73728a: jmpq   0x00007f8f8f737294
  0x00007f8f8f73728f: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f737294: pop    %rbx
  0x00007f8f8f737295: pop    %rdx
  0x00007f8f8f737296: pop    %rax
  0x00007f8f8f737297: mov    %rax,%rbx
  0x00007f8f8f73729a: shr    $0x3,%rax
  0x00007f8f8f73729e: mov    %eax,(%rdx)
  0x00007f8f8f7372a0: mov    %rdx,%r8
  0x00007f8f8f7372a3: xor    %rbx,%r8
  0x00007f8f8f7372a6: shr    $0x15,%r8
  0x00007f8f8f7372aa: je     0x00007f8f8f737342
  0x00007f8f8f7372b0: cmp    $0x0,%rbx
  0x00007f8f8f7372b4: je     0x00007f8f8f737342
  0x00007f8f8f7372ba: mov    %rdx,%r8
  0x00007f8f8f7372bd: shr    $0x9,%r8
  0x00007f8f8f7372c1: movabs $0x7f8f89e7a000,%rbx
  0x00007f8f8f7372cb: add    %rbx,%r8
  0x00007f8f8f7372ce: cmpb   $0x20,(%r8)
  0x00007f8f8f7372d2: je     0x00007f8f8f737342
  0x00007f8f8f7372d8: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f7372de: cmpb   $0x0,(%r8)
  0x00007f8f8f7372e2: je     0x00007f8f8f737342
  0x00007f8f8f7372e8: movb   $0x0,(%r8)
  0x00007f8f8f7372ec: cmpl   $0x0,0x70(%r15)
  0x00007f8f8f7372f4: je     0x00007f8f8f737315
  0x00007f8f8f7372fa: subl   $0x8,0x70(%r15)
  0x00007f8f8f7372ff: mov    0x80(%r15),%rbx
  0x00007f8f8f737306: movslq 0x70(%r15),%r10
  0x00007f8f8f73730a: add    %r10,%rbx
  0x00007f8f8f73730d: mov    %r8,(%rbx)
  0x00007f8f8f737310: jmpq   0x00007f8f8f737342
  0x00007f8f8f737315: push   %rdx
  0x00007f8f8f737316: push   %rbx
  0x00007f8f8f737317: mov    %r15,%rsi
  0x00007f8f8f73731a: mov    %r8,%rdi
  0x00007f8f8f73731d: test   $0xf,%esp
  0x00007f8f8f737323: je     0x00007f8f8f73733b
  0x00007f8f8f737329: sub    $0x8,%rsp
  0x00007f8f8f73732d: callq  0x00007f8facf1ecb0 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x00007f8f8f737332: add    $0x8,%rsp
  0x00007f8f8f737336: jmpq   0x00007f8f8f737340
  0x00007f8f8f73733b: callq  0x00007f8facf1ecb0 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x00007f8f8f737340: pop    %rbx
  0x00007f8f8f737341: pop    %rdx
  0x00007f8f8f737342: movzwl 0x1(%r13),%ecx
  0x00007f8f8f737347: mov    -0x30(%rbp),%rbx
  0x00007f8f8f73734b: shl    $0x2,%ecx
  0x00007f8f8f73734e: mov    0x28(%rbx,%rcx,8),%ebx
  0x00007f8f8f737352: shr    $0x18,%ebx
  0x00007f8f8f737355: and    $0xff,%ebx
  0x00007f8f8f73735b: mov    $0xd3,%ecx
  0x00007f8f8f737360: cmp    $0x0,%ebx
  0x00007f8f8f737363: je     0x00007f8f8f73736d
  0x00007f8f8f737369: mov    %cl,0x0(%r13)
  0x00007f8f8f73736d: jmpq   0x00007f8f8f73751a
  0x00007f8f8f737372: cmp    $0x4,%eax
  0x00007f8f8f737375: jne    0x00007f8f8f7373b9
  0x00007f8f8f73737b: mov    (%rsp),%eax
  0x00007f8f8f73737e: add    $0x8,%rsp
  0x00007f8f8f737382: pop    %rcx
  0x00007f8f8f737383: cmp    (%rcx),%rax
  0x00007f8f8f737386: mov    %eax,(%rcx,%rbx,1)
  0x00007f8f8f737389: movzwl 0x1(%r13),%ecx
  0x00007f8f8f73738e: mov    -0x30(%rbp),%rbx
  0x00007f8f8f737392: shl    $0x2,%ecx
  0x00007f8f8f737395: mov    0x28(%rbx,%rcx,8),%ebx
  0x00007f8f8f737399: shr    $0x18,%ebx
  0x00007f8f8f73739c: and    $0xff,%ebx
  0x00007f8f8f7373a2: mov    $0xd9,%ecx
  0x00007f8f8f7373a7: cmp    $0x0,%ebx
  0x00007f8f8f7373aa: je     0x00007f8f8f7373b4
  0x00007f8f8f7373b0: mov    %cl,0x0(%r13)
  0x00007f8f8f7373b4: jmpq   0x00007f8f8f73751a
  0x00007f8f8f7373b9: cmp    $0x2,%eax
  0x00007f8f8f7373bc: jne    0x00007f8f8f737401
  0x00007f8f8f7373c2: mov    (%rsp),%eax
  0x00007f8f8f7373c5: add    $0x8,%rsp
  0x00007f8f8f7373c9: pop    %rcx
  0x00007f8f8f7373ca: cmp    (%rcx),%rax
  0x00007f8f8f7373cd: mov    %ax,(%rcx,%rbx,1)
  0x00007f8f8f7373d1: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7373d6: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7373da: shl    $0x2,%ecx
  0x00007f8f8f7373dd: mov    0x28(%rbx,%rcx,8),%ebx
  0x00007f8f8f7373e1: shr    $0x18,%ebx
  0x00007f8f8f7373e4: and    $0xff,%ebx
  0x00007f8f8f7373ea: mov    $0xd6,%ecx
  0x00007f8f8f7373ef: cmp    $0x0,%ebx
  0x00007f8f8f7373f2: je     0x00007f8f8f7373fc
  0x00007f8f8f7373f8: mov    %cl,0x0(%r13)
  0x00007f8f8f7373fc: jmpq   0x00007f8f8f73751a
  0x00007f8f8f737401: cmp    $0x3,%eax
  0x00007f8f8f737404: jne    0x00007f8f8f737449
  0x00007f8f8f73740a: mov    (%rsp),%eax
  0x00007f8f8f73740d: add    $0x8,%rsp
  0x00007f8f8f737411: pop    %rcx
  0x00007f8f8f737412: cmp    (%rcx),%rax
  0x00007f8f8f737415: mov    %ax,(%rcx,%rbx,1)
  0x00007f8f8f737419: movzwl 0x1(%r13),%ecx
  0x00007f8f8f73741e: mov    -0x30(%rbp),%rbx
  0x00007f8f8f737422: shl    $0x2,%ecx
  0x00007f8f8f737425: mov    0x28(%rbx,%rcx,8),%ebx
  0x00007f8f8f737429: shr    $0x18,%ebx
  0x00007f8f8f73742c: and    $0xff,%ebx
  0x00007f8f8f737432: mov    $0xdb,%ecx
  0x00007f8f8f737437: cmp    $0x0,%ebx
  0x00007f8f8f73743a: je     0x00007f8f8f737444
  0x00007f8f8f737440: mov    %cl,0x0(%r13)
  0x00007f8f8f737444: jmpq   0x00007f8f8f73751a
  0x00007f8f8f737449: cmp    $0x5,%eax
  0x00007f8f8f73744c: jne    0x00007f8f8f737492
  0x00007f8f8f737452: mov    (%rsp),%rax
  0x00007f8f8f737456: add    $0x10,%rsp
  0x00007f8f8f73745a: pop    %rcx
  0x00007f8f8f73745b: cmp    (%rcx),%rax
  0x00007f8f8f73745e: mov    %rax,(%rcx,%rbx,1)
  0x00007f8f8f737462: movzwl 0x1(%r13),%ecx
  0x00007f8f8f737467: mov    -0x30(%rbp),%rbx
  0x00007f8f8f73746b: shl    $0x2,%ecx
  0x00007f8f8f73746e: mov    0x28(%rbx,%rcx,8),%ebx
  0x00007f8f8f737472: shr    $0x18,%ebx
  0x00007f8f8f737475: and    $0xff,%ebx
  0x00007f8f8f73747b: mov    $0xda,%ecx
  0x00007f8f8f737480: cmp    $0x0,%ebx
  0x00007f8f8f737483: je     0x00007f8f8f73748d
  0x00007f8f8f737489: mov    %cl,0x0(%r13)
  0x00007f8f8f73748d: jmpq   0x00007f8f8f73751a
  0x00007f8f8f737492: cmp    $0x6,%eax
  0x00007f8f8f737495: jne    0x00007f8f8f7374dd
  0x00007f8f8f73749b: vmovss (%rsp),%xmm0
  0x00007f8f8f7374a0: add    $0x8,%rsp
  0x00007f8f8f7374a4: pop    %rcx
  0x00007f8f8f7374a5: cmp    (%rcx),%rax
  0x00007f8f8f7374a8: vmovss %xmm0,(%rcx,%rbx,1)
  0x00007f8f8f7374ad: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7374b2: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7374b6: shl    $0x2,%ecx
  0x00007f8f8f7374b9: mov    0x28(%rbx,%rcx,8),%ebx
  0x00007f8f8f7374bd: shr    $0x18,%ebx
  0x00007f8f8f7374c0: and    $0xff,%ebx
  0x00007f8f8f7374c6: mov    $0xd8,%ecx
  0x00007f8f8f7374cb: cmp    $0x0,%ebx
  0x00007f8f8f7374ce: je     0x00007f8f8f7374d8
  0x00007f8f8f7374d4: mov    %cl,0x0(%r13)
  0x00007f8f8f7374d8: jmpq   0x00007f8f8f73751a
  0x00007f8f8f7374dd: vmovsd (%rsp),%xmm0
  0x00007f8f8f7374e2: add    $0x10,%rsp
  0x00007f8f8f7374e6: pop    %rcx
  0x00007f8f8f7374e7: cmp    (%rcx),%rax
  0x00007f8f8f7374ea: vmovsd %xmm0,(%rcx,%rbx,1)
  0x00007f8f8f7374ef: movzwl 0x1(%r13),%ecx
  0x00007f8f8f7374f4: mov    -0x30(%rbp),%rbx
  0x00007f8f8f7374f8: shl    $0x2,%ecx
  0x00007f8f8f7374fb: mov    0x28(%rbx,%rcx,8),%ebx
  0x00007f8f8f7374ff: shr    $0x18,%ebx
  0x00007f8f8f737502: and    $0xff,%ebx
  0x00007f8f8f737508: mov    $0xd7,%ecx
  0x00007f8f8f73750d: cmp    $0x0,%ebx
  0x00007f8f8f737510: je     0x00007f8f8f73751a
  0x00007f8f8f737516: mov    %cl,0x0(%r13)
  0x00007f8f8f73751a: test   %edx,%edx
  0x00007f8f8f73751c: je     0x00007f8f8f737528
  0x00007f8f8f737522: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f737528: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73752d: add    $0x3,%r13
  0x00007f8f8f737531: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73753b: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73753f: nop

----------------------------------------------------------------------
invokevirtual  182 invokevirtual  [0x00007f8f8f737560, 0x00007f8f8f737a60]  1280 bytes

  0x00007f8f8f737560: push   %rax
  0x00007f8f8f737561: jmpq   0x00007f8f8f73759f
  0x00007f8f8f737566: sub    $0x8,%rsp
  0x00007f8f8f73756a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73756f: jmpq   0x00007f8f8f73759f
  0x00007f8f8f737574: sub    $0x10,%rsp
  0x00007f8f8f737578: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73757d: jmpq   0x00007f8f8f73759f
  0x00007f8f8f737582: sub    $0x10,%rsp
  0x00007f8f8f737586: mov    %rax,(%rsp)
  0x00007f8f8f73758a: movabs $0x0,%r10
  0x00007f8f8f737594: mov    %r10,0x8(%rsp)
  0x00007f8f8f737599: jmpq   0x00007f8f8f73759f
  0x00007f8f8f73759e: push   %rax
  0x00007f8f8f73759f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7375a3: movzwl 0x1(%r13),%edx
  0x00007f8f8f7375a8: mov    -0x30(%rbp),%rcx
  0x00007f8f8f7375ac: shl    $0x2,%edx
  0x00007f8f8f7375af: mov    0x28(%rcx,%rdx,8),%ebx
  0x00007f8f8f7375b3: shr    $0x18,%ebx
  0x00007f8f8f7375b6: and    $0xff,%ebx
  0x00007f8f8f7375bc: cmp    $0xb6,%ebx
  0x00007f8f8f7375c2: je     0x00007f8f8f737678
  0x00007f8f8f7375c8: mov    $0xb6,%ebx
  0x00007f8f8f7375cd: callq  0x00007f8f8f7375d7
  0x00007f8f8f7375d2: jmpq   0x00007f8f8f73766c
  0x00007f8f8f7375d7: mov    %rbx,%rsi
  0x00007f8f8f7375da: lea    0x8(%rsp),%rax
  0x00007f8f8f7375df: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7375e3: mov    %r15,%rdi
  0x00007f8f8f7375e6: vzeroupper 
  0x00007f8f8f7375e9: mov    %rbp,0x330(%r15)
  0x00007f8f8f7375f0: mov    %rax,0x320(%r15)
  0x00007f8f8f7375f7: test   $0xf,%esp
  0x00007f8f8f7375fd: je     0x00007f8f8f737615
  0x00007f8f8f737603: sub    $0x8,%rsp
  0x00007f8f8f737607: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f73760c: add    $0x8,%rsp
  0x00007f8f8f737610: jmpq   0x00007f8f8f73761a
  0x00007f8f8f737615: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f73761a: movabs $0x0,%r10
  0x00007f8f8f737624: mov    %r10,0x320(%r15)
  0x00007f8f8f73762b: movabs $0x0,%r10
  0x00007f8f8f737635: mov    %r10,0x330(%r15)
  0x00007f8f8f73763c: movabs $0x0,%r10
  0x00007f8f8f737646: mov    %r10,0x328(%r15)
  0x00007f8f8f73764d: vzeroupper 
  0x00007f8f8f737650: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f737658: je     0x00007f8f8f737663
  0x00007f8f8f73765e: jmpq   0x00007f8f8f71a780
  0x00007f8f8f737663: mov    -0x40(%rbp),%r13
  0x00007f8f8f737667: mov    -0x38(%rbp),%r14
  0x00007f8f8f73766b: retq   
  0x00007f8f8f73766c: movzwl 0x1(%r13),%edx
  0x00007f8f8f737671: mov    -0x30(%rbp),%rcx
  0x00007f8f8f737675: shl    $0x2,%edx
  0x00007f8f8f737678: mov    0x38(%rcx,%rdx,8),%rbx
  0x00007f8f8f73767d: mov    0x40(%rcx,%rdx,8),%edx
  0x00007f8f8f737681: mov    %edx,%ecx
  0x00007f8f8f737683: and    $0xff,%ecx
  0x00007f8f8f737689: mov    -0x8(%rsp,%rcx,8),%rcx
  0x00007f8f8f73768e: mov    %edx,%r13d
  0x00007f8f8f737691: shr    $0x1c,%edx
  0x00007f8f8f737694: movabs $0x7f8fadbe7e40,%r10
  0x00007f8f8f73769e: mov    (%r10,%rdx,8),%rdx
  0x00007f8f8f7376a2: push   %rdx
  0x00007f8f8f7376a3: mov    %r13d,%edx
  0x00007f8f8f7376a6: mov    -0x40(%rbp),%r13
  0x00007f8f8f7376aa: mov    %edx,%eax
  0x00007f8f8f7376ac: and    $0x100000,%eax
  0x00007f8f8f7376b2: je     0x00007f8f8f73783a
  0x00007f8f8f7376b8: cmp    (%rcx),%rax
  0x00007f8f8f7376bb: mov    -0x28(%rbp),%rax
  0x00007f8f8f7376bf: test   %rax,%rax
  0x00007f8f8f7376c2: je     0x00007f8f8f7376da
  0x00007f8f8f7376c8: addq   $0x1,0x8(%rax)
  0x00007f8f8f7376cd: sbbq   $0x0,0x8(%rax)
  0x00007f8f8f7376d2: add    $0x38,%rax
  0x00007f8f8f7376d6: mov    %rax,-0x28(%rbp)
  0x00007f8f8f7376da: mov    -0x28(%rbp),%rax
  0x00007f8f8f7376de: test   %rax,%rax
  0x00007f8f8f7376e1: je     0x00007f8f8f73782e
  0x00007f8f8f7376e7: cmpb   $0xb,-0x38(%rax)
  0x00007f8f8f7376eb: jne    0x00007f8f8f73782e
  0x00007f8f8f7376f1: add    $0x8,%rax
  0x00007f8f8f7376f5: mov    -0x8(%rax),%r13
  0x00007f8f8f7376f9: sub    $0x0,%r13d
  0x00007f8f8f7376fd: cmp    $0x2,%r13d
  0x00007f8f8f737701: jl     0x00007f8f8f737823
  0x00007f8f8f737707: mov    0x8(%rbx),%r13
  0x00007f8f8f73770b: movzwl 0x34(%r13),%r13d
  0x00007f8f8f737710: sub    (%rax),%r13
  0x00007f8f8f737713: sub    $0x1,%r13d
  0x00007f8f8f737717: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f73771c: test   %r13,%r13
  0x00007f8f8f73771f: jne    0x00007f8f8f73772b
  0x00007f8f8f737721: orq    $0x1,0x8(%rax)
  0x00007f8f8f737729: jmp    0x00007f8f8f737784
  0x00007f8f8f73772b: mov    0x8(%r13),%r13d
  0x00007f8f8f73772f: movabs $0x800000000,%r12
  0x00007f8f8f737739: add    %r12,%r13
  0x00007f8f8f73773c: xor    %r12,%r12
  0x00007f8f8f73773f: xor    0x8(%rax),%r13
  0x00007f8f8f737743: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f73774a: je     0x00007f8f8f737784
  0x00007f8f8f73774c: test   $0x2,%r13
  0x00007f8f8f737753: jne    0x00007f8f8f737784
  0x00007f8f8f737755: cmpq   $0x0,0x8(%rax)
  0x00007f8f8f73775d: je     0x00007f8f8f737780
  0x00007f8f8f73775f: cmpq   $0x1,0x8(%rax)
  0x00007f8f8f737767: je     0x00007f8f8f737780
  0x00007f8f8f737769: xor    0x8(%rax),%r13
  0x00007f8f8f73776d: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f737774: je     0x00007f8f8f737784
  0x00007f8f8f737776: orq    $0x2,0x8(%rax)
  0x00007f8f8f73777e: jmp    0x00007f8f8f737784
  0x00007f8f8f737780: mov    %r13,0x8(%rax)
  0x00007f8f8f737784: add    $0x10,%rax
  0x00007f8f8f737788: mov    -0x18(%rax),%r13
  0x00007f8f8f73778c: sub    $0x2,%r13d
  0x00007f8f8f737790: cmp    $0x2,%r13d
  0x00007f8f8f737794: jl     0x00007f8f8f737823
  0x00007f8f8f73779a: mov    0x8(%rbx),%r13
  0x00007f8f8f73779e: movzwl 0x34(%r13),%r13d
  0x00007f8f8f7377a3: sub    (%rax),%r13
  0x00007f8f8f7377a6: sub    $0x1,%r13d
  0x00007f8f8f7377aa: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f7377af: test   %r13,%r13
  0x00007f8f8f7377b2: jne    0x00007f8f8f7377be
  0x00007f8f8f7377b4: orq    $0x1,0x8(%rax)
  0x00007f8f8f7377bc: jmp    0x00007f8f8f737817
  0x00007f8f8f7377be: mov    0x8(%r13),%r13d
  0x00007f8f8f7377c2: movabs $0x800000000,%r12
  0x00007f8f8f7377cc: add    %r12,%r13
  0x00007f8f8f7377cf: xor    %r12,%r12
  0x00007f8f8f7377d2: xor    0x8(%rax),%r13
  0x00007f8f8f7377d6: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f7377dd: je     0x00007f8f8f737817
  0x00007f8f8f7377df: test   $0x2,%r13
  0x00007f8f8f7377e6: jne    0x00007f8f8f737817
  0x00007f8f8f7377e8: cmpq   $0x0,0x8(%rax)
  0x00007f8f8f7377f0: je     0x00007f8f8f737813
  0x00007f8f8f7377f2: cmpq   $0x1,0x8(%rax)
  0x00007f8f8f7377fa: je     0x00007f8f8f737813
  0x00007f8f8f7377fc: xor    0x8(%rax),%r13
  0x00007f8f8f737800: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f737807: je     0x00007f8f8f737817
  0x00007f8f8f737809: orq    $0x2,0x8(%rax)
  0x00007f8f8f737811: jmp    0x00007f8f8f737817
  0x00007f8f8f737813: mov    %r13,0x8(%rax)
  0x00007f8f8f737817: add    $0x10,%rax
  0x00007f8f8f73781b: mov    -0x28(%rax),%r13
  0x00007f8f8f73781f: sub    $0x4,%r13d
  0x00007f8f8f737823: shl    $0x3,%r13d
  0x00007f8f8f737827: add    %r13,%rax
  0x00007f8f8f73782a: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73782e: lea    0x8(%rsp),%r13
  0x00007f8f8f737833: mov    %r13,-0x10(%rbp)
  0x00007f8f8f737837: jmpq   *0x48(%rbx)
  0x00007f8f8f73783a: mov    0x8(%rcx),%eax
  0x00007f8f8f73783d: movabs $0x800000000,%r12
  0x00007f8f8f737847: add    %r12,%rax
  0x00007f8f8f73784a: xor    %r12,%r12
  0x00007f8f8f73784d: mov    -0x28(%rbp),%r14
  0x00007f8f8f737851: test   %r14,%r14
  0x00007f8f8f737854: je     0x00007f8f8f7378ef
  0x00007f8f8f73785a: mov    0x18(%r14),%rdx
  0x00007f8f8f73785e: cmp    %rax,%rdx
  0x00007f8f8f737861: jne    0x00007f8f8f737876
  0x00007f8f8f737867: addq   $0x1,0x20(%r14)
  0x00007f8f8f73786c: sbbq   $0x0,0x20(%r14)
  0x00007f8f8f737871: jmpq   0x00007f8f8f7378e7
  0x00007f8f8f737876: test   %rdx,%rdx
  0x00007f8f8f737879: je     0x00007f8f8f7378c1
  0x00007f8f8f73787f: mov    0x28(%r14),%rdx
  0x00007f8f8f737883: cmp    %rax,%rdx
  0x00007f8f8f737886: jne    0x00007f8f8f73789b
  0x00007f8f8f73788c: addq   $0x1,0x30(%r14)
  0x00007f8f8f737891: sbbq   $0x0,0x30(%r14)
  0x00007f8f8f737896: jmpq   0x00007f8f8f7378e7
  0x00007f8f8f73789b: test   %rdx,%rdx
  0x00007f8f8f73789e: je     0x00007f8f8f7378af
  0x00007f8f8f7378a0: addq   $0x1,0x8(%r14)
  0x00007f8f8f7378a5: sbbq   $0x0,0x8(%r14)
  0x00007f8f8f7378aa: jmpq   0x00007f8f8f7378e7
  0x00007f8f8f7378af: mov    %rax,0x28(%r14)
  0x00007f8f8f7378b3: mov    $0x1,%edx
  0x00007f8f8f7378b8: mov    %rdx,0x30(%r14)
  0x00007f8f8f7378bc: jmpq   0x00007f8f8f7378e7
  0x00007f8f8f7378c1: cmp    0x28(%r14),%rax
  0x00007f8f8f7378c5: jne    0x00007f8f8f7378da
  0x00007f8f8f7378cb: addq   $0x1,0x30(%r14)
  0x00007f8f8f7378d0: sbbq   $0x0,0x30(%r14)
  0x00007f8f8f7378d5: jmpq   0x00007f8f8f7378e7
  0x00007f8f8f7378da: mov    %rax,0x18(%r14)
  0x00007f8f8f7378de: mov    $0x1,%edx
  0x00007f8f8f7378e3: mov    %rdx,0x20(%r14)
  0x00007f8f8f7378e7: add    $0x38,%r14
  0x00007f8f8f7378eb: mov    %r14,-0x28(%rbp)
  0x00007f8f8f7378ef: mov    0x1d0(%rax,%rbx,8),%rbx
  0x00007f8f8f7378f7: mov    -0x28(%rbp),%rdx
  0x00007f8f8f7378fb: test   %rdx,%rdx
  0x00007f8f8f7378fe: je     0x00007f8f8f737a4b
  0x00007f8f8f737904: cmpb   $0xb,-0x38(%rdx)
  0x00007f8f8f737908: jne    0x00007f8f8f737a4b
  0x00007f8f8f73790e: add    $0x8,%rdx
  0x00007f8f8f737912: mov    -0x8(%rdx),%r13
  0x00007f8f8f737916: sub    $0x0,%r13d
  0x00007f8f8f73791a: cmp    $0x2,%r13d
  0x00007f8f8f73791e: jl     0x00007f8f8f737a40
  0x00007f8f8f737924: mov    0x8(%rbx),%r13
  0x00007f8f8f737928: movzwl 0x34(%r13),%r13d
  0x00007f8f8f73792d: sub    (%rdx),%r13
  0x00007f8f8f737930: sub    $0x1,%r13d
  0x00007f8f8f737934: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f737939: test   %r13,%r13
  0x00007f8f8f73793c: jne    0x00007f8f8f737948
  0x00007f8f8f73793e: orq    $0x1,0x8(%rdx)
  0x00007f8f8f737946: jmp    0x00007f8f8f7379a1
  0x00007f8f8f737948: mov    0x8(%r13),%r13d
  0x00007f8f8f73794c: movabs $0x800000000,%r12
  0x00007f8f8f737956: add    %r12,%r13
  0x00007f8f8f737959: xor    %r12,%r12
  0x00007f8f8f73795c: xor    0x8(%rdx),%r13
  0x00007f8f8f737960: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f737967: je     0x00007f8f8f7379a1
  0x00007f8f8f737969: test   $0x2,%r13
  0x00007f8f8f737970: jne    0x00007f8f8f7379a1
  0x00007f8f8f737972: cmpq   $0x0,0x8(%rdx)
  0x00007f8f8f73797a: je     0x00007f8f8f73799d
  0x00007f8f8f73797c: cmpq   $0x1,0x8(%rdx)
  0x00007f8f8f737984: je     0x00007f8f8f73799d
  0x00007f8f8f737986: xor    0x8(%rdx),%r13
  0x00007f8f8f73798a: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f737991: je     0x00007f8f8f7379a1
  0x00007f8f8f737993: orq    $0x2,0x8(%rdx)
  0x00007f8f8f73799b: jmp    0x00007f8f8f7379a1
  0x00007f8f8f73799d: mov    %r13,0x8(%rdx)
  0x00007f8f8f7379a1: add    $0x10,%rdx
  0x00007f8f8f7379a5: mov    -0x18(%rdx),%r13
  0x00007f8f8f7379a9: sub    $0x2,%r13d
  0x00007f8f8f7379ad: cmp    $0x2,%r13d
  0x00007f8f8f7379b1: jl     0x00007f8f8f737a40
  0x00007f8f8f7379b7: mov    0x8(%rbx),%r13
  0x00007f8f8f7379bb: movzwl 0x34(%r13),%r13d
  0x00007f8f8f7379c0: sub    (%rdx),%r13
  0x00007f8f8f7379c3: sub    $0x1,%r13d
  0x00007f8f8f7379c7: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f7379cc: test   %r13,%r13
  0x00007f8f8f7379cf: jne    0x00007f8f8f7379db
  0x00007f8f8f7379d1: orq    $0x1,0x8(%rdx)
  0x00007f8f8f7379d9: jmp    0x00007f8f8f737a34
  0x00007f8f8f7379db: mov    0x8(%r13),%r13d
  0x00007f8f8f7379df: movabs $0x800000000,%r12
  0x00007f8f8f7379e9: add    %r12,%r13
  0x00007f8f8f7379ec: xor    %r12,%r12
  0x00007f8f8f7379ef: xor    0x8(%rdx),%r13
  0x00007f8f8f7379f3: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f7379fa: je     0x00007f8f8f737a34
  0x00007f8f8f7379fc: test   $0x2,%r13
  0x00007f8f8f737a03: jne    0x00007f8f8f737a34
  0x00007f8f8f737a05: cmpq   $0x0,0x8(%rdx)
  0x00007f8f8f737a0d: je     0x00007f8f8f737a30
  0x00007f8f8f737a0f: cmpq   $0x1,0x8(%rdx)
  0x00007f8f8f737a17: je     0x00007f8f8f737a30
  0x00007f8f8f737a19: xor    0x8(%rdx),%r13
  0x00007f8f8f737a1d: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f737a24: je     0x00007f8f8f737a34
  0x00007f8f8f737a26: orq    $0x2,0x8(%rdx)
  0x00007f8f8f737a2e: jmp    0x00007f8f8f737a34
  0x00007f8f8f737a30: mov    %r13,0x8(%rdx)
  0x00007f8f8f737a34: add    $0x10,%rdx
  0x00007f8f8f737a38: mov    -0x28(%rdx),%r13
  0x00007f8f8f737a3c: sub    $0x4,%r13d
  0x00007f8f8f737a40: shl    $0x3,%r13d
  0x00007f8f8f737a44: add    %r13,%rdx
  0x00007f8f8f737a47: mov    %rdx,-0x28(%rbp)
  0x00007f8f8f737a4b: lea    0x8(%rsp),%r13
  0x00007f8f8f737a50: mov    %r13,-0x10(%rbp)
  0x00007f8f8f737a54: jmpq   *0x48(%rbx)
  0x00007f8f8f737a57: nop
  0x00007f8f8f737a58: add    %al,(%rax)
  0x00007f8f8f737a5a: add    %al,(%rax)
  0x00007f8f8f737a5c: add    %al,(%rax)
  0x00007f8f8f737a5e: add    %al,(%rax)

----------------------------------------------------------------------
invokespecial  183 invokespecial  [0x00007f8f8f737a80, 0x00007f8f8f737d60]  736 bytes

  0x00007f8f8f737a80: push   %rax
  0x00007f8f8f737a81: jmpq   0x00007f8f8f737abf
  0x00007f8f8f737a86: sub    $0x8,%rsp
  0x00007f8f8f737a8a: vmovss %xmm0,(%rsp)
  0x00007f8f8f737a8f: jmpq   0x00007f8f8f737abf
  0x00007f8f8f737a94: sub    $0x10,%rsp
  0x00007f8f8f737a98: vmovsd %xmm0,(%rsp)
  0x00007f8f8f737a9d: jmpq   0x00007f8f8f737abf
  0x00007f8f8f737aa2: sub    $0x10,%rsp
  0x00007f8f8f737aa6: mov    %rax,(%rsp)
  0x00007f8f8f737aaa: movabs $0x0,%r10
  0x00007f8f8f737ab4: mov    %r10,0x8(%rsp)
  0x00007f8f8f737ab9: jmpq   0x00007f8f8f737abf
  0x00007f8f8f737abe: push   %rax
  0x00007f8f8f737abf: mov    %r13,-0x40(%rbp)
  0x00007f8f8f737ac3: movzwl 0x1(%r13),%edx
  0x00007f8f8f737ac8: mov    -0x30(%rbp),%rcx
  0x00007f8f8f737acc: shl    $0x2,%edx
  0x00007f8f8f737acf: mov    0x28(%rcx,%rdx,8),%ebx
  0x00007f8f8f737ad3: shr    $0x10,%ebx
  0x00007f8f8f737ad6: and    $0xff,%ebx
  0x00007f8f8f737adc: cmp    $0xb7,%ebx
  0x00007f8f8f737ae2: je     0x00007f8f8f737b98
  0x00007f8f8f737ae8: mov    $0xb7,%ebx
  0x00007f8f8f737aed: callq  0x00007f8f8f737af7
  0x00007f8f8f737af2: jmpq   0x00007f8f8f737b8c
  0x00007f8f8f737af7: mov    %rbx,%rsi
  0x00007f8f8f737afa: lea    0x8(%rsp),%rax
  0x00007f8f8f737aff: mov    %r13,-0x40(%rbp)
  0x00007f8f8f737b03: mov    %r15,%rdi
  0x00007f8f8f737b06: vzeroupper 
  0x00007f8f8f737b09: mov    %rbp,0x330(%r15)
  0x00007f8f8f737b10: mov    %rax,0x320(%r15)
  0x00007f8f8f737b17: test   $0xf,%esp
  0x00007f8f8f737b1d: je     0x00007f8f8f737b35
  0x00007f8f8f737b23: sub    $0x8,%rsp
  0x00007f8f8f737b27: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f737b2c: add    $0x8,%rsp
  0x00007f8f8f737b30: jmpq   0x00007f8f8f737b3a
  0x00007f8f8f737b35: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f737b3a: movabs $0x0,%r10
  0x00007f8f8f737b44: mov    %r10,0x320(%r15)
  0x00007f8f8f737b4b: movabs $0x0,%r10
  0x00007f8f8f737b55: mov    %r10,0x330(%r15)
  0x00007f8f8f737b5c: movabs $0x0,%r10
  0x00007f8f8f737b66: mov    %r10,0x328(%r15)
  0x00007f8f8f737b6d: vzeroupper 
  0x00007f8f8f737b70: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f737b78: je     0x00007f8f8f737b83
  0x00007f8f8f737b7e: jmpq   0x00007f8f8f71a780
  0x00007f8f8f737b83: mov    -0x40(%rbp),%r13
  0x00007f8f8f737b87: mov    -0x38(%rbp),%r14
  0x00007f8f8f737b8b: retq   
  0x00007f8f8f737b8c: movzwl 0x1(%r13),%edx
  0x00007f8f8f737b91: mov    -0x30(%rbp),%rcx
  0x00007f8f8f737b95: shl    $0x2,%edx
  0x00007f8f8f737b98: mov    0x30(%rcx,%rdx,8),%rbx
  0x00007f8f8f737b9d: mov    0x40(%rcx,%rdx,8),%edx
  0x00007f8f8f737ba1: mov    %edx,%ecx
  0x00007f8f8f737ba3: and    $0xff,%ecx
  0x00007f8f8f737ba9: mov    -0x8(%rsp,%rcx,8),%rcx
  0x00007f8f8f737bae: shr    $0x1c,%edx
  0x00007f8f8f737bb1: movabs $0x7f8fadbe7e40,%r10
  0x00007f8f8f737bbb: mov    (%r10,%rdx,8),%rdx
  0x00007f8f8f737bbf: push   %rdx
  0x00007f8f8f737bc0: cmp    (%rcx),%rax
  0x00007f8f8f737bc3: mov    -0x28(%rbp),%rax
  0x00007f8f8f737bc7: test   %rax,%rax
  0x00007f8f8f737bca: je     0x00007f8f8f737be2
  0x00007f8f8f737bd0: addq   $0x1,0x8(%rax)
  0x00007f8f8f737bd5: sbbq   $0x0,0x8(%rax)
  0x00007f8f8f737bda: add    $0x10,%rax
  0x00007f8f8f737bde: mov    %rax,-0x28(%rbp)
  0x00007f8f8f737be2: mov    -0x28(%rbp),%rax
  0x00007f8f8f737be6: test   %rax,%rax
  0x00007f8f8f737be9: je     0x00007f8f8f737d36
  0x00007f8f8f737bef: cmpb   $0xa,-0x10(%rax)
  0x00007f8f8f737bf3: jne    0x00007f8f8f737d36
  0x00007f8f8f737bf9: add    $0x8,%rax
  0x00007f8f8f737bfd: mov    -0x8(%rax),%r13
  0x00007f8f8f737c01: sub    $0x0,%r13d
  0x00007f8f8f737c05: cmp    $0x2,%r13d
  0x00007f8f8f737c09: jl     0x00007f8f8f737d2b
  0x00007f8f8f737c0f: mov    0x8(%rbx),%r13
  0x00007f8f8f737c13: movzwl 0x34(%r13),%r13d
  0x00007f8f8f737c18: sub    (%rax),%r13
  0x00007f8f8f737c1b: sub    $0x1,%r13d
  0x00007f8f8f737c1f: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f737c24: test   %r13,%r13
  0x00007f8f8f737c27: jne    0x00007f8f8f737c33
  0x00007f8f8f737c29: orq    $0x1,0x8(%rax)
  0x00007f8f8f737c31: jmp    0x00007f8f8f737c8c
  0x00007f8f8f737c33: mov    0x8(%r13),%r13d
  0x00007f8f8f737c37: movabs $0x800000000,%r12
  0x00007f8f8f737c41: add    %r12,%r13
  0x00007f8f8f737c44: xor    %r12,%r12
  0x00007f8f8f737c47: xor    0x8(%rax),%r13
  0x00007f8f8f737c4b: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f737c52: je     0x00007f8f8f737c8c
  0x00007f8f8f737c54: test   $0x2,%r13
  0x00007f8f8f737c5b: jne    0x00007f8f8f737c8c
  0x00007f8f8f737c5d: cmpq   $0x0,0x8(%rax)
  0x00007f8f8f737c65: je     0x00007f8f8f737c88
  0x00007f8f8f737c67: cmpq   $0x1,0x8(%rax)
  0x00007f8f8f737c6f: je     0x00007f8f8f737c88
  0x00007f8f8f737c71: xor    0x8(%rax),%r13
  0x00007f8f8f737c75: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f737c7c: je     0x00007f8f8f737c8c
  0x00007f8f8f737c7e: orq    $0x2,0x8(%rax)
  0x00007f8f8f737c86: jmp    0x00007f8f8f737c8c
  0x00007f8f8f737c88: mov    %r13,0x8(%rax)
  0x00007f8f8f737c8c: add    $0x10,%rax
  0x00007f8f8f737c90: mov    -0x18(%rax),%r13
  0x00007f8f8f737c94: sub    $0x2,%r13d
  0x00007f8f8f737c98: cmp    $0x2,%r13d
  0x00007f8f8f737c9c: jl     0x00007f8f8f737d2b
  0x00007f8f8f737ca2: mov    0x8(%rbx),%r13
  0x00007f8f8f737ca6: movzwl 0x34(%r13),%r13d
  0x00007f8f8f737cab: sub    (%rax),%r13
  0x00007f8f8f737cae: sub    $0x1,%r13d
  0x00007f8f8f737cb2: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f737cb7: test   %r13,%r13
  0x00007f8f8f737cba: jne    0x00007f8f8f737cc6
  0x00007f8f8f737cbc: orq    $0x1,0x8(%rax)
  0x00007f8f8f737cc4: jmp    0x00007f8f8f737d1f
  0x00007f8f8f737cc6: mov    0x8(%r13),%r13d
  0x00007f8f8f737cca: movabs $0x800000000,%r12
  0x00007f8f8f737cd4: add    %r12,%r13
  0x00007f8f8f737cd7: xor    %r12,%r12
  0x00007f8f8f737cda: xor    0x8(%rax),%r13
  0x00007f8f8f737cde: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f737ce5: je     0x00007f8f8f737d1f
  0x00007f8f8f737ce7: test   $0x2,%r13
  0x00007f8f8f737cee: jne    0x00007f8f8f737d1f
  0x00007f8f8f737cf0: cmpq   $0x0,0x8(%rax)
  0x00007f8f8f737cf8: je     0x00007f8f8f737d1b
  0x00007f8f8f737cfa: cmpq   $0x1,0x8(%rax)
  0x00007f8f8f737d02: je     0x00007f8f8f737d1b
  0x00007f8f8f737d04: xor    0x8(%rax),%r13
  0x00007f8f8f737d08: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f737d0f: je     0x00007f8f8f737d1f
  0x00007f8f8f737d11: orq    $0x2,0x8(%rax)
  0x00007f8f8f737d19: jmp    0x00007f8f8f737d1f
  0x00007f8f8f737d1b: mov    %r13,0x8(%rax)
  0x00007f8f8f737d1f: add    $0x10,%rax
  0x00007f8f8f737d23: mov    -0x28(%rax),%r13
  0x00007f8f8f737d27: sub    $0x4,%r13d
  0x00007f8f8f737d2b: shl    $0x3,%r13d
  0x00007f8f8f737d2f: add    %r13,%rax
  0x00007f8f8f737d32: mov    %rax,-0x28(%rbp)
  0x00007f8f8f737d36: lea    0x8(%rsp),%r13
  0x00007f8f8f737d3b: mov    %r13,-0x10(%rbp)
  0x00007f8f8f737d3f: jmpq   *0x48(%rbx)
  0x00007f8f8f737d42: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f737d48: add    %al,(%rax)
  0x00007f8f8f737d4a: add    %al,(%rax)
  0x00007f8f8f737d4c: add    %al,(%rax)
  0x00007f8f8f737d4e: add    %al,(%rax)
  0x00007f8f8f737d50: add    %al,(%rax)
  0x00007f8f8f737d52: add    %al,(%rax)
  0x00007f8f8f737d54: add    %al,(%rax)
  0x00007f8f8f737d56: add    %al,(%rax)
  0x00007f8f8f737d58: add    %al,(%rax)
  0x00007f8f8f737d5a: add    %al,(%rax)
  0x00007f8f8f737d5c: add    %al,(%rax)
  0x00007f8f8f737d5e: add    %al,(%rax)

----------------------------------------------------------------------
invokestatic  184 invokestatic  [0x00007f8f8f737d80, 0x00007f8f8f738040]  704 bytes

  0x00007f8f8f737d80: push   %rax
  0x00007f8f8f737d81: jmpq   0x00007f8f8f737dbf
  0x00007f8f8f737d86: sub    $0x8,%rsp
  0x00007f8f8f737d8a: vmovss %xmm0,(%rsp)
  0x00007f8f8f737d8f: jmpq   0x00007f8f8f737dbf
  0x00007f8f8f737d94: sub    $0x10,%rsp
  0x00007f8f8f737d98: vmovsd %xmm0,(%rsp)
  0x00007f8f8f737d9d: jmpq   0x00007f8f8f737dbf
  0x00007f8f8f737da2: sub    $0x10,%rsp
  0x00007f8f8f737da6: mov    %rax,(%rsp)
  0x00007f8f8f737daa: movabs $0x0,%r10
  0x00007f8f8f737db4: mov    %r10,0x8(%rsp)
  0x00007f8f8f737db9: jmpq   0x00007f8f8f737dbf
  0x00007f8f8f737dbe: push   %rax
  0x00007f8f8f737dbf: mov    %r13,-0x40(%rbp)
  0x00007f8f8f737dc3: movzwl 0x1(%r13),%edx
  0x00007f8f8f737dc8: mov    -0x30(%rbp),%rcx
  0x00007f8f8f737dcc: shl    $0x2,%edx
  0x00007f8f8f737dcf: mov    0x28(%rcx,%rdx,8),%ebx
  0x00007f8f8f737dd3: shr    $0x10,%ebx
  0x00007f8f8f737dd6: and    $0xff,%ebx
  0x00007f8f8f737ddc: cmp    $0xb8,%ebx
  0x00007f8f8f737de2: je     0x00007f8f8f737e98
  0x00007f8f8f737de8: mov    $0xb8,%ebx
  0x00007f8f8f737ded: callq  0x00007f8f8f737df7
  0x00007f8f8f737df2: jmpq   0x00007f8f8f737e8c
  0x00007f8f8f737df7: mov    %rbx,%rsi
  0x00007f8f8f737dfa: lea    0x8(%rsp),%rax
  0x00007f8f8f737dff: mov    %r13,-0x40(%rbp)
  0x00007f8f8f737e03: mov    %r15,%rdi
  0x00007f8f8f737e06: vzeroupper 
  0x00007f8f8f737e09: mov    %rbp,0x330(%r15)
  0x00007f8f8f737e10: mov    %rax,0x320(%r15)
  0x00007f8f8f737e17: test   $0xf,%esp
  0x00007f8f8f737e1d: je     0x00007f8f8f737e35
  0x00007f8f8f737e23: sub    $0x8,%rsp
  0x00007f8f8f737e27: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f737e2c: add    $0x8,%rsp
  0x00007f8f8f737e30: jmpq   0x00007f8f8f737e3a
  0x00007f8f8f737e35: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f737e3a: movabs $0x0,%r10
  0x00007f8f8f737e44: mov    %r10,0x320(%r15)
  0x00007f8f8f737e4b: movabs $0x0,%r10
  0x00007f8f8f737e55: mov    %r10,0x330(%r15)
  0x00007f8f8f737e5c: movabs $0x0,%r10
  0x00007f8f8f737e66: mov    %r10,0x328(%r15)
  0x00007f8f8f737e6d: vzeroupper 
  0x00007f8f8f737e70: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f737e78: je     0x00007f8f8f737e83
  0x00007f8f8f737e7e: jmpq   0x00007f8f8f71a780
  0x00007f8f8f737e83: mov    -0x40(%rbp),%r13
  0x00007f8f8f737e87: mov    -0x38(%rbp),%r14
  0x00007f8f8f737e8b: retq   
  0x00007f8f8f737e8c: movzwl 0x1(%r13),%edx
  0x00007f8f8f737e91: mov    -0x30(%rbp),%rcx
  0x00007f8f8f737e95: shl    $0x2,%edx
  0x00007f8f8f737e98: mov    0x30(%rcx,%rdx,8),%rbx
  0x00007f8f8f737e9d: mov    0x40(%rcx,%rdx,8),%edx
  0x00007f8f8f737ea1: shr    $0x1c,%edx
  0x00007f8f8f737ea4: movabs $0x7f8fadbe7e40,%r10
  0x00007f8f8f737eae: mov    (%r10,%rdx,8),%rdx
  0x00007f8f8f737eb2: push   %rdx
  0x00007f8f8f737eb3: mov    -0x28(%rbp),%rax
  0x00007f8f8f737eb7: test   %rax,%rax
  0x00007f8f8f737eba: je     0x00007f8f8f737ed2
  0x00007f8f8f737ec0: addq   $0x1,0x8(%rax)
  0x00007f8f8f737ec5: sbbq   $0x0,0x8(%rax)
  0x00007f8f8f737eca: add    $0x10,%rax
  0x00007f8f8f737ece: mov    %rax,-0x28(%rbp)
  0x00007f8f8f737ed2: mov    -0x28(%rbp),%rax
  0x00007f8f8f737ed6: test   %rax,%rax
  0x00007f8f8f737ed9: je     0x00007f8f8f738026
  0x00007f8f8f737edf: cmpb   $0xa,-0x10(%rax)
  0x00007f8f8f737ee3: jne    0x00007f8f8f738026
  0x00007f8f8f737ee9: add    $0x8,%rax
  0x00007f8f8f737eed: mov    -0x8(%rax),%r13
  0x00007f8f8f737ef1: sub    $0x0,%r13d
  0x00007f8f8f737ef5: cmp    $0x2,%r13d
  0x00007f8f8f737ef9: jl     0x00007f8f8f73801b
  0x00007f8f8f737eff: mov    0x8(%rbx),%r13
  0x00007f8f8f737f03: movzwl 0x34(%r13),%r13d
  0x00007f8f8f737f08: sub    (%rax),%r13
  0x00007f8f8f737f0b: sub    $0x1,%r13d
  0x00007f8f8f737f0f: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f737f14: test   %r13,%r13
  0x00007f8f8f737f17: jne    0x00007f8f8f737f23
  0x00007f8f8f737f19: orq    $0x1,0x8(%rax)
  0x00007f8f8f737f21: jmp    0x00007f8f8f737f7c
  0x00007f8f8f737f23: mov    0x8(%r13),%r13d
  0x00007f8f8f737f27: movabs $0x800000000,%r12
  0x00007f8f8f737f31: add    %r12,%r13
  0x00007f8f8f737f34: xor    %r12,%r12
  0x00007f8f8f737f37: xor    0x8(%rax),%r13
  0x00007f8f8f737f3b: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f737f42: je     0x00007f8f8f737f7c
  0x00007f8f8f737f44: test   $0x2,%r13
  0x00007f8f8f737f4b: jne    0x00007f8f8f737f7c
  0x00007f8f8f737f4d: cmpq   $0x0,0x8(%rax)
  0x00007f8f8f737f55: je     0x00007f8f8f737f78
  0x00007f8f8f737f57: cmpq   $0x1,0x8(%rax)
  0x00007f8f8f737f5f: je     0x00007f8f8f737f78
  0x00007f8f8f737f61: xor    0x8(%rax),%r13
  0x00007f8f8f737f65: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f737f6c: je     0x00007f8f8f737f7c
  0x00007f8f8f737f6e: orq    $0x2,0x8(%rax)
  0x00007f8f8f737f76: jmp    0x00007f8f8f737f7c
  0x00007f8f8f737f78: mov    %r13,0x8(%rax)
  0x00007f8f8f737f7c: add    $0x10,%rax
  0x00007f8f8f737f80: mov    -0x18(%rax),%r13
  0x00007f8f8f737f84: sub    $0x2,%r13d
  0x00007f8f8f737f88: cmp    $0x2,%r13d
  0x00007f8f8f737f8c: jl     0x00007f8f8f73801b
  0x00007f8f8f737f92: mov    0x8(%rbx),%r13
  0x00007f8f8f737f96: movzwl 0x34(%r13),%r13d
  0x00007f8f8f737f9b: sub    (%rax),%r13
  0x00007f8f8f737f9e: sub    $0x1,%r13d
  0x00007f8f8f737fa2: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f737fa7: test   %r13,%r13
  0x00007f8f8f737faa: jne    0x00007f8f8f737fb6
  0x00007f8f8f737fac: orq    $0x1,0x8(%rax)
  0x00007f8f8f737fb4: jmp    0x00007f8f8f73800f
  0x00007f8f8f737fb6: mov    0x8(%r13),%r13d
  0x00007f8f8f737fba: movabs $0x800000000,%r12
  0x00007f8f8f737fc4: add    %r12,%r13
  0x00007f8f8f737fc7: xor    %r12,%r12
  0x00007f8f8f737fca: xor    0x8(%rax),%r13
  0x00007f8f8f737fce: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f737fd5: je     0x00007f8f8f73800f
  0x00007f8f8f737fd7: test   $0x2,%r13
  0x00007f8f8f737fde: jne    0x00007f8f8f73800f
  0x00007f8f8f737fe0: cmpq   $0x0,0x8(%rax)
  0x00007f8f8f737fe8: je     0x00007f8f8f73800b
  0x00007f8f8f737fea: cmpq   $0x1,0x8(%rax)
  0x00007f8f8f737ff2: je     0x00007f8f8f73800b
  0x00007f8f8f737ff4: xor    0x8(%rax),%r13
  0x00007f8f8f737ff8: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f737fff: je     0x00007f8f8f73800f
  0x00007f8f8f738001: orq    $0x2,0x8(%rax)
  0x00007f8f8f738009: jmp    0x00007f8f8f73800f
  0x00007f8f8f73800b: mov    %r13,0x8(%rax)
  0x00007f8f8f73800f: add    $0x10,%rax
  0x00007f8f8f738013: mov    -0x28(%rax),%r13
  0x00007f8f8f738017: sub    $0x4,%r13d
  0x00007f8f8f73801b: shl    $0x3,%r13d
  0x00007f8f8f73801f: add    %r13,%rax
  0x00007f8f8f738022: mov    %rax,-0x28(%rbp)
  0x00007f8f8f738026: lea    0x8(%rsp),%r13
  0x00007f8f8f73802b: mov    %r13,-0x10(%rbp)
  0x00007f8f8f73802f: jmpq   *0x48(%rbx)
  0x00007f8f8f738032: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f738038: add    %al,(%rax)
  0x00007f8f8f73803a: add    %al,(%rax)
  0x00007f8f8f73803c: add    %al,(%rax)
  0x00007f8f8f73803e: add    %al,(%rax)

----------------------------------------------------------------------
invokeinterface  185 invokeinterface  [0x00007f8f8f738060, 0x00007f8f8f738cc0]  3168 bytes

  0x00007f8f8f738060: push   %rax
  0x00007f8f8f738061: jmpq   0x00007f8f8f73809f
  0x00007f8f8f738066: sub    $0x8,%rsp
  0x00007f8f8f73806a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73806f: jmpq   0x00007f8f8f73809f
  0x00007f8f8f738074: sub    $0x10,%rsp
  0x00007f8f8f738078: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73807d: jmpq   0x00007f8f8f73809f
  0x00007f8f8f738082: sub    $0x10,%rsp
  0x00007f8f8f738086: mov    %rax,(%rsp)
  0x00007f8f8f73808a: movabs $0x0,%r10
  0x00007f8f8f738094: mov    %r10,0x8(%rsp)
  0x00007f8f8f738099: jmpq   0x00007f8f8f73809f
  0x00007f8f8f73809e: push   %rax
  0x00007f8f8f73809f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7380a3: movzwl 0x1(%r13),%edx
  0x00007f8f8f7380a8: mov    -0x30(%rbp),%rcx
  0x00007f8f8f7380ac: shl    $0x2,%edx
  0x00007f8f8f7380af: mov    0x28(%rcx,%rdx,8),%ebx
  0x00007f8f8f7380b3: shr    $0x10,%ebx
  0x00007f8f8f7380b6: and    $0xff,%ebx
  0x00007f8f8f7380bc: cmp    $0xb9,%ebx
  0x00007f8f8f7380c2: je     0x00007f8f8f738178
  0x00007f8f8f7380c8: mov    $0xb9,%ebx
  0x00007f8f8f7380cd: callq  0x00007f8f8f7380d7
  0x00007f8f8f7380d2: jmpq   0x00007f8f8f73816c
  0x00007f8f8f7380d7: mov    %rbx,%rsi
  0x00007f8f8f7380da: lea    0x8(%rsp),%rax
  0x00007f8f8f7380df: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7380e3: mov    %r15,%rdi
  0x00007f8f8f7380e6: vzeroupper 
  0x00007f8f8f7380e9: mov    %rbp,0x330(%r15)
  0x00007f8f8f7380f0: mov    %rax,0x320(%r15)
  0x00007f8f8f7380f7: test   $0xf,%esp
  0x00007f8f8f7380fd: je     0x00007f8f8f738115
  0x00007f8f8f738103: sub    $0x8,%rsp
  0x00007f8f8f738107: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f73810c: add    $0x8,%rsp
  0x00007f8f8f738110: jmpq   0x00007f8f8f73811a
  0x00007f8f8f738115: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f73811a: movabs $0x0,%r10
  0x00007f8f8f738124: mov    %r10,0x320(%r15)
  0x00007f8f8f73812b: movabs $0x0,%r10
  0x00007f8f8f738135: mov    %r10,0x330(%r15)
  0x00007f8f8f73813c: movabs $0x0,%r10
  0x00007f8f8f738146: mov    %r10,0x328(%r15)
  0x00007f8f8f73814d: vzeroupper 
  0x00007f8f8f738150: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f738158: je     0x00007f8f8f738163
  0x00007f8f8f73815e: jmpq   0x00007f8f8f71a780
  0x00007f8f8f738163: mov    -0x40(%rbp),%r13
  0x00007f8f8f738167: mov    -0x38(%rbp),%r14
  0x00007f8f8f73816b: retq   
  0x00007f8f8f73816c: movzwl 0x1(%r13),%edx
  0x00007f8f8f738171: mov    -0x30(%rbp),%rcx
  0x00007f8f8f738175: shl    $0x2,%edx
  0x00007f8f8f738178: mov    0x30(%rcx,%rdx,8),%rax
  0x00007f8f8f73817d: mov    0x38(%rcx,%rdx,8),%rbx
  0x00007f8f8f738182: mov    0x40(%rcx,%rdx,8),%edx
  0x00007f8f8f738186: mov    %edx,%ecx
  0x00007f8f8f738188: and    $0xff,%ecx
  0x00007f8f8f73818e: mov    -0x8(%rsp,%rcx,8),%rcx
  0x00007f8f8f738193: mov    %edx,%r13d
  0x00007f8f8f738196: shr    $0x1c,%edx
  0x00007f8f8f738199: movabs $0x7f8fadbe7de0,%r10
  0x00007f8f8f7381a3: mov    (%r10,%rdx,8),%rdx
  0x00007f8f8f7381a7: push   %rdx
  0x00007f8f8f7381a8: mov    %r13d,%edx
  0x00007f8f8f7381ab: mov    -0x40(%rbp),%r13
  0x00007f8f8f7381af: mov    %edx,%r14d
  0x00007f8f8f7381b2: and    $0x800000,%r14d
  0x00007f8f8f7381b9: je     0x00007f8f8f73856c
  0x00007f8f8f7381bf: mov    %edx,%eax
  0x00007f8f8f7381c1: and    $0x100000,%eax
  0x00007f8f8f7381c7: je     0x00007f8f8f73834f
  0x00007f8f8f7381cd: cmp    (%rcx),%rax
  0x00007f8f8f7381d0: mov    -0x28(%rbp),%rax
  0x00007f8f8f7381d4: test   %rax,%rax
  0x00007f8f8f7381d7: je     0x00007f8f8f7381ef
  0x00007f8f8f7381dd: addq   $0x1,0x8(%rax)
  0x00007f8f8f7381e2: sbbq   $0x0,0x8(%rax)
  0x00007f8f8f7381e7: add    $0x38,%rax
  0x00007f8f8f7381eb: mov    %rax,-0x28(%rbp)
  0x00007f8f8f7381ef: mov    -0x28(%rbp),%rax
  0x00007f8f8f7381f3: test   %rax,%rax
  0x00007f8f8f7381f6: je     0x00007f8f8f738343
  0x00007f8f8f7381fc: cmpb   $0xb,-0x38(%rax)
  0x00007f8f8f738200: jne    0x00007f8f8f738343
  0x00007f8f8f738206: add    $0x8,%rax
  0x00007f8f8f73820a: mov    -0x8(%rax),%r13
  0x00007f8f8f73820e: sub    $0x0,%r13d
  0x00007f8f8f738212: cmp    $0x2,%r13d
  0x00007f8f8f738216: jl     0x00007f8f8f738338
  0x00007f8f8f73821c: mov    0x8(%rbx),%r13
  0x00007f8f8f738220: movzwl 0x34(%r13),%r13d
  0x00007f8f8f738225: sub    (%rax),%r13
  0x00007f8f8f738228: sub    $0x1,%r13d
  0x00007f8f8f73822c: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f738231: test   %r13,%r13
  0x00007f8f8f738234: jne    0x00007f8f8f738240
  0x00007f8f8f738236: orq    $0x1,0x8(%rax)
  0x00007f8f8f73823e: jmp    0x00007f8f8f738299
  0x00007f8f8f738240: mov    0x8(%r13),%r13d
  0x00007f8f8f738244: movabs $0x800000000,%r12
  0x00007f8f8f73824e: add    %r12,%r13
  0x00007f8f8f738251: xor    %r12,%r12
  0x00007f8f8f738254: xor    0x8(%rax),%r13
  0x00007f8f8f738258: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f73825f: je     0x00007f8f8f738299
  0x00007f8f8f738261: test   $0x2,%r13
  0x00007f8f8f738268: jne    0x00007f8f8f738299
  0x00007f8f8f73826a: cmpq   $0x0,0x8(%rax)
  0x00007f8f8f738272: je     0x00007f8f8f738295
  0x00007f8f8f738274: cmpq   $0x1,0x8(%rax)
  0x00007f8f8f73827c: je     0x00007f8f8f738295
  0x00007f8f8f73827e: xor    0x8(%rax),%r13
  0x00007f8f8f738282: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f738289: je     0x00007f8f8f738299
  0x00007f8f8f73828b: orq    $0x2,0x8(%rax)
  0x00007f8f8f738293: jmp    0x00007f8f8f738299
  0x00007f8f8f738295: mov    %r13,0x8(%rax)
  0x00007f8f8f738299: add    $0x10,%rax
  0x00007f8f8f73829d: mov    -0x18(%rax),%r13
  0x00007f8f8f7382a1: sub    $0x2,%r13d
  0x00007f8f8f7382a5: cmp    $0x2,%r13d
  0x00007f8f8f7382a9: jl     0x00007f8f8f738338
  0x00007f8f8f7382af: mov    0x8(%rbx),%r13
  0x00007f8f8f7382b3: movzwl 0x34(%r13),%r13d
  0x00007f8f8f7382b8: sub    (%rax),%r13
  0x00007f8f8f7382bb: sub    $0x1,%r13d
  0x00007f8f8f7382bf: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f7382c4: test   %r13,%r13
  0x00007f8f8f7382c7: jne    0x00007f8f8f7382d3
  0x00007f8f8f7382c9: orq    $0x1,0x8(%rax)
  0x00007f8f8f7382d1: jmp    0x00007f8f8f73832c
  0x00007f8f8f7382d3: mov    0x8(%r13),%r13d
  0x00007f8f8f7382d7: movabs $0x800000000,%r12
  0x00007f8f8f7382e1: add    %r12,%r13
  0x00007f8f8f7382e4: xor    %r12,%r12
  0x00007f8f8f7382e7: xor    0x8(%rax),%r13
  0x00007f8f8f7382eb: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f7382f2: je     0x00007f8f8f73832c
  0x00007f8f8f7382f4: test   $0x2,%r13
  0x00007f8f8f7382fb: jne    0x00007f8f8f73832c
  0x00007f8f8f7382fd: cmpq   $0x0,0x8(%rax)
  0x00007f8f8f738305: je     0x00007f8f8f738328
  0x00007f8f8f738307: cmpq   $0x1,0x8(%rax)
  0x00007f8f8f73830f: je     0x00007f8f8f738328
  0x00007f8f8f738311: xor    0x8(%rax),%r13
  0x00007f8f8f738315: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f73831c: je     0x00007f8f8f73832c
  0x00007f8f8f73831e: orq    $0x2,0x8(%rax)
  0x00007f8f8f738326: jmp    0x00007f8f8f73832c
  0x00007f8f8f738328: mov    %r13,0x8(%rax)
  0x00007f8f8f73832c: add    $0x10,%rax
  0x00007f8f8f738330: mov    -0x28(%rax),%r13
  0x00007f8f8f738334: sub    $0x4,%r13d
  0x00007f8f8f738338: shl    $0x3,%r13d
  0x00007f8f8f73833c: add    %r13,%rax
  0x00007f8f8f73833f: mov    %rax,-0x28(%rbp)
  0x00007f8f8f738343: lea    0x8(%rsp),%r13
  0x00007f8f8f738348: mov    %r13,-0x10(%rbp)
  0x00007f8f8f73834c: jmpq   *0x48(%rbx)
  0x00007f8f8f73834f: mov    0x8(%rcx),%eax
  0x00007f8f8f738352: movabs $0x800000000,%r12
  0x00007f8f8f73835c: add    %r12,%rax
  0x00007f8f8f73835f: xor    %r12,%r12
  0x00007f8f8f738362: mov    -0x28(%rbp),%r14
  0x00007f8f8f738366: test   %r14,%r14
  0x00007f8f8f738369: je     0x00007f8f8f738404
  0x00007f8f8f73836f: mov    0x18(%r14),%rdx
  0x00007f8f8f738373: cmp    %rax,%rdx
  0x00007f8f8f738376: jne    0x00007f8f8f73838b
  0x00007f8f8f73837c: addq   $0x1,0x20(%r14)
  0x00007f8f8f738381: sbbq   $0x0,0x20(%r14)
  0x00007f8f8f738386: jmpq   0x00007f8f8f7383fc
  0x00007f8f8f73838b: test   %rdx,%rdx
  0x00007f8f8f73838e: je     0x00007f8f8f7383d6
  0x00007f8f8f738394: mov    0x28(%r14),%rdx
  0x00007f8f8f738398: cmp    %rax,%rdx
  0x00007f8f8f73839b: jne    0x00007f8f8f7383b0
  0x00007f8f8f7383a1: addq   $0x1,0x30(%r14)
  0x00007f8f8f7383a6: sbbq   $0x0,0x30(%r14)
  0x00007f8f8f7383ab: jmpq   0x00007f8f8f7383fc
  0x00007f8f8f7383b0: test   %rdx,%rdx
  0x00007f8f8f7383b3: je     0x00007f8f8f7383c4
  0x00007f8f8f7383b5: addq   $0x1,0x8(%r14)
  0x00007f8f8f7383ba: sbbq   $0x0,0x8(%r14)
  0x00007f8f8f7383bf: jmpq   0x00007f8f8f7383fc
  0x00007f8f8f7383c4: mov    %rax,0x28(%r14)
  0x00007f8f8f7383c8: mov    $0x1,%edx
  0x00007f8f8f7383cd: mov    %rdx,0x30(%r14)
  0x00007f8f8f7383d1: jmpq   0x00007f8f8f7383fc
  0x00007f8f8f7383d6: cmp    0x28(%r14),%rax
  0x00007f8f8f7383da: jne    0x00007f8f8f7383ef
  0x00007f8f8f7383e0: addq   $0x1,0x30(%r14)
  0x00007f8f8f7383e5: sbbq   $0x0,0x30(%r14)
  0x00007f8f8f7383ea: jmpq   0x00007f8f8f7383fc
  0x00007f8f8f7383ef: mov    %rax,0x18(%r14)
  0x00007f8f8f7383f3: mov    $0x1,%edx
  0x00007f8f8f7383f8: mov    %rdx,0x20(%r14)
  0x00007f8f8f7383fc: add    $0x38,%r14
  0x00007f8f8f738400: mov    %r14,-0x28(%rbp)
  0x00007f8f8f738404: mov    0x1d0(%rax,%rbx,8),%rbx
  0x00007f8f8f73840c: mov    -0x28(%rbp),%rdx
  0x00007f8f8f738410: test   %rdx,%rdx
  0x00007f8f8f738413: je     0x00007f8f8f738560
  0x00007f8f8f738419: cmpb   $0xb,-0x38(%rdx)
  0x00007f8f8f73841d: jne    0x00007f8f8f738560
  0x00007f8f8f738423: add    $0x8,%rdx
  0x00007f8f8f738427: mov    -0x8(%rdx),%r13
  0x00007f8f8f73842b: sub    $0x0,%r13d
  0x00007f8f8f73842f: cmp    $0x2,%r13d
  0x00007f8f8f738433: jl     0x00007f8f8f738555
  0x00007f8f8f738439: mov    0x8(%rbx),%r13
  0x00007f8f8f73843d: movzwl 0x34(%r13),%r13d
  0x00007f8f8f738442: sub    (%rdx),%r13
  0x00007f8f8f738445: sub    $0x1,%r13d
  0x00007f8f8f738449: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f73844e: test   %r13,%r13
  0x00007f8f8f738451: jne    0x00007f8f8f73845d
  0x00007f8f8f738453: orq    $0x1,0x8(%rdx)
  0x00007f8f8f73845b: jmp    0x00007f8f8f7384b6
  0x00007f8f8f73845d: mov    0x8(%r13),%r13d
  0x00007f8f8f738461: movabs $0x800000000,%r12
  0x00007f8f8f73846b: add    %r12,%r13
  0x00007f8f8f73846e: xor    %r12,%r12
  0x00007f8f8f738471: xor    0x8(%rdx),%r13
  0x00007f8f8f738475: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f73847c: je     0x00007f8f8f7384b6
  0x00007f8f8f73847e: test   $0x2,%r13
  0x00007f8f8f738485: jne    0x00007f8f8f7384b6
  0x00007f8f8f738487: cmpq   $0x0,0x8(%rdx)
  0x00007f8f8f73848f: je     0x00007f8f8f7384b2
  0x00007f8f8f738491: cmpq   $0x1,0x8(%rdx)
  0x00007f8f8f738499: je     0x00007f8f8f7384b2
  0x00007f8f8f73849b: xor    0x8(%rdx),%r13
  0x00007f8f8f73849f: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f7384a6: je     0x00007f8f8f7384b6
  0x00007f8f8f7384a8: orq    $0x2,0x8(%rdx)
  0x00007f8f8f7384b0: jmp    0x00007f8f8f7384b6
  0x00007f8f8f7384b2: mov    %r13,0x8(%rdx)
  0x00007f8f8f7384b6: add    $0x10,%rdx
  0x00007f8f8f7384ba: mov    -0x18(%rdx),%r13
  0x00007f8f8f7384be: sub    $0x2,%r13d
  0x00007f8f8f7384c2: cmp    $0x2,%r13d
  0x00007f8f8f7384c6: jl     0x00007f8f8f738555
  0x00007f8f8f7384cc: mov    0x8(%rbx),%r13
  0x00007f8f8f7384d0: movzwl 0x34(%r13),%r13d
  0x00007f8f8f7384d5: sub    (%rdx),%r13
  0x00007f8f8f7384d8: sub    $0x1,%r13d
  0x00007f8f8f7384dc: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f7384e1: test   %r13,%r13
  0x00007f8f8f7384e4: jne    0x00007f8f8f7384f0
  0x00007f8f8f7384e6: orq    $0x1,0x8(%rdx)
  0x00007f8f8f7384ee: jmp    0x00007f8f8f738549
  0x00007f8f8f7384f0: mov    0x8(%r13),%r13d
  0x00007f8f8f7384f4: movabs $0x800000000,%r12
  0x00007f8f8f7384fe: add    %r12,%r13
  0x00007f8f8f738501: xor    %r12,%r12
  0x00007f8f8f738504: xor    0x8(%rdx),%r13
  0x00007f8f8f738508: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f73850f: je     0x00007f8f8f738549
  0x00007f8f8f738511: test   $0x2,%r13
  0x00007f8f8f738518: jne    0x00007f8f8f738549
  0x00007f8f8f73851a: cmpq   $0x0,0x8(%rdx)
  0x00007f8f8f738522: je     0x00007f8f8f738545
  0x00007f8f8f738524: cmpq   $0x1,0x8(%rdx)
  0x00007f8f8f73852c: je     0x00007f8f8f738545
  0x00007f8f8f73852e: xor    0x8(%rdx),%r13
  0x00007f8f8f738532: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f738539: je     0x00007f8f8f738549
  0x00007f8f8f73853b: orq    $0x2,0x8(%rdx)
  0x00007f8f8f738543: jmp    0x00007f8f8f738549
  0x00007f8f8f738545: mov    %r13,0x8(%rdx)
  0x00007f8f8f738549: add    $0x10,%rdx
  0x00007f8f8f73854d: mov    -0x28(%rdx),%r13
  0x00007f8f8f738551: sub    $0x4,%r13d
  0x00007f8f8f738555: shl    $0x3,%r13d
  0x00007f8f8f738559: add    %r13,%rdx
  0x00007f8f8f73855c: mov    %rdx,-0x28(%rbp)
  0x00007f8f8f738560: lea    0x8(%rsp),%r13
  0x00007f8f8f738565: mov    %r13,-0x10(%rbp)
  0x00007f8f8f738569: jmpq   *0x48(%rbx)
  0x00007f8f8f73856c: mov    %edx,%r14d
  0x00007f8f8f73856f: and    $0x100000,%r14d
  0x00007f8f8f738576: je     0x00007f8f8f73875c
  0x00007f8f8f73857c: mov    0x8(%rcx),%r14d
  0x00007f8f8f738580: movabs $0x800000000,%r12
  0x00007f8f8f73858a: add    %r12,%r14
  0x00007f8f8f73858d: xor    %r12,%r12
  0x00007f8f8f738590: cmp    %rax,%r14
  0x00007f8f8f738593: je     0x00007f8f8f7385dd
  0x00007f8f8f738599: mov    0x10(%rax),%r13d
  0x00007f8f8f73859d: cmp    (%r14,%r13,1),%rax
  0x00007f8f8f7385a1: je     0x00007f8f8f7385dd
  0x00007f8f8f7385a7: cmp    $0x20,%r13d
  0x00007f8f8f7385ab: jne    0x00007f8f8f7385d5
  0x00007f8f8f7385b1: push   %rax
  0x00007f8f8f7385b2: mov    %rax,%rax
  0x00007f8f8f7385b5: push   %rcx
  0x00007f8f8f7385b6: push   %rdi
  0x00007f8f8f7385b7: mov    0x28(%r14),%rdi
  0x00007f8f8f7385bb: mov    (%rdi),%ecx
  0x00007f8f8f7385bd: add    $0x8,%rdi
  0x00007f8f8f7385c1: test   %rax,%rax
  0x00007f8f8f7385c4: repnz scas %es:(%rdi),%rax
  0x00007f8f8f7385c7: pop    %rdi
  0x00007f8f8f7385c8: pop    %rcx
  0x00007f8f8f7385c9: pop    %rax
  0x00007f8f8f7385ca: jne    0x00007f8f8f7385d5
  0x00007f8f8f7385cc: mov    %rax,0x20(%r14)
  0x00007f8f8f7385d0: jmpq   0x00007f8f8f7385dd
  0x00007f8f8f7385d5: mov    %r14,%rdx
  0x00007f8f8f7385d8: jmpq   0x00007f8f8f738b9d
  0x00007f8f8f7385dd: mov    -0x28(%rbp),%rdx
  0x00007f8f8f7385e1: test   %rdx,%rdx
  0x00007f8f8f7385e4: je     0x00007f8f8f7385fc
  0x00007f8f8f7385ea: addq   $0x1,0x8(%rdx)
  0x00007f8f8f7385ef: sbbq   $0x0,0x8(%rdx)
  0x00007f8f8f7385f4: add    $0x38,%rdx
  0x00007f8f8f7385f8: mov    %rdx,-0x28(%rbp)
  0x00007f8f8f7385fc: mov    -0x28(%rbp),%rdx
  0x00007f8f8f738600: test   %rdx,%rdx
  0x00007f8f8f738603: je     0x00007f8f8f738750
  0x00007f8f8f738609: cmpb   $0xb,-0x38(%rdx)
  0x00007f8f8f73860d: jne    0x00007f8f8f738750
  0x00007f8f8f738613: add    $0x8,%rdx
  0x00007f8f8f738617: mov    -0x8(%rdx),%r13
  0x00007f8f8f73861b: sub    $0x0,%r13d
  0x00007f8f8f73861f: cmp    $0x2,%r13d
  0x00007f8f8f738623: jl     0x00007f8f8f738745
  0x00007f8f8f738629: mov    0x8(%rbx),%r13
  0x00007f8f8f73862d: movzwl 0x34(%r13),%r13d
  0x00007f8f8f738632: sub    (%rdx),%r13
  0x00007f8f8f738635: sub    $0x1,%r13d
  0x00007f8f8f738639: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f73863e: test   %r13,%r13
  0x00007f8f8f738641: jne    0x00007f8f8f73864d
  0x00007f8f8f738643: orq    $0x1,0x8(%rdx)
  0x00007f8f8f73864b: jmp    0x00007f8f8f7386a6
  0x00007f8f8f73864d: mov    0x8(%r13),%r13d
  0x00007f8f8f738651: movabs $0x800000000,%r12
  0x00007f8f8f73865b: add    %r12,%r13
  0x00007f8f8f73865e: xor    %r12,%r12
  0x00007f8f8f738661: xor    0x8(%rdx),%r13
  0x00007f8f8f738665: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f73866c: je     0x00007f8f8f7386a6
  0x00007f8f8f73866e: test   $0x2,%r13
  0x00007f8f8f738675: jne    0x00007f8f8f7386a6
  0x00007f8f8f738677: cmpq   $0x0,0x8(%rdx)
  0x00007f8f8f73867f: je     0x00007f8f8f7386a2
  0x00007f8f8f738681: cmpq   $0x1,0x8(%rdx)
  0x00007f8f8f738689: je     0x00007f8f8f7386a2
  0x00007f8f8f73868b: xor    0x8(%rdx),%r13
  0x00007f8f8f73868f: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f738696: je     0x00007f8f8f7386a6
  0x00007f8f8f738698: orq    $0x2,0x8(%rdx)
  0x00007f8f8f7386a0: jmp    0x00007f8f8f7386a6
  0x00007f8f8f7386a2: mov    %r13,0x8(%rdx)
  0x00007f8f8f7386a6: add    $0x10,%rdx
  0x00007f8f8f7386aa: mov    -0x18(%rdx),%r13
  0x00007f8f8f7386ae: sub    $0x2,%r13d
  0x00007f8f8f7386b2: cmp    $0x2,%r13d
  0x00007f8f8f7386b6: jl     0x00007f8f8f738745
  0x00007f8f8f7386bc: mov    0x8(%rbx),%r13
  0x00007f8f8f7386c0: movzwl 0x34(%r13),%r13d
  0x00007f8f8f7386c5: sub    (%rdx),%r13
  0x00007f8f8f7386c8: sub    $0x1,%r13d
  0x00007f8f8f7386cc: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f7386d1: test   %r13,%r13
  0x00007f8f8f7386d4: jne    0x00007f8f8f7386e0
  0x00007f8f8f7386d6: orq    $0x1,0x8(%rdx)
  0x00007f8f8f7386de: jmp    0x00007f8f8f738739
  0x00007f8f8f7386e0: mov    0x8(%r13),%r13d
  0x00007f8f8f7386e4: movabs $0x800000000,%r12
  0x00007f8f8f7386ee: add    %r12,%r13
  0x00007f8f8f7386f1: xor    %r12,%r12
  0x00007f8f8f7386f4: xor    0x8(%rdx),%r13
  0x00007f8f8f7386f8: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f7386ff: je     0x00007f8f8f738739
  0x00007f8f8f738701: test   $0x2,%r13
  0x00007f8f8f738708: jne    0x00007f8f8f738739
  0x00007f8f8f73870a: cmpq   $0x0,0x8(%rdx)
  0x00007f8f8f738712: je     0x00007f8f8f738735
  0x00007f8f8f738714: cmpq   $0x1,0x8(%rdx)
  0x00007f8f8f73871c: je     0x00007f8f8f738735
  0x00007f8f8f73871e: xor    0x8(%rdx),%r13
  0x00007f8f8f738722: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f738729: je     0x00007f8f8f738739
  0x00007f8f8f73872b: orq    $0x2,0x8(%rdx)
  0x00007f8f8f738733: jmp    0x00007f8f8f738739
  0x00007f8f8f738735: mov    %r13,0x8(%rdx)
  0x00007f8f8f738739: add    $0x10,%rdx
  0x00007f8f8f73873d: mov    -0x28(%rdx),%r13
  0x00007f8f8f738741: sub    $0x4,%r13d
  0x00007f8f8f738745: shl    $0x3,%r13d
  0x00007f8f8f738749: add    %r13,%rdx
  0x00007f8f8f73874c: mov    %rdx,-0x28(%rbp)
  0x00007f8f8f738750: lea    0x8(%rsp),%r13
  0x00007f8f8f738755: mov    %r13,-0x10(%rbp)
  0x00007f8f8f738759: jmpq   *0x48(%rbx)
  0x00007f8f8f73875c: mov    -0x38(%rbp),%r14
  0x00007f8f8f738760: mov    0x8(%rcx),%edx
  0x00007f8f8f738763: movabs $0x800000000,%r12
  0x00007f8f8f73876d: add    %r12,%rdx
  0x00007f8f8f738770: xor    %r12,%r12
  0x00007f8f8f738773: mov    %rbx,%rcx
  0x00007f8f8f738776: mov    0xc4(%rdx),%r14d
  0x00007f8f8f73877d: lea    0x1d0(%rdx,%r14,8),%r14
  0x00007f8f8f738785: mov    (%r14),%r13
  0x00007f8f8f738788: cmp    %r13,%rax
  0x00007f8f8f73878b: je     0x00007f8f8f7387a2
  0x00007f8f8f73878d: test   %r13,%r13
  0x00007f8f8f738790: je     0x00007f8f8f738b9d
  0x00007f8f8f738796: add    $0x10,%r14
  0x00007f8f8f73879a: mov    (%r14),%r13
  0x00007f8f8f73879d: cmp    %r13,%rax
  0x00007f8f8f7387a0: jne    0x00007f8f8f73878d
  0x00007f8f8f7387a2: mov    -0x40(%rbp),%r13
  0x00007f8f8f7387a6: mov    -0x28(%rbp),%r13
  0x00007f8f8f7387aa: test   %r13,%r13
  0x00007f8f8f7387ad: je     0x00007f8f8f73884a
  0x00007f8f8f7387b3: mov    0x18(%r13),%r14
  0x00007f8f8f7387b7: cmp    %rdx,%r14
  0x00007f8f8f7387ba: jne    0x00007f8f8f7387cf
  0x00007f8f8f7387c0: addq   $0x1,0x20(%r13)
  0x00007f8f8f7387c5: sbbq   $0x0,0x20(%r13)
  0x00007f8f8f7387ca: jmpq   0x00007f8f8f738842
  0x00007f8f8f7387cf: test   %r14,%r14
  0x00007f8f8f7387d2: je     0x00007f8f8f73881b
  0x00007f8f8f7387d8: mov    0x28(%r13),%r14
  0x00007f8f8f7387dc: cmp    %rdx,%r14
  0x00007f8f8f7387df: jne    0x00007f8f8f7387f4
  0x00007f8f8f7387e5: addq   $0x1,0x30(%r13)
  0x00007f8f8f7387ea: sbbq   $0x0,0x30(%r13)
  0x00007f8f8f7387ef: jmpq   0x00007f8f8f738842
  0x00007f8f8f7387f4: test   %r14,%r14
  0x00007f8f8f7387f7: je     0x00007f8f8f738808
  0x00007f8f8f7387f9: addq   $0x1,0x8(%r13)
  0x00007f8f8f7387fe: sbbq   $0x0,0x8(%r13)
  0x00007f8f8f738803: jmpq   0x00007f8f8f738842
  0x00007f8f8f738808: mov    %rdx,0x28(%r13)
  0x00007f8f8f73880c: mov    $0x1,%r14d
  0x00007f8f8f738812: mov    %r14,0x30(%r13)
  0x00007f8f8f738816: jmpq   0x00007f8f8f738842
  0x00007f8f8f73881b: cmp    0x28(%r13),%rdx
  0x00007f8f8f73881f: jne    0x00007f8f8f738834
  0x00007f8f8f738825: addq   $0x1,0x30(%r13)
  0x00007f8f8f73882a: sbbq   $0x0,0x30(%r13)
  0x00007f8f8f73882f: jmpq   0x00007f8f8f738842
  0x00007f8f8f738834: mov    %rdx,0x18(%r13)
  0x00007f8f8f738838: mov    $0x1,%r14d
  0x00007f8f8f73883e: mov    %r14,0x20(%r13)
  0x00007f8f8f738842: add    $0x38,%r13
  0x00007f8f8f738846: mov    %r13,-0x28(%rbp)
  0x00007f8f8f73884a: mov    0x8(%rbx),%rax
  0x00007f8f8f73884e: mov    0x8(%rax),%rax
  0x00007f8f8f738852: mov    0x18(%rax),%rax
  0x00007f8f8f738856: mov    0x24(%rbx),%ebx
  0x00007f8f8f738859: sub    $0xfffffff6,%ebx
  0x00007f8f8f73885c: neg    %ebx
  0x00007f8f8f73885e: mov    %rdx,%r14
  0x00007f8f8f738861: mov    0xc4(%r14),%r13d
  0x00007f8f8f738868: lea    0x1d0(%r14,%r13,8),%r13
  0x00007f8f8f738870: lea    (%r14,%rbx,8),%r14
  0x00007f8f8f738874: mov    0x0(%r13),%rbx
  0x00007f8f8f738878: cmp    %rbx,%rax
  0x00007f8f8f73887b: je     0x00007f8f8f738893
  0x00007f8f8f73887d: test   %rbx,%rbx
  0x00007f8f8f738880: je     0x00007f8f8f738b9d
  0x00007f8f8f738886: add    $0x10,%r13
  0x00007f8f8f73888a: mov    0x0(%r13),%rbx
  0x00007f8f8f73888e: cmp    %rbx,%rax
  0x00007f8f8f738891: jne    0x00007f8f8f73887d
  0x00007f8f8f738893: mov    0x8(%r13),%r13d
  0x00007f8f8f738897: mov    (%r14,%r13,1),%rbx
  0x00007f8f8f73889b: test   %rbx,%rbx
  0x00007f8f8f73889e: je     0x00007f8f8f738a7b
  0x00007f8f8f7388a4: mov    -0x28(%rbp),%rdx
  0x00007f8f8f7388a8: test   %rdx,%rdx
  0x00007f8f8f7388ab: je     0x00007f8f8f7389f8
  0x00007f8f8f7388b1: cmpb   $0xb,-0x38(%rdx)
  0x00007f8f8f7388b5: jne    0x00007f8f8f7389f8
  0x00007f8f8f7388bb: add    $0x8,%rdx
  0x00007f8f8f7388bf: mov    -0x8(%rdx),%r13
  0x00007f8f8f7388c3: sub    $0x0,%r13d
  0x00007f8f8f7388c7: cmp    $0x2,%r13d
  0x00007f8f8f7388cb: jl     0x00007f8f8f7389ed
  0x00007f8f8f7388d1: mov    0x8(%rbx),%r13
  0x00007f8f8f7388d5: movzwl 0x34(%r13),%r13d
  0x00007f8f8f7388da: sub    (%rdx),%r13
  0x00007f8f8f7388dd: sub    $0x1,%r13d
  0x00007f8f8f7388e1: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f7388e6: test   %r13,%r13
  0x00007f8f8f7388e9: jne    0x00007f8f8f7388f5
  0x00007f8f8f7388eb: orq    $0x1,0x8(%rdx)
  0x00007f8f8f7388f3: jmp    0x00007f8f8f73894e
  0x00007f8f8f7388f5: mov    0x8(%r13),%r13d
  0x00007f8f8f7388f9: movabs $0x800000000,%r12
  0x00007f8f8f738903: add    %r12,%r13
  0x00007f8f8f738906: xor    %r12,%r12
  0x00007f8f8f738909: xor    0x8(%rdx),%r13
  0x00007f8f8f73890d: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f738914: je     0x00007f8f8f73894e
  0x00007f8f8f738916: test   $0x2,%r13
  0x00007f8f8f73891d: jne    0x00007f8f8f73894e
  0x00007f8f8f73891f: cmpq   $0x0,0x8(%rdx)
  0x00007f8f8f738927: je     0x00007f8f8f73894a
  0x00007f8f8f738929: cmpq   $0x1,0x8(%rdx)
  0x00007f8f8f738931: je     0x00007f8f8f73894a
  0x00007f8f8f738933: xor    0x8(%rdx),%r13
  0x00007f8f8f738937: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f73893e: je     0x00007f8f8f73894e
  0x00007f8f8f738940: orq    $0x2,0x8(%rdx)
  0x00007f8f8f738948: jmp    0x00007f8f8f73894e
  0x00007f8f8f73894a: mov    %r13,0x8(%rdx)
  0x00007f8f8f73894e: add    $0x10,%rdx
  0x00007f8f8f738952: mov    -0x18(%rdx),%r13
  0x00007f8f8f738956: sub    $0x2,%r13d
  0x00007f8f8f73895a: cmp    $0x2,%r13d
  0x00007f8f8f73895e: jl     0x00007f8f8f7389ed
  0x00007f8f8f738964: mov    0x8(%rbx),%r13
  0x00007f8f8f738968: movzwl 0x34(%r13),%r13d
  0x00007f8f8f73896d: sub    (%rdx),%r13
  0x00007f8f8f738970: sub    $0x1,%r13d
  0x00007f8f8f738974: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f738979: test   %r13,%r13
  0x00007f8f8f73897c: jne    0x00007f8f8f738988
  0x00007f8f8f73897e: orq    $0x1,0x8(%rdx)
  0x00007f8f8f738986: jmp    0x00007f8f8f7389e1
  0x00007f8f8f738988: mov    0x8(%r13),%r13d
  0x00007f8f8f73898c: movabs $0x800000000,%r12
  0x00007f8f8f738996: add    %r12,%r13
  0x00007f8f8f738999: xor    %r12,%r12
  0x00007f8f8f73899c: xor    0x8(%rdx),%r13
  0x00007f8f8f7389a0: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f7389a7: je     0x00007f8f8f7389e1
  0x00007f8f8f7389a9: test   $0x2,%r13
  0x00007f8f8f7389b0: jne    0x00007f8f8f7389e1
  0x00007f8f8f7389b2: cmpq   $0x0,0x8(%rdx)
  0x00007f8f8f7389ba: je     0x00007f8f8f7389dd
  0x00007f8f8f7389bc: cmpq   $0x1,0x8(%rdx)
  0x00007f8f8f7389c4: je     0x00007f8f8f7389dd
  0x00007f8f8f7389c6: xor    0x8(%rdx),%r13
  0x00007f8f8f7389ca: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f7389d1: je     0x00007f8f8f7389e1
  0x00007f8f8f7389d3: orq    $0x2,0x8(%rdx)
  0x00007f8f8f7389db: jmp    0x00007f8f8f7389e1
  0x00007f8f8f7389dd: mov    %r13,0x8(%rdx)
  0x00007f8f8f7389e1: add    $0x10,%rdx
  0x00007f8f8f7389e5: mov    -0x28(%rdx),%r13
  0x00007f8f8f7389e9: sub    $0x4,%r13d
  0x00007f8f8f7389ed: shl    $0x3,%r13d
  0x00007f8f8f7389f1: add    %r13,%rdx
  0x00007f8f8f7389f4: mov    %rdx,-0x28(%rbp)
  0x00007f8f8f7389f8: lea    0x8(%rsp),%r13
  0x00007f8f8f7389fd: mov    %r13,-0x10(%rbp)
  0x00007f8f8f738a01: jmpq   *0x48(%rbx)
  0x00007f8f8f738a04: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f738a09: sub    $0x80,%rsp
  0x00007f8f8f738a10: mov    %rax,0x78(%rsp)
  0x00007f8f8f738a15: mov    %rcx,0x70(%rsp)
  0x00007f8f8f738a1a: mov    %rdx,0x68(%rsp)
  0x00007f8f8f738a1f: mov    %rbx,0x60(%rsp)
  0x00007f8f8f738a24: mov    %rbp,0x50(%rsp)
  0x00007f8f8f738a29: mov    %rsi,0x48(%rsp)
  0x00007f8f8f738a2e: mov    %rdi,0x40(%rsp)
  0x00007f8f8f738a33: mov    %r8,0x38(%rsp)
  0x00007f8f8f738a38: mov    %r9,0x30(%rsp)
  0x00007f8f8f738a3d: mov    %r10,0x28(%rsp)
  0x00007f8f8f738a42: mov    %r11,0x20(%rsp)
  0x00007f8f8f738a47: mov    %r12,0x18(%rsp)
  0x00007f8f8f738a4c: mov    %r13,0x10(%rsp)
  0x00007f8f8f738a51: mov    %r14,0x8(%rsp)
  0x00007f8f8f738a56: mov    %r15,(%rsp)
  0x00007f8f8f738a5a: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f738a64: movabs $0x7f8f8f738a04,%rsi
  0x00007f8f8f738a6e: mov    %rsp,%rdx
  0x00007f8f8f738a71: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f738a75: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f738a7a: hlt    
  0x00007f8f8f738a7b: pop    %rbx
  0x00007f8f8f738a7c: mov    -0x40(%rbp),%r13
  0x00007f8f8f738a80: mov    -0x38(%rbp),%r14
  0x00007f8f8f738a84: mov    %rdx,%rsi
  0x00007f8f8f738a87: mov    %rcx,%rdx
  0x00007f8f8f738a8a: callq  0x00007f8f8f738a94
  0x00007f8f8f738a8f: jmpq   0x00007f8f8f738b26
  0x00007f8f8f738a94: lea    0x8(%rsp),%rax
  0x00007f8f8f738a99: mov    %r13,-0x40(%rbp)
  0x00007f8f8f738a9d: mov    %r15,%rdi
  0x00007f8f8f738aa0: vzeroupper 
  0x00007f8f8f738aa3: mov    %rbp,0x330(%r15)
  0x00007f8f8f738aaa: mov    %rax,0x320(%r15)
  0x00007f8f8f738ab1: test   $0xf,%esp
  0x00007f8f8f738ab7: je     0x00007f8f8f738acf
  0x00007f8f8f738abd: sub    $0x8,%rsp
  0x00007f8f8f738ac1: callq  0x00007f8fad02b0d0 = InterpreterRuntime::throw_AbstractMethodErrorVerbose(JavaThread*, Klass*, Method*)
  0x00007f8f8f738ac6: add    $0x8,%rsp
  0x00007f8f8f738aca: jmpq   0x00007f8f8f738ad4
  0x00007f8f8f738acf: callq  0x00007f8fad02b0d0 = InterpreterRuntime::throw_AbstractMethodErrorVerbose(JavaThread*, Klass*, Method*)
  0x00007f8f8f738ad4: movabs $0x0,%r10
  0x00007f8f8f738ade: mov    %r10,0x320(%r15)
  0x00007f8f8f738ae5: movabs $0x0,%r10
  0x00007f8f8f738aef: mov    %r10,0x330(%r15)
  0x00007f8f8f738af6: movabs $0x0,%r10
  0x00007f8f8f738b00: mov    %r10,0x328(%r15)
  0x00007f8f8f738b07: vzeroupper 
  0x00007f8f8f738b0a: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f738b12: je     0x00007f8f8f738b1d
  0x00007f8f8f738b18: jmpq   0x00007f8f8f71a780
  0x00007f8f8f738b1d: mov    -0x40(%rbp),%r13
  0x00007f8f8f738b21: mov    -0x38(%rbp),%r14
  0x00007f8f8f738b25: retq   
  0x00007f8f8f738b26: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f738b2b: sub    $0x80,%rsp
  0x00007f8f8f738b32: mov    %rax,0x78(%rsp)
  0x00007f8f8f738b37: mov    %rcx,0x70(%rsp)
  0x00007f8f8f738b3c: mov    %rdx,0x68(%rsp)
  0x00007f8f8f738b41: mov    %rbx,0x60(%rsp)
  0x00007f8f8f738b46: mov    %rbp,0x50(%rsp)
  0x00007f8f8f738b4b: mov    %rsi,0x48(%rsp)
  0x00007f8f8f738b50: mov    %rdi,0x40(%rsp)
  0x00007f8f8f738b55: mov    %r8,0x38(%rsp)
  0x00007f8f8f738b5a: mov    %r9,0x30(%rsp)
  0x00007f8f8f738b5f: mov    %r10,0x28(%rsp)
  0x00007f8f8f738b64: mov    %r11,0x20(%rsp)
  0x00007f8f8f738b69: mov    %r12,0x18(%rsp)
  0x00007f8f8f738b6e: mov    %r13,0x10(%rsp)
  0x00007f8f8f738b73: mov    %r14,0x8(%rsp)
  0x00007f8f8f738b78: mov    %r15,(%rsp)
  0x00007f8f8f738b7c: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f738b86: movabs $0x7f8f8f738b26,%rsi
  0x00007f8f8f738b90: mov    %rsp,%rdx
  0x00007f8f8f738b93: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f738b97: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f738b9c: hlt    
  0x00007f8f8f738b9d: pop    %rbx
  0x00007f8f8f738b9e: mov    -0x40(%rbp),%r13
  0x00007f8f8f738ba2: mov    -0x38(%rbp),%r14
  0x00007f8f8f738ba6: mov    %rdx,%rsi
  0x00007f8f8f738ba9: callq  0x00007f8f8f738bb3
  0x00007f8f8f738bae: jmpq   0x00007f8f8f738c48
  0x00007f8f8f738bb3: mov    %rax,%rdx
  0x00007f8f8f738bb6: lea    0x8(%rsp),%rax
  0x00007f8f8f738bbb: mov    %r13,-0x40(%rbp)
  0x00007f8f8f738bbf: mov    %r15,%rdi
  0x00007f8f8f738bc2: vzeroupper 
  0x00007f8f8f738bc5: mov    %rbp,0x330(%r15)
  0x00007f8f8f738bcc: mov    %rax,0x320(%r15)
  0x00007f8f8f738bd3: test   $0xf,%esp
  0x00007f8f8f738bd9: je     0x00007f8f8f738bf1
  0x00007f8f8f738bdf: sub    $0x8,%rsp
  0x00007f8f8f738be3: callq  0x00007f8fad02b670 = InterpreterRuntime::throw_IncompatibleClassChangeErrorVerbose(JavaThread*, Klass*, Klass*)
  0x00007f8f8f738be8: add    $0x8,%rsp
  0x00007f8f8f738bec: jmpq   0x00007f8f8f738bf6
  0x00007f8f8f738bf1: callq  0x00007f8fad02b670 = InterpreterRuntime::throw_IncompatibleClassChangeErrorVerbose(JavaThread*, Klass*, Klass*)
  0x00007f8f8f738bf6: movabs $0x0,%r10
  0x00007f8f8f738c00: mov    %r10,0x320(%r15)
  0x00007f8f8f738c07: movabs $0x0,%r10
  0x00007f8f8f738c11: mov    %r10,0x330(%r15)
  0x00007f8f8f738c18: movabs $0x0,%r10
  0x00007f8f8f738c22: mov    %r10,0x328(%r15)
  0x00007f8f8f738c29: vzeroupper 
  0x00007f8f8f738c2c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f738c34: je     0x00007f8f8f738c3f
  0x00007f8f8f738c3a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f738c3f: mov    -0x40(%rbp),%r13
  0x00007f8f8f738c43: mov    -0x38(%rbp),%r14
  0x00007f8f8f738c47: retq   
  0x00007f8f8f738c48: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f738c4d: sub    $0x80,%rsp
  0x00007f8f8f738c54: mov    %rax,0x78(%rsp)
  0x00007f8f8f738c59: mov    %rcx,0x70(%rsp)
  0x00007f8f8f738c5e: mov    %rdx,0x68(%rsp)
  0x00007f8f8f738c63: mov    %rbx,0x60(%rsp)
  0x00007f8f8f738c68: mov    %rbp,0x50(%rsp)
  0x00007f8f8f738c6d: mov    %rsi,0x48(%rsp)
  0x00007f8f8f738c72: mov    %rdi,0x40(%rsp)
  0x00007f8f8f738c77: mov    %r8,0x38(%rsp)
  0x00007f8f8f738c7c: mov    %r9,0x30(%rsp)
  0x00007f8f8f738c81: mov    %r10,0x28(%rsp)
  0x00007f8f8f738c86: mov    %r11,0x20(%rsp)
  0x00007f8f8f738c8b: mov    %r12,0x18(%rsp)
  0x00007f8f8f738c90: mov    %r13,0x10(%rsp)
  0x00007f8f8f738c95: mov    %r14,0x8(%rsp)
  0x00007f8f8f738c9a: mov    %r15,(%rsp)
  0x00007f8f8f738c9e: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f738ca8: movabs $0x7f8f8f738c48,%rsi
  0x00007f8f8f738cb2: mov    %rsp,%rdx
  0x00007f8f8f738cb5: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f738cb9: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f738cbe: hlt    
  0x00007f8f8f738cbf: nop

----------------------------------------------------------------------
invokedynamic  186 invokedynamic  [0x00007f8f8f738ce0, 0x00007f8f8f738fe0]  768 bytes

  0x00007f8f8f738ce0: push   %rax
  0x00007f8f8f738ce1: jmpq   0x00007f8f8f738d1f
  0x00007f8f8f738ce6: sub    $0x8,%rsp
  0x00007f8f8f738cea: vmovss %xmm0,(%rsp)
  0x00007f8f8f738cef: jmpq   0x00007f8f8f738d1f
  0x00007f8f8f738cf4: sub    $0x10,%rsp
  0x00007f8f8f738cf8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f738cfd: jmpq   0x00007f8f8f738d1f
  0x00007f8f8f738d02: sub    $0x10,%rsp
  0x00007f8f8f738d06: mov    %rax,(%rsp)
  0x00007f8f8f738d0a: movabs $0x0,%r10
  0x00007f8f8f738d14: mov    %r10,0x8(%rsp)
  0x00007f8f8f738d19: jmpq   0x00007f8f8f738d1f
  0x00007f8f8f738d1e: push   %rax
  0x00007f8f8f738d1f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f738d23: mov    0x1(%r13),%edx
  0x00007f8f8f738d27: not    %edx
  0x00007f8f8f738d29: mov    -0x30(%rbp),%rcx
  0x00007f8f8f738d2d: shl    $0x2,%edx
  0x00007f8f8f738d30: mov    0x28(%rcx,%rdx,8),%ebx
  0x00007f8f8f738d34: shr    $0x10,%ebx
  0x00007f8f8f738d37: and    $0xff,%ebx
  0x00007f8f8f738d3d: cmp    $0xba,%ebx
  0x00007f8f8f738d43: je     0x00007f8f8f738dfa
  0x00007f8f8f738d49: mov    $0xba,%ebx
  0x00007f8f8f738d4e: callq  0x00007f8f8f738d58
  0x00007f8f8f738d53: jmpq   0x00007f8f8f738ded
  0x00007f8f8f738d58: mov    %rbx,%rsi
  0x00007f8f8f738d5b: lea    0x8(%rsp),%rax
  0x00007f8f8f738d60: mov    %r13,-0x40(%rbp)
  0x00007f8f8f738d64: mov    %r15,%rdi
  0x00007f8f8f738d67: vzeroupper 
  0x00007f8f8f738d6a: mov    %rbp,0x330(%r15)
  0x00007f8f8f738d71: mov    %rax,0x320(%r15)
  0x00007f8f8f738d78: test   $0xf,%esp
  0x00007f8f8f738d7e: je     0x00007f8f8f738d96
  0x00007f8f8f738d84: sub    $0x8,%rsp
  0x00007f8f8f738d88: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f738d8d: add    $0x8,%rsp
  0x00007f8f8f738d91: jmpq   0x00007f8f8f738d9b
  0x00007f8f8f738d96: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f738d9b: movabs $0x0,%r10
  0x00007f8f8f738da5: mov    %r10,0x320(%r15)
  0x00007f8f8f738dac: movabs $0x0,%r10
  0x00007f8f8f738db6: mov    %r10,0x330(%r15)
  0x00007f8f8f738dbd: movabs $0x0,%r10
  0x00007f8f8f738dc7: mov    %r10,0x328(%r15)
  0x00007f8f8f738dce: vzeroupper 
  0x00007f8f8f738dd1: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f738dd9: je     0x00007f8f8f738de4
  0x00007f8f8f738ddf: jmpq   0x00007f8f8f71a780
  0x00007f8f8f738de4: mov    -0x40(%rbp),%r13
  0x00007f8f8f738de8: mov    -0x38(%rbp),%r14
  0x00007f8f8f738dec: retq   
  0x00007f8f8f738ded: mov    0x1(%r13),%edx
  0x00007f8f8f738df1: not    %edx
  0x00007f8f8f738df3: mov    -0x30(%rbp),%rcx
  0x00007f8f8f738df7: shl    $0x2,%edx
  0x00007f8f8f738dfa: mov    0x30(%rcx,%rdx,8),%rbx
  0x00007f8f8f738dff: mov    0x38(%rcx,%rdx,8),%rax
  0x00007f8f8f738e04: mov    0x40(%rcx,%rdx,8),%edx
  0x00007f8f8f738e08: test   $0x1000000,%edx
  0x00007f8f8f738e0e: je     0x00007f8f8f738e39
  0x00007f8f8f738e14: push   %rbx
  0x00007f8f8f738e15: mov    %rax,%rbx
  0x00007f8f8f738e18: mov    -0x18(%rbp),%rax
  0x00007f8f8f738e1c: mov    0x8(%rax),%rax
  0x00007f8f8f738e20: mov    0x8(%rax),%rax
  0x00007f8f8f738e24: mov    0x10(%rax),%rax
  0x00007f8f8f738e28: mov    0x10(%rax),%rax
  0x00007f8f8f738e2c: mov    (%rax),%rax
  0x00007f8f8f738e2f: mov    0x10(%rax,%rbx,4),%eax
  0x00007f8f8f738e33: shl    $0x3,%rax
  0x00007f8f8f738e37: pop    %rbx
  0x00007f8f8f738e38: push   %rax
  0x00007f8f8f738e39: shr    $0x1c,%edx
  0x00007f8f8f738e3c: movabs $0x7f8fadbe7d80,%r10
  0x00007f8f8f738e46: mov    (%r10,%rdx,8),%rdx
  0x00007f8f8f738e4a: push   %rdx
  0x00007f8f8f738e4b: mov    -0x28(%rbp),%r13
  0x00007f8f8f738e4f: test   %r13,%r13
  0x00007f8f8f738e52: je     0x00007f8f8f738e6a
  0x00007f8f8f738e58: addq   $0x1,0x8(%r13)
  0x00007f8f8f738e5d: sbbq   $0x0,0x8(%r13)
  0x00007f8f8f738e62: add    $0x10,%r13
  0x00007f8f8f738e66: mov    %r13,-0x28(%rbp)
  0x00007f8f8f738e6a: mov    -0x28(%rbp),%rdx
  0x00007f8f8f738e6e: test   %rdx,%rdx
  0x00007f8f8f738e71: je     0x00007f8f8f738fbe
  0x00007f8f8f738e77: cmpb   $0xa,-0x10(%rdx)
  0x00007f8f8f738e7b: jne    0x00007f8f8f738fbe
  0x00007f8f8f738e81: add    $0x8,%rdx
  0x00007f8f8f738e85: mov    -0x8(%rdx),%r13
  0x00007f8f8f738e89: sub    $0x0,%r13d
  0x00007f8f8f738e8d: cmp    $0x2,%r13d
  0x00007f8f8f738e91: jl     0x00007f8f8f738fb3
  0x00007f8f8f738e97: mov    0x8(%rbx),%r13
  0x00007f8f8f738e9b: movzwl 0x34(%r13),%r13d
  0x00007f8f8f738ea0: sub    (%rdx),%r13
  0x00007f8f8f738ea3: sub    $0x1,%r13d
  0x00007f8f8f738ea7: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f738eac: test   %r13,%r13
  0x00007f8f8f738eaf: jne    0x00007f8f8f738ebb
  0x00007f8f8f738eb1: orq    $0x1,0x8(%rdx)
  0x00007f8f8f738eb9: jmp    0x00007f8f8f738f14
  0x00007f8f8f738ebb: mov    0x8(%r13),%r13d
  0x00007f8f8f738ebf: movabs $0x800000000,%r12
  0x00007f8f8f738ec9: add    %r12,%r13
  0x00007f8f8f738ecc: xor    %r12,%r12
  0x00007f8f8f738ecf: xor    0x8(%rdx),%r13
  0x00007f8f8f738ed3: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f738eda: je     0x00007f8f8f738f14
  0x00007f8f8f738edc: test   $0x2,%r13
  0x00007f8f8f738ee3: jne    0x00007f8f8f738f14
  0x00007f8f8f738ee5: cmpq   $0x0,0x8(%rdx)
  0x00007f8f8f738eed: je     0x00007f8f8f738f10
  0x00007f8f8f738eef: cmpq   $0x1,0x8(%rdx)
  0x00007f8f8f738ef7: je     0x00007f8f8f738f10
  0x00007f8f8f738ef9: xor    0x8(%rdx),%r13
  0x00007f8f8f738efd: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f738f04: je     0x00007f8f8f738f14
  0x00007f8f8f738f06: orq    $0x2,0x8(%rdx)
  0x00007f8f8f738f0e: jmp    0x00007f8f8f738f14
  0x00007f8f8f738f10: mov    %r13,0x8(%rdx)
  0x00007f8f8f738f14: add    $0x10,%rdx
  0x00007f8f8f738f18: mov    -0x18(%rdx),%r13
  0x00007f8f8f738f1c: sub    $0x2,%r13d
  0x00007f8f8f738f20: cmp    $0x2,%r13d
  0x00007f8f8f738f24: jl     0x00007f8f8f738fb3
  0x00007f8f8f738f2a: mov    0x8(%rbx),%r13
  0x00007f8f8f738f2e: movzwl 0x34(%r13),%r13d
  0x00007f8f8f738f33: sub    (%rdx),%r13
  0x00007f8f8f738f36: sub    $0x1,%r13d
  0x00007f8f8f738f3a: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f738f3f: test   %r13,%r13
  0x00007f8f8f738f42: jne    0x00007f8f8f738f4e
  0x00007f8f8f738f44: orq    $0x1,0x8(%rdx)
  0x00007f8f8f738f4c: jmp    0x00007f8f8f738fa7
  0x00007f8f8f738f4e: mov    0x8(%r13),%r13d
  0x00007f8f8f738f52: movabs $0x800000000,%r12
  0x00007f8f8f738f5c: add    %r12,%r13
  0x00007f8f8f738f5f: xor    %r12,%r12
  0x00007f8f8f738f62: xor    0x8(%rdx),%r13
  0x00007f8f8f738f66: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f738f6d: je     0x00007f8f8f738fa7
  0x00007f8f8f738f6f: test   $0x2,%r13
  0x00007f8f8f738f76: jne    0x00007f8f8f738fa7
  0x00007f8f8f738f78: cmpq   $0x0,0x8(%rdx)
  0x00007f8f8f738f80: je     0x00007f8f8f738fa3
  0x00007f8f8f738f82: cmpq   $0x1,0x8(%rdx)
  0x00007f8f8f738f8a: je     0x00007f8f8f738fa3
  0x00007f8f8f738f8c: xor    0x8(%rdx),%r13
  0x00007f8f8f738f90: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f738f97: je     0x00007f8f8f738fa7
  0x00007f8f8f738f99: orq    $0x2,0x8(%rdx)
  0x00007f8f8f738fa1: jmp    0x00007f8f8f738fa7
  0x00007f8f8f738fa3: mov    %r13,0x8(%rdx)
  0x00007f8f8f738fa7: add    $0x10,%rdx
  0x00007f8f8f738fab: mov    -0x28(%rdx),%r13
  0x00007f8f8f738faf: sub    $0x4,%r13d
  0x00007f8f8f738fb3: shl    $0x3,%r13d
  0x00007f8f8f738fb7: add    %r13,%rdx
  0x00007f8f8f738fba: mov    %rdx,-0x28(%rbp)
  0x00007f8f8f738fbe: lea    0x8(%rsp),%r13
  0x00007f8f8f738fc3: mov    %r13,-0x10(%rbp)
  0x00007f8f8f738fc7: jmpq   *0x48(%rbx)
  0x00007f8f8f738fca: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f738fd0: add    %al,(%rax)
  0x00007f8f8f738fd2: add    %al,(%rax)
  0x00007f8f8f738fd4: add    %al,(%rax)
  0x00007f8f8f738fd6: add    %al,(%rax)
  0x00007f8f8f738fd8: add    %al,(%rax)
  0x00007f8f8f738fda: add    %al,(%rax)
  0x00007f8f8f738fdc: add    %al,(%rax)
  0x00007f8f8f738fde: add    %al,(%rax)

----------------------------------------------------------------------
new  187 new  [0x00007f8f8f739000, 0x00007f8f8f739220]  544 bytes

  0x00007f8f8f739000: push   %rax
  0x00007f8f8f739001: jmpq   0x00007f8f8f73903f
  0x00007f8f8f739006: sub    $0x8,%rsp
  0x00007f8f8f73900a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73900f: jmpq   0x00007f8f8f73903f
  0x00007f8f8f739014: sub    $0x10,%rsp
  0x00007f8f8f739018: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73901d: jmpq   0x00007f8f8f73903f
  0x00007f8f8f739022: sub    $0x10,%rsp
  0x00007f8f8f739026: mov    %rax,(%rsp)
  0x00007f8f8f73902a: movabs $0x0,%r10
  0x00007f8f8f739034: mov    %r10,0x8(%rsp)
  0x00007f8f8f739039: jmpq   0x00007f8f8f73903f
  0x00007f8f8f73903e: push   %rax
  0x00007f8f8f73903f: movzwl 0x1(%r13),%edx
  0x00007f8f8f739044: bswap  %edx
  0x00007f8f8f739046: shr    $0x10,%edx
  0x00007f8f8f739049: mov    -0x18(%rbp),%rcx
  0x00007f8f8f73904d: mov    0x8(%rcx),%rcx
  0x00007f8f8f739051: mov    0x8(%rcx),%rcx
  0x00007f8f8f739055: mov    0x8(%rcx),%rax
  0x00007f8f8f739059: cmpb   $0x7,0x4(%rax,%rdx,1)
  0x00007f8f8f73905e: jne    0x00007f8f8f73912a
  0x00007f8f8f739064: mov    0x40(%rcx,%rdx,8),%dx
  0x00007f8f8f739069: mov    0x28(%rcx),%rcx
  0x00007f8f8f73906d: mov    0x8(%rcx,%rdx,8),%rcx
  0x00007f8f8f739072: push   %rcx
  0x00007f8f8f739073: cmpb   $0x4,0x18a(%rcx)
  0x00007f8f8f73907a: jne    0x00007f8f8f739129
  0x00007f8f8f739080: mov    0x8(%rcx),%edx
  0x00007f8f8f739083: test   $0x1,%edx
  0x00007f8f8f739089: jne    0x00007f8f8f739129
  0x00007f8f8f73908f: mov    0x118(%r15),%rax
  0x00007f8f8f739096: lea    (%rax,%rdx,1),%rbx
  0x00007f8f8f73909a: cmp    0x128(%r15),%rbx
  0x00007f8f8f7390a1: ja     0x00007f8f8f739129
  0x00007f8f8f7390a7: mov    %rbx,0x118(%r15)
  0x00007f8f8f7390ae: jmpq   0x00007f8f8f7390b3
  0x00007f8f8f7390b3: sub    $0x10,%rdx
  0x00007f8f8f7390b7: je     0x00007f8f8f7390cc
  0x00007f8f8f7390bd: xor    %ecx,%ecx
  0x00007f8f8f7390bf: shr    $0x3,%edx
  0x00007f8f8f7390c2: mov    %rcx,0x8(%rax,%rdx,8)
  0x00007f8f8f7390c7: dec    %rdx
  0x00007f8f8f7390ca: jne    0x00007f8f8f7390c2
  0x00007f8f8f7390cc: pop    %rcx
  0x00007f8f8f7390cd: mov    0xb8(%rcx),%rbx
  0x00007f8f8f7390d4: mov    %rbx,(%rax)
  0x00007f8f8f7390d7: xor    %esi,%esi
  0x00007f8f8f7390d9: mov    %esi,0xc(%rax)
  0x00007f8f8f7390dc: movabs $0x800000000,%r12
  0x00007f8f8f7390e6: sub    %r12,%rcx
  0x00007f8f8f7390e9: xor    %r12,%r12
  0x00007f8f8f7390ec: mov    %ecx,0x8(%rax)
  0x00007f8f8f7390ef: cmpb   $0x0,0x1e47e090(%rip)        # 0x00007f8fadbb7186
  0x00007f8f8f7390f6: je     0x00007f8f8f739124
  0x00007f8f8f7390fc: push   %rax
  0x00007f8f8f7390fd: mov    %rax,%rdi
  0x00007f8f8f739100: test   $0xf,%esp
  0x00007f8f8f739106: je     0x00007f8f8f73911e
  0x00007f8f8f73910c: sub    $0x8,%rsp
  0x00007f8f8f739110: callq  0x00007f8fad48e600 = SharedRuntime::dtrace_object_alloc(oopDesc*, int)
  0x00007f8f8f739115: add    $0x8,%rsp
  0x00007f8f8f739119: jmpq   0x00007f8f8f739123
  0x00007f8f8f73911e: callq  0x00007f8fad48e600 = SharedRuntime::dtrace_object_alloc(oopDesc*, int)
  0x00007f8f8f739123: pop    %rax
  0x00007f8f8f739124: jmpq   0x00007f8f8f7391f4
  0x00007f8f8f739129: pop    %rcx
  0x00007f8f8f73912a: mov    -0x18(%rbp),%rsi
  0x00007f8f8f73912e: mov    0x8(%rsi),%rsi
  0x00007f8f8f739132: mov    0x8(%rsi),%rsi
  0x00007f8f8f739136: movzwl 0x1(%r13),%edx
  0x00007f8f8f73913b: bswap  %edx
  0x00007f8f8f73913d: shr    $0x10,%edx
  0x00007f8f8f739140: callq  0x00007f8f8f73914a
  0x00007f8f8f739145: jmpq   0x00007f8f8f7391f4
  0x00007f8f8f73914a: lea    0x8(%rsp),%rax
  0x00007f8f8f73914f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f739153: mov    %r15,%rdi
  0x00007f8f8f739156: vzeroupper 
  0x00007f8f8f739159: mov    %rbp,0x330(%r15)
  0x00007f8f8f739160: mov    %rax,0x320(%r15)
  0x00007f8f8f739167: test   $0xf,%esp
  0x00007f8f8f73916d: je     0x00007f8f8f739185
  0x00007f8f8f739173: sub    $0x8,%rsp
  0x00007f8f8f739177: callq  0x00007f8fad027590 = InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)
  0x00007f8f8f73917c: add    $0x8,%rsp
  0x00007f8f8f739180: jmpq   0x00007f8f8f73918a
  0x00007f8f8f739185: callq  0x00007f8fad027590 = InterpreterRuntime::_new(JavaThread*, ConstantPool*, int)
  0x00007f8f8f73918a: movabs $0x0,%r10
  0x00007f8f8f739194: mov    %r10,0x320(%r15)
  0x00007f8f8f73919b: movabs $0x0,%r10
  0x00007f8f8f7391a5: mov    %r10,0x330(%r15)
  0x00007f8f8f7391ac: movabs $0x0,%r10
  0x00007f8f8f7391b6: mov    %r10,0x328(%r15)
  0x00007f8f8f7391bd: vzeroupper 
  0x00007f8f8f7391c0: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7391c8: je     0x00007f8f8f7391d3
  0x00007f8f8f7391ce: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7391d3: mov    0x380(%r15),%rax
  0x00007f8f8f7391da: movabs $0x0,%r10
  0x00007f8f8f7391e4: mov    %r10,0x380(%r15)
  0x00007f8f8f7391eb: mov    -0x40(%rbp),%r13
  0x00007f8f8f7391ef: mov    -0x38(%rbp),%r14
  0x00007f8f8f7391f3: retq   
  0x00007f8f8f7391f4: movzbl 0x3(%r13),%ebx
  0x00007f8f8f7391f9: add    $0x3,%r13
  0x00007f8f8f7391fd: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f739207: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73920b: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f739210: add    %al,(%rax)
  0x00007f8f8f739212: add    %al,(%rax)
  0x00007f8f8f739214: add    %al,(%rax)
  0x00007f8f8f739216: add    %al,(%rax)
  0x00007f8f8f739218: add    %al,(%rax)
  0x00007f8f8f73921a: add    %al,(%rax)
  0x00007f8f8f73921c: add    %al,(%rax)
  0x00007f8f8f73921e: add    %al,(%rax)

----------------------------------------------------------------------
newarray  188 newarray  [0x00007f8f8f739240, 0x00007f8f8f739320]  224 bytes

  0x00007f8f8f739240: mov    (%rsp),%eax
  0x00007f8f8f739243: add    $0x8,%rsp
  0x00007f8f8f739247: movzbl 0x1(%r13),%esi
  0x00007f8f8f73924c: callq  0x00007f8f8f739256
  0x00007f8f8f739251: jmpq   0x00007f8f8f739303
  0x00007f8f8f739256: mov    %rax,%rdx
  0x00007f8f8f739259: lea    0x8(%rsp),%rax
  0x00007f8f8f73925e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f739262: mov    %r15,%rdi
  0x00007f8f8f739265: vzeroupper 
  0x00007f8f8f739268: mov    %rbp,0x330(%r15)
  0x00007f8f8f73926f: mov    %rax,0x320(%r15)
  0x00007f8f8f739276: test   $0xf,%esp
  0x00007f8f8f73927c: je     0x00007f8f8f739294
  0x00007f8f8f739282: sub    $0x8,%rsp
  0x00007f8f8f739286: callq  0x00007f8fad027920 = InterpreterRuntime::newarray(JavaThread*, BasicType, int)
  0x00007f8f8f73928b: add    $0x8,%rsp
  0x00007f8f8f73928f: jmpq   0x00007f8f8f739299
  0x00007f8f8f739294: callq  0x00007f8fad027920 = InterpreterRuntime::newarray(JavaThread*, BasicType, int)
  0x00007f8f8f739299: movabs $0x0,%r10
  0x00007f8f8f7392a3: mov    %r10,0x320(%r15)
  0x00007f8f8f7392aa: movabs $0x0,%r10
  0x00007f8f8f7392b4: mov    %r10,0x330(%r15)
  0x00007f8f8f7392bb: movabs $0x0,%r10
  0x00007f8f8f7392c5: mov    %r10,0x328(%r15)
  0x00007f8f8f7392cc: vzeroupper 
  0x00007f8f8f7392cf: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7392d7: je     0x00007f8f8f7392e2
  0x00007f8f8f7392dd: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7392e2: mov    0x380(%r15),%rax
  0x00007f8f8f7392e9: movabs $0x0,%r10
  0x00007f8f8f7392f3: mov    %r10,0x380(%r15)
  0x00007f8f8f7392fa: mov    -0x40(%rbp),%r13
  0x00007f8f8f7392fe: mov    -0x38(%rbp),%r14
  0x00007f8f8f739302: retq   
  0x00007f8f8f739303: movzbl 0x2(%r13),%ebx
  0x00007f8f8f739308: add    $0x2,%r13
  0x00007f8f8f73930c: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f739316: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73931a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
anewarray  189 anewarray  [0x00007f8f8f739340, 0x00007f8f8f739440]  256 bytes

  0x00007f8f8f739340: mov    (%rsp),%eax
  0x00007f8f8f739343: add    $0x8,%rsp
  0x00007f8f8f739347: movzwl 0x1(%r13),%edx
  0x00007f8f8f73934c: bswap  %edx
  0x00007f8f8f73934e: shr    $0x10,%edx
  0x00007f8f8f739351: mov    -0x18(%rbp),%rsi
  0x00007f8f8f739355: mov    0x8(%rsi),%rsi
  0x00007f8f8f739359: mov    0x8(%rsi),%rsi
  0x00007f8f8f73935d: callq  0x00007f8f8f739367
  0x00007f8f8f739362: jmpq   0x00007f8f8f739414
  0x00007f8f8f739367: mov    %rax,%rcx
  0x00007f8f8f73936a: lea    0x8(%rsp),%rax
  0x00007f8f8f73936f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f739373: mov    %r15,%rdi
  0x00007f8f8f739376: vzeroupper 
  0x00007f8f8f739379: mov    %rbp,0x330(%r15)
  0x00007f8f8f739380: mov    %rax,0x320(%r15)
  0x00007f8f8f739387: test   $0xf,%esp
  0x00007f8f8f73938d: je     0x00007f8f8f7393a5
  0x00007f8f8f739393: sub    $0x8,%rsp
  0x00007f8f8f739397: callq  0x00007f8fad027b10 = InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int)
  0x00007f8f8f73939c: add    $0x8,%rsp
  0x00007f8f8f7393a0: jmpq   0x00007f8f8f7393aa
  0x00007f8f8f7393a5: callq  0x00007f8fad027b10 = InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int)
  0x00007f8f8f7393aa: movabs $0x0,%r10
  0x00007f8f8f7393b4: mov    %r10,0x320(%r15)
  0x00007f8f8f7393bb: movabs $0x0,%r10
  0x00007f8f8f7393c5: mov    %r10,0x330(%r15)
  0x00007f8f8f7393cc: movabs $0x0,%r10
  0x00007f8f8f7393d6: mov    %r10,0x328(%r15)
  0x00007f8f8f7393dd: vzeroupper 
  0x00007f8f8f7393e0: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7393e8: je     0x00007f8f8f7393f3
  0x00007f8f8f7393ee: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7393f3: mov    0x380(%r15),%rax
  0x00007f8f8f7393fa: movabs $0x0,%r10
  0x00007f8f8f739404: mov    %r10,0x380(%r15)
  0x00007f8f8f73940b: mov    -0x40(%rbp),%r13
  0x00007f8f8f73940f: mov    -0x38(%rbp),%r14
  0x00007f8f8f739413: retq   
  0x00007f8f8f739414: movzbl 0x3(%r13),%ebx
  0x00007f8f8f739419: add    $0x3,%r13
  0x00007f8f8f73941d: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f739427: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73942b: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f739430: add    %al,(%rax)
  0x00007f8f8f739432: add    %al,(%rax)
  0x00007f8f8f739434: add    %al,(%rax)
  0x00007f8f8f739436: add    %al,(%rax)
  0x00007f8f8f739438: add    %al,(%rax)
  0x00007f8f8f73943a: add    %al,(%rax)
  0x00007f8f8f73943c: add    %al,(%rax)
  0x00007f8f8f73943e: add    %al,(%rax)

----------------------------------------------------------------------
arraylength  190 arraylength  [0x00007f8f8f739460, 0x00007f8f8f739480]  32 bytes

  0x00007f8f8f739460: pop    %rax
  0x00007f8f8f739461: mov    0xc(%rax),%eax
  0x00007f8f8f739464: movzbl 0x1(%r13),%ebx
  0x00007f8f8f739469: inc    %r13
  0x00007f8f8f73946c: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f739476: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73947a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
athrow  191 athrow  [0x00007f8f8f7394a0, 0x00007f8f8f7394c0]  32 bytes

  0x00007f8f8f7394a0: pop    %rax
  0x00007f8f8f7394a1: cmp    (%rax),%rax
  0x00007f8f8f7394a4: jmpq   0x00007f8f8f727013
  0x00007f8f8f7394a9: nopl   0x0(%rax)
  0x00007f8f8f7394b0: add    %al,(%rax)
  0x00007f8f8f7394b2: add    %al,(%rax)
  0x00007f8f8f7394b4: add    %al,(%rax)
  0x00007f8f8f7394b6: add    %al,(%rax)
  0x00007f8f8f7394b8: add    %al,(%rax)
  0x00007f8f8f7394ba: add    %al,(%rax)
  0x00007f8f8f7394bc: add    %al,(%rax)
  0x00007f8f8f7394be: add    %al,(%rax)

----------------------------------------------------------------------
checkcast  192 checkcast  [0x00007f8f8f7394e0, 0x00007f8f8f739720]  576 bytes

  0x00007f8f8f7394e0: pop    %rax
  0x00007f8f8f7394e1: test   %rax,%rax
  0x00007f8f8f7394e4: je     0x00007f8f8f7396ee
  0x00007f8f8f7394ea: mov    -0x18(%rbp),%rcx
  0x00007f8f8f7394ee: mov    0x8(%rcx),%rcx
  0x00007f8f8f7394f2: mov    0x8(%rcx),%rcx
  0x00007f8f8f7394f6: mov    0x8(%rcx),%rdx
  0x00007f8f8f7394fa: movzwl 0x1(%r13),%ebx
  0x00007f8f8f7394ff: bswap  %ebx
  0x00007f8f8f739501: shr    $0x10,%ebx
  0x00007f8f8f739504: cmpb   $0x7,0x4(%rdx,%rbx,1)
  0x00007f8f8f739509: je     0x00007f8f8f7395c7
  0x00007f8f8f73950f: push   %rax
  0x00007f8f8f739510: callq  0x00007f8f8f73951a
  0x00007f8f8f739515: jmpq   0x00007f8f8f7395ac
  0x00007f8f8f73951a: lea    0x8(%rsp),%rax
  0x00007f8f8f73951f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f739523: mov    %r15,%rdi
  0x00007f8f8f739526: vzeroupper 
  0x00007f8f8f739529: mov    %rbp,0x330(%r15)
  0x00007f8f8f739530: mov    %rax,0x320(%r15)
  0x00007f8f8f739537: test   $0xf,%esp
  0x00007f8f8f73953d: je     0x00007f8f8f739555
  0x00007f8f8f739543: sub    $0x8,%rsp
  0x00007f8f8f739547: callq  0x00007f8fad0285c0 = InterpreterRuntime::quicken_io_cc(JavaThread*)
  0x00007f8f8f73954c: add    $0x8,%rsp
  0x00007f8f8f739550: jmpq   0x00007f8f8f73955a
  0x00007f8f8f739555: callq  0x00007f8fad0285c0 = InterpreterRuntime::quicken_io_cc(JavaThread*)
  0x00007f8f8f73955a: movabs $0x0,%r10
  0x00007f8f8f739564: mov    %r10,0x320(%r15)
  0x00007f8f8f73956b: movabs $0x0,%r10
  0x00007f8f8f739575: mov    %r10,0x330(%r15)
  0x00007f8f8f73957c: movabs $0x0,%r10
  0x00007f8f8f739586: mov    %r10,0x328(%r15)
  0x00007f8f8f73958d: vzeroupper 
  0x00007f8f8f739590: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f739598: je     0x00007f8f8f7395a3
  0x00007f8f8f73959e: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7395a3: mov    -0x40(%rbp),%r13
  0x00007f8f8f7395a7: mov    -0x38(%rbp),%r14
  0x00007f8f8f7395ab: retq   
  0x00007f8f8f7395ac: mov    0x388(%r15),%rax
  0x00007f8f8f7395b3: movabs $0x0,%r10
  0x00007f8f8f7395bd: mov    %r10,0x388(%r15)
  0x00007f8f8f7395c4: pop    %rdx
  0x00007f8f8f7395c5: jmp    0x00007f8f8f7395d8
  0x00007f8f8f7395c7: mov    %rax,%rdx
  0x00007f8f8f7395ca: mov    0x40(%rcx,%rbx,8),%bx
  0x00007f8f8f7395cf: mov    0x28(%rcx),%rcx
  0x00007f8f8f7395d3: mov    0x8(%rcx,%rbx,8),%rax
  0x00007f8f8f7395d8: mov    0x8(%rdx),%ebx
  0x00007f8f8f7395db: movabs $0x800000000,%r12
  0x00007f8f8f7395e5: add    %r12,%rbx
  0x00007f8f8f7395e8: xor    %r12,%r12
  0x00007f8f8f7395eb: mov    -0x28(%rbp),%rcx
  0x00007f8f8f7395ef: test   %rcx,%rcx
  0x00007f8f8f7395f2: je     0x00007f8f8f739682
  0x00007f8f8f7395f8: mov    0x18(%rcx),%rdi
  0x00007f8f8f7395fc: cmp    %rbx,%rdi
  0x00007f8f8f7395ff: jne    0x00007f8f8f739614
  0x00007f8f8f739605: addq   $0x1,0x20(%rcx)
  0x00007f8f8f73960a: sbbq   $0x0,0x20(%rcx)
  0x00007f8f8f73960f: jmpq   0x00007f8f8f73967a
  0x00007f8f8f739614: test   %rdi,%rdi
  0x00007f8f8f739617: je     0x00007f8f8f739654
  0x00007f8f8f73961d: mov    0x28(%rcx),%rdi
  0x00007f8f8f739621: cmp    %rbx,%rdi
  0x00007f8f8f739624: jne    0x00007f8f8f739639
  0x00007f8f8f73962a: addq   $0x1,0x30(%rcx)
  0x00007f8f8f73962f: sbbq   $0x0,0x30(%rcx)
  0x00007f8f8f739634: jmpq   0x00007f8f8f73967a
  0x00007f8f8f739639: test   %rdi,%rdi
  0x00007f8f8f73963c: jne    0x00007f8f8f73967a
  0x00007f8f8f739642: mov    %rbx,0x28(%rcx)
  0x00007f8f8f739646: mov    $0x1,%edi
  0x00007f8f8f73964b: mov    %rdi,0x30(%rcx)
  0x00007f8f8f73964f: jmpq   0x00007f8f8f73967a
  0x00007f8f8f739654: cmp    0x28(%rcx),%rbx
  0x00007f8f8f739658: jne    0x00007f8f8f73966d
  0x00007f8f8f73965e: addq   $0x1,0x30(%rcx)
  0x00007f8f8f739663: sbbq   $0x0,0x30(%rcx)
  0x00007f8f8f739668: jmpq   0x00007f8f8f73967a
  0x00007f8f8f73966d: mov    %rbx,0x18(%rcx)
  0x00007f8f8f739671: mov    $0x1,%edi
  0x00007f8f8f739676: mov    %rdi,0x20(%rcx)
  0x00007f8f8f73967a: add    $0x38,%rcx
  0x00007f8f8f73967e: mov    %rcx,-0x28(%rbp)
  0x00007f8f8f739682: cmp    %rax,%rbx
  0x00007f8f8f739685: je     0x00007f8f8f7396e6
  0x00007f8f8f73968b: mov    0x10(%rax),%ecx
  0x00007f8f8f73968e: cmp    (%rbx,%rcx,1),%rax
  0x00007f8f8f739692: je     0x00007f8f8f7396e6
  0x00007f8f8f739698: cmp    $0x20,%ecx
  0x00007f8f8f73969b: jne    0x00007f8f8f7396c3
  0x00007f8f8f7396a1: push   %rax
  0x00007f8f8f7396a2: mov    %rax,%rax
  0x00007f8f8f7396a5: push   %rdi
  0x00007f8f8f7396a6: mov    0x28(%rbx),%rdi
  0x00007f8f8f7396aa: mov    (%rdi),%ecx
  0x00007f8f8f7396ac: add    $0x8,%rdi
  0x00007f8f8f7396b0: test   %rax,%rax
  0x00007f8f8f7396b3: repnz scas %es:(%rdi),%rax
  0x00007f8f8f7396b6: pop    %rdi
  0x00007f8f8f7396b7: pop    %rax
  0x00007f8f8f7396b8: jne    0x00007f8f8f7396c3
  0x00007f8f8f7396ba: mov    %rax,0x20(%rbx)
  0x00007f8f8f7396be: jmpq   0x00007f8f8f7396e6
  0x00007f8f8f7396c3: mov    -0x28(%rbp),%rcx
  0x00007f8f8f7396c7: test   %rcx,%rcx
  0x00007f8f8f7396ca: je     0x00007f8f8f7396e0
  0x00007f8f8f7396d0: addq   $0xffffffffffffffff,-0x30(%rcx)
  0x00007f8f8f7396d5: js     0x00007f8f8f7396e0
  0x00007f8f8f7396db: addq   $0x1,-0x30(%rcx)
  0x00007f8f8f7396e0: push   %rdx
  0x00007f8f8f7396e1: jmpq   0x00007f8f8f7282b4
  0x00007f8f8f7396e6: mov    %rdx,%rax
  0x00007f8f8f7396e9: jmpq   0x00007f8f8f739707
  0x00007f8f8f7396ee: mov    -0x28(%rbp),%rcx
  0x00007f8f8f7396f2: test   %rcx,%rcx
  0x00007f8f8f7396f5: je     0x00007f8f8f739707
  0x00007f8f8f7396fb: orb    $0x1,0x1(%rcx)
  0x00007f8f8f7396ff: add    $0x38,%rcx
  0x00007f8f8f739703: mov    %rcx,-0x28(%rbp)
  0x00007f8f8f739707: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73970c: add    $0x3,%r13
  0x00007f8f8f739710: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f73971a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73971e: xchg   %ax,%ax

----------------------------------------------------------------------
instanceof  193 instanceof  [0x00007f8f8f739740, 0x00007f8f8f7399a0]  608 bytes

  0x00007f8f8f739740: pop    %rax
  0x00007f8f8f739741: test   %rax,%rax
  0x00007f8f8f739744: je     0x00007f8f8f73995e
  0x00007f8f8f73974a: mov    -0x18(%rbp),%rcx
  0x00007f8f8f73974e: mov    0x8(%rcx),%rcx
  0x00007f8f8f739752: mov    0x8(%rcx),%rcx
  0x00007f8f8f739756: mov    0x8(%rcx),%rdx
  0x00007f8f8f73975a: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73975f: bswap  %ebx
  0x00007f8f8f739761: shr    $0x10,%ebx
  0x00007f8f8f739764: cmpb   $0x7,0x4(%rdx,%rbx,1)
  0x00007f8f8f739769: je     0x00007f8f8f73983a
  0x00007f8f8f73976f: push   %rax
  0x00007f8f8f739770: callq  0x00007f8f8f73977a
  0x00007f8f8f739775: jmpq   0x00007f8f8f73980c
  0x00007f8f8f73977a: lea    0x8(%rsp),%rax
  0x00007f8f8f73977f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f739783: mov    %r15,%rdi
  0x00007f8f8f739786: vzeroupper 
  0x00007f8f8f739789: mov    %rbp,0x330(%r15)
  0x00007f8f8f739790: mov    %rax,0x320(%r15)
  0x00007f8f8f739797: test   $0xf,%esp
  0x00007f8f8f73979d: je     0x00007f8f8f7397b5
  0x00007f8f8f7397a3: sub    $0x8,%rsp
  0x00007f8f8f7397a7: callq  0x00007f8fad0285c0 = InterpreterRuntime::quicken_io_cc(JavaThread*)
  0x00007f8f8f7397ac: add    $0x8,%rsp
  0x00007f8f8f7397b0: jmpq   0x00007f8f8f7397ba
  0x00007f8f8f7397b5: callq  0x00007f8fad0285c0 = InterpreterRuntime::quicken_io_cc(JavaThread*)
  0x00007f8f8f7397ba: movabs $0x0,%r10
  0x00007f8f8f7397c4: mov    %r10,0x320(%r15)
  0x00007f8f8f7397cb: movabs $0x0,%r10
  0x00007f8f8f7397d5: mov    %r10,0x330(%r15)
  0x00007f8f8f7397dc: movabs $0x0,%r10
  0x00007f8f8f7397e6: mov    %r10,0x328(%r15)
  0x00007f8f8f7397ed: vzeroupper 
  0x00007f8f8f7397f0: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7397f8: je     0x00007f8f8f739803
  0x00007f8f8f7397fe: jmpq   0x00007f8f8f71a780
  0x00007f8f8f739803: mov    -0x40(%rbp),%r13
  0x00007f8f8f739807: mov    -0x38(%rbp),%r14
  0x00007f8f8f73980b: retq   
  0x00007f8f8f73980c: mov    0x388(%r15),%rax
  0x00007f8f8f739813: movabs $0x0,%r10
  0x00007f8f8f73981d: mov    %r10,0x388(%r15)
  0x00007f8f8f739824: pop    %rdx
  0x00007f8f8f739825: mov    0x8(%rdx),%edx
  0x00007f8f8f739828: movabs $0x800000000,%r12
  0x00007f8f8f739832: add    %r12,%rdx
  0x00007f8f8f739835: xor    %r12,%r12
  0x00007f8f8f739838: jmp    0x00007f8f8f73985b
  0x00007f8f8f73983a: mov    0x8(%rax),%edx
  0x00007f8f8f73983d: movabs $0x800000000,%r12
  0x00007f8f8f739847: add    %r12,%rdx
  0x00007f8f8f73984a: xor    %r12,%r12
  0x00007f8f8f73984d: mov    0x40(%rcx,%rbx,8),%bx
  0x00007f8f8f739852: mov    0x28(%rcx),%rcx
  0x00007f8f8f739856: mov    0x8(%rcx,%rbx,8),%rax
  0x00007f8f8f73985b: mov    -0x28(%rbp),%rcx
  0x00007f8f8f73985f: test   %rcx,%rcx
  0x00007f8f8f739862: je     0x00007f8f8f7398f2
  0x00007f8f8f739868: mov    0x18(%rcx),%rdi
  0x00007f8f8f73986c: cmp    %rdx,%rdi
  0x00007f8f8f73986f: jne    0x00007f8f8f739884
  0x00007f8f8f739875: addq   $0x1,0x20(%rcx)
  0x00007f8f8f73987a: sbbq   $0x0,0x20(%rcx)
  0x00007f8f8f73987f: jmpq   0x00007f8f8f7398ea
  0x00007f8f8f739884: test   %rdi,%rdi
  0x00007f8f8f739887: je     0x00007f8f8f7398c4
  0x00007f8f8f73988d: mov    0x28(%rcx),%rdi
  0x00007f8f8f739891: cmp    %rdx,%rdi
  0x00007f8f8f739894: jne    0x00007f8f8f7398a9
  0x00007f8f8f73989a: addq   $0x1,0x30(%rcx)
  0x00007f8f8f73989f: sbbq   $0x0,0x30(%rcx)
  0x00007f8f8f7398a4: jmpq   0x00007f8f8f7398ea
  0x00007f8f8f7398a9: test   %rdi,%rdi
  0x00007f8f8f7398ac: jne    0x00007f8f8f7398ea
  0x00007f8f8f7398b2: mov    %rdx,0x28(%rcx)
  0x00007f8f8f7398b6: mov    $0x1,%edi
  0x00007f8f8f7398bb: mov    %rdi,0x30(%rcx)
  0x00007f8f8f7398bf: jmpq   0x00007f8f8f7398ea
  0x00007f8f8f7398c4: cmp    0x28(%rcx),%rdx
  0x00007f8f8f7398c8: jne    0x00007f8f8f7398dd
  0x00007f8f8f7398ce: addq   $0x1,0x30(%rcx)
  0x00007f8f8f7398d3: sbbq   $0x0,0x30(%rcx)
  0x00007f8f8f7398d8: jmpq   0x00007f8f8f7398ea
  0x00007f8f8f7398dd: mov    %rdx,0x18(%rcx)
  0x00007f8f8f7398e1: mov    $0x1,%edi
  0x00007f8f8f7398e6: mov    %rdi,0x20(%rcx)
  0x00007f8f8f7398ea: add    $0x38,%rcx
  0x00007f8f8f7398ee: mov    %rcx,-0x28(%rbp)
  0x00007f8f8f7398f2: cmp    %rax,%rdx
  0x00007f8f8f7398f5: je     0x00007f8f8f739954
  0x00007f8f8f7398fb: mov    0x10(%rax),%ecx
  0x00007f8f8f7398fe: cmp    (%rdx,%rcx,1),%rax
  0x00007f8f8f739902: je     0x00007f8f8f739954
  0x00007f8f8f739908: cmp    $0x20,%ecx
  0x00007f8f8f73990b: jne    0x00007f8f8f739933
  0x00007f8f8f739911: push   %rax
  0x00007f8f8f739912: mov    %rax,%rax
  0x00007f8f8f739915: push   %rdi
  0x00007f8f8f739916: mov    0x28(%rdx),%rdi
  0x00007f8f8f73991a: mov    (%rdi),%ecx
  0x00007f8f8f73991c: add    $0x8,%rdi
  0x00007f8f8f739920: test   %rax,%rax
  0x00007f8f8f739923: repnz scas %es:(%rdi),%rax
  0x00007f8f8f739926: pop    %rdi
  0x00007f8f8f739927: pop    %rax
  0x00007f8f8f739928: jne    0x00007f8f8f739933
  0x00007f8f8f73992a: mov    %rax,0x20(%rdx)
  0x00007f8f8f73992e: jmpq   0x00007f8f8f739954
  0x00007f8f8f739933: mov    -0x28(%rbp),%rcx
  0x00007f8f8f739937: test   %rcx,%rcx
  0x00007f8f8f73993a: je     0x00007f8f8f739950
  0x00007f8f8f739940: addq   $0xffffffffffffffff,-0x30(%rcx)
  0x00007f8f8f739945: js     0x00007f8f8f739950
  0x00007f8f8f73994b: addq   $0x1,-0x30(%rcx)
  0x00007f8f8f739950: xor    %eax,%eax
  0x00007f8f8f739952: jmp    0x00007f8f8f739977
  0x00007f8f8f739954: mov    $0x1,%eax
  0x00007f8f8f739959: jmpq   0x00007f8f8f739977
  0x00007f8f8f73995e: mov    -0x28(%rbp),%rcx
  0x00007f8f8f739962: test   %rcx,%rcx
  0x00007f8f8f739965: je     0x00007f8f8f739977
  0x00007f8f8f73996b: orb    $0x1,0x1(%rcx)
  0x00007f8f8f73996f: add    $0x38,%rcx
  0x00007f8f8f739973: mov    %rcx,-0x28(%rbp)
  0x00007f8f8f739977: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73997c: add    $0x3,%r13
  0x00007f8f8f739980: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73998a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73998e: xchg   %ax,%ax
  0x00007f8f8f739990: add    %al,(%rax)
  0x00007f8f8f739992: add    %al,(%rax)
  0x00007f8f8f739994: add    %al,(%rax)
  0x00007f8f8f739996: add    %al,(%rax)
  0x00007f8f8f739998: add    %al,(%rax)
  0x00007f8f8f73999a: add    %al,(%rax)
  0x00007f8f8f73999c: add    %al,(%rax)
  0x00007f8f8f73999e: add    %al,(%rax)

----------------------------------------------------------------------
monitorenter  194 monitorenter  [0x00007f8f8f7399c0, 0x00007f8f8f739be0]  544 bytes

  0x00007f8f8f7399c0: pop    %rax
  0x00007f8f8f7399c1: cmp    (%rax),%rax
  0x00007f8f8f7399c4: xor    %esi,%esi
  0x00007f8f8f7399c6: mov    -0x48(%rbp),%rcx
  0x00007f8f8f7399ca: lea    -0x48(%rbp),%rdx
  0x00007f8f8f7399ce: jmp    0x00007f8f8f7399e6
  0x00007f8f8f7399d0: cmpq   $0x0,0x8(%rcx)
  0x00007f8f8f7399d8: cmove  %rcx,%rsi
  0x00007f8f8f7399dc: cmp    0x8(%rcx),%rax
  0x00007f8f8f7399e0: je     0x00007f8f8f7399eb
  0x00007f8f8f7399e2: add    $0x10,%rcx
  0x00007f8f8f7399e6: cmp    %rdx,%rcx
  0x00007f8f8f7399e9: jne    0x00007f8f8f7399d0
  0x00007f8f8f7399eb: test   %rsi,%rsi
  0x00007f8f8f7399ee: jne    0x00007f8f8f739a1c
  0x00007f8f8f7399f4: mov    -0x48(%rbp),%rsi
  0x00007f8f8f7399f8: sub    $0x10,%rsp
  0x00007f8f8f7399fc: sub    $0x10,%rsi
  0x00007f8f8f739a00: mov    %rsp,%rcx
  0x00007f8f8f739a03: mov    %rsi,-0x48(%rbp)
  0x00007f8f8f739a07: jmpq   0x00007f8f8f739a17
  0x00007f8f8f739a0c: mov    0x10(%rcx),%rdx
  0x00007f8f8f739a10: mov    %rdx,(%rcx)
  0x00007f8f8f739a13: add    $0x8,%rcx
  0x00007f8f8f739a17: cmp    %rsi,%rcx
  0x00007f8f8f739a1a: jne    0x00007f8f8f739a0c
  0x00007f8f8f739a1c: inc    %r13
  0x00007f8f8f739a1f: mov    %rax,0x8(%rsi)
  0x00007f8f8f739a23: mov    0x8(%rsi),%rcx
  0x00007f8f8f739a27: mov    (%rcx),%rax
  0x00007f8f8f739a2a: mov    %rax,%rbx
  0x00007f8f8f739a2d: and    $0x7,%rbx
  0x00007f8f8f739a31: cmp    $0x5,%rbx
  0x00007f8f8f739a35: jne    0x00007f8f8f739ae0
  0x00007f8f8f739a3b: mov    0x8(%rcx),%ebx
  0x00007f8f8f739a3e: movabs $0x800000000,%r12
  0x00007f8f8f739a48: add    %r12,%rbx
  0x00007f8f8f739a4b: xor    %r12,%r12
  0x00007f8f8f739a4e: mov    0xb8(%rbx),%rbx
  0x00007f8f8f739a55: or     %r15,%rbx
  0x00007f8f8f739a58: xor    %rax,%rbx
  0x00007f8f8f739a5b: and    $0xffffffffffffff87,%rbx
  0x00007f8f8f739a5f: je     0x00007f8f8f739ba5
  0x00007f8f8f739a65: test   $0x7,%rbx
  0x00007f8f8f739a6c: jne    0x00007f8f8f739ac1
  0x00007f8f8f739a6e: test   $0x300,%rbx
  0x00007f8f8f739a75: jne    0x00007f8f8f739a94
  0x00007f8f8f739a77: and    $0x37f,%rax
  0x00007f8f8f739a7e: mov    %rax,%rbx
  0x00007f8f8f739a81: or     %r15,%rbx
  0x00007f8f8f739a84: lock cmpxchg %rbx,(%rcx)
  0x00007f8f8f739a89: jne    0x00007f8f8f739b09
  0x00007f8f8f739a8f: jmpq   0x00007f8f8f739ba5
  0x00007f8f8f739a94: mov    0x8(%rcx),%ebx
  0x00007f8f8f739a97: movabs $0x800000000,%r12
  0x00007f8f8f739aa1: add    %r12,%rbx
  0x00007f8f8f739aa4: xor    %r12,%r12
  0x00007f8f8f739aa7: mov    0xb8(%rbx),%rbx
  0x00007f8f8f739aae: or     %r15,%rbx
  0x00007f8f8f739ab1: lock cmpxchg %rbx,(%rcx)
  0x00007f8f8f739ab6: jne    0x00007f8f8f739b09
  0x00007f8f8f739abc: jmpq   0x00007f8f8f739ba5
  0x00007f8f8f739ac1: mov    0x8(%rcx),%ebx
  0x00007f8f8f739ac4: movabs $0x800000000,%r12
  0x00007f8f8f739ace: add    %r12,%rbx
  0x00007f8f8f739ad1: xor    %r12,%r12
  0x00007f8f8f739ad4: mov    0xb8(%rbx),%rbx
  0x00007f8f8f739adb: lock cmpxchg %rbx,(%rcx)
  0x00007f8f8f739ae0: mov    $0x1,%eax
  0x00007f8f8f739ae5: or     (%rcx),%rax
  0x00007f8f8f739ae8: mov    %rax,(%rsi)
  0x00007f8f8f739aeb: lock cmpxchg %rsi,(%rcx)
  0x00007f8f8f739af0: je     0x00007f8f8f739ba5
  0x00007f8f8f739af6: sub    %rsp,%rax
  0x00007f8f8f739af9: and    $0xfffffffffffff007,%rax
  0x00007f8f8f739b00: mov    %rax,(%rsi)
  0x00007f8f8f739b03: je     0x00007f8f8f739ba5
  0x00007f8f8f739b09: callq  0x00007f8f8f739b13
  0x00007f8f8f739b0e: jmpq   0x00007f8f8f739ba5
  0x00007f8f8f739b13: lea    0x8(%rsp),%rax
  0x00007f8f8f739b18: mov    %r13,-0x40(%rbp)
  0x00007f8f8f739b1c: mov    %r15,%rdi
  0x00007f8f8f739b1f: vzeroupper 
  0x00007f8f8f739b22: mov    %rbp,0x330(%r15)
  0x00007f8f8f739b29: mov    %rax,0x320(%r15)
  0x00007f8f8f739b30: test   $0xf,%esp
  0x00007f8f8f739b36: je     0x00007f8f8f739b4e
  0x00007f8f8f739b3c: sub    $0x8,%rsp
  0x00007f8f8f739b40: callq  0x00007f8fad02c250 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x00007f8f8f739b45: add    $0x8,%rsp
  0x00007f8f8f739b49: jmpq   0x00007f8f8f739b53
  0x00007f8f8f739b4e: callq  0x00007f8fad02c250 = InterpreterRuntime::monitorenter(JavaThread*, BasicObjectLock*)
  0x00007f8f8f739b53: movabs $0x0,%r10
  0x00007f8f8f739b5d: mov    %r10,0x320(%r15)
  0x00007f8f8f739b64: movabs $0x0,%r10
  0x00007f8f8f739b6e: mov    %r10,0x330(%r15)
  0x00007f8f8f739b75: movabs $0x0,%r10
  0x00007f8f8f739b7f: mov    %r10,0x328(%r15)
  0x00007f8f8f739b86: vzeroupper 
  0x00007f8f8f739b89: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f739b91: je     0x00007f8f8f739b9c
  0x00007f8f8f739b97: jmpq   0x00007f8f8f71a780
  0x00007f8f8f739b9c: mov    -0x40(%rbp),%r13
  0x00007f8f8f739ba0: mov    -0x38(%rbp),%r14
  0x00007f8f8f739ba4: retq   
  0x00007f8f8f739ba5: mov    %r13,-0x40(%rbp)
  0x00007f8f8f739ba9: mov    %eax,-0x14000(%rsp)
  0x00007f8f8f739bb0: movzbl 0x0(%r13),%ebx
  0x00007f8f8f739bb5: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f739bbf: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f739bc3: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f739bc8: add    %al,(%rax)
  0x00007f8f8f739bca: add    %al,(%rax)
  0x00007f8f8f739bcc: add    %al,(%rax)
  0x00007f8f8f739bce: add    %al,(%rax)
  0x00007f8f8f739bd0: add    %al,(%rax)
  0x00007f8f8f739bd2: add    %al,(%rax)
  0x00007f8f8f739bd4: add    %al,(%rax)
  0x00007f8f8f739bd6: add    %al,(%rax)
  0x00007f8f8f739bd8: add    %al,(%rax)
  0x00007f8f8f739bda: add    %al,(%rax)
  0x00007f8f8f739bdc: add    %al,(%rax)
  0x00007f8f8f739bde: add    %al,(%rax)

----------------------------------------------------------------------
monitorexit  195 monitorexit  [0x00007f8f8f739c00, 0x00007f8f8f739e40]  576 bytes

  0x00007f8f8f739c00: pop    %rax
  0x00007f8f8f739c01: cmp    (%rax),%rax
  0x00007f8f8f739c04: mov    -0x48(%rbp),%rsi
  0x00007f8f8f739c08: lea    -0x48(%rbp),%rdx
  0x00007f8f8f739c0c: jmp    0x00007f8f8f739c1c
  0x00007f8f8f739c0e: cmp    0x8(%rsi),%rax
  0x00007f8f8f739c12: je     0x00007f8f8f739d34
  0x00007f8f8f739c18: add    $0x10,%rsi
  0x00007f8f8f739c1c: cmp    %rdx,%rsi
  0x00007f8f8f739c1f: jne    0x00007f8f8f739c0e
  0x00007f8f8f739c21: callq  0x00007f8f8f739c2b
  0x00007f8f8f739c26: jmpq   0x00007f8f8f739cbd
  0x00007f8f8f739c2b: lea    0x8(%rsp),%rax
  0x00007f8f8f739c30: mov    %r13,-0x40(%rbp)
  0x00007f8f8f739c34: mov    %r15,%rdi
  0x00007f8f8f739c37: vzeroupper 
  0x00007f8f8f739c3a: mov    %rbp,0x330(%r15)
  0x00007f8f8f739c41: mov    %rax,0x320(%r15)
  0x00007f8f8f739c48: test   $0xf,%esp
  0x00007f8f8f739c4e: je     0x00007f8f8f739c66
  0x00007f8f8f739c54: sub    $0x8,%rsp
  0x00007f8f8f739c58: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f739c5d: add    $0x8,%rsp
  0x00007f8f8f739c61: jmpq   0x00007f8f8f739c6b
  0x00007f8f8f739c66: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f739c6b: movabs $0x0,%r10
  0x00007f8f8f739c75: mov    %r10,0x320(%r15)
  0x00007f8f8f739c7c: movabs $0x0,%r10
  0x00007f8f8f739c86: mov    %r10,0x330(%r15)
  0x00007f8f8f739c8d: movabs $0x0,%r10
  0x00007f8f8f739c97: mov    %r10,0x328(%r15)
  0x00007f8f8f739c9e: vzeroupper 
  0x00007f8f8f739ca1: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f739ca9: je     0x00007f8f8f739cb4
  0x00007f8f8f739caf: jmpq   0x00007f8f8f71a780
  0x00007f8f8f739cb4: mov    -0x40(%rbp),%r13
  0x00007f8f8f739cb8: mov    -0x38(%rbp),%r14
  0x00007f8f8f739cbc: retq   
  0x00007f8f8f739cbd: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f739cc2: sub    $0x80,%rsp
  0x00007f8f8f739cc9: mov    %rax,0x78(%rsp)
  0x00007f8f8f739cce: mov    %rcx,0x70(%rsp)
  0x00007f8f8f739cd3: mov    %rdx,0x68(%rsp)
  0x00007f8f8f739cd8: mov    %rbx,0x60(%rsp)
  0x00007f8f8f739cdd: mov    %rbp,0x50(%rsp)
  0x00007f8f8f739ce2: mov    %rsi,0x48(%rsp)
  0x00007f8f8f739ce7: mov    %rdi,0x40(%rsp)
  0x00007f8f8f739cec: mov    %r8,0x38(%rsp)
  0x00007f8f8f739cf1: mov    %r9,0x30(%rsp)
  0x00007f8f8f739cf6: mov    %r10,0x28(%rsp)
  0x00007f8f8f739cfb: mov    %r11,0x20(%rsp)
  0x00007f8f8f739d00: mov    %r12,0x18(%rsp)
  0x00007f8f8f739d05: mov    %r13,0x10(%rsp)
  0x00007f8f8f739d0a: mov    %r14,0x8(%rsp)
  0x00007f8f8f739d0f: mov    %r15,(%rsp)
  0x00007f8f8f739d13: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f739d1d: movabs $0x7f8f8f739cbd,%rsi
  0x00007f8f8f739d27: mov    %rsp,%rdx
  0x00007f8f8f739d2a: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f739d2e: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f739d33: hlt    
  0x00007f8f8f739d34: push   %rax
  0x00007f8f8f739d35: mov    %r13,-0x40(%rbp)
  0x00007f8f8f739d39: lea    (%rsi),%rax
  0x00007f8f8f739d3c: mov    0x8(%rsi),%rcx
  0x00007f8f8f739d40: movq   $0x0,0x8(%rsi)
  0x00007f8f8f739d48: mov    (%rcx),%rdx
  0x00007f8f8f739d4b: and    $0x7,%rdx
  0x00007f8f8f739d4f: cmp    $0x5,%rdx
  0x00007f8f8f739d53: je     0x00007f8f8f739e10
  0x00007f8f8f739d59: mov    (%rax),%rdx
  0x00007f8f8f739d5c: test   %rdx,%rdx
  0x00007f8f8f739d5f: je     0x00007f8f8f739e10
  0x00007f8f8f739d65: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f739d6a: je     0x00007f8f8f739e10
  0x00007f8f8f739d70: mov    %rcx,0x8(%rsi)
  0x00007f8f8f739d74: callq  0x00007f8f8f739d7e
  0x00007f8f8f739d79: jmpq   0x00007f8f8f739e10
  0x00007f8f8f739d7e: lea    0x8(%rsp),%rax
  0x00007f8f8f739d83: mov    %r13,-0x40(%rbp)
  0x00007f8f8f739d87: mov    %r15,%rdi
  0x00007f8f8f739d8a: vzeroupper 
  0x00007f8f8f739d8d: mov    %rbp,0x330(%r15)
  0x00007f8f8f739d94: mov    %rax,0x320(%r15)
  0x00007f8f8f739d9b: test   $0xf,%esp
  0x00007f8f8f739da1: je     0x00007f8f8f739db9
  0x00007f8f8f739da7: sub    $0x8,%rsp
  0x00007f8f8f739dab: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f739db0: add    $0x8,%rsp
  0x00007f8f8f739db4: jmpq   0x00007f8f8f739dbe
  0x00007f8f8f739db9: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f739dbe: movabs $0x0,%r10
  0x00007f8f8f739dc8: mov    %r10,0x320(%r15)
  0x00007f8f8f739dcf: movabs $0x0,%r10
  0x00007f8f8f739dd9: mov    %r10,0x330(%r15)
  0x00007f8f8f739de0: movabs $0x0,%r10
  0x00007f8f8f739dea: mov    %r10,0x328(%r15)
  0x00007f8f8f739df1: vzeroupper 
  0x00007f8f8f739df4: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f739dfc: je     0x00007f8f8f739e07
  0x00007f8f8f739e02: jmpq   0x00007f8f8f71a780
  0x00007f8f8f739e07: mov    -0x40(%rbp),%r13
  0x00007f8f8f739e0b: mov    -0x38(%rbp),%r14
  0x00007f8f8f739e0f: retq   
  0x00007f8f8f739e10: mov    -0x40(%rbp),%r13
  0x00007f8f8f739e14: pop    %rax
  0x00007f8f8f739e15: movzbl 0x1(%r13),%ebx
  0x00007f8f8f739e1a: inc    %r13
  0x00007f8f8f739e1d: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f739e27: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f739e2b: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f739e30: add    %al,(%rax)
  0x00007f8f8f739e32: add    %al,(%rax)
  0x00007f8f8f739e34: add    %al,(%rax)
  0x00007f8f8f739e36: add    %al,(%rax)
  0x00007f8f8f739e38: add    %al,(%rax)
  0x00007f8f8f739e3a: add    %al,(%rax)
  0x00007f8f8f739e3c: add    %al,(%rax)
  0x00007f8f8f739e3e: add    %al,(%rax)

----------------------------------------------------------------------
wide  196 wide  [0x00007f8f8f739e60, 0x00007f8f8f739ec0]  96 bytes

  0x00007f8f8f739e60: push   %rax
  0x00007f8f8f739e61: jmpq   0x00007f8f8f739e9f
  0x00007f8f8f739e66: sub    $0x8,%rsp
  0x00007f8f8f739e6a: vmovss %xmm0,(%rsp)
  0x00007f8f8f739e6f: jmpq   0x00007f8f8f739e9f
  0x00007f8f8f739e74: sub    $0x10,%rsp
  0x00007f8f8f739e78: vmovsd %xmm0,(%rsp)
  0x00007f8f8f739e7d: jmpq   0x00007f8f8f739e9f
  0x00007f8f8f739e82: sub    $0x10,%rsp
  0x00007f8f8f739e86: mov    %rax,(%rsp)
  0x00007f8f8f739e8a: movabs $0x0,%r10
  0x00007f8f8f739e94: mov    %r10,0x8(%rsp)
  0x00007f8f8f739e99: jmpq   0x00007f8f8f739e9f
  0x00007f8f8f739e9e: push   %rax
  0x00007f8f8f739e9f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f739ea4: movabs $0x7f8fadbd8580,%r10
  0x00007f8f8f739eae: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f739eb2: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f739eb8: add    %al,(%rax)
  0x00007f8f8f739eba: add    %al,(%rax)
  0x00007f8f8f739ebc: add    %al,(%rax)
  0x00007f8f8f739ebe: add    %al,(%rax)

----------------------------------------------------------------------
multianewarray  197 multianewarray  [0x00007f8f8f739ee0, 0x00007f8f8f73a000]  288 bytes

  0x00007f8f8f739ee0: push   %rax
  0x00007f8f8f739ee1: jmpq   0x00007f8f8f739f1f
  0x00007f8f8f739ee6: sub    $0x8,%rsp
  0x00007f8f8f739eea: vmovss %xmm0,(%rsp)
  0x00007f8f8f739eef: jmpq   0x00007f8f8f739f1f
  0x00007f8f8f739ef4: sub    $0x10,%rsp
  0x00007f8f8f739ef8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f739efd: jmpq   0x00007f8f8f739f1f
  0x00007f8f8f739f02: sub    $0x10,%rsp
  0x00007f8f8f739f06: mov    %rax,(%rsp)
  0x00007f8f8f739f0a: movabs $0x0,%r10
  0x00007f8f8f739f14: mov    %r10,0x8(%rsp)
  0x00007f8f8f739f19: jmpq   0x00007f8f8f739f1f
  0x00007f8f8f739f1e: push   %rax
  0x00007f8f8f739f1f: movzbl 0x3(%r13),%eax
  0x00007f8f8f739f24: lea    -0x8(%rsp,%rax,8),%rsi
  0x00007f8f8f739f29: callq  0x00007f8f8f739f33
  0x00007f8f8f739f2e: jmpq   0x00007f8f8f739fdd
  0x00007f8f8f739f33: lea    0x8(%rsp),%rax
  0x00007f8f8f739f38: mov    %r13,-0x40(%rbp)
  0x00007f8f8f739f3c: mov    %r15,%rdi
  0x00007f8f8f739f3f: vzeroupper 
  0x00007f8f8f739f42: mov    %rbp,0x330(%r15)
  0x00007f8f8f739f49: mov    %rax,0x320(%r15)
  0x00007f8f8f739f50: test   $0xf,%esp
  0x00007f8f8f739f56: je     0x00007f8f8f739f6e
  0x00007f8f8f739f5c: sub    $0x8,%rsp
  0x00007f8f8f739f60: callq  0x00007f8fad027e70 = InterpreterRuntime::multianewarray(JavaThread*, int*)
  0x00007f8f8f739f65: add    $0x8,%rsp
  0x00007f8f8f739f69: jmpq   0x00007f8f8f739f73
  0x00007f8f8f739f6e: callq  0x00007f8fad027e70 = InterpreterRuntime::multianewarray(JavaThread*, int*)
  0x00007f8f8f739f73: movabs $0x0,%r10
  0x00007f8f8f739f7d: mov    %r10,0x320(%r15)
  0x00007f8f8f739f84: movabs $0x0,%r10
  0x00007f8f8f739f8e: mov    %r10,0x330(%r15)
  0x00007f8f8f739f95: movabs $0x0,%r10
  0x00007f8f8f739f9f: mov    %r10,0x328(%r15)
  0x00007f8f8f739fa6: vzeroupper 
  0x00007f8f8f739fa9: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f739fb1: je     0x00007f8f8f739fbc
  0x00007f8f8f739fb7: jmpq   0x00007f8f8f71a780
  0x00007f8f8f739fbc: mov    0x380(%r15),%rax
  0x00007f8f8f739fc3: movabs $0x0,%r10
  0x00007f8f8f739fcd: mov    %r10,0x380(%r15)
  0x00007f8f8f739fd4: mov    -0x40(%rbp),%r13
  0x00007f8f8f739fd8: mov    -0x38(%rbp),%r14
  0x00007f8f8f739fdc: retq   
  0x00007f8f8f739fdd: movzbl 0x3(%r13),%ebx
  0x00007f8f8f739fe2: lea    (%rsp,%rbx,8),%rsp
  0x00007f8f8f739fe6: movzbl 0x4(%r13),%ebx
  0x00007f8f8f739feb: add    $0x4,%r13
  0x00007f8f8f739fef: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f739ff9: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f739ffd: data16 xchg %ax,%ax

----------------------------------------------------------------------
ifnull  198 ifnull  [0x00007f8f8f73a020, 0x00007f8f8f73a440]  1056 bytes

  0x00007f8f8f73a020: pop    %rax
  0x00007f8f8f73a021: test   %rax,%rax
  0x00007f8f8f73a024: jne    0x00007f8f8f73a3f2
  0x00007f8f8f73a02a: mov    -0x18(%rbp),%rcx
  0x00007f8f8f73a02e: mov    -0x28(%rbp),%rax
  0x00007f8f8f73a032: test   %rax,%rax
  0x00007f8f8f73a035: je     0x00007f8f8f73a053
  0x00007f8f8f73a03b: mov    0x8(%rax),%rbx
  0x00007f8f8f73a03f: add    $0x1,%rbx
  0x00007f8f8f73a043: sbb    $0x0,%rbx
  0x00007f8f8f73a047: mov    %rbx,0x8(%rax)
  0x00007f8f8f73a04b: add    0x10(%rax),%rax
  0x00007f8f8f73a04f: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73a053: movswl 0x1(%r13),%edx
  0x00007f8f8f73a058: bswap  %edx
  0x00007f8f8f73a05a: sar    $0x10,%edx
  0x00007f8f8f73a05d: movslq %edx,%rdx
  0x00007f8f8f73a060: add    %rdx,%r13
  0x00007f8f8f73a063: test   %edx,%edx
  0x00007f8f8f73a065: jns    0x00007f8f8f73a167
  0x00007f8f8f73a06b: mov    0x18(%rcx),%rax
  0x00007f8f8f73a06f: test   %rax,%rax
  0x00007f8f8f73a072: jne    0x00007f8f8f73a128
  0x00007f8f8f73a078: push   %rdx
  0x00007f8f8f73a079: push   %rcx
  0x00007f8f8f73a07a: callq  0x00007f8f8f73a084
  0x00007f8f8f73a07f: jmpq   0x00007f8f8f73a119
  0x00007f8f8f73a084: mov    %rcx,%rsi
  0x00007f8f8f73a087: lea    0x8(%rsp),%rax
  0x00007f8f8f73a08c: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73a090: mov    %r15,%rdi
  0x00007f8f8f73a093: vzeroupper 
  0x00007f8f8f73a096: mov    %rbp,0x330(%r15)
  0x00007f8f8f73a09d: mov    %rax,0x320(%r15)
  0x00007f8f8f73a0a4: test   $0xf,%esp
  0x00007f8f8f73a0aa: je     0x00007f8f8f73a0c2
  0x00007f8f8f73a0b0: sub    $0x8,%rsp
  0x00007f8f8f73a0b4: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f73a0b9: add    $0x8,%rsp
  0x00007f8f8f73a0bd: jmpq   0x00007f8f8f73a0c7
  0x00007f8f8f73a0c2: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f73a0c7: movabs $0x0,%r10
  0x00007f8f8f73a0d1: mov    %r10,0x320(%r15)
  0x00007f8f8f73a0d8: movabs $0x0,%r10
  0x00007f8f8f73a0e2: mov    %r10,0x330(%r15)
  0x00007f8f8f73a0e9: movabs $0x0,%r10
  0x00007f8f8f73a0f3: mov    %r10,0x328(%r15)
  0x00007f8f8f73a0fa: vzeroupper 
  0x00007f8f8f73a0fd: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73a105: je     0x00007f8f8f73a110
  0x00007f8f8f73a10b: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73a110: mov    -0x40(%rbp),%r13
  0x00007f8f8f73a114: mov    -0x38(%rbp),%r14
  0x00007f8f8f73a118: retq   
  0x00007f8f8f73a119: pop    %rcx
  0x00007f8f8f73a11a: pop    %rdx
  0x00007f8f8f73a11b: mov    0x18(%rcx),%rax
  0x00007f8f8f73a11f: test   %rax,%rax
  0x00007f8f8f73a122: je     0x00007f8f8f73a167
  0x00007f8f8f73a128: mov    0x10(%rcx),%rbx
  0x00007f8f8f73a12c: test   %rbx,%rbx
  0x00007f8f8f73a12f: je     0x00007f8f8f73a151
  0x00007f8f8f73a131: mov    0x108(%rbx),%eax
  0x00007f8f8f73a137: add    $0x8,%eax
  0x00007f8f8f73a13a: mov    %eax,0x108(%rbx)
  0x00007f8f8f73a140: and    0x11c(%rbx),%eax
  0x00007f8f8f73a146: je     0x00007f8f8f73a281
  0x00007f8f8f73a14c: jmpq   0x00007f8f8f73a167
  0x00007f8f8f73a151: mov    0x18(%rcx),%rcx
  0x00007f8f8f73a155: mov    0x1c(%rcx),%eax
  0x00007f8f8f73a158: add    $0x8,%eax
  0x00007f8f8f73a15b: mov    %eax,0x1c(%rcx)
  0x00007f8f8f73a15e: and    0x34(%rcx),%eax
  0x00007f8f8f73a161: je     0x00007f8f8f73a281
  0x00007f8f8f73a167: movzbl 0x0(%r13),%ebx
  0x00007f8f8f73a16c: testb  $0x8,0x108(%r15)
  0x00007f8f8f73a174: je     0x00007f8f8f73a182
  0x00007f8f8f73a176: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f73a180: jmp    0x00007f8f8f73a18c
  0x00007f8f8f73a182: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73a18c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73a190: callq  0x00007f8f8f73a19a
  0x00007f8f8f73a195: jmpq   0x00007f8f8f73a22c
  0x00007f8f8f73a19a: lea    0x8(%rsp),%rax
  0x00007f8f8f73a19f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73a1a3: mov    %r15,%rdi
  0x00007f8f8f73a1a6: vzeroupper 
  0x00007f8f8f73a1a9: mov    %rbp,0x330(%r15)
  0x00007f8f8f73a1b0: mov    %rax,0x320(%r15)
  0x00007f8f8f73a1b7: test   $0xf,%esp
  0x00007f8f8f73a1bd: je     0x00007f8f8f73a1d5
  0x00007f8f8f73a1c3: sub    $0x8,%rsp
  0x00007f8f8f73a1c7: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73a1cc: add    $0x8,%rsp
  0x00007f8f8f73a1d0: jmpq   0x00007f8f8f73a1da
  0x00007f8f8f73a1d5: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73a1da: movabs $0x0,%r10
  0x00007f8f8f73a1e4: mov    %r10,0x320(%r15)
  0x00007f8f8f73a1eb: movabs $0x0,%r10
  0x00007f8f8f73a1f5: mov    %r10,0x330(%r15)
  0x00007f8f8f73a1fc: movabs $0x0,%r10
  0x00007f8f8f73a206: mov    %r10,0x328(%r15)
  0x00007f8f8f73a20d: vzeroupper 
  0x00007f8f8f73a210: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73a218: je     0x00007f8f8f73a223
  0x00007f8f8f73a21e: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73a223: mov    -0x40(%rbp),%r13
  0x00007f8f8f73a227: mov    -0x38(%rbp),%r14
  0x00007f8f8f73a22b: retq   
  0x00007f8f8f73a22c: push   %rax
  0x00007f8f8f73a22d: push   %rbx
  0x00007f8f8f73a22e: mov    -0x18(%rbp),%rbx
  0x00007f8f8f73a232: mov    0x10(%rbx),%rax
  0x00007f8f8f73a236: test   %rax,%rax
  0x00007f8f8f73a239: je     0x00007f8f8f73a276
  0x00007f8f8f73a23f: mov    %r13,%rsi
  0x00007f8f8f73a242: mov    %rbx,%rdi
  0x00007f8f8f73a245: test   $0xf,%esp
  0x00007f8f8f73a24b: je     0x00007f8f8f73a263
  0x00007f8f8f73a251: sub    $0x8,%rsp
  0x00007f8f8f73a255: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f73a25a: add    $0x8,%rsp
  0x00007f8f8f73a25e: jmpq   0x00007f8f8f73a268
  0x00007f8f8f73a263: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f73a268: mov    0x10(%rbx),%rbx
  0x00007f8f8f73a26c: add    $0x138,%rbx
  0x00007f8f8f73a273: add    %rbx,%rax
  0x00007f8f8f73a276: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73a27a: pop    %rbx
  0x00007f8f8f73a27b: pop    %rax
  0x00007f8f8f73a27c: jmpq   0x00007f8f8f73a167
  0x00007f8f8f73a281: neg    %rdx
  0x00007f8f8f73a284: add    %r13,%rdx
  0x00007f8f8f73a287: callq  0x00007f8f8f73a291
  0x00007f8f8f73a28c: jmpq   0x00007f8f8f73a326
  0x00007f8f8f73a291: mov    %rdx,%rsi
  0x00007f8f8f73a294: lea    0x8(%rsp),%rax
  0x00007f8f8f73a299: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73a29d: mov    %r15,%rdi
  0x00007f8f8f73a2a0: vzeroupper 
  0x00007f8f8f73a2a3: mov    %rbp,0x330(%r15)
  0x00007f8f8f73a2aa: mov    %rax,0x320(%r15)
  0x00007f8f8f73a2b1: test   $0xf,%esp
  0x00007f8f8f73a2b7: je     0x00007f8f8f73a2cf
  0x00007f8f8f73a2bd: sub    $0x8,%rsp
  0x00007f8f8f73a2c1: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f73a2c6: add    $0x8,%rsp
  0x00007f8f8f73a2ca: jmpq   0x00007f8f8f73a2d4
  0x00007f8f8f73a2cf: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f73a2d4: movabs $0x0,%r10
  0x00007f8f8f73a2de: mov    %r10,0x320(%r15)
  0x00007f8f8f73a2e5: movabs $0x0,%r10
  0x00007f8f8f73a2ef: mov    %r10,0x330(%r15)
  0x00007f8f8f73a2f6: movabs $0x0,%r10
  0x00007f8f8f73a300: mov    %r10,0x328(%r15)
  0x00007f8f8f73a307: vzeroupper 
  0x00007f8f8f73a30a: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73a312: je     0x00007f8f8f73a31d
  0x00007f8f8f73a318: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73a31d: mov    -0x40(%rbp),%r13
  0x00007f8f8f73a321: mov    -0x38(%rbp),%r14
  0x00007f8f8f73a325: retq   
  0x00007f8f8f73a326: test   %rax,%rax
  0x00007f8f8f73a329: je     0x00007f8f8f73a167
  0x00007f8f8f73a32f: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f73a336: jne    0x00007f8f8f73a167
  0x00007f8f8f73a33c: mov    %rax,%rbx
  0x00007f8f8f73a33f: callq  0x00007f8f8f73a349
  0x00007f8f8f73a344: jmpq   0x00007f8f8f73a3db
  0x00007f8f8f73a349: lea    0x8(%rsp),%rax
  0x00007f8f8f73a34e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73a352: mov    %r15,%rdi
  0x00007f8f8f73a355: vzeroupper 
  0x00007f8f8f73a358: mov    %rbp,0x330(%r15)
  0x00007f8f8f73a35f: mov    %rax,0x320(%r15)
  0x00007f8f8f73a366: test   $0xf,%esp
  0x00007f8f8f73a36c: je     0x00007f8f8f73a384
  0x00007f8f8f73a372: sub    $0x8,%rsp
  0x00007f8f8f73a376: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f73a37b: add    $0x8,%rsp
  0x00007f8f8f73a37f: jmpq   0x00007f8f8f73a389
  0x00007f8f8f73a384: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f73a389: movabs $0x0,%r10
  0x00007f8f8f73a393: mov    %r10,0x320(%r15)
  0x00007f8f8f73a39a: movabs $0x0,%r10
  0x00007f8f8f73a3a4: mov    %r10,0x330(%r15)
  0x00007f8f8f73a3ab: movabs $0x0,%r10
  0x00007f8f8f73a3b5: mov    %r10,0x328(%r15)
  0x00007f8f8f73a3bc: vzeroupper 
  0x00007f8f8f73a3bf: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73a3c7: je     0x00007f8f8f73a3d2
  0x00007f8f8f73a3cd: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73a3d2: mov    -0x40(%rbp),%r13
  0x00007f8f8f73a3d6: mov    -0x38(%rbp),%r14
  0x00007f8f8f73a3da: retq   
  0x00007f8f8f73a3db: mov    %rax,%rsi
  0x00007f8f8f73a3de: mov    -0x8(%rbp),%rdx
  0x00007f8f8f73a3e2: leaveq 
  0x00007f8f8f73a3e3: pop    %rcx
  0x00007f8f8f73a3e4: mov    %rdx,%rsp
  0x00007f8f8f73a3e7: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73a3eb: push   %rcx
  0x00007f8f8f73a3ec: jmpq   *0x110(%rbx)
  0x00007f8f8f73a3f2: mov    -0x28(%rbp),%rax
  0x00007f8f8f73a3f6: test   %rax,%rax
  0x00007f8f8f73a3f9: je     0x00007f8f8f73a411
  0x00007f8f8f73a3ff: addq   $0x1,0x18(%rax)
  0x00007f8f8f73a404: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f73a409: add    $0x20,%rax
  0x00007f8f8f73a40d: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73a411: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73a416: add    $0x3,%r13
  0x00007f8f8f73a41a: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73a424: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73a428: add    %al,(%rax)
  0x00007f8f8f73a42a: add    %al,(%rax)
  0x00007f8f8f73a42c: add    %al,(%rax)
  0x00007f8f8f73a42e: add    %al,(%rax)
  0x00007f8f8f73a430: add    %al,(%rax)
  0x00007f8f8f73a432: add    %al,(%rax)
  0x00007f8f8f73a434: add    %al,(%rax)
  0x00007f8f8f73a436: add    %al,(%rax)
  0x00007f8f8f73a438: add    %al,(%rax)
  0x00007f8f8f73a43a: add    %al,(%rax)
  0x00007f8f8f73a43c: add    %al,(%rax)
  0x00007f8f8f73a43e: add    %al,(%rax)

----------------------------------------------------------------------
ifnonnull  199 ifnonnull  [0x00007f8f8f73a460, 0x00007f8f8f73a880]  1056 bytes

  0x00007f8f8f73a460: pop    %rax
  0x00007f8f8f73a461: test   %rax,%rax
  0x00007f8f8f73a464: je     0x00007f8f8f73a832
  0x00007f8f8f73a46a: mov    -0x18(%rbp),%rcx
  0x00007f8f8f73a46e: mov    -0x28(%rbp),%rax
  0x00007f8f8f73a472: test   %rax,%rax
  0x00007f8f8f73a475: je     0x00007f8f8f73a493
  0x00007f8f8f73a47b: mov    0x8(%rax),%rbx
  0x00007f8f8f73a47f: add    $0x1,%rbx
  0x00007f8f8f73a483: sbb    $0x0,%rbx
  0x00007f8f8f73a487: mov    %rbx,0x8(%rax)
  0x00007f8f8f73a48b: add    0x10(%rax),%rax
  0x00007f8f8f73a48f: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73a493: movswl 0x1(%r13),%edx
  0x00007f8f8f73a498: bswap  %edx
  0x00007f8f8f73a49a: sar    $0x10,%edx
  0x00007f8f8f73a49d: movslq %edx,%rdx
  0x00007f8f8f73a4a0: add    %rdx,%r13
  0x00007f8f8f73a4a3: test   %edx,%edx
  0x00007f8f8f73a4a5: jns    0x00007f8f8f73a5a7
  0x00007f8f8f73a4ab: mov    0x18(%rcx),%rax
  0x00007f8f8f73a4af: test   %rax,%rax
  0x00007f8f8f73a4b2: jne    0x00007f8f8f73a568
  0x00007f8f8f73a4b8: push   %rdx
  0x00007f8f8f73a4b9: push   %rcx
  0x00007f8f8f73a4ba: callq  0x00007f8f8f73a4c4
  0x00007f8f8f73a4bf: jmpq   0x00007f8f8f73a559
  0x00007f8f8f73a4c4: mov    %rcx,%rsi
  0x00007f8f8f73a4c7: lea    0x8(%rsp),%rax
  0x00007f8f8f73a4cc: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73a4d0: mov    %r15,%rdi
  0x00007f8f8f73a4d3: vzeroupper 
  0x00007f8f8f73a4d6: mov    %rbp,0x330(%r15)
  0x00007f8f8f73a4dd: mov    %rax,0x320(%r15)
  0x00007f8f8f73a4e4: test   $0xf,%esp
  0x00007f8f8f73a4ea: je     0x00007f8f8f73a502
  0x00007f8f8f73a4f0: sub    $0x8,%rsp
  0x00007f8f8f73a4f4: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f73a4f9: add    $0x8,%rsp
  0x00007f8f8f73a4fd: jmpq   0x00007f8f8f73a507
  0x00007f8f8f73a502: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f73a507: movabs $0x0,%r10
  0x00007f8f8f73a511: mov    %r10,0x320(%r15)
  0x00007f8f8f73a518: movabs $0x0,%r10
  0x00007f8f8f73a522: mov    %r10,0x330(%r15)
  0x00007f8f8f73a529: movabs $0x0,%r10
  0x00007f8f8f73a533: mov    %r10,0x328(%r15)
  0x00007f8f8f73a53a: vzeroupper 
  0x00007f8f8f73a53d: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73a545: je     0x00007f8f8f73a550
  0x00007f8f8f73a54b: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73a550: mov    -0x40(%rbp),%r13
  0x00007f8f8f73a554: mov    -0x38(%rbp),%r14
  0x00007f8f8f73a558: retq   
  0x00007f8f8f73a559: pop    %rcx
  0x00007f8f8f73a55a: pop    %rdx
  0x00007f8f8f73a55b: mov    0x18(%rcx),%rax
  0x00007f8f8f73a55f: test   %rax,%rax
  0x00007f8f8f73a562: je     0x00007f8f8f73a5a7
  0x00007f8f8f73a568: mov    0x10(%rcx),%rbx
  0x00007f8f8f73a56c: test   %rbx,%rbx
  0x00007f8f8f73a56f: je     0x00007f8f8f73a591
  0x00007f8f8f73a571: mov    0x108(%rbx),%eax
  0x00007f8f8f73a577: add    $0x8,%eax
  0x00007f8f8f73a57a: mov    %eax,0x108(%rbx)
  0x00007f8f8f73a580: and    0x11c(%rbx),%eax
  0x00007f8f8f73a586: je     0x00007f8f8f73a6c1
  0x00007f8f8f73a58c: jmpq   0x00007f8f8f73a5a7
  0x00007f8f8f73a591: mov    0x18(%rcx),%rcx
  0x00007f8f8f73a595: mov    0x1c(%rcx),%eax
  0x00007f8f8f73a598: add    $0x8,%eax
  0x00007f8f8f73a59b: mov    %eax,0x1c(%rcx)
  0x00007f8f8f73a59e: and    0x34(%rcx),%eax
  0x00007f8f8f73a5a1: je     0x00007f8f8f73a6c1
  0x00007f8f8f73a5a7: movzbl 0x0(%r13),%ebx
  0x00007f8f8f73a5ac: testb  $0x8,0x108(%r15)
  0x00007f8f8f73a5b4: je     0x00007f8f8f73a5c2
  0x00007f8f8f73a5b6: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f73a5c0: jmp    0x00007f8f8f73a5cc
  0x00007f8f8f73a5c2: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73a5cc: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73a5d0: callq  0x00007f8f8f73a5da
  0x00007f8f8f73a5d5: jmpq   0x00007f8f8f73a66c
  0x00007f8f8f73a5da: lea    0x8(%rsp),%rax
  0x00007f8f8f73a5df: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73a5e3: mov    %r15,%rdi
  0x00007f8f8f73a5e6: vzeroupper 
  0x00007f8f8f73a5e9: mov    %rbp,0x330(%r15)
  0x00007f8f8f73a5f0: mov    %rax,0x320(%r15)
  0x00007f8f8f73a5f7: test   $0xf,%esp
  0x00007f8f8f73a5fd: je     0x00007f8f8f73a615
  0x00007f8f8f73a603: sub    $0x8,%rsp
  0x00007f8f8f73a607: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73a60c: add    $0x8,%rsp
  0x00007f8f8f73a610: jmpq   0x00007f8f8f73a61a
  0x00007f8f8f73a615: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73a61a: movabs $0x0,%r10
  0x00007f8f8f73a624: mov    %r10,0x320(%r15)
  0x00007f8f8f73a62b: movabs $0x0,%r10
  0x00007f8f8f73a635: mov    %r10,0x330(%r15)
  0x00007f8f8f73a63c: movabs $0x0,%r10
  0x00007f8f8f73a646: mov    %r10,0x328(%r15)
  0x00007f8f8f73a64d: vzeroupper 
  0x00007f8f8f73a650: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73a658: je     0x00007f8f8f73a663
  0x00007f8f8f73a65e: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73a663: mov    -0x40(%rbp),%r13
  0x00007f8f8f73a667: mov    -0x38(%rbp),%r14
  0x00007f8f8f73a66b: retq   
  0x00007f8f8f73a66c: push   %rax
  0x00007f8f8f73a66d: push   %rbx
  0x00007f8f8f73a66e: mov    -0x18(%rbp),%rbx
  0x00007f8f8f73a672: mov    0x10(%rbx),%rax
  0x00007f8f8f73a676: test   %rax,%rax
  0x00007f8f8f73a679: je     0x00007f8f8f73a6b6
  0x00007f8f8f73a67f: mov    %r13,%rsi
  0x00007f8f8f73a682: mov    %rbx,%rdi
  0x00007f8f8f73a685: test   $0xf,%esp
  0x00007f8f8f73a68b: je     0x00007f8f8f73a6a3
  0x00007f8f8f73a691: sub    $0x8,%rsp
  0x00007f8f8f73a695: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f73a69a: add    $0x8,%rsp
  0x00007f8f8f73a69e: jmpq   0x00007f8f8f73a6a8
  0x00007f8f8f73a6a3: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f73a6a8: mov    0x10(%rbx),%rbx
  0x00007f8f8f73a6ac: add    $0x138,%rbx
  0x00007f8f8f73a6b3: add    %rbx,%rax
  0x00007f8f8f73a6b6: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73a6ba: pop    %rbx
  0x00007f8f8f73a6bb: pop    %rax
  0x00007f8f8f73a6bc: jmpq   0x00007f8f8f73a5a7
  0x00007f8f8f73a6c1: neg    %rdx
  0x00007f8f8f73a6c4: add    %r13,%rdx
  0x00007f8f8f73a6c7: callq  0x00007f8f8f73a6d1
  0x00007f8f8f73a6cc: jmpq   0x00007f8f8f73a766
  0x00007f8f8f73a6d1: mov    %rdx,%rsi
  0x00007f8f8f73a6d4: lea    0x8(%rsp),%rax
  0x00007f8f8f73a6d9: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73a6dd: mov    %r15,%rdi
  0x00007f8f8f73a6e0: vzeroupper 
  0x00007f8f8f73a6e3: mov    %rbp,0x330(%r15)
  0x00007f8f8f73a6ea: mov    %rax,0x320(%r15)
  0x00007f8f8f73a6f1: test   $0xf,%esp
  0x00007f8f8f73a6f7: je     0x00007f8f8f73a70f
  0x00007f8f8f73a6fd: sub    $0x8,%rsp
  0x00007f8f8f73a701: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f73a706: add    $0x8,%rsp
  0x00007f8f8f73a70a: jmpq   0x00007f8f8f73a714
  0x00007f8f8f73a70f: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f73a714: movabs $0x0,%r10
  0x00007f8f8f73a71e: mov    %r10,0x320(%r15)
  0x00007f8f8f73a725: movabs $0x0,%r10
  0x00007f8f8f73a72f: mov    %r10,0x330(%r15)
  0x00007f8f8f73a736: movabs $0x0,%r10
  0x00007f8f8f73a740: mov    %r10,0x328(%r15)
  0x00007f8f8f73a747: vzeroupper 
  0x00007f8f8f73a74a: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73a752: je     0x00007f8f8f73a75d
  0x00007f8f8f73a758: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73a75d: mov    -0x40(%rbp),%r13
  0x00007f8f8f73a761: mov    -0x38(%rbp),%r14
  0x00007f8f8f73a765: retq   
  0x00007f8f8f73a766: test   %rax,%rax
  0x00007f8f8f73a769: je     0x00007f8f8f73a5a7
  0x00007f8f8f73a76f: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f73a776: jne    0x00007f8f8f73a5a7
  0x00007f8f8f73a77c: mov    %rax,%rbx
  0x00007f8f8f73a77f: callq  0x00007f8f8f73a789
  0x00007f8f8f73a784: jmpq   0x00007f8f8f73a81b
  0x00007f8f8f73a789: lea    0x8(%rsp),%rax
  0x00007f8f8f73a78e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73a792: mov    %r15,%rdi
  0x00007f8f8f73a795: vzeroupper 
  0x00007f8f8f73a798: mov    %rbp,0x330(%r15)
  0x00007f8f8f73a79f: mov    %rax,0x320(%r15)
  0x00007f8f8f73a7a6: test   $0xf,%esp
  0x00007f8f8f73a7ac: je     0x00007f8f8f73a7c4
  0x00007f8f8f73a7b2: sub    $0x8,%rsp
  0x00007f8f8f73a7b6: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f73a7bb: add    $0x8,%rsp
  0x00007f8f8f73a7bf: jmpq   0x00007f8f8f73a7c9
  0x00007f8f8f73a7c4: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f73a7c9: movabs $0x0,%r10
  0x00007f8f8f73a7d3: mov    %r10,0x320(%r15)
  0x00007f8f8f73a7da: movabs $0x0,%r10
  0x00007f8f8f73a7e4: mov    %r10,0x330(%r15)
  0x00007f8f8f73a7eb: movabs $0x0,%r10
  0x00007f8f8f73a7f5: mov    %r10,0x328(%r15)
  0x00007f8f8f73a7fc: vzeroupper 
  0x00007f8f8f73a7ff: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73a807: je     0x00007f8f8f73a812
  0x00007f8f8f73a80d: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73a812: mov    -0x40(%rbp),%r13
  0x00007f8f8f73a816: mov    -0x38(%rbp),%r14
  0x00007f8f8f73a81a: retq   
  0x00007f8f8f73a81b: mov    %rax,%rsi
  0x00007f8f8f73a81e: mov    -0x8(%rbp),%rdx
  0x00007f8f8f73a822: leaveq 
  0x00007f8f8f73a823: pop    %rcx
  0x00007f8f8f73a824: mov    %rdx,%rsp
  0x00007f8f8f73a827: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73a82b: push   %rcx
  0x00007f8f8f73a82c: jmpq   *0x110(%rbx)
  0x00007f8f8f73a832: mov    -0x28(%rbp),%rax
  0x00007f8f8f73a836: test   %rax,%rax
  0x00007f8f8f73a839: je     0x00007f8f8f73a851
  0x00007f8f8f73a83f: addq   $0x1,0x18(%rax)
  0x00007f8f8f73a844: sbbq   $0x0,0x18(%rax)
  0x00007f8f8f73a849: add    $0x20,%rax
  0x00007f8f8f73a84d: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73a851: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73a856: add    $0x3,%r13
  0x00007f8f8f73a85a: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73a864: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73a868: add    %al,(%rax)
  0x00007f8f8f73a86a: add    %al,(%rax)
  0x00007f8f8f73a86c: add    %al,(%rax)
  0x00007f8f8f73a86e: add    %al,(%rax)
  0x00007f8f8f73a870: add    %al,(%rax)
  0x00007f8f8f73a872: add    %al,(%rax)
  0x00007f8f8f73a874: add    %al,(%rax)
  0x00007f8f8f73a876: add    %al,(%rax)
  0x00007f8f8f73a878: add    %al,(%rax)
  0x00007f8f8f73a87a: add    %al,(%rax)
  0x00007f8f8f73a87c: add    %al,(%rax)
  0x00007f8f8f73a87e: add    %al,(%rax)

----------------------------------------------------------------------
goto_w  200 goto_w  [0x00007f8f8f73a8a0, 0x00007f8f8f73acc0]  1056 bytes

  0x00007f8f8f73a8a0: push   %rax
  0x00007f8f8f73a8a1: jmpq   0x00007f8f8f73a8df
  0x00007f8f8f73a8a6: sub    $0x8,%rsp
  0x00007f8f8f73a8aa: vmovss %xmm0,(%rsp)
  0x00007f8f8f73a8af: jmpq   0x00007f8f8f73a8df
  0x00007f8f8f73a8b4: sub    $0x10,%rsp
  0x00007f8f8f73a8b8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73a8bd: jmpq   0x00007f8f8f73a8df
  0x00007f8f8f73a8c2: sub    $0x10,%rsp
  0x00007f8f8f73a8c6: mov    %rax,(%rsp)
  0x00007f8f8f73a8ca: movabs $0x0,%r10
  0x00007f8f8f73a8d4: mov    %r10,0x8(%rsp)
  0x00007f8f8f73a8d9: jmpq   0x00007f8f8f73a8df
  0x00007f8f8f73a8de: push   %rax
  0x00007f8f8f73a8df: mov    -0x18(%rbp),%rcx
  0x00007f8f8f73a8e3: mov    -0x28(%rbp),%rax
  0x00007f8f8f73a8e7: test   %rax,%rax
  0x00007f8f8f73a8ea: je     0x00007f8f8f73a908
  0x00007f8f8f73a8f0: mov    0x8(%rax),%rbx
  0x00007f8f8f73a8f4: add    $0x1,%rbx
  0x00007f8f8f73a8f8: sbb    $0x0,%rbx
  0x00007f8f8f73a8fc: mov    %rbx,0x8(%rax)
  0x00007f8f8f73a900: add    0x10(%rax),%rax
  0x00007f8f8f73a904: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73a908: mov    0x1(%r13),%edx
  0x00007f8f8f73a90c: bswap  %edx
  0x00007f8f8f73a90e: movslq %edx,%rdx
  0x00007f8f8f73a911: add    %rdx,%r13
  0x00007f8f8f73a914: test   %edx,%edx
  0x00007f8f8f73a916: jns    0x00007f8f8f73aa18
  0x00007f8f8f73a91c: mov    0x18(%rcx),%rax
  0x00007f8f8f73a920: test   %rax,%rax
  0x00007f8f8f73a923: jne    0x00007f8f8f73a9d9
  0x00007f8f8f73a929: push   %rdx
  0x00007f8f8f73a92a: push   %rcx
  0x00007f8f8f73a92b: callq  0x00007f8f8f73a935
  0x00007f8f8f73a930: jmpq   0x00007f8f8f73a9ca
  0x00007f8f8f73a935: mov    %rcx,%rsi
  0x00007f8f8f73a938: lea    0x8(%rsp),%rax
  0x00007f8f8f73a93d: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73a941: mov    %r15,%rdi
  0x00007f8f8f73a944: vzeroupper 
  0x00007f8f8f73a947: mov    %rbp,0x330(%r15)
  0x00007f8f8f73a94e: mov    %rax,0x320(%r15)
  0x00007f8f8f73a955: test   $0xf,%esp
  0x00007f8f8f73a95b: je     0x00007f8f8f73a973
  0x00007f8f8f73a961: sub    $0x8,%rsp
  0x00007f8f8f73a965: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f73a96a: add    $0x8,%rsp
  0x00007f8f8f73a96e: jmpq   0x00007f8f8f73a978
  0x00007f8f8f73a973: callq  0x00007f8fad02f420 = InterpreterRuntime::build_method_counters(JavaThread*, Method*)
  0x00007f8f8f73a978: movabs $0x0,%r10
  0x00007f8f8f73a982: mov    %r10,0x320(%r15)
  0x00007f8f8f73a989: movabs $0x0,%r10
  0x00007f8f8f73a993: mov    %r10,0x330(%r15)
  0x00007f8f8f73a99a: movabs $0x0,%r10
  0x00007f8f8f73a9a4: mov    %r10,0x328(%r15)
  0x00007f8f8f73a9ab: vzeroupper 
  0x00007f8f8f73a9ae: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73a9b6: je     0x00007f8f8f73a9c1
  0x00007f8f8f73a9bc: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73a9c1: mov    -0x40(%rbp),%r13
  0x00007f8f8f73a9c5: mov    -0x38(%rbp),%r14
  0x00007f8f8f73a9c9: retq   
  0x00007f8f8f73a9ca: pop    %rcx
  0x00007f8f8f73a9cb: pop    %rdx
  0x00007f8f8f73a9cc: mov    0x18(%rcx),%rax
  0x00007f8f8f73a9d0: test   %rax,%rax
  0x00007f8f8f73a9d3: je     0x00007f8f8f73aa18
  0x00007f8f8f73a9d9: mov    0x10(%rcx),%rbx
  0x00007f8f8f73a9dd: test   %rbx,%rbx
  0x00007f8f8f73a9e0: je     0x00007f8f8f73aa02
  0x00007f8f8f73a9e2: mov    0x108(%rbx),%eax
  0x00007f8f8f73a9e8: add    $0x8,%eax
  0x00007f8f8f73a9eb: mov    %eax,0x108(%rbx)
  0x00007f8f8f73a9f1: and    0x11c(%rbx),%eax
  0x00007f8f8f73a9f7: je     0x00007f8f8f73ab32
  0x00007f8f8f73a9fd: jmpq   0x00007f8f8f73aa18
  0x00007f8f8f73aa02: mov    0x18(%rcx),%rcx
  0x00007f8f8f73aa06: mov    0x1c(%rcx),%eax
  0x00007f8f8f73aa09: add    $0x8,%eax
  0x00007f8f8f73aa0c: mov    %eax,0x1c(%rcx)
  0x00007f8f8f73aa0f: and    0x34(%rcx),%eax
  0x00007f8f8f73aa12: je     0x00007f8f8f73ab32
  0x00007f8f8f73aa18: movzbl 0x0(%r13),%ebx
  0x00007f8f8f73aa1d: testb  $0x8,0x108(%r15)
  0x00007f8f8f73aa25: je     0x00007f8f8f73aa33
  0x00007f8f8f73aa27: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f73aa31: jmp    0x00007f8f8f73aa3d
  0x00007f8f8f73aa33: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73aa3d: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73aa41: callq  0x00007f8f8f73aa4b
  0x00007f8f8f73aa46: jmpq   0x00007f8f8f73aadd
  0x00007f8f8f73aa4b: lea    0x8(%rsp),%rax
  0x00007f8f8f73aa50: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73aa54: mov    %r15,%rdi
  0x00007f8f8f73aa57: vzeroupper 
  0x00007f8f8f73aa5a: mov    %rbp,0x330(%r15)
  0x00007f8f8f73aa61: mov    %rax,0x320(%r15)
  0x00007f8f8f73aa68: test   $0xf,%esp
  0x00007f8f8f73aa6e: je     0x00007f8f8f73aa86
  0x00007f8f8f73aa74: sub    $0x8,%rsp
  0x00007f8f8f73aa78: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73aa7d: add    $0x8,%rsp
  0x00007f8f8f73aa81: jmpq   0x00007f8f8f73aa8b
  0x00007f8f8f73aa86: callq  0x00007f8fad02ec90 = InterpreterRuntime::profile_method(JavaThread*)
  0x00007f8f8f73aa8b: movabs $0x0,%r10
  0x00007f8f8f73aa95: mov    %r10,0x320(%r15)
  0x00007f8f8f73aa9c: movabs $0x0,%r10
  0x00007f8f8f73aaa6: mov    %r10,0x330(%r15)
  0x00007f8f8f73aaad: movabs $0x0,%r10
  0x00007f8f8f73aab7: mov    %r10,0x328(%r15)
  0x00007f8f8f73aabe: vzeroupper 
  0x00007f8f8f73aac1: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73aac9: je     0x00007f8f8f73aad4
  0x00007f8f8f73aacf: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73aad4: mov    -0x40(%rbp),%r13
  0x00007f8f8f73aad8: mov    -0x38(%rbp),%r14
  0x00007f8f8f73aadc: retq   
  0x00007f8f8f73aadd: push   %rax
  0x00007f8f8f73aade: push   %rbx
  0x00007f8f8f73aadf: mov    -0x18(%rbp),%rbx
  0x00007f8f8f73aae3: mov    0x10(%rbx),%rax
  0x00007f8f8f73aae7: test   %rax,%rax
  0x00007f8f8f73aaea: je     0x00007f8f8f73ab27
  0x00007f8f8f73aaf0: mov    %r13,%rsi
  0x00007f8f8f73aaf3: mov    %rbx,%rdi
  0x00007f8f8f73aaf6: test   $0xf,%esp
  0x00007f8f8f73aafc: je     0x00007f8f8f73ab14
  0x00007f8f8f73ab02: sub    $0x8,%rsp
  0x00007f8f8f73ab06: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f73ab0b: add    $0x8,%rsp
  0x00007f8f8f73ab0f: jmpq   0x00007f8f8f73ab19
  0x00007f8f8f73ab14: callq  0x00007f8fad02ec40 = InterpreterRuntime::bcp_to_di(Method*, unsigned char*)
  0x00007f8f8f73ab19: mov    0x10(%rbx),%rbx
  0x00007f8f8f73ab1d: add    $0x138,%rbx
  0x00007f8f8f73ab24: add    %rbx,%rax
  0x00007f8f8f73ab27: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73ab2b: pop    %rbx
  0x00007f8f8f73ab2c: pop    %rax
  0x00007f8f8f73ab2d: jmpq   0x00007f8f8f73aa18
  0x00007f8f8f73ab32: neg    %rdx
  0x00007f8f8f73ab35: add    %r13,%rdx
  0x00007f8f8f73ab38: callq  0x00007f8f8f73ab42
  0x00007f8f8f73ab3d: jmpq   0x00007f8f8f73abd7
  0x00007f8f8f73ab42: mov    %rdx,%rsi
  0x00007f8f8f73ab45: lea    0x8(%rsp),%rax
  0x00007f8f8f73ab4a: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73ab4e: mov    %r15,%rdi
  0x00007f8f8f73ab51: vzeroupper 
  0x00007f8f8f73ab54: mov    %rbp,0x330(%r15)
  0x00007f8f8f73ab5b: mov    %rax,0x320(%r15)
  0x00007f8f8f73ab62: test   $0xf,%esp
  0x00007f8f8f73ab68: je     0x00007f8f8f73ab80
  0x00007f8f8f73ab6e: sub    $0x8,%rsp
  0x00007f8f8f73ab72: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f73ab77: add    $0x8,%rsp
  0x00007f8f8f73ab7b: jmpq   0x00007f8f8f73ab85
  0x00007f8f8f73ab80: callq  0x00007f8fad02eb60 = InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*)
  0x00007f8f8f73ab85: movabs $0x0,%r10
  0x00007f8f8f73ab8f: mov    %r10,0x320(%r15)
  0x00007f8f8f73ab96: movabs $0x0,%r10
  0x00007f8f8f73aba0: mov    %r10,0x330(%r15)
  0x00007f8f8f73aba7: movabs $0x0,%r10
  0x00007f8f8f73abb1: mov    %r10,0x328(%r15)
  0x00007f8f8f73abb8: vzeroupper 
  0x00007f8f8f73abbb: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73abc3: je     0x00007f8f8f73abce
  0x00007f8f8f73abc9: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73abce: mov    -0x40(%rbp),%r13
  0x00007f8f8f73abd2: mov    -0x38(%rbp),%r14
  0x00007f8f8f73abd6: retq   
  0x00007f8f8f73abd7: test   %rax,%rax
  0x00007f8f8f73abda: je     0x00007f8f8f73aa18
  0x00007f8f8f73abe0: cmpb   $0x0,0x156(%rax)
  0x00007f8f8f73abe7: jne    0x00007f8f8f73aa18
  0x00007f8f8f73abed: mov    %rax,%rbx
  0x00007f8f8f73abf0: callq  0x00007f8f8f73abfa
  0x00007f8f8f73abf5: jmpq   0x00007f8f8f73ac8c
  0x00007f8f8f73abfa: lea    0x8(%rsp),%rax
  0x00007f8f8f73abff: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73ac03: mov    %r15,%rdi
  0x00007f8f8f73ac06: vzeroupper 
  0x00007f8f8f73ac09: mov    %rbp,0x330(%r15)
  0x00007f8f8f73ac10: mov    %rax,0x320(%r15)
  0x00007f8f8f73ac17: test   $0xf,%esp
  0x00007f8f8f73ac1d: je     0x00007f8f8f73ac35
  0x00007f8f8f73ac23: sub    $0x8,%rsp
  0x00007f8f8f73ac27: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f73ac2c: add    $0x8,%rsp
  0x00007f8f8f73ac30: jmpq   0x00007f8f8f73ac3a
  0x00007f8f8f73ac35: callq  0x00007f8fad495480 = SharedRuntime::OSR_migration_begin(JavaThread*)
  0x00007f8f8f73ac3a: movabs $0x0,%r10
  0x00007f8f8f73ac44: mov    %r10,0x320(%r15)
  0x00007f8f8f73ac4b: movabs $0x0,%r10
  0x00007f8f8f73ac55: mov    %r10,0x330(%r15)
  0x00007f8f8f73ac5c: movabs $0x0,%r10
  0x00007f8f8f73ac66: mov    %r10,0x328(%r15)
  0x00007f8f8f73ac6d: vzeroupper 
  0x00007f8f8f73ac70: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73ac78: je     0x00007f8f8f73ac83
  0x00007f8f8f73ac7e: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73ac83: mov    -0x40(%rbp),%r13
  0x00007f8f8f73ac87: mov    -0x38(%rbp),%r14
  0x00007f8f8f73ac8b: retq   
  0x00007f8f8f73ac8c: mov    %rax,%rsi
  0x00007f8f8f73ac8f: mov    -0x8(%rbp),%rdx
  0x00007f8f8f73ac93: leaveq 
  0x00007f8f8f73ac94: pop    %rcx
  0x00007f8f8f73ac95: mov    %rdx,%rsp
  0x00007f8f8f73ac98: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73ac9c: push   %rcx
  0x00007f8f8f73ac9d: jmpq   *0x110(%rbx)
  0x00007f8f8f73aca3: movzbl 0x5(%r13),%ebx
  0x00007f8f8f73aca8: add    $0x5,%r13
  0x00007f8f8f73acac: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73acb6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73acba: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
jsr_w  201 jsr_w  [0x00007f8f8f73ace0, 0x00007f8f8f73ada0]  192 bytes

  0x00007f8f8f73ace0: push   %rax
  0x00007f8f8f73ace1: jmpq   0x00007f8f8f73ad1f
  0x00007f8f8f73ace6: sub    $0x8,%rsp
  0x00007f8f8f73acea: vmovss %xmm0,(%rsp)
  0x00007f8f8f73acef: jmpq   0x00007f8f8f73ad1f
  0x00007f8f8f73acf4: sub    $0x10,%rsp
  0x00007f8f8f73acf8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73acfd: jmpq   0x00007f8f8f73ad1f
  0x00007f8f8f73ad02: sub    $0x10,%rsp
  0x00007f8f8f73ad06: mov    %rax,(%rsp)
  0x00007f8f8f73ad0a: movabs $0x0,%r10
  0x00007f8f8f73ad14: mov    %r10,0x8(%rsp)
  0x00007f8f8f73ad19: jmpq   0x00007f8f8f73ad1f
  0x00007f8f8f73ad1e: push   %rax
  0x00007f8f8f73ad1f: mov    -0x18(%rbp),%rcx
  0x00007f8f8f73ad23: mov    -0x28(%rbp),%rax
  0x00007f8f8f73ad27: test   %rax,%rax
  0x00007f8f8f73ad2a: je     0x00007f8f8f73ad48
  0x00007f8f8f73ad30: mov    0x8(%rax),%rbx
  0x00007f8f8f73ad34: add    $0x1,%rbx
  0x00007f8f8f73ad38: sbb    $0x0,%rbx
  0x00007f8f8f73ad3c: mov    %rbx,0x8(%rax)
  0x00007f8f8f73ad40: add    0x10(%rax),%rax
  0x00007f8f8f73ad44: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73ad48: mov    0x1(%r13),%edx
  0x00007f8f8f73ad4c: bswap  %edx
  0x00007f8f8f73ad4e: movslq %edx,%rdx
  0x00007f8f8f73ad51: movzbl 0x0(%r13,%rdx,1),%ebx
  0x00007f8f8f73ad57: lea    -0x33(%r13),%rax
  0x00007f8f8f73ad5b: sub    0x8(%rcx),%rax
  0x00007f8f8f73ad5f: add    %rdx,%r13
  0x00007f8f8f73ad62: push   %rax
  0x00007f8f8f73ad63: testb  $0x8,0x108(%r15)
  0x00007f8f8f73ad6b: je     0x00007f8f8f73ad79
  0x00007f8f8f73ad6d: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f73ad77: jmp    0x00007f8f8f73ad83
  0x00007f8f8f73ad79: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73ad83: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73ad87: movzbl 0x5(%r13),%ebx
  0x00007f8f8f73ad8c: add    $0x5,%r13
  0x00007f8f8f73ad90: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73ad9a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73ad9e: xchg   %ax,%ax

----------------------------------------------------------------------
breakpoint  202 breakpoint  [0x00007f8f8f73adc0, 0x00007f8f8f73af60]  416 bytes

  0x00007f8f8f73adc0: push   %rax
  0x00007f8f8f73adc1: jmpq   0x00007f8f8f73adff
  0x00007f8f8f73adc6: sub    $0x8,%rsp
  0x00007f8f8f73adca: vmovss %xmm0,(%rsp)
  0x00007f8f8f73adcf: jmpq   0x00007f8f8f73adff
  0x00007f8f8f73add4: sub    $0x10,%rsp
  0x00007f8f8f73add8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73addd: jmpq   0x00007f8f8f73adff
  0x00007f8f8f73ade2: sub    $0x10,%rsp
  0x00007f8f8f73ade6: mov    %rax,(%rsp)
  0x00007f8f8f73adea: movabs $0x0,%r10
  0x00007f8f8f73adf4: mov    %r10,0x8(%rsp)
  0x00007f8f8f73adf9: jmpq   0x00007f8f8f73adff
  0x00007f8f8f73adfe: push   %rax
  0x00007f8f8f73adff: mov    -0x18(%rbp),%rsi
  0x00007f8f8f73ae03: callq  0x00007f8f8f73ae0d
  0x00007f8f8f73ae08: jmpq   0x00007f8f8f73aea2
  0x00007f8f8f73ae0d: mov    %r13,%rdx
  0x00007f8f8f73ae10: lea    0x8(%rsp),%rax
  0x00007f8f8f73ae15: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73ae19: mov    %r15,%rdi
  0x00007f8f8f73ae1c: vzeroupper 
  0x00007f8f8f73ae1f: mov    %rbp,0x330(%r15)
  0x00007f8f8f73ae26: mov    %rax,0x320(%r15)
  0x00007f8f8f73ae2d: test   $0xf,%esp
  0x00007f8f8f73ae33: je     0x00007f8f8f73ae4b
  0x00007f8f8f73ae39: sub    $0x8,%rsp
  0x00007f8f8f73ae3d: callq  0x00007f8fad02cbe0 = InterpreterRuntime::get_original_bytecode_at(JavaThread*, Method*, unsigned char*)
  0x00007f8f8f73ae42: add    $0x8,%rsp
  0x00007f8f8f73ae46: jmpq   0x00007f8f8f73ae50
  0x00007f8f8f73ae4b: callq  0x00007f8fad02cbe0 = InterpreterRuntime::get_original_bytecode_at(JavaThread*, Method*, unsigned char*)
  0x00007f8f8f73ae50: movabs $0x0,%r10
  0x00007f8f8f73ae5a: mov    %r10,0x320(%r15)
  0x00007f8f8f73ae61: movabs $0x0,%r10
  0x00007f8f8f73ae6b: mov    %r10,0x330(%r15)
  0x00007f8f8f73ae72: movabs $0x0,%r10
  0x00007f8f8f73ae7c: mov    %r10,0x328(%r15)
  0x00007f8f8f73ae83: vzeroupper 
  0x00007f8f8f73ae86: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73ae8e: je     0x00007f8f8f73ae99
  0x00007f8f8f73ae94: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73ae99: mov    -0x40(%rbp),%r13
  0x00007f8f8f73ae9d: mov    -0x38(%rbp),%r14
  0x00007f8f8f73aea1: retq   
  0x00007f8f8f73aea2: mov    %rax,%rbx
  0x00007f8f8f73aea5: mov    -0x18(%rbp),%rsi
  0x00007f8f8f73aea9: callq  0x00007f8f8f73aeb3
  0x00007f8f8f73aeae: jmpq   0x00007f8f8f73af48
  0x00007f8f8f73aeb3: mov    %r13,%rdx
  0x00007f8f8f73aeb6: lea    0x8(%rsp),%rax
  0x00007f8f8f73aebb: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73aebf: mov    %r15,%rdi
  0x00007f8f8f73aec2: vzeroupper 
  0x00007f8f8f73aec5: mov    %rbp,0x330(%r15)
  0x00007f8f8f73aecc: mov    %rax,0x320(%r15)
  0x00007f8f8f73aed3: test   $0xf,%esp
  0x00007f8f8f73aed9: je     0x00007f8f8f73aef1
  0x00007f8f8f73aedf: sub    $0x8,%rsp
  0x00007f8f8f73aee3: callq  0x00007f8fad02cfb0 = InterpreterRuntime::_breakpoint(JavaThread*, Method*, unsigned char*)
  0x00007f8f8f73aee8: add    $0x8,%rsp
  0x00007f8f8f73aeec: jmpq   0x00007f8f8f73aef6
  0x00007f8f8f73aef1: callq  0x00007f8fad02cfb0 = InterpreterRuntime::_breakpoint(JavaThread*, Method*, unsigned char*)
  0x00007f8f8f73aef6: movabs $0x0,%r10
  0x00007f8f8f73af00: mov    %r10,0x320(%r15)
  0x00007f8f8f73af07: movabs $0x0,%r10
  0x00007f8f8f73af11: mov    %r10,0x330(%r15)
  0x00007f8f8f73af18: movabs $0x0,%r10
  0x00007f8f8f73af22: mov    %r10,0x328(%r15)
  0x00007f8f8f73af29: vzeroupper 
  0x00007f8f8f73af2c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73af34: je     0x00007f8f8f73af3f
  0x00007f8f8f73af3a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73af3f: mov    -0x40(%rbp),%r13
  0x00007f8f8f73af43: mov    -0x38(%rbp),%r14
  0x00007f8f8f73af47: retq   
  0x00007f8f8f73af48: movabs $0x7f8fadbe2580,%r10
  0x00007f8f8f73af52: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73af56: xchg   %ax,%ax
  0x00007f8f8f73af58: add    %al,(%rax)
  0x00007f8f8f73af5a: add    %al,(%rax)
  0x00007f8f8f73af5c: add    %al,(%rax)
  0x00007f8f8f73af5e: add    %al,(%rax)

----------------------------------------------------------------------
fast_agetfield  203 fast_agetfield  [0x00007f8f8f73af80, 0x00007f8f8f73afc0]  64 bytes

  0x00007f8f8f73af80: pop    %rax
  0x00007f8f8f73af81: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73af86: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73af8a: shl    $0x2,%ebx
  0x00007f8f8f73af8d: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73af92: cmp    (%rax),%rax
  0x00007f8f8f73af95: mov    (%rax,%rbx,1),%eax
  0x00007f8f8f73af98: shl    $0x3,%rax
  0x00007f8f8f73af9c: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73afa1: add    $0x3,%r13
  0x00007f8f8f73afa5: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f73afaf: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73afb3: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f73afb8: add    %al,(%rax)
  0x00007f8f8f73afba: add    %al,(%rax)
  0x00007f8f8f73afbc: add    %al,(%rax)
  0x00007f8f8f73afbe: add    %al,(%rax)

----------------------------------------------------------------------
fast_bgetfield  204 fast_bgetfield  [0x00007f8f8f73afe0, 0x00007f8f8f73b020]  64 bytes

  0x00007f8f8f73afe0: pop    %rax
  0x00007f8f8f73afe1: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73afe6: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73afea: shl    $0x2,%ebx
  0x00007f8f8f73afed: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73aff2: cmp    (%rax),%rax
  0x00007f8f8f73aff5: movsbl (%rax,%rbx,1),%eax
  0x00007f8f8f73aff9: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73affe: add    $0x3,%r13
  0x00007f8f8f73b002: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73b00c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b010: add    %al,(%rax)
  0x00007f8f8f73b012: add    %al,(%rax)
  0x00007f8f8f73b014: add    %al,(%rax)
  0x00007f8f8f73b016: add    %al,(%rax)
  0x00007f8f8f73b018: add    %al,(%rax)
  0x00007f8f8f73b01a: add    %al,(%rax)
  0x00007f8f8f73b01c: add    %al,(%rax)
  0x00007f8f8f73b01e: add    %al,(%rax)

----------------------------------------------------------------------
fast_cgetfield  205 fast_cgetfield  [0x00007f8f8f73b040, 0x00007f8f8f73b080]  64 bytes

  0x00007f8f8f73b040: pop    %rax
  0x00007f8f8f73b041: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b046: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b04a: shl    $0x2,%ebx
  0x00007f8f8f73b04d: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b052: cmp    (%rax),%rax
  0x00007f8f8f73b055: movzwl (%rax,%rbx,1),%eax
  0x00007f8f8f73b059: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b05e: add    $0x3,%r13
  0x00007f8f8f73b062: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73b06c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b070: add    %al,(%rax)
  0x00007f8f8f73b072: add    %al,(%rax)
  0x00007f8f8f73b074: add    %al,(%rax)
  0x00007f8f8f73b076: add    %al,(%rax)
  0x00007f8f8f73b078: add    %al,(%rax)
  0x00007f8f8f73b07a: add    %al,(%rax)
  0x00007f8f8f73b07c: add    %al,(%rax)
  0x00007f8f8f73b07e: add    %al,(%rax)

----------------------------------------------------------------------
fast_dgetfield  206 fast_dgetfield  [0x00007f8f8f73b0a0, 0x00007f8f8f73b0e0]  64 bytes

  0x00007f8f8f73b0a0: pop    %rax
  0x00007f8f8f73b0a1: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b0a6: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b0aa: shl    $0x2,%ebx
  0x00007f8f8f73b0ad: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b0b2: cmp    (%rax),%rax
  0x00007f8f8f73b0b5: vmovsd (%rax,%rbx,1),%xmm0
  0x00007f8f8f73b0ba: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b0bf: add    $0x3,%r13
  0x00007f8f8f73b0c3: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f73b0cd: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b0d1: nopl   0x0(%rax)
  0x00007f8f8f73b0d8: add    %al,(%rax)
  0x00007f8f8f73b0da: add    %al,(%rax)
  0x00007f8f8f73b0dc: add    %al,(%rax)
  0x00007f8f8f73b0de: add    %al,(%rax)

----------------------------------------------------------------------
fast_fgetfield  207 fast_fgetfield  [0x00007f8f8f73b100, 0x00007f8f8f73b140]  64 bytes

  0x00007f8f8f73b100: pop    %rax
  0x00007f8f8f73b101: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b106: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b10a: shl    $0x2,%ebx
  0x00007f8f8f73b10d: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b112: cmp    (%rax),%rax
  0x00007f8f8f73b115: vmovss (%rax,%rbx,1),%xmm0
  0x00007f8f8f73b11a: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b11f: add    $0x3,%r13
  0x00007f8f8f73b123: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f73b12d: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b131: nopl   0x0(%rax)
  0x00007f8f8f73b138: add    %al,(%rax)
  0x00007f8f8f73b13a: add    %al,(%rax)
  0x00007f8f8f73b13c: add    %al,(%rax)
  0x00007f8f8f73b13e: add    %al,(%rax)

----------------------------------------------------------------------
fast_igetfield  208 fast_igetfield  [0x00007f8f8f73b160, 0x00007f8f8f73b1a0]  64 bytes

  0x00007f8f8f73b160: pop    %rax
  0x00007f8f8f73b161: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b166: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b16a: shl    $0x2,%ebx
  0x00007f8f8f73b16d: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b172: cmp    (%rax),%rax
  0x00007f8f8f73b175: mov    (%rax,%rbx,1),%eax
  0x00007f8f8f73b178: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b17d: add    $0x3,%r13
  0x00007f8f8f73b181: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73b18b: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b18f: nop
  0x00007f8f8f73b190: add    %al,(%rax)
  0x00007f8f8f73b192: add    %al,(%rax)
  0x00007f8f8f73b194: add    %al,(%rax)
  0x00007f8f8f73b196: add    %al,(%rax)
  0x00007f8f8f73b198: add    %al,(%rax)
  0x00007f8f8f73b19a: add    %al,(%rax)
  0x00007f8f8f73b19c: add    %al,(%rax)
  0x00007f8f8f73b19e: add    %al,(%rax)

----------------------------------------------------------------------
fast_lgetfield  209 fast_lgetfield  [0x00007f8f8f73b1c0, 0x00007f8f8f73b200]  64 bytes

  0x00007f8f8f73b1c0: pop    %rax
  0x00007f8f8f73b1c1: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b1c6: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b1ca: shl    $0x2,%ebx
  0x00007f8f8f73b1cd: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b1d2: cmp    (%rax),%rax
  0x00007f8f8f73b1d5: mov    (%rax,%rbx,1),%rax
  0x00007f8f8f73b1d9: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b1de: add    $0x3,%r13
  0x00007f8f8f73b1e2: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f73b1ec: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b1f0: add    %al,(%rax)
  0x00007f8f8f73b1f2: add    %al,(%rax)
  0x00007f8f8f73b1f4: add    %al,(%rax)
  0x00007f8f8f73b1f6: add    %al,(%rax)
  0x00007f8f8f73b1f8: add    %al,(%rax)
  0x00007f8f8f73b1fa: add    %al,(%rax)
  0x00007f8f8f73b1fc: add    %al,(%rax)
  0x00007f8f8f73b1fe: add    %al,(%rax)

----------------------------------------------------------------------
fast_sgetfield  210 fast_sgetfield  [0x00007f8f8f73b220, 0x00007f8f8f73b260]  64 bytes

  0x00007f8f8f73b220: pop    %rax
  0x00007f8f8f73b221: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b226: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b22a: shl    $0x2,%ebx
  0x00007f8f8f73b22d: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b232: cmp    (%rax),%rax
  0x00007f8f8f73b235: movswl (%rax,%rbx,1),%eax
  0x00007f8f8f73b239: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b23e: add    $0x3,%r13
  0x00007f8f8f73b242: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73b24c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b250: add    %al,(%rax)
  0x00007f8f8f73b252: add    %al,(%rax)
  0x00007f8f8f73b254: add    %al,(%rax)
  0x00007f8f8f73b256: add    %al,(%rax)
  0x00007f8f8f73b258: add    %al,(%rax)
  0x00007f8f8f73b25a: add    %al,(%rax)
  0x00007f8f8f73b25c: add    %al,(%rax)
  0x00007f8f8f73b25e: add    %al,(%rax)

----------------------------------------------------------------------
fast_aputfield  211 fast_aputfield  [0x00007f8f8f73b280, 0x00007f8f8f73b3e0]  352 bytes

  0x00007f8f8f73b280: pop    %rax
  0x00007f8f8f73b281: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b286: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b28a: shl    $0x2,%ebx
  0x00007f8f8f73b28d: mov    0x40(%rcx,%rbx,8),%edx
  0x00007f8f8f73b291: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b296: shr    $0x15,%edx
  0x00007f8f8f73b299: and    $0x1,%edx
  0x00007f8f8f73b29c: pop    %rcx
  0x00007f8f8f73b29d: cmp    (%rcx),%rax
  0x00007f8f8f73b2a0: lea    (%rcx,%rbx,1),%rdx
  0x00007f8f8f73b2a4: cmpb   $0x0,0x30(%r15)
  0x00007f8f8f73b2a9: je     0x00007f8f8f73b310
  0x00007f8f8f73b2af: mov    (%rdx),%ebx
  0x00007f8f8f73b2b1: shl    $0x3,%rbx
  0x00007f8f8f73b2b5: cmp    $0x0,%rbx
  0x00007f8f8f73b2b9: je     0x00007f8f8f73b310
  0x00007f8f8f73b2bf: mov    0x38(%r15),%r8
  0x00007f8f8f73b2c3: cmp    $0x0,%r8
  0x00007f8f8f73b2c7: je     0x00007f8f8f73b2e1
  0x00007f8f8f73b2cd: sub    $0x8,%r8
  0x00007f8f8f73b2d1: mov    %r8,0x38(%r15)
  0x00007f8f8f73b2d5: add    0x48(%r15),%r8
  0x00007f8f8f73b2d9: mov    %rbx,(%r8)
  0x00007f8f8f73b2dc: jmpq   0x00007f8f8f73b310
  0x00007f8f8f73b2e1: push   %rax
  0x00007f8f8f73b2e2: push   %rdx
  0x00007f8f8f73b2e3: push   %rbx
  0x00007f8f8f73b2e4: mov    %r15,%rsi
  0x00007f8f8f73b2e7: mov    %rbx,%rdi
  0x00007f8f8f73b2ea: test   $0xf,%esp
  0x00007f8f8f73b2f0: je     0x00007f8f8f73b308
  0x00007f8f8f73b2f6: sub    $0x8,%rsp
  0x00007f8f8f73b2fa: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f73b2ff: add    $0x8,%rsp
  0x00007f8f8f73b303: jmpq   0x00007f8f8f73b30d
  0x00007f8f8f73b308: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f73b30d: pop    %rbx
  0x00007f8f8f73b30e: pop    %rdx
  0x00007f8f8f73b30f: pop    %rax
  0x00007f8f8f73b310: mov    %rax,%rbx
  0x00007f8f8f73b313: shr    $0x3,%rax
  0x00007f8f8f73b317: mov    %eax,(%rdx)
  0x00007f8f8f73b319: mov    %rdx,%r8
  0x00007f8f8f73b31c: xor    %rbx,%r8
  0x00007f8f8f73b31f: shr    $0x15,%r8
  0x00007f8f8f73b323: je     0x00007f8f8f73b3bb
  0x00007f8f8f73b329: cmp    $0x0,%rbx
  0x00007f8f8f73b32d: je     0x00007f8f8f73b3bb
  0x00007f8f8f73b333: mov    %rdx,%r8
  0x00007f8f8f73b336: shr    $0x9,%r8
  0x00007f8f8f73b33a: movabs $0x7f8f89e7a000,%rbx
  0x00007f8f8f73b344: add    %rbx,%r8
  0x00007f8f8f73b347: cmpb   $0x20,(%r8)
  0x00007f8f8f73b34b: je     0x00007f8f8f73b3bb
  0x00007f8f8f73b351: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f73b357: cmpb   $0x0,(%r8)
  0x00007f8f8f73b35b: je     0x00007f8f8f73b3bb
  0x00007f8f8f73b361: movb   $0x0,(%r8)
  0x00007f8f8f73b365: cmpl   $0x0,0x70(%r15)
  0x00007f8f8f73b36d: je     0x00007f8f8f73b38e
  0x00007f8f8f73b373: subl   $0x8,0x70(%r15)
  0x00007f8f8f73b378: mov    0x80(%r15),%rbx
  0x00007f8f8f73b37f: movslq 0x70(%r15),%r10
  0x00007f8f8f73b383: add    %r10,%rbx
  0x00007f8f8f73b386: mov    %r8,(%rbx)
  0x00007f8f8f73b389: jmpq   0x00007f8f8f73b3bb
  0x00007f8f8f73b38e: push   %rdx
  0x00007f8f8f73b38f: push   %rbx
  0x00007f8f8f73b390: mov    %r15,%rsi
  0x00007f8f8f73b393: mov    %r8,%rdi
  0x00007f8f8f73b396: test   $0xf,%esp
  0x00007f8f8f73b39c: je     0x00007f8f8f73b3b4
  0x00007f8f8f73b3a2: sub    $0x8,%rsp
  0x00007f8f8f73b3a6: callq  0x00007f8facf1ecb0 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x00007f8f8f73b3ab: add    $0x8,%rsp
  0x00007f8f8f73b3af: jmpq   0x00007f8f8f73b3b9
  0x00007f8f8f73b3b4: callq  0x00007f8facf1ecb0 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x00007f8f8f73b3b9: pop    %rbx
  0x00007f8f8f73b3ba: pop    %rdx
  0x00007f8f8f73b3bb: test   %edx,%edx
  0x00007f8f8f73b3bd: je     0x00007f8f8f73b3c9
  0x00007f8f8f73b3c3: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f73b3c9: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b3ce: add    $0x3,%r13
  0x00007f8f8f73b3d2: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73b3dc: jmpq   *(%r10,%rbx,8)

----------------------------------------------------------------------
fast_bputfield  212 fast_bputfield  [0x00007f8f8f73b400, 0x00007f8f8f73b460]  96 bytes

  0x00007f8f8f73b400: mov    (%rsp),%eax
  0x00007f8f8f73b403: add    $0x8,%rsp
  0x00007f8f8f73b407: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b40c: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b410: shl    $0x2,%ebx
  0x00007f8f8f73b413: mov    0x40(%rcx,%rbx,8),%edx
  0x00007f8f8f73b417: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b41c: shr    $0x15,%edx
  0x00007f8f8f73b41f: and    $0x1,%edx
  0x00007f8f8f73b422: pop    %rcx
  0x00007f8f8f73b423: cmp    (%rcx),%rax
  0x00007f8f8f73b426: mov    %al,(%rcx,%rbx,1)
  0x00007f8f8f73b429: test   %edx,%edx
  0x00007f8f8f73b42b: je     0x00007f8f8f73b437
  0x00007f8f8f73b431: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f73b437: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b43c: add    $0x3,%r13
  0x00007f8f8f73b440: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73b44a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b44e: xchg   %ax,%ax
  0x00007f8f8f73b450: add    %al,(%rax)
  0x00007f8f8f73b452: add    %al,(%rax)
  0x00007f8f8f73b454: add    %al,(%rax)
  0x00007f8f8f73b456: add    %al,(%rax)
  0x00007f8f8f73b458: add    %al,(%rax)
  0x00007f8f8f73b45a: add    %al,(%rax)
  0x00007f8f8f73b45c: add    %al,(%rax)
  0x00007f8f8f73b45e: add    %al,(%rax)

----------------------------------------------------------------------
fast_zputfield  213 fast_zputfield  [0x00007f8f8f73b480, 0x00007f8f8f73b4e0]  96 bytes

  0x00007f8f8f73b480: mov    (%rsp),%eax
  0x00007f8f8f73b483: add    $0x8,%rsp
  0x00007f8f8f73b487: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b48c: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b490: shl    $0x2,%ebx
  0x00007f8f8f73b493: mov    0x40(%rcx,%rbx,8),%edx
  0x00007f8f8f73b497: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b49c: shr    $0x15,%edx
  0x00007f8f8f73b49f: and    $0x1,%edx
  0x00007f8f8f73b4a2: pop    %rcx
  0x00007f8f8f73b4a3: cmp    (%rcx),%rax
  0x00007f8f8f73b4a6: and    $0x1,%eax
  0x00007f8f8f73b4a9: mov    %al,(%rcx,%rbx,1)
  0x00007f8f8f73b4ac: test   %edx,%edx
  0x00007f8f8f73b4ae: je     0x00007f8f8f73b4ba
  0x00007f8f8f73b4b4: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f73b4ba: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b4bf: add    $0x3,%r13
  0x00007f8f8f73b4c3: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73b4cd: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b4d1: nopl   0x0(%rax)
  0x00007f8f8f73b4d8: add    %al,(%rax)
  0x00007f8f8f73b4da: add    %al,(%rax)
  0x00007f8f8f73b4dc: add    %al,(%rax)
  0x00007f8f8f73b4de: add    %al,(%rax)

----------------------------------------------------------------------
fast_cputfield  214 fast_cputfield  [0x00007f8f8f73b500, 0x00007f8f8f73b560]  96 bytes

  0x00007f8f8f73b500: mov    (%rsp),%eax
  0x00007f8f8f73b503: add    $0x8,%rsp
  0x00007f8f8f73b507: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b50c: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b510: shl    $0x2,%ebx
  0x00007f8f8f73b513: mov    0x40(%rcx,%rbx,8),%edx
  0x00007f8f8f73b517: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b51c: shr    $0x15,%edx
  0x00007f8f8f73b51f: and    $0x1,%edx
  0x00007f8f8f73b522: pop    %rcx
  0x00007f8f8f73b523: cmp    (%rcx),%rax
  0x00007f8f8f73b526: mov    %ax,(%rcx,%rbx,1)
  0x00007f8f8f73b52a: test   %edx,%edx
  0x00007f8f8f73b52c: je     0x00007f8f8f73b538
  0x00007f8f8f73b532: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f73b538: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b53d: add    $0x3,%r13
  0x00007f8f8f73b541: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73b54b: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b54f: nop
  0x00007f8f8f73b550: add    %al,(%rax)
  0x00007f8f8f73b552: add    %al,(%rax)
  0x00007f8f8f73b554: add    %al,(%rax)
  0x00007f8f8f73b556: add    %al,(%rax)
  0x00007f8f8f73b558: add    %al,(%rax)
  0x00007f8f8f73b55a: add    %al,(%rax)
  0x00007f8f8f73b55c: add    %al,(%rax)
  0x00007f8f8f73b55e: add    %al,(%rax)

----------------------------------------------------------------------
fast_dputfield  215 fast_dputfield  [0x00007f8f8f73b580, 0x00007f8f8f73b5e0]  96 bytes

  0x00007f8f8f73b580: vmovsd (%rsp),%xmm0
  0x00007f8f8f73b585: add    $0x10,%rsp
  0x00007f8f8f73b589: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b58e: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b592: shl    $0x2,%ebx
  0x00007f8f8f73b595: mov    0x40(%rcx,%rbx,8),%edx
  0x00007f8f8f73b599: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b59e: shr    $0x15,%edx
  0x00007f8f8f73b5a1: and    $0x1,%edx
  0x00007f8f8f73b5a4: pop    %rcx
  0x00007f8f8f73b5a5: cmp    (%rcx),%rax
  0x00007f8f8f73b5a8: vmovsd %xmm0,(%rcx,%rbx,1)
  0x00007f8f8f73b5ad: test   %edx,%edx
  0x00007f8f8f73b5af: je     0x00007f8f8f73b5bb
  0x00007f8f8f73b5b5: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f73b5bb: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b5c0: add    $0x3,%r13
  0x00007f8f8f73b5c4: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73b5ce: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b5d2: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f73b5d8: add    %al,(%rax)
  0x00007f8f8f73b5da: add    %al,(%rax)
  0x00007f8f8f73b5dc: add    %al,(%rax)
  0x00007f8f8f73b5de: add    %al,(%rax)

----------------------------------------------------------------------
fast_fputfield  216 fast_fputfield  [0x00007f8f8f73b600, 0x00007f8f8f73b660]  96 bytes

  0x00007f8f8f73b600: vmovss (%rsp),%xmm0
  0x00007f8f8f73b605: add    $0x8,%rsp
  0x00007f8f8f73b609: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b60e: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b612: shl    $0x2,%ebx
  0x00007f8f8f73b615: mov    0x40(%rcx,%rbx,8),%edx
  0x00007f8f8f73b619: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b61e: shr    $0x15,%edx
  0x00007f8f8f73b621: and    $0x1,%edx
  0x00007f8f8f73b624: pop    %rcx
  0x00007f8f8f73b625: cmp    (%rcx),%rax
  0x00007f8f8f73b628: vmovss %xmm0,(%rcx,%rbx,1)
  0x00007f8f8f73b62d: test   %edx,%edx
  0x00007f8f8f73b62f: je     0x00007f8f8f73b63b
  0x00007f8f8f73b635: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f73b63b: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b640: add    $0x3,%r13
  0x00007f8f8f73b644: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73b64e: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b652: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f73b658: add    %al,(%rax)
  0x00007f8f8f73b65a: add    %al,(%rax)
  0x00007f8f8f73b65c: add    %al,(%rax)
  0x00007f8f8f73b65e: add    %al,(%rax)

----------------------------------------------------------------------
fast_iputfield  217 fast_iputfield  [0x00007f8f8f73b680, 0x00007f8f8f73b6e0]  96 bytes

  0x00007f8f8f73b680: mov    (%rsp),%eax
  0x00007f8f8f73b683: add    $0x8,%rsp
  0x00007f8f8f73b687: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b68c: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b690: shl    $0x2,%ebx
  0x00007f8f8f73b693: mov    0x40(%rcx,%rbx,8),%edx
  0x00007f8f8f73b697: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b69c: shr    $0x15,%edx
  0x00007f8f8f73b69f: and    $0x1,%edx
  0x00007f8f8f73b6a2: pop    %rcx
  0x00007f8f8f73b6a3: cmp    (%rcx),%rax
  0x00007f8f8f73b6a6: mov    %eax,(%rcx,%rbx,1)
  0x00007f8f8f73b6a9: test   %edx,%edx
  0x00007f8f8f73b6ab: je     0x00007f8f8f73b6b7
  0x00007f8f8f73b6b1: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f73b6b7: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b6bc: add    $0x3,%r13
  0x00007f8f8f73b6c0: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73b6ca: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b6ce: xchg   %ax,%ax
  0x00007f8f8f73b6d0: add    %al,(%rax)
  0x00007f8f8f73b6d2: add    %al,(%rax)
  0x00007f8f8f73b6d4: add    %al,(%rax)
  0x00007f8f8f73b6d6: add    %al,(%rax)
  0x00007f8f8f73b6d8: add    %al,(%rax)
  0x00007f8f8f73b6da: add    %al,(%rax)
  0x00007f8f8f73b6dc: add    %al,(%rax)
  0x00007f8f8f73b6de: add    %al,(%rax)

----------------------------------------------------------------------
fast_lputfield  218 fast_lputfield  [0x00007f8f8f73b700, 0x00007f8f8f73b760]  96 bytes

  0x00007f8f8f73b700: mov    (%rsp),%rax
  0x00007f8f8f73b704: add    $0x10,%rsp
  0x00007f8f8f73b708: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b70d: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b711: shl    $0x2,%ebx
  0x00007f8f8f73b714: mov    0x40(%rcx,%rbx,8),%edx
  0x00007f8f8f73b718: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b71d: shr    $0x15,%edx
  0x00007f8f8f73b720: and    $0x1,%edx
  0x00007f8f8f73b723: pop    %rcx
  0x00007f8f8f73b724: cmp    (%rcx),%rax
  0x00007f8f8f73b727: mov    %rax,(%rcx,%rbx,1)
  0x00007f8f8f73b72b: test   %edx,%edx
  0x00007f8f8f73b72d: je     0x00007f8f8f73b739
  0x00007f8f8f73b733: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f73b739: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b73e: add    $0x3,%r13
  0x00007f8f8f73b742: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73b74c: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b750: add    %al,(%rax)
  0x00007f8f8f73b752: add    %al,(%rax)
  0x00007f8f8f73b754: add    %al,(%rax)
  0x00007f8f8f73b756: add    %al,(%rax)
  0x00007f8f8f73b758: add    %al,(%rax)
  0x00007f8f8f73b75a: add    %al,(%rax)
  0x00007f8f8f73b75c: add    %al,(%rax)
  0x00007f8f8f73b75e: add    %al,(%rax)

----------------------------------------------------------------------
fast_sputfield  219 fast_sputfield  [0x00007f8f8f73b780, 0x00007f8f8f73b7e0]  96 bytes

  0x00007f8f8f73b780: mov    (%rsp),%eax
  0x00007f8f8f73b783: add    $0x8,%rsp
  0x00007f8f8f73b787: movzwl 0x1(%r13),%ebx
  0x00007f8f8f73b78c: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b790: shl    $0x2,%ebx
  0x00007f8f8f73b793: mov    0x40(%rcx,%rbx,8),%edx
  0x00007f8f8f73b797: mov    0x38(%rcx,%rbx,8),%rbx
  0x00007f8f8f73b79c: shr    $0x15,%edx
  0x00007f8f8f73b79f: and    $0x1,%edx
  0x00007f8f8f73b7a2: pop    %rcx
  0x00007f8f8f73b7a3: cmp    (%rcx),%rax
  0x00007f8f8f73b7a6: mov    %ax,(%rcx,%rbx,1)
  0x00007f8f8f73b7aa: test   %edx,%edx
  0x00007f8f8f73b7ac: je     0x00007f8f8f73b7b8
  0x00007f8f8f73b7b2: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f73b7b8: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73b7bd: add    $0x3,%r13
  0x00007f8f8f73b7c1: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73b7cb: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b7cf: nop
  0x00007f8f8f73b7d0: add    %al,(%rax)
  0x00007f8f8f73b7d2: add    %al,(%rax)
  0x00007f8f8f73b7d4: add    %al,(%rax)
  0x00007f8f8f73b7d6: add    %al,(%rax)
  0x00007f8f8f73b7d8: add    %al,(%rax)
  0x00007f8f8f73b7da: add    %al,(%rax)
  0x00007f8f8f73b7dc: add    %al,(%rax)
  0x00007f8f8f73b7de: add    %al,(%rax)

----------------------------------------------------------------------
fast_aload_0  220 fast_aload_0  [0x00007f8f8f73b800, 0x00007f8f8f73b860]  96 bytes

  0x00007f8f8f73b800: push   %rax
  0x00007f8f8f73b801: jmpq   0x00007f8f8f73b83f
  0x00007f8f8f73b806: sub    $0x8,%rsp
  0x00007f8f8f73b80a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73b80f: jmpq   0x00007f8f8f73b83f
  0x00007f8f8f73b814: sub    $0x10,%rsp
  0x00007f8f8f73b818: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73b81d: jmpq   0x00007f8f8f73b83f
  0x00007f8f8f73b822: sub    $0x10,%rsp
  0x00007f8f8f73b826: mov    %rax,(%rsp)
  0x00007f8f8f73b82a: movabs $0x0,%r10
  0x00007f8f8f73b834: mov    %r10,0x8(%rsp)
  0x00007f8f8f73b839: jmpq   0x00007f8f8f73b83f
  0x00007f8f8f73b83e: push   %rax
  0x00007f8f8f73b83f: mov    (%r14),%rax
  0x00007f8f8f73b842: movzbl 0x1(%r13),%ebx
  0x00007f8f8f73b847: inc    %r13
  0x00007f8f8f73b84a: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f73b854: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b858: add    %al,(%rax)
  0x00007f8f8f73b85a: add    %al,(%rax)
  0x00007f8f8f73b85c: add    %al,(%rax)
  0x00007f8f8f73b85e: add    %al,(%rax)

----------------------------------------------------------------------
fast_iaccess_0  221 fast_iaccess_0  [0x00007f8f8f73b880, 0x00007f8f8f73b900]  128 bytes

  0x00007f8f8f73b880: push   %rax
  0x00007f8f8f73b881: jmpq   0x00007f8f8f73b8bf
  0x00007f8f8f73b886: sub    $0x8,%rsp
  0x00007f8f8f73b88a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73b88f: jmpq   0x00007f8f8f73b8bf
  0x00007f8f8f73b894: sub    $0x10,%rsp
  0x00007f8f8f73b898: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73b89d: jmpq   0x00007f8f8f73b8bf
  0x00007f8f8f73b8a2: sub    $0x10,%rsp
  0x00007f8f8f73b8a6: mov    %rax,(%rsp)
  0x00007f8f8f73b8aa: movabs $0x0,%r10
  0x00007f8f8f73b8b4: mov    %r10,0x8(%rsp)
  0x00007f8f8f73b8b9: jmpq   0x00007f8f8f73b8bf
  0x00007f8f8f73b8be: push   %rax
  0x00007f8f8f73b8bf: mov    (%r14),%rax
  0x00007f8f8f73b8c2: movzwl 0x2(%r13),%edx
  0x00007f8f8f73b8c7: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b8cb: shl    $0x2,%edx
  0x00007f8f8f73b8ce: mov    0x38(%rcx,%rdx,8),%rbx
  0x00007f8f8f73b8d3: inc    %r13
  0x00007f8f8f73b8d6: cmp    (%rax),%rax
  0x00007f8f8f73b8d9: mov    (%rax,%rbx,1),%eax
  0x00007f8f8f73b8dc: dec    %r13
  0x00007f8f8f73b8df: movzbl 0x4(%r13),%ebx
  0x00007f8f8f73b8e4: add    $0x4,%r13
  0x00007f8f8f73b8e8: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73b8f2: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b8f6: xchg   %ax,%ax
  0x00007f8f8f73b8f8: add    %al,(%rax)
  0x00007f8f8f73b8fa: add    %al,(%rax)
  0x00007f8f8f73b8fc: add    %al,(%rax)
  0x00007f8f8f73b8fe: add    %al,(%rax)

----------------------------------------------------------------------
fast_aaccess_0  222 fast_aaccess_0  [0x00007f8f8f73b920, 0x00007f8f8f73b9a0]  128 bytes

  0x00007f8f8f73b920: push   %rax
  0x00007f8f8f73b921: jmpq   0x00007f8f8f73b95f
  0x00007f8f8f73b926: sub    $0x8,%rsp
  0x00007f8f8f73b92a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73b92f: jmpq   0x00007f8f8f73b95f
  0x00007f8f8f73b934: sub    $0x10,%rsp
  0x00007f8f8f73b938: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73b93d: jmpq   0x00007f8f8f73b95f
  0x00007f8f8f73b942: sub    $0x10,%rsp
  0x00007f8f8f73b946: mov    %rax,(%rsp)
  0x00007f8f8f73b94a: movabs $0x0,%r10
  0x00007f8f8f73b954: mov    %r10,0x8(%rsp)
  0x00007f8f8f73b959: jmpq   0x00007f8f8f73b95f
  0x00007f8f8f73b95e: push   %rax
  0x00007f8f8f73b95f: mov    (%r14),%rax
  0x00007f8f8f73b962: movzwl 0x2(%r13),%edx
  0x00007f8f8f73b967: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73b96b: shl    $0x2,%edx
  0x00007f8f8f73b96e: mov    0x38(%rcx,%rdx,8),%rbx
  0x00007f8f8f73b973: inc    %r13
  0x00007f8f8f73b976: cmp    (%rax),%rax
  0x00007f8f8f73b979: mov    (%rax,%rbx,1),%eax
  0x00007f8f8f73b97c: shl    $0x3,%rax
  0x00007f8f8f73b980: dec    %r13
  0x00007f8f8f73b983: movzbl 0x4(%r13),%ebx
  0x00007f8f8f73b988: add    $0x4,%r13
  0x00007f8f8f73b98c: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f73b996: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73b99a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fast_faccess_0  223 fast_faccess_0  [0x00007f8f8f73b9c0, 0x00007f8f8f73ba40]  128 bytes

  0x00007f8f8f73b9c0: push   %rax
  0x00007f8f8f73b9c1: jmpq   0x00007f8f8f73b9ff
  0x00007f8f8f73b9c6: sub    $0x8,%rsp
  0x00007f8f8f73b9ca: vmovss %xmm0,(%rsp)
  0x00007f8f8f73b9cf: jmpq   0x00007f8f8f73b9ff
  0x00007f8f8f73b9d4: sub    $0x10,%rsp
  0x00007f8f8f73b9d8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73b9dd: jmpq   0x00007f8f8f73b9ff
  0x00007f8f8f73b9e2: sub    $0x10,%rsp
  0x00007f8f8f73b9e6: mov    %rax,(%rsp)
  0x00007f8f8f73b9ea: movabs $0x0,%r10
  0x00007f8f8f73b9f4: mov    %r10,0x8(%rsp)
  0x00007f8f8f73b9f9: jmpq   0x00007f8f8f73b9ff
  0x00007f8f8f73b9fe: push   %rax
  0x00007f8f8f73b9ff: mov    (%r14),%rax
  0x00007f8f8f73ba02: movzwl 0x2(%r13),%edx
  0x00007f8f8f73ba07: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73ba0b: shl    $0x2,%edx
  0x00007f8f8f73ba0e: mov    0x38(%rcx,%rdx,8),%rbx
  0x00007f8f8f73ba13: inc    %r13
  0x00007f8f8f73ba16: cmp    (%rax),%rax
  0x00007f8f8f73ba19: vmovss (%rax,%rbx,1),%xmm0
  0x00007f8f8f73ba1e: dec    %r13
  0x00007f8f8f73ba21: movzbl 0x4(%r13),%ebx
  0x00007f8f8f73ba26: add    $0x4,%r13
  0x00007f8f8f73ba2a: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f73ba34: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73ba38: add    %al,(%rax)
  0x00007f8f8f73ba3a: add    %al,(%rax)
  0x00007f8f8f73ba3c: add    %al,(%rax)
  0x00007f8f8f73ba3e: add    %al,(%rax)

----------------------------------------------------------------------
fast_iload  224 fast_iload  [0x00007f8f8f73ba60, 0x00007f8f8f73bae0]  128 bytes

  0x00007f8f8f73ba60: push   %rax
  0x00007f8f8f73ba61: jmpq   0x00007f8f8f73ba9f
  0x00007f8f8f73ba66: sub    $0x8,%rsp
  0x00007f8f8f73ba6a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73ba6f: jmpq   0x00007f8f8f73ba9f
  0x00007f8f8f73ba74: sub    $0x10,%rsp
  0x00007f8f8f73ba78: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73ba7d: jmpq   0x00007f8f8f73ba9f
  0x00007f8f8f73ba82: sub    $0x10,%rsp
  0x00007f8f8f73ba86: mov    %rax,(%rsp)
  0x00007f8f8f73ba8a: movabs $0x0,%r10
  0x00007f8f8f73ba94: mov    %r10,0x8(%rsp)
  0x00007f8f8f73ba99: jmpq   0x00007f8f8f73ba9f
  0x00007f8f8f73ba9e: push   %rax
  0x00007f8f8f73ba9f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f73baa4: neg    %rbx
  0x00007f8f8f73baa7: mov    (%r14,%rbx,8),%eax
  0x00007f8f8f73baab: movzbl 0x2(%r13),%ebx
  0x00007f8f8f73bab0: add    $0x2,%r13
  0x00007f8f8f73bab4: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73babe: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73bac2: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f73bac8: add    %al,(%rax)
  0x00007f8f8f73baca: add    %al,(%rax)
  0x00007f8f8f73bacc: add    %al,(%rax)
  0x00007f8f8f73bace: add    %al,(%rax)
  0x00007f8f8f73bad0: add    %al,(%rax)
  0x00007f8f8f73bad2: add    %al,(%rax)
  0x00007f8f8f73bad4: add    %al,(%rax)
  0x00007f8f8f73bad6: add    %al,(%rax)
  0x00007f8f8f73bad8: add    %al,(%rax)
  0x00007f8f8f73bada: add    %al,(%rax)
  0x00007f8f8f73badc: add    %al,(%rax)
  0x00007f8f8f73bade: add    %al,(%rax)

----------------------------------------------------------------------
fast_iload2  225 fast_iload2  [0x00007f8f8f73bb00, 0x00007f8f8f73bb80]  128 bytes

  0x00007f8f8f73bb00: push   %rax
  0x00007f8f8f73bb01: jmpq   0x00007f8f8f73bb3f
  0x00007f8f8f73bb06: sub    $0x8,%rsp
  0x00007f8f8f73bb0a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73bb0f: jmpq   0x00007f8f8f73bb3f
  0x00007f8f8f73bb14: sub    $0x10,%rsp
  0x00007f8f8f73bb18: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73bb1d: jmpq   0x00007f8f8f73bb3f
  0x00007f8f8f73bb22: sub    $0x10,%rsp
  0x00007f8f8f73bb26: mov    %rax,(%rsp)
  0x00007f8f8f73bb2a: movabs $0x0,%r10
  0x00007f8f8f73bb34: mov    %r10,0x8(%rsp)
  0x00007f8f8f73bb39: jmpq   0x00007f8f8f73bb3f
  0x00007f8f8f73bb3e: push   %rax
  0x00007f8f8f73bb3f: movzbl 0x1(%r13),%ebx
  0x00007f8f8f73bb44: neg    %rbx
  0x00007f8f8f73bb47: mov    (%r14,%rbx,8),%eax
  0x00007f8f8f73bb4b: push   %rax
  0x00007f8f8f73bb4c: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73bb51: neg    %rbx
  0x00007f8f8f73bb54: mov    (%r14,%rbx,8),%eax
  0x00007f8f8f73bb58: movzbl 0x4(%r13),%ebx
  0x00007f8f8f73bb5d: add    $0x4,%r13
  0x00007f8f8f73bb61: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73bb6b: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73bb6f: nop
  0x00007f8f8f73bb70: add    %al,(%rax)
  0x00007f8f8f73bb72: add    %al,(%rax)
  0x00007f8f8f73bb74: add    %al,(%rax)
  0x00007f8f8f73bb76: add    %al,(%rax)
  0x00007f8f8f73bb78: add    %al,(%rax)
  0x00007f8f8f73bb7a: add    %al,(%rax)
  0x00007f8f8f73bb7c: add    %al,(%rax)
  0x00007f8f8f73bb7e: add    %al,(%rax)

----------------------------------------------------------------------
fast_icaload  226 fast_icaload  [0x00007f8f8f73bba0, 0x00007f8f8f73bc20]  128 bytes

  0x00007f8f8f73bba0: push   %rax
  0x00007f8f8f73bba1: jmpq   0x00007f8f8f73bbdf
  0x00007f8f8f73bba6: sub    $0x8,%rsp
  0x00007f8f8f73bbaa: vmovss %xmm0,(%rsp)
  0x00007f8f8f73bbaf: jmpq   0x00007f8f8f73bbdf
  0x00007f8f8f73bbb4: sub    $0x10,%rsp
  0x00007f8f8f73bbb8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73bbbd: jmpq   0x00007f8f8f73bbdf
  0x00007f8f8f73bbc2: sub    $0x10,%rsp
  0x00007f8f8f73bbc6: mov    %rax,(%rsp)
  0x00007f8f8f73bbca: movabs $0x0,%r10
  0x00007f8f8f73bbd4: mov    %r10,0x8(%rsp)
  0x00007f8f8f73bbd9: jmpq   0x00007f8f8f73bbdf
  0x00007f8f8f73bbde: push   %rax
  0x00007f8f8f73bbdf: movzbl 0x1(%r13),%ebx
  0x00007f8f8f73bbe4: neg    %rbx
  0x00007f8f8f73bbe7: mov    (%r14,%rbx,8),%eax
  0x00007f8f8f73bbeb: pop    %rdx
  0x00007f8f8f73bbec: movslq %eax,%rax
  0x00007f8f8f73bbef: cmp    0xc(%rdx),%eax
  0x00007f8f8f73bbf2: mov    %eax,%ebx
  0x00007f8f8f73bbf4: jb     0x00007f8f8f73bbfe
  0x00007f8f8f73bbf6: mov    %rdx,%rsi
  0x00007f8f8f73bbf9: jmpq   0x00007f8f8f728060
  0x00007f8f8f73bbfe: movzwl 0x10(%rdx,%rax,2),%eax
  0x00007f8f8f73bc03: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73bc08: add    $0x3,%r13
  0x00007f8f8f73bc0c: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73bc16: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73bc1a: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fast_invokevfinal  227 fast_invokevfinal  [0x00007f8f8f73bc40, 0x00007f8f8f73bd00]  192 bytes

  0x00007f8f8f73bc40: push   %rax
  0x00007f8f8f73bc41: jmpq   0x00007f8f8f73bc7f
  0x00007f8f8f73bc46: sub    $0x8,%rsp
  0x00007f8f8f73bc4a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73bc4f: jmpq   0x00007f8f8f73bc7f
  0x00007f8f8f73bc54: sub    $0x10,%rsp
  0x00007f8f8f73bc58: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73bc5d: jmpq   0x00007f8f8f73bc7f
  0x00007f8f8f73bc62: sub    $0x10,%rsp
  0x00007f8f8f73bc66: mov    %rax,(%rsp)
  0x00007f8f8f73bc6a: movabs $0x0,%r10
  0x00007f8f8f73bc74: mov    %r10,0x8(%rsp)
  0x00007f8f8f73bc79: jmpq   0x00007f8f8f73bc7f
  0x00007f8f8f73bc7e: push   %rax
  0x00007f8f8f73bc7f: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73bc84: sub    $0x80,%rsp
  0x00007f8f8f73bc8b: mov    %rax,0x78(%rsp)
  0x00007f8f8f73bc90: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73bc95: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73bc9a: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73bc9f: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73bca4: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73bca9: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73bcae: mov    %r8,0x38(%rsp)
  0x00007f8f8f73bcb3: mov    %r9,0x30(%rsp)
  0x00007f8f8f73bcb8: mov    %r10,0x28(%rsp)
  0x00007f8f8f73bcbd: mov    %r11,0x20(%rsp)
  0x00007f8f8f73bcc2: mov    %r12,0x18(%rsp)
  0x00007f8f8f73bcc7: mov    %r13,0x10(%rsp)
  0x00007f8f8f73bccc: mov    %r14,0x8(%rsp)
  0x00007f8f8f73bcd1: mov    %r15,(%rsp)
  0x00007f8f8f73bcd5: movabs $0x7f8fad6abd68,%rdi
  0x00007f8f8f73bcdf: movabs $0x7f8f8f73bc7f,%rsi
  0x00007f8f8f73bce9: mov    %rsp,%rdx
  0x00007f8f8f73bcec: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73bcf0: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73bcf5: hlt    
  0x00007f8f8f73bcf6: xchg   %ax,%ax
  0x00007f8f8f73bcf8: add    %al,(%rax)
  0x00007f8f8f73bcfa: add    %al,(%rax)
  0x00007f8f8f73bcfc: add    %al,(%rax)
  0x00007f8f8f73bcfe: add    %al,(%rax)

----------------------------------------------------------------------
fast_linearswitch  228 fast_linearswitch  [0x00007f8f8f73bd20, 0x00007f8f8f73bde0]  192 bytes

  0x00007f8f8f73bd20: mov    (%rsp),%eax
  0x00007f8f8f73bd23: add    $0x8,%rsp
  0x00007f8f8f73bd27: bswap  %eax
  0x00007f8f8f73bd29: lea    0x4(%r13),%rbx
  0x00007f8f8f73bd2d: and    $0xfffffffffffffffc,%rbx
  0x00007f8f8f73bd31: mov    0x4(%rbx),%ecx
  0x00007f8f8f73bd34: bswap  %ecx
  0x00007f8f8f73bd36: jmp    0x00007f8f8f73bd42
  0x00007f8f8f73bd38: cmp    0x8(%rbx,%rcx,8),%eax
  0x00007f8f8f73bd3c: je     0x00007f8f8f73bd6c
  0x00007f8f8f73bd42: dec    %ecx
  0x00007f8f8f73bd44: jge    0x00007f8f8f73bd38
  0x00007f8f8f73bd46: mov    -0x28(%rbp),%rax
  0x00007f8f8f73bd4a: test   %rax,%rax
  0x00007f8f8f73bd4d: je     0x00007f8f8f73bd65
  0x00007f8f8f73bd53: addq   $0x1,0x10(%rax)
  0x00007f8f8f73bd58: sbbq   $0x0,0x10(%rax)
  0x00007f8f8f73bd5d: add    0x18(%rax),%rax
  0x00007f8f8f73bd61: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73bd65: mov    (%rbx),%edx
  0x00007f8f8f73bd67: jmpq   0x00007f8f8f73bd9d
  0x00007f8f8f73bd6c: mov    0xc(%rbx,%rcx,8),%edx
  0x00007f8f8f73bd70: mov    -0x28(%rbp),%rax
  0x00007f8f8f73bd74: test   %rax,%rax
  0x00007f8f8f73bd77: je     0x00007f8f8f73bd9d
  0x00007f8f8f73bd7d: mov    $0x10,%ebx
  0x00007f8f8f73bd82: imul   %rbx,%rcx
  0x00007f8f8f73bd86: add    $0x20,%rcx
  0x00007f8f8f73bd8a: addq   $0x1,(%rax,%rcx,1)
  0x00007f8f8f73bd8f: sbbq   $0x0,(%rax,%rcx,1)
  0x00007f8f8f73bd94: add    0x8(%rax,%rcx,1),%rax
  0x00007f8f8f73bd99: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73bd9d: bswap  %edx
  0x00007f8f8f73bd9f: movslq %edx,%rdx
  0x00007f8f8f73bda2: movzbl 0x0(%r13,%rdx,1),%ebx
  0x00007f8f8f73bda8: add    %rdx,%r13
  0x00007f8f8f73bdab: testb  $0x8,0x108(%r15)
  0x00007f8f8f73bdb3: je     0x00007f8f8f73bdc1
  0x00007f8f8f73bdb5: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f73bdbf: jmp    0x00007f8f8f73bdcb
  0x00007f8f8f73bdc1: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73bdcb: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73bdcf: nop
  0x00007f8f8f73bdd0: add    %al,(%rax)
  0x00007f8f8f73bdd2: add    %al,(%rax)
  0x00007f8f8f73bdd4: add    %al,(%rax)
  0x00007f8f8f73bdd6: add    %al,(%rax)
  0x00007f8f8f73bdd8: add    %al,(%rax)
  0x00007f8f8f73bdda: add    %al,(%rax)
  0x00007f8f8f73bddc: add    %al,(%rax)
  0x00007f8f8f73bdde: add    %al,(%rax)

----------------------------------------------------------------------
fast_binaryswitch  229 fast_binaryswitch  [0x00007f8f8f73be00, 0x00007f8f8f73bf00]  256 bytes

  0x00007f8f8f73be00: mov    (%rsp),%eax
  0x00007f8f8f73be03: add    $0x8,%rsp
  0x00007f8f8f73be07: lea    0xc(%r13),%rbx
  0x00007f8f8f73be0b: and    $0xfffffffffffffffc,%rbx
  0x00007f8f8f73be0f: xor    %ecx,%ecx
  0x00007f8f8f73be11: mov    -0x4(%rbx),%edx
  0x00007f8f8f73be14: bswap  %edx
  0x00007f8f8f73be16: jmpq   0x00007f8f8f73be2e
  0x00007f8f8f73be1b: lea    (%ecx,%edx,1),%edi
  0x00007f8f8f73be1f: sar    %edi
  0x00007f8f8f73be21: mov    (%rbx,%rdi,8),%esi
  0x00007f8f8f73be24: bswap  %esi
  0x00007f8f8f73be26: cmp    %esi,%eax
  0x00007f8f8f73be28: cmovl  %edi,%edx
  0x00007f8f8f73be2b: cmovge %edi,%ecx
  0x00007f8f8f73be2e: lea    0x1(%ecx),%edi
  0x00007f8f8f73be32: cmp    %edx,%edi
  0x00007f8f8f73be34: jl     0x00007f8f8f73be1b
  0x00007f8f8f73be36: mov    (%rbx,%rcx,8),%esi
  0x00007f8f8f73be39: bswap  %esi
  0x00007f8f8f73be3b: cmp    %esi,%eax
  0x00007f8f8f73be3d: jne    0x00007f8f8f73bea6
  0x00007f8f8f73be43: mov    0x4(%rbx,%rcx,8),%edx
  0x00007f8f8f73be47: mov    -0x28(%rbp),%rax
  0x00007f8f8f73be4b: test   %rax,%rax
  0x00007f8f8f73be4e: je     0x00007f8f8f73be74
  0x00007f8f8f73be54: mov    $0x10,%ebx
  0x00007f8f8f73be59: imul   %rbx,%rcx
  0x00007f8f8f73be5d: add    $0x20,%rcx
  0x00007f8f8f73be61: addq   $0x1,(%rax,%rcx,1)
  0x00007f8f8f73be66: sbbq   $0x0,(%rax,%rcx,1)
  0x00007f8f8f73be6b: add    0x8(%rax,%rcx,1),%rax
  0x00007f8f8f73be70: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73be74: bswap  %edx
  0x00007f8f8f73be76: movslq %edx,%rdx
  0x00007f8f8f73be79: movzbl 0x0(%r13,%rdx,1),%ebx
  0x00007f8f8f73be7f: add    %rdx,%r13
  0x00007f8f8f73be82: testb  $0x8,0x108(%r15)
  0x00007f8f8f73be8a: je     0x00007f8f8f73be98
  0x00007f8f8f73be8c: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f73be96: jmp    0x00007f8f8f73bea2
  0x00007f8f8f73be98: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73bea2: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73bea6: mov    -0x28(%rbp),%rcx
  0x00007f8f8f73beaa: test   %rcx,%rcx
  0x00007f8f8f73bead: je     0x00007f8f8f73bec5
  0x00007f8f8f73beb3: addq   $0x1,0x10(%rcx)
  0x00007f8f8f73beb8: sbbq   $0x0,0x10(%rcx)
  0x00007f8f8f73bebd: add    0x18(%rcx),%rcx
  0x00007f8f8f73bec1: mov    %rcx,-0x28(%rbp)
  0x00007f8f8f73bec5: mov    -0x8(%rbx),%edx
  0x00007f8f8f73bec8: bswap  %edx
  0x00007f8f8f73beca: movslq %edx,%rdx
  0x00007f8f8f73becd: movzbl 0x0(%r13,%rdx,1),%ebx
  0x00007f8f8f73bed3: add    %rdx,%r13
  0x00007f8f8f73bed6: testb  $0x8,0x108(%r15)
  0x00007f8f8f73bede: je     0x00007f8f8f73beec
  0x00007f8f8f73bee0: movabs $0x7f8fadbdd580,%r10
  0x00007f8f8f73beea: jmp    0x00007f8f8f73bef6
  0x00007f8f8f73beec: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73bef6: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73befa: nopw   0x0(%rax,%rax,1)

----------------------------------------------------------------------
fast_aldc  230 fast_aldc  [0x00007f8f8f73bf20, 0x00007f8f8f73c080]  352 bytes

  0x00007f8f8f73bf20: push   %rax
  0x00007f8f8f73bf21: jmpq   0x00007f8f8f73bf5f
  0x00007f8f8f73bf26: sub    $0x8,%rsp
  0x00007f8f8f73bf2a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73bf2f: jmpq   0x00007f8f8f73bf5f
  0x00007f8f8f73bf34: sub    $0x10,%rsp
  0x00007f8f8f73bf38: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73bf3d: jmpq   0x00007f8f8f73bf5f
  0x00007f8f8f73bf42: sub    $0x10,%rsp
  0x00007f8f8f73bf46: mov    %rax,(%rsp)
  0x00007f8f8f73bf4a: movabs $0x0,%r10
  0x00007f8f8f73bf54: mov    %r10,0x8(%rsp)
  0x00007f8f8f73bf59: jmpq   0x00007f8f8f73bf5f
  0x00007f8f8f73bf5e: push   %rax
  0x00007f8f8f73bf5f: movzbl 0x1(%r13),%edx
  0x00007f8f8f73bf64: mov    -0x18(%rbp),%rax
  0x00007f8f8f73bf68: mov    0x8(%rax),%rax
  0x00007f8f8f73bf6c: mov    0x8(%rax),%rax
  0x00007f8f8f73bf70: mov    0x10(%rax),%rax
  0x00007f8f8f73bf74: mov    0x10(%rax),%rax
  0x00007f8f8f73bf78: mov    (%rax),%rax
  0x00007f8f8f73bf7b: mov    0x10(%rax,%rdx,4),%eax
  0x00007f8f8f73bf7f: shl    $0x3,%rax
  0x00007f8f8f73bf83: test   %rax,%rax
  0x00007f8f8f73bf86: jne    0x00007f8f8f73c045
  0x00007f8f8f73bf8c: mov    $0xe6,%esi
  0x00007f8f8f73bf91: callq  0x00007f8f8f73bf9b
  0x00007f8f8f73bf96: jmpq   0x00007f8f8f73c045
  0x00007f8f8f73bf9b: lea    0x8(%rsp),%rax
  0x00007f8f8f73bfa0: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73bfa4: mov    %r15,%rdi
  0x00007f8f8f73bfa7: vzeroupper 
  0x00007f8f8f73bfaa: mov    %rbp,0x330(%r15)
  0x00007f8f8f73bfb1: mov    %rax,0x320(%r15)
  0x00007f8f8f73bfb8: test   $0xf,%esp
  0x00007f8f8f73bfbe: je     0x00007f8f8f73bfd6
  0x00007f8f8f73bfc4: sub    $0x8,%rsp
  0x00007f8f8f73bfc8: callq  0x00007f8fad026ed0 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x00007f8f8f73bfcd: add    $0x8,%rsp
  0x00007f8f8f73bfd1: jmpq   0x00007f8f8f73bfdb
  0x00007f8f8f73bfd6: callq  0x00007f8fad026ed0 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x00007f8f8f73bfdb: movabs $0x0,%r10
  0x00007f8f8f73bfe5: mov    %r10,0x320(%r15)
  0x00007f8f8f73bfec: movabs $0x0,%r10
  0x00007f8f8f73bff6: mov    %r10,0x330(%r15)
  0x00007f8f8f73bffd: movabs $0x0,%r10
  0x00007f8f8f73c007: mov    %r10,0x328(%r15)
  0x00007f8f8f73c00e: vzeroupper 
  0x00007f8f8f73c011: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73c019: je     0x00007f8f8f73c024
  0x00007f8f8f73c01f: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73c024: mov    0x380(%r15),%rax
  0x00007f8f8f73c02b: movabs $0x0,%r10
  0x00007f8f8f73c035: mov    %r10,0x380(%r15)
  0x00007f8f8f73c03c: mov    -0x40(%rbp),%r13
  0x00007f8f8f73c040: mov    -0x38(%rbp),%r14
  0x00007f8f8f73c044: retq   
  0x00007f8f8f73c045: mov    0x1e4b2afc(%rip),%rdx        # 0x00007f8fadbeeb48
  0x00007f8f8f73c04c: cmp    %rax,%rdx
  0x00007f8f8f73c04f: jne    0x00007f8f8f73c054
  0x00007f8f8f73c051: xor    %rax,%rax
  0x00007f8f8f73c054: movzbl 0x2(%r13),%ebx
  0x00007f8f8f73c059: add    $0x2,%r13
  0x00007f8f8f73c05d: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f73c067: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73c06b: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f73c070: add    %al,(%rax)
  0x00007f8f8f73c072: add    %al,(%rax)
  0x00007f8f8f73c074: add    %al,(%rax)
  0x00007f8f8f73c076: add    %al,(%rax)
  0x00007f8f8f73c078: add    %al,(%rax)
  0x00007f8f8f73c07a: add    %al,(%rax)
  0x00007f8f8f73c07c: add    %al,(%rax)
  0x00007f8f8f73c07e: add    %al,(%rax)

----------------------------------------------------------------------
fast_aldc_w  231 fast_aldc_w  [0x00007f8f8f73c0a0, 0x00007f8f8f73c200]  352 bytes

  0x00007f8f8f73c0a0: push   %rax
  0x00007f8f8f73c0a1: jmpq   0x00007f8f8f73c0df
  0x00007f8f8f73c0a6: sub    $0x8,%rsp
  0x00007f8f8f73c0aa: vmovss %xmm0,(%rsp)
  0x00007f8f8f73c0af: jmpq   0x00007f8f8f73c0df
  0x00007f8f8f73c0b4: sub    $0x10,%rsp
  0x00007f8f8f73c0b8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73c0bd: jmpq   0x00007f8f8f73c0df
  0x00007f8f8f73c0c2: sub    $0x10,%rsp
  0x00007f8f8f73c0c6: mov    %rax,(%rsp)
  0x00007f8f8f73c0ca: movabs $0x0,%r10
  0x00007f8f8f73c0d4: mov    %r10,0x8(%rsp)
  0x00007f8f8f73c0d9: jmpq   0x00007f8f8f73c0df
  0x00007f8f8f73c0de: push   %rax
  0x00007f8f8f73c0df: movzwl 0x1(%r13),%edx
  0x00007f8f8f73c0e4: mov    -0x18(%rbp),%rax
  0x00007f8f8f73c0e8: mov    0x8(%rax),%rax
  0x00007f8f8f73c0ec: mov    0x8(%rax),%rax
  0x00007f8f8f73c0f0: mov    0x10(%rax),%rax
  0x00007f8f8f73c0f4: mov    0x10(%rax),%rax
  0x00007f8f8f73c0f8: mov    (%rax),%rax
  0x00007f8f8f73c0fb: mov    0x10(%rax,%rdx,4),%eax
  0x00007f8f8f73c0ff: shl    $0x3,%rax
  0x00007f8f8f73c103: test   %rax,%rax
  0x00007f8f8f73c106: jne    0x00007f8f8f73c1c5
  0x00007f8f8f73c10c: mov    $0xe7,%esi
  0x00007f8f8f73c111: callq  0x00007f8f8f73c11b
  0x00007f8f8f73c116: jmpq   0x00007f8f8f73c1c5
  0x00007f8f8f73c11b: lea    0x8(%rsp),%rax
  0x00007f8f8f73c120: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73c124: mov    %r15,%rdi
  0x00007f8f8f73c127: vzeroupper 
  0x00007f8f8f73c12a: mov    %rbp,0x330(%r15)
  0x00007f8f8f73c131: mov    %rax,0x320(%r15)
  0x00007f8f8f73c138: test   $0xf,%esp
  0x00007f8f8f73c13e: je     0x00007f8f8f73c156
  0x00007f8f8f73c144: sub    $0x8,%rsp
  0x00007f8f8f73c148: callq  0x00007f8fad026ed0 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x00007f8f8f73c14d: add    $0x8,%rsp
  0x00007f8f8f73c151: jmpq   0x00007f8f8f73c15b
  0x00007f8f8f73c156: callq  0x00007f8fad026ed0 = InterpreterRuntime::resolve_ldc(JavaThread*, Bytecodes::Code)
  0x00007f8f8f73c15b: movabs $0x0,%r10
  0x00007f8f8f73c165: mov    %r10,0x320(%r15)
  0x00007f8f8f73c16c: movabs $0x0,%r10
  0x00007f8f8f73c176: mov    %r10,0x330(%r15)
  0x00007f8f8f73c17d: movabs $0x0,%r10
  0x00007f8f8f73c187: mov    %r10,0x328(%r15)
  0x00007f8f8f73c18e: vzeroupper 
  0x00007f8f8f73c191: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73c199: je     0x00007f8f8f73c1a4
  0x00007f8f8f73c19f: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73c1a4: mov    0x380(%r15),%rax
  0x00007f8f8f73c1ab: movabs $0x0,%r10
  0x00007f8f8f73c1b5: mov    %r10,0x380(%r15)
  0x00007f8f8f73c1bc: mov    -0x40(%rbp),%r13
  0x00007f8f8f73c1c0: mov    -0x38(%rbp),%r14
  0x00007f8f8f73c1c4: retq   
  0x00007f8f8f73c1c5: mov    0x1e4b297c(%rip),%rdx        # 0x00007f8fadbeeb48
  0x00007f8f8f73c1cc: cmp    %rax,%rdx
  0x00007f8f8f73c1cf: jne    0x00007f8f8f73c1d4
  0x00007f8f8f73c1d1: xor    %rax,%rax
  0x00007f8f8f73c1d4: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73c1d9: add    $0x3,%r13
  0x00007f8f8f73c1dd: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f73c1e7: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73c1eb: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f73c1f0: add    %al,(%rax)
  0x00007f8f8f73c1f2: add    %al,(%rax)
  0x00007f8f8f73c1f4: add    %al,(%rax)
  0x00007f8f8f73c1f6: add    %al,(%rax)
  0x00007f8f8f73c1f8: add    %al,(%rax)
  0x00007f8f8f73c1fa: add    %al,(%rax)
  0x00007f8f8f73c1fc: add    %al,(%rax)
  0x00007f8f8f73c1fe: add    %al,(%rax)

----------------------------------------------------------------------
return_register_finalizer  232 return_register_finalizer  [0x00007f8f8f73c220, 0x00007f8f8f73c840]  1568 bytes

  0x00007f8f8f73c220: push   %rax
  0x00007f8f8f73c221: jmpq   0x00007f8f8f73c25f
  0x00007f8f8f73c226: sub    $0x8,%rsp
  0x00007f8f8f73c22a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73c22f: jmpq   0x00007f8f8f73c25f
  0x00007f8f8f73c234: sub    $0x10,%rsp
  0x00007f8f8f73c238: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73c23d: jmpq   0x00007f8f8f73c25f
  0x00007f8f8f73c242: sub    $0x10,%rsp
  0x00007f8f8f73c246: mov    %rax,(%rsp)
  0x00007f8f8f73c24a: movabs $0x0,%r10
  0x00007f8f8f73c254: mov    %r10,0x8(%rsp)
  0x00007f8f8f73c259: jmpq   0x00007f8f8f73c25f
  0x00007f8f8f73c25e: push   %rax
  0x00007f8f8f73c25f: mov    (%r14),%rsi
  0x00007f8f8f73c262: mov    0x8(%rsi),%edi
  0x00007f8f8f73c265: movabs $0x800000000,%r12
  0x00007f8f8f73c26f: add    %r12,%rdi
  0x00007f8f8f73c272: xor    %r12,%r12
  0x00007f8f8f73c275: mov    0xa4(%rdi),%edi
  0x00007f8f8f73c27b: test   $0x40000000,%edi
  0x00007f8f8f73c281: je     0x00007f8f8f73c323
  0x00007f8f8f73c287: callq  0x00007f8f8f73c291
  0x00007f8f8f73c28c: jmpq   0x00007f8f8f73c323
  0x00007f8f8f73c291: lea    0x8(%rsp),%rax
  0x00007f8f8f73c296: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73c29a: mov    %r15,%rdi
  0x00007f8f8f73c29d: vzeroupper 
  0x00007f8f8f73c2a0: mov    %rbp,0x330(%r15)
  0x00007f8f8f73c2a7: mov    %rax,0x320(%r15)
  0x00007f8f8f73c2ae: test   $0xf,%esp
  0x00007f8f8f73c2b4: je     0x00007f8f8f73c2cc
  0x00007f8f8f73c2ba: sub    $0x8,%rsp
  0x00007f8f8f73c2be: callq  0x00007f8fad0283f0 = InterpreterRuntime::register_finalizer(JavaThread*, oopDesc*)
  0x00007f8f8f73c2c3: add    $0x8,%rsp
  0x00007f8f8f73c2c7: jmpq   0x00007f8f8f73c2d1
  0x00007f8f8f73c2cc: callq  0x00007f8fad0283f0 = InterpreterRuntime::register_finalizer(JavaThread*, oopDesc*)
  0x00007f8f8f73c2d1: movabs $0x0,%r10
  0x00007f8f8f73c2db: mov    %r10,0x320(%r15)
  0x00007f8f8f73c2e2: movabs $0x0,%r10
  0x00007f8f8f73c2ec: mov    %r10,0x330(%r15)
  0x00007f8f8f73c2f3: movabs $0x0,%r10
  0x00007f8f8f73c2fd: mov    %r10,0x328(%r15)
  0x00007f8f8f73c304: vzeroupper 
  0x00007f8f8f73c307: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73c30f: je     0x00007f8f8f73c31a
  0x00007f8f8f73c315: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73c31a: mov    -0x40(%rbp),%r13
  0x00007f8f8f73c31e: mov    -0x38(%rbp),%r14
  0x00007f8f8f73c322: retq   
  0x00007f8f8f73c323: mov    0x3dd(%r15),%bl
  0x00007f8f8f73c32a: movb   $0x0,0x3dd(%r15)
  0x00007f8f8f73c332: mov    -0x18(%rbp),%rcx
  0x00007f8f8f73c336: mov    0x20(%rcx),%ecx
  0x00007f8f8f73c339: test   $0x20,%ecx
  0x00007f8f8f73c33f: je     0x00007f8f8f73c551
  0x00007f8f8f73c345: test   $0xff,%bl
  0x00007f8f8f73c348: jne    0x00007f8f8f73c688
  0x00007f8f8f73c34e: lea    -0x58(%rbp),%rsi
  0x00007f8f8f73c352: mov    0x8(%rsi),%rax
  0x00007f8f8f73c356: test   %rax,%rax
  0x00007f8f8f73c359: jne    0x00007f8f8f73c472
  0x00007f8f8f73c35f: callq  0x00007f8f8f73c369
  0x00007f8f8f73c364: jmpq   0x00007f8f8f73c3fb
  0x00007f8f8f73c369: lea    0x8(%rsp),%rax
  0x00007f8f8f73c36e: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73c372: mov    %r15,%rdi
  0x00007f8f8f73c375: vzeroupper 
  0x00007f8f8f73c378: mov    %rbp,0x330(%r15)
  0x00007f8f8f73c37f: mov    %rax,0x320(%r15)
  0x00007f8f8f73c386: test   $0xf,%esp
  0x00007f8f8f73c38c: je     0x00007f8f8f73c3a4
  0x00007f8f8f73c392: sub    $0x8,%rsp
  0x00007f8f8f73c396: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f73c39b: add    $0x8,%rsp
  0x00007f8f8f73c39f: jmpq   0x00007f8f8f73c3a9
  0x00007f8f8f73c3a4: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f73c3a9: movabs $0x0,%r10
  0x00007f8f8f73c3b3: mov    %r10,0x320(%r15)
  0x00007f8f8f73c3ba: movabs $0x0,%r10
  0x00007f8f8f73c3c4: mov    %r10,0x330(%r15)
  0x00007f8f8f73c3cb: movabs $0x0,%r10
  0x00007f8f8f73c3d5: mov    %r10,0x328(%r15)
  0x00007f8f8f73c3dc: vzeroupper 
  0x00007f8f8f73c3df: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73c3e7: je     0x00007f8f8f73c3f2
  0x00007f8f8f73c3ed: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73c3f2: mov    -0x40(%rbp),%r13
  0x00007f8f8f73c3f6: mov    -0x38(%rbp),%r14
  0x00007f8f8f73c3fa: retq   
  0x00007f8f8f73c3fb: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73c400: sub    $0x80,%rsp
  0x00007f8f8f73c407: mov    %rax,0x78(%rsp)
  0x00007f8f8f73c40c: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73c411: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73c416: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73c41b: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73c420: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73c425: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73c42a: mov    %r8,0x38(%rsp)
  0x00007f8f8f73c42f: mov    %r9,0x30(%rsp)
  0x00007f8f8f73c434: mov    %r10,0x28(%rsp)
  0x00007f8f8f73c439: mov    %r11,0x20(%rsp)
  0x00007f8f8f73c43e: mov    %r12,0x18(%rsp)
  0x00007f8f8f73c443: mov    %r13,0x10(%rsp)
  0x00007f8f8f73c448: mov    %r14,0x8(%rsp)
  0x00007f8f8f73c44d: mov    %r15,(%rsp)
  0x00007f8f8f73c451: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73c45b: movabs $0x7f8f8f73c3fb,%rsi
  0x00007f8f8f73c465: mov    %rsp,%rdx
  0x00007f8f8f73c468: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73c46c: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73c471: hlt    
  0x00007f8f8f73c472: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73c476: lea    (%rsi),%rax
  0x00007f8f8f73c479: mov    0x8(%rsi),%rcx
  0x00007f8f8f73c47d: movq   $0x0,0x8(%rsi)
  0x00007f8f8f73c485: mov    (%rcx),%rdx
  0x00007f8f8f73c488: and    $0x7,%rdx
  0x00007f8f8f73c48c: cmp    $0x5,%rdx
  0x00007f8f8f73c490: je     0x00007f8f8f73c54d
  0x00007f8f8f73c496: mov    (%rax),%rdx
  0x00007f8f8f73c499: test   %rdx,%rdx
  0x00007f8f8f73c49c: je     0x00007f8f8f73c54d
  0x00007f8f8f73c4a2: lock cmpxchg %rdx,(%rcx)
  0x00007f8f8f73c4a7: je     0x00007f8f8f73c54d
  0x00007f8f8f73c4ad: mov    %rcx,0x8(%rsi)
  0x00007f8f8f73c4b1: callq  0x00007f8f8f73c4bb
  0x00007f8f8f73c4b6: jmpq   0x00007f8f8f73c54d
  0x00007f8f8f73c4bb: lea    0x8(%rsp),%rax
  0x00007f8f8f73c4c0: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73c4c4: mov    %r15,%rdi
  0x00007f8f8f73c4c7: vzeroupper 
  0x00007f8f8f73c4ca: mov    %rbp,0x330(%r15)
  0x00007f8f8f73c4d1: mov    %rax,0x320(%r15)
  0x00007f8f8f73c4d8: test   $0xf,%esp
  0x00007f8f8f73c4de: je     0x00007f8f8f73c4f6
  0x00007f8f8f73c4e4: sub    $0x8,%rsp
  0x00007f8f8f73c4e8: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f73c4ed: add    $0x8,%rsp
  0x00007f8f8f73c4f1: jmpq   0x00007f8f8f73c4fb
  0x00007f8f8f73c4f6: callq  0x00007f8fad02c490 = InterpreterRuntime::monitorexit(JavaThread*, BasicObjectLock*)
  0x00007f8f8f73c4fb: movabs $0x0,%r10
  0x00007f8f8f73c505: mov    %r10,0x320(%r15)
  0x00007f8f8f73c50c: movabs $0x0,%r10
  0x00007f8f8f73c516: mov    %r10,0x330(%r15)
  0x00007f8f8f73c51d: movabs $0x0,%r10
  0x00007f8f8f73c527: mov    %r10,0x328(%r15)
  0x00007f8f8f73c52e: vzeroupper 
  0x00007f8f8f73c531: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73c539: je     0x00007f8f8f73c544
  0x00007f8f8f73c53f: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73c544: mov    -0x40(%rbp),%r13
  0x00007f8f8f73c548: mov    -0x38(%rbp),%r14
  0x00007f8f8f73c54c: retq   
  0x00007f8f8f73c54d: mov    -0x40(%rbp),%r13
  0x00007f8f8f73c551: mov    -0x48(%rbp),%rsi
  0x00007f8f8f73c555: lea    -0x48(%rbp),%rbx
  0x00007f8f8f73c559: jmpq   0x00007f8f8f73c683
  0x00007f8f8f73c55e: callq  0x00007f8f8f73c568
  0x00007f8f8f73c563: jmpq   0x00007f8f8f73c5fa
  0x00007f8f8f73c568: lea    0x8(%rsp),%rax
  0x00007f8f8f73c56d: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73c571: mov    %r15,%rdi
  0x00007f8f8f73c574: vzeroupper 
  0x00007f8f8f73c577: mov    %rbp,0x330(%r15)
  0x00007f8f8f73c57e: mov    %rax,0x320(%r15)
  0x00007f8f8f73c585: test   $0xf,%esp
  0x00007f8f8f73c58b: je     0x00007f8f8f73c5a3
  0x00007f8f8f73c591: sub    $0x8,%rsp
  0x00007f8f8f73c595: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f73c59a: add    $0x8,%rsp
  0x00007f8f8f73c59e: jmpq   0x00007f8f8f73c5a8
  0x00007f8f8f73c5a3: callq  0x00007f8fad02c6c0 = InterpreterRuntime::throw_illegal_monitor_state_exception(JavaThread*)
  0x00007f8f8f73c5a8: movabs $0x0,%r10
  0x00007f8f8f73c5b2: mov    %r10,0x320(%r15)
  0x00007f8f8f73c5b9: movabs $0x0,%r10
  0x00007f8f8f73c5c3: mov    %r10,0x330(%r15)
  0x00007f8f8f73c5ca: movabs $0x0,%r10
  0x00007f8f8f73c5d4: mov    %r10,0x328(%r15)
  0x00007f8f8f73c5db: vzeroupper 
  0x00007f8f8f73c5de: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73c5e6: je     0x00007f8f8f73c5f1
  0x00007f8f8f73c5ec: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73c5f1: mov    -0x40(%rbp),%r13
  0x00007f8f8f73c5f5: mov    -0x38(%rbp),%r14
  0x00007f8f8f73c5f9: retq   
  0x00007f8f8f73c5fa: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73c5ff: sub    $0x80,%rsp
  0x00007f8f8f73c606: mov    %rax,0x78(%rsp)
  0x00007f8f8f73c60b: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73c610: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73c615: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73c61a: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73c61f: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73c624: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73c629: mov    %r8,0x38(%rsp)
  0x00007f8f8f73c62e: mov    %r9,0x30(%rsp)
  0x00007f8f8f73c633: mov    %r10,0x28(%rsp)
  0x00007f8f8f73c638: mov    %r11,0x20(%rsp)
  0x00007f8f8f73c63d: mov    %r12,0x18(%rsp)
  0x00007f8f8f73c642: mov    %r13,0x10(%rsp)
  0x00007f8f8f73c647: mov    %r14,0x8(%rsp)
  0x00007f8f8f73c64c: mov    %r15,(%rsp)
  0x00007f8f8f73c650: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73c65a: movabs $0x7f8f8f73c5fa,%rsi
  0x00007f8f8f73c664: mov    %rsp,%rdx
  0x00007f8f8f73c667: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73c66b: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73c670: hlt    
  0x00007f8f8f73c671: cmpq   $0x0,0x8(%rsi)
  0x00007f8f8f73c679: jne    0x00007f8f8f73c55e
  0x00007f8f8f73c67f: add    $0x10,%rsi
  0x00007f8f8f73c683: cmp    %rbx,%rsi
  0x00007f8f8f73c686: jne    0x00007f8f8f73c671
  0x00007f8f8f73c688: cmpb   $0x0,0x1e47aaf8(%rip)        # 0x00007f8fadbb7187
  0x00007f8f8f73c68f: je     0x00007f8f8f73c6bf
  0x00007f8f8f73c695: mov    -0x18(%rbp),%rsi
  0x00007f8f8f73c699: mov    %r15,%rdi
  0x00007f8f8f73c69c: test   $0xf,%esp
  0x00007f8f8f73c6a2: je     0x00007f8f8f73c6ba
  0x00007f8f8f73c6a8: sub    $0x8,%rsp
  0x00007f8f8f73c6ac: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f73c6b1: add    $0x8,%rsp
  0x00007f8f8f73c6b5: jmpq   0x00007f8f8f73c6bf
  0x00007f8f8f73c6ba: callq  0x00007f8fad48e630 = SharedRuntime::dtrace_method_exit(JavaThread*, Method*)
  0x00007f8f8f73c6bf: mov    -0x8(%rbp),%rbx
  0x00007f8f8f73c6c3: cmpl   $0x3,0x408(%r15)
  0x00007f8f8f73c6ce: je     0x00007f8f8f73c81a
  0x00007f8f8f73c6d4: cmp    0x418(%r15),%rbx
  0x00007f8f8f73c6db: jle    0x00007f8f8f73c81a
  0x00007f8f8f73c6e1: mov    %r15,%rdi
  0x00007f8f8f73c6e4: test   $0xf,%esp
  0x00007f8f8f73c6ea: je     0x00007f8f8f73c702
  0x00007f8f8f73c6f0: sub    $0x8,%rsp
  0x00007f8f8f73c6f4: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f73c6f9: add    $0x8,%rsp
  0x00007f8f8f73c6fd: jmpq   0x00007f8f8f73c707
  0x00007f8f8f73c702: callq  0x00007f8fad495740 = SharedRuntime::enable_stack_reserved_zone(JavaThread*)
  0x00007f8f8f73c707: callq  0x00007f8f8f73c711
  0x00007f8f8f73c70c: jmpq   0x00007f8f8f73c7a3
  0x00007f8f8f73c711: lea    0x8(%rsp),%rax
  0x00007f8f8f73c716: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73c71a: mov    %r15,%rdi
  0x00007f8f8f73c71d: vzeroupper 
  0x00007f8f8f73c720: mov    %rbp,0x330(%r15)
  0x00007f8f8f73c727: mov    %rax,0x320(%r15)
  0x00007f8f8f73c72e: test   $0xf,%esp
  0x00007f8f8f73c734: je     0x00007f8f8f73c74c
  0x00007f8f8f73c73a: sub    $0x8,%rsp
  0x00007f8f8f73c73e: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f73c743: add    $0x8,%rsp
  0x00007f8f8f73c747: jmpq   0x00007f8f8f73c751
  0x00007f8f8f73c74c: callq  0x00007f8fad028f50 = InterpreterRuntime::throw_delayed_StackOverflowError(JavaThread*)
  0x00007f8f8f73c751: movabs $0x0,%r10
  0x00007f8f8f73c75b: mov    %r10,0x320(%r15)
  0x00007f8f8f73c762: movabs $0x0,%r10
  0x00007f8f8f73c76c: mov    %r10,0x330(%r15)
  0x00007f8f8f73c773: movabs $0x0,%r10
  0x00007f8f8f73c77d: mov    %r10,0x328(%r15)
  0x00007f8f8f73c784: vzeroupper 
  0x00007f8f8f73c787: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73c78f: je     0x00007f8f8f73c79a
  0x00007f8f8f73c795: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73c79a: mov    -0x40(%rbp),%r13
  0x00007f8f8f73c79e: mov    -0x38(%rbp),%r14
  0x00007f8f8f73c7a2: retq   
  0x00007f8f8f73c7a3: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73c7a8: sub    $0x80,%rsp
  0x00007f8f8f73c7af: mov    %rax,0x78(%rsp)
  0x00007f8f8f73c7b4: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73c7b9: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73c7be: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73c7c3: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73c7c8: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73c7cd: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73c7d2: mov    %r8,0x38(%rsp)
  0x00007f8f8f73c7d7: mov    %r9,0x30(%rsp)
  0x00007f8f8f73c7dc: mov    %r10,0x28(%rsp)
  0x00007f8f8f73c7e1: mov    %r11,0x20(%rsp)
  0x00007f8f8f73c7e6: mov    %r12,0x18(%rsp)
  0x00007f8f8f73c7eb: mov    %r13,0x10(%rsp)
  0x00007f8f8f73c7f0: mov    %r14,0x8(%rsp)
  0x00007f8f8f73c7f5: mov    %r15,(%rsp)
  0x00007f8f8f73c7f9: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73c803: movabs $0x7f8f8f73c7a3,%rsi
  0x00007f8f8f73c80d: mov    %rsp,%rdx
  0x00007f8f8f73c810: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73c814: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73c819: hlt    
  0x00007f8f8f73c81a: leaveq 
  0x00007f8f8f73c81b: pop    %r13
  0x00007f8f8f73c81d: mov    %rbx,%rsp
  0x00007f8f8f73c820: jmpq   *%r13
  0x00007f8f8f73c823: nopl   0x0(%rax,%rax,1)
  0x00007f8f8f73c828: add    %al,(%rax)
  0x00007f8f8f73c82a: add    %al,(%rax)
  0x00007f8f8f73c82c: add    %al,(%rax)
  0x00007f8f8f73c82e: add    %al,(%rax)
  0x00007f8f8f73c830: add    %al,(%rax)
  0x00007f8f8f73c832: add    %al,(%rax)
  0x00007f8f8f73c834: add    %al,(%rax)
  0x00007f8f8f73c836: add    %al,(%rax)
  0x00007f8f8f73c838: add    %al,(%rax)
  0x00007f8f8f73c83a: add    %al,(%rax)
  0x00007f8f8f73c83c: add    %al,(%rax)
  0x00007f8f8f73c83e: add    %al,(%rax)

----------------------------------------------------------------------
invokehandle  233 invokehandle  [0x00007f8f8f73c860, 0x00007f8f8f73cb60]  768 bytes

  0x00007f8f8f73c860: push   %rax
  0x00007f8f8f73c861: jmpq   0x00007f8f8f73c89f
  0x00007f8f8f73c866: sub    $0x8,%rsp
  0x00007f8f8f73c86a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73c86f: jmpq   0x00007f8f8f73c89f
  0x00007f8f8f73c874: sub    $0x10,%rsp
  0x00007f8f8f73c878: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73c87d: jmpq   0x00007f8f8f73c89f
  0x00007f8f8f73c882: sub    $0x10,%rsp
  0x00007f8f8f73c886: mov    %rax,(%rsp)
  0x00007f8f8f73c88a: movabs $0x0,%r10
  0x00007f8f8f73c894: mov    %r10,0x8(%rsp)
  0x00007f8f8f73c899: jmpq   0x00007f8f8f73c89f
  0x00007f8f8f73c89e: push   %rax
  0x00007f8f8f73c89f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73c8a3: movzwl 0x1(%r13),%edx
  0x00007f8f8f73c8a8: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73c8ac: shl    $0x2,%edx
  0x00007f8f8f73c8af: mov    0x28(%rcx,%rdx,8),%ebx
  0x00007f8f8f73c8b3: shr    $0x10,%ebx
  0x00007f8f8f73c8b6: and    $0xff,%ebx
  0x00007f8f8f73c8bc: cmp    $0xe9,%ebx
  0x00007f8f8f73c8c2: je     0x00007f8f8f73c978
  0x00007f8f8f73c8c8: mov    $0xe9,%ebx
  0x00007f8f8f73c8cd: callq  0x00007f8f8f73c8d7
  0x00007f8f8f73c8d2: jmpq   0x00007f8f8f73c96c
  0x00007f8f8f73c8d7: mov    %rbx,%rsi
  0x00007f8f8f73c8da: lea    0x8(%rsp),%rax
  0x00007f8f8f73c8df: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73c8e3: mov    %r15,%rdi
  0x00007f8f8f73c8e6: vzeroupper 
  0x00007f8f8f73c8e9: mov    %rbp,0x330(%r15)
  0x00007f8f8f73c8f0: mov    %rax,0x320(%r15)
  0x00007f8f8f73c8f7: test   $0xf,%esp
  0x00007f8f8f73c8fd: je     0x00007f8f8f73c915
  0x00007f8f8f73c903: sub    $0x8,%rsp
  0x00007f8f8f73c907: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f73c90c: add    $0x8,%rsp
  0x00007f8f8f73c910: jmpq   0x00007f8f8f73c91a
  0x00007f8f8f73c915: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f73c91a: movabs $0x0,%r10
  0x00007f8f8f73c924: mov    %r10,0x320(%r15)
  0x00007f8f8f73c92b: movabs $0x0,%r10
  0x00007f8f8f73c935: mov    %r10,0x330(%r15)
  0x00007f8f8f73c93c: movabs $0x0,%r10
  0x00007f8f8f73c946: mov    %r10,0x328(%r15)
  0x00007f8f8f73c94d: vzeroupper 
  0x00007f8f8f73c950: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73c958: je     0x00007f8f8f73c963
  0x00007f8f8f73c95e: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73c963: mov    -0x40(%rbp),%r13
  0x00007f8f8f73c967: mov    -0x38(%rbp),%r14
  0x00007f8f8f73c96b: retq   
  0x00007f8f8f73c96c: movzwl 0x1(%r13),%edx
  0x00007f8f8f73c971: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73c975: shl    $0x2,%edx
  0x00007f8f8f73c978: mov    0x30(%rcx,%rdx,8),%rbx
  0x00007f8f8f73c97d: mov    0x38(%rcx,%rdx,8),%rax
  0x00007f8f8f73c982: mov    0x40(%rcx,%rdx,8),%edx
  0x00007f8f8f73c986: test   $0x1000000,%edx
  0x00007f8f8f73c98c: je     0x00007f8f8f73c9b7
  0x00007f8f8f73c992: push   %rbx
  0x00007f8f8f73c993: mov    %rax,%rbx
  0x00007f8f8f73c996: mov    -0x18(%rbp),%rax
  0x00007f8f8f73c99a: mov    0x8(%rax),%rax
  0x00007f8f8f73c99e: mov    0x8(%rax),%rax
  0x00007f8f8f73c9a2: mov    0x10(%rax),%rax
  0x00007f8f8f73c9a6: mov    0x10(%rax),%rax
  0x00007f8f8f73c9aa: mov    (%rax),%rax
  0x00007f8f8f73c9ad: mov    0x10(%rax,%rbx,4),%eax
  0x00007f8f8f73c9b1: shl    $0x3,%rax
  0x00007f8f8f73c9b5: pop    %rbx
  0x00007f8f8f73c9b6: push   %rax
  0x00007f8f8f73c9b7: mov    %edx,%ecx
  0x00007f8f8f73c9b9: and    $0xff,%ecx
  0x00007f8f8f73c9bf: mov    -0x8(%rsp,%rcx,8),%rcx
  0x00007f8f8f73c9c4: shr    $0x1c,%edx
  0x00007f8f8f73c9c7: movabs $0x7f8fadbe7e40,%r10
  0x00007f8f8f73c9d1: mov    (%r10,%rdx,8),%rdx
  0x00007f8f8f73c9d5: push   %rdx
  0x00007f8f8f73c9d6: cmp    (%rcx),%rax
  0x00007f8f8f73c9d9: mov    -0x28(%rbp),%rax
  0x00007f8f8f73c9dd: test   %rax,%rax
  0x00007f8f8f73c9e0: je     0x00007f8f8f73c9f8
  0x00007f8f8f73c9e6: addq   $0x1,0x8(%rax)
  0x00007f8f8f73c9eb: sbbq   $0x0,0x8(%rax)
  0x00007f8f8f73c9f0: add    $0x38,%rax
  0x00007f8f8f73c9f4: mov    %rax,-0x28(%rbp)
  0x00007f8f8f73c9f8: mov    -0x28(%rbp),%rdx
  0x00007f8f8f73c9fc: test   %rdx,%rdx
  0x00007f8f8f73c9ff: je     0x00007f8f8f73cb4c
  0x00007f8f8f73ca05: cmpb   $0xb,-0x38(%rdx)
  0x00007f8f8f73ca09: jne    0x00007f8f8f73cb4c
  0x00007f8f8f73ca0f: add    $0x8,%rdx
  0x00007f8f8f73ca13: mov    -0x8(%rdx),%r13
  0x00007f8f8f73ca17: sub    $0x0,%r13d
  0x00007f8f8f73ca1b: cmp    $0x2,%r13d
  0x00007f8f8f73ca1f: jl     0x00007f8f8f73cb41
  0x00007f8f8f73ca25: mov    0x8(%rbx),%r13
  0x00007f8f8f73ca29: movzwl 0x34(%r13),%r13d
  0x00007f8f8f73ca2e: sub    (%rdx),%r13
  0x00007f8f8f73ca31: sub    $0x1,%r13d
  0x00007f8f8f73ca35: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f73ca3a: test   %r13,%r13
  0x00007f8f8f73ca3d: jne    0x00007f8f8f73ca49
  0x00007f8f8f73ca3f: orq    $0x1,0x8(%rdx)
  0x00007f8f8f73ca47: jmp    0x00007f8f8f73caa2
  0x00007f8f8f73ca49: mov    0x8(%r13),%r13d
  0x00007f8f8f73ca4d: movabs $0x800000000,%r12
  0x00007f8f8f73ca57: add    %r12,%r13
  0x00007f8f8f73ca5a: xor    %r12,%r12
  0x00007f8f8f73ca5d: xor    0x8(%rdx),%r13
  0x00007f8f8f73ca61: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f73ca68: je     0x00007f8f8f73caa2
  0x00007f8f8f73ca6a: test   $0x2,%r13
  0x00007f8f8f73ca71: jne    0x00007f8f8f73caa2
  0x00007f8f8f73ca73: cmpq   $0x0,0x8(%rdx)
  0x00007f8f8f73ca7b: je     0x00007f8f8f73ca9e
  0x00007f8f8f73ca7d: cmpq   $0x1,0x8(%rdx)
  0x00007f8f8f73ca85: je     0x00007f8f8f73ca9e
  0x00007f8f8f73ca87: xor    0x8(%rdx),%r13
  0x00007f8f8f73ca8b: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f73ca92: je     0x00007f8f8f73caa2
  0x00007f8f8f73ca94: orq    $0x2,0x8(%rdx)
  0x00007f8f8f73ca9c: jmp    0x00007f8f8f73caa2
  0x00007f8f8f73ca9e: mov    %r13,0x8(%rdx)
  0x00007f8f8f73caa2: add    $0x10,%rdx
  0x00007f8f8f73caa6: mov    -0x18(%rdx),%r13
  0x00007f8f8f73caaa: sub    $0x2,%r13d
  0x00007f8f8f73caae: cmp    $0x2,%r13d
  0x00007f8f8f73cab2: jl     0x00007f8f8f73cb41
  0x00007f8f8f73cab8: mov    0x8(%rbx),%r13
  0x00007f8f8f73cabc: movzwl 0x34(%r13),%r13d
  0x00007f8f8f73cac1: sub    (%rdx),%r13
  0x00007f8f8f73cac4: sub    $0x1,%r13d
  0x00007f8f8f73cac8: mov    0x8(%rsp,%r13,8),%r13
  0x00007f8f8f73cacd: test   %r13,%r13
  0x00007f8f8f73cad0: jne    0x00007f8f8f73cadc
  0x00007f8f8f73cad2: orq    $0x1,0x8(%rdx)
  0x00007f8f8f73cada: jmp    0x00007f8f8f73cb35
  0x00007f8f8f73cadc: mov    0x8(%r13),%r13d
  0x00007f8f8f73cae0: movabs $0x800000000,%r12
  0x00007f8f8f73caea: add    %r12,%r13
  0x00007f8f8f73caed: xor    %r12,%r12
  0x00007f8f8f73caf0: xor    0x8(%rdx),%r13
  0x00007f8f8f73caf4: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f73cafb: je     0x00007f8f8f73cb35
  0x00007f8f8f73cafd: test   $0x2,%r13
  0x00007f8f8f73cb04: jne    0x00007f8f8f73cb35
  0x00007f8f8f73cb06: cmpq   $0x0,0x8(%rdx)
  0x00007f8f8f73cb0e: je     0x00007f8f8f73cb31
  0x00007f8f8f73cb10: cmpq   $0x1,0x8(%rdx)
  0x00007f8f8f73cb18: je     0x00007f8f8f73cb31
  0x00007f8f8f73cb1a: xor    0x8(%rdx),%r13
  0x00007f8f8f73cb1e: test   $0xfffffffffffffffc,%r13
  0x00007f8f8f73cb25: je     0x00007f8f8f73cb35
  0x00007f8f8f73cb27: orq    $0x2,0x8(%rdx)
  0x00007f8f8f73cb2f: jmp    0x00007f8f8f73cb35
  0x00007f8f8f73cb31: mov    %r13,0x8(%rdx)
  0x00007f8f8f73cb35: add    $0x10,%rdx
  0x00007f8f8f73cb39: mov    -0x28(%rdx),%r13
  0x00007f8f8f73cb3d: sub    $0x4,%r13d
  0x00007f8f8f73cb41: shl    $0x3,%r13d
  0x00007f8f8f73cb45: add    %r13,%rdx
  0x00007f8f8f73cb48: mov    %rdx,-0x28(%rbp)
  0x00007f8f8f73cb4c: lea    0x8(%rsp),%r13
  0x00007f8f8f73cb51: mov    %r13,-0x10(%rbp)
  0x00007f8f8f73cb55: jmpq   *0x48(%rbx)
  0x00007f8f8f73cb58: add    %al,(%rax)
  0x00007f8f8f73cb5a: add    %al,(%rax)
  0x00007f8f8f73cb5c: add    %al,(%rax)
  0x00007f8f8f73cb5e: add    %al,(%rax)

----------------------------------------------------------------------
nofast_getfield  234 nofast_getfield  [0x00007f8f8f73cb80, 0x00007f8f8f73cda0]  544 bytes

  0x00007f8f8f73cb80: push   %rax
  0x00007f8f8f73cb81: jmpq   0x00007f8f8f73cbbf
  0x00007f8f8f73cb86: sub    $0x8,%rsp
  0x00007f8f8f73cb8a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73cb8f: jmpq   0x00007f8f8f73cbbf
  0x00007f8f8f73cb94: sub    $0x10,%rsp
  0x00007f8f8f73cb98: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73cb9d: jmpq   0x00007f8f8f73cbbf
  0x00007f8f8f73cba2: sub    $0x10,%rsp
  0x00007f8f8f73cba6: mov    %rax,(%rsp)
  0x00007f8f8f73cbaa: movabs $0x0,%r10
  0x00007f8f8f73cbb4: mov    %r10,0x8(%rsp)
  0x00007f8f8f73cbb9: jmpq   0x00007f8f8f73cbbf
  0x00007f8f8f73cbbe: push   %rax
  0x00007f8f8f73cbbf: movzwl 0x1(%r13),%edx
  0x00007f8f8f73cbc4: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73cbc8: shl    $0x2,%edx
  0x00007f8f8f73cbcb: mov    0x28(%rcx,%rdx,8),%ebx
  0x00007f8f8f73cbcf: shr    $0x10,%ebx
  0x00007f8f8f73cbd2: and    $0xff,%ebx
  0x00007f8f8f73cbd8: cmp    $0xb4,%ebx
  0x00007f8f8f73cbde: je     0x00007f8f8f73cc94
  0x00007f8f8f73cbe4: mov    $0xb4,%ebx
  0x00007f8f8f73cbe9: callq  0x00007f8f8f73cbf3
  0x00007f8f8f73cbee: jmpq   0x00007f8f8f73cc88
  0x00007f8f8f73cbf3: mov    %rbx,%rsi
  0x00007f8f8f73cbf6: lea    0x8(%rsp),%rax
  0x00007f8f8f73cbfb: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73cbff: mov    %r15,%rdi
  0x00007f8f8f73cc02: vzeroupper 
  0x00007f8f8f73cc05: mov    %rbp,0x330(%r15)
  0x00007f8f8f73cc0c: mov    %rax,0x320(%r15)
  0x00007f8f8f73cc13: test   $0xf,%esp
  0x00007f8f8f73cc19: je     0x00007f8f8f73cc31
  0x00007f8f8f73cc1f: sub    $0x8,%rsp
  0x00007f8f8f73cc23: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f73cc28: add    $0x8,%rsp
  0x00007f8f8f73cc2c: jmpq   0x00007f8f8f73cc36
  0x00007f8f8f73cc31: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f73cc36: movabs $0x0,%r10
  0x00007f8f8f73cc40: mov    %r10,0x320(%r15)
  0x00007f8f8f73cc47: movabs $0x0,%r10
  0x00007f8f8f73cc51: mov    %r10,0x330(%r15)
  0x00007f8f8f73cc58: movabs $0x0,%r10
  0x00007f8f8f73cc62: mov    %r10,0x328(%r15)
  0x00007f8f8f73cc69: vzeroupper 
  0x00007f8f8f73cc6c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73cc74: je     0x00007f8f8f73cc7f
  0x00007f8f8f73cc7a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73cc7f: mov    -0x40(%rbp),%r13
  0x00007f8f8f73cc83: mov    -0x38(%rbp),%r14
  0x00007f8f8f73cc87: retq   
  0x00007f8f8f73cc88: movzwl 0x1(%r13),%edx
  0x00007f8f8f73cc8d: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73cc91: shl    $0x2,%edx
  0x00007f8f8f73cc94: mov    0x38(%rcx,%rdx,8),%rbx
  0x00007f8f8f73cc99: mov    0x40(%rcx,%rdx,8),%eax
  0x00007f8f8f73cc9d: pop    %rcx
  0x00007f8f8f73cc9e: cmp    (%rcx),%rax
  0x00007f8f8f73cca1: shr    $0x1c,%eax
  0x00007f8f8f73cca4: and    $0xf,%eax
  0x00007f8f8f73cca7: jne    0x00007f8f8f73ccb7
  0x00007f8f8f73ccad: movsbl (%rcx,%rbx,1),%eax
  0x00007f8f8f73ccb1: push   %rax
  0x00007f8f8f73ccb2: jmpq   0x00007f8f8f73cd6b
  0x00007f8f8f73ccb7: cmp    $0x1,%eax
  0x00007f8f8f73ccba: jne    0x00007f8f8f73ccca
  0x00007f8f8f73ccc0: movzbl (%rcx,%rbx,1),%eax
  0x00007f8f8f73ccc4: push   %rax
  0x00007f8f8f73ccc5: jmpq   0x00007f8f8f73cd6b
  0x00007f8f8f73ccca: cmp    $0x8,%eax
  0x00007f8f8f73cccd: jne    0x00007f8f8f73cce0
  0x00007f8f8f73ccd3: mov    (%rcx,%rbx,1),%eax
  0x00007f8f8f73ccd6: shl    $0x3,%rax
  0x00007f8f8f73ccda: push   %rax
  0x00007f8f8f73ccdb: jmpq   0x00007f8f8f73cd6b
  0x00007f8f8f73cce0: cmp    $0x4,%eax
  0x00007f8f8f73cce3: jne    0x00007f8f8f73ccf2
  0x00007f8f8f73cce9: mov    (%rcx,%rbx,1),%eax
  0x00007f8f8f73ccec: push   %rax
  0x00007f8f8f73cced: jmpq   0x00007f8f8f73cd6b
  0x00007f8f8f73ccf2: cmp    $0x2,%eax
  0x00007f8f8f73ccf5: jne    0x00007f8f8f73cd05
  0x00007f8f8f73ccfb: movzwl (%rcx,%rbx,1),%eax
  0x00007f8f8f73ccff: push   %rax
  0x00007f8f8f73cd00: jmpq   0x00007f8f8f73cd6b
  0x00007f8f8f73cd05: cmp    $0x3,%eax
  0x00007f8f8f73cd08: jne    0x00007f8f8f73cd18
  0x00007f8f8f73cd0e: movswl (%rcx,%rbx,1),%eax
  0x00007f8f8f73cd12: push   %rax
  0x00007f8f8f73cd13: jmpq   0x00007f8f8f73cd6b
  0x00007f8f8f73cd18: cmp    $0x5,%eax
  0x00007f8f8f73cd1b: jne    0x00007f8f8f73cd41
  0x00007f8f8f73cd21: mov    (%rcx,%rbx,1),%rax
  0x00007f8f8f73cd25: sub    $0x10,%rsp
  0x00007f8f8f73cd29: mov    %rax,(%rsp)
  0x00007f8f8f73cd2d: movabs $0x0,%r10
  0x00007f8f8f73cd37: mov    %r10,0x8(%rsp)
  0x00007f8f8f73cd3c: jmpq   0x00007f8f8f73cd6b
  0x00007f8f8f73cd41: cmp    $0x6,%eax
  0x00007f8f8f73cd44: jne    0x00007f8f8f73cd5d
  0x00007f8f8f73cd4a: vmovss (%rcx,%rbx,1),%xmm0
  0x00007f8f8f73cd4f: sub    $0x8,%rsp
  0x00007f8f8f73cd53: vmovss %xmm0,(%rsp)
  0x00007f8f8f73cd58: jmpq   0x00007f8f8f73cd6b
  0x00007f8f8f73cd5d: vmovsd (%rcx,%rbx,1),%xmm0
  0x00007f8f8f73cd62: sub    $0x10,%rsp
  0x00007f8f8f73cd66: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73cd6b: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73cd70: add    $0x3,%r13
  0x00007f8f8f73cd74: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73cd7e: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73cd82: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f73cd88: add    %al,(%rax)
  0x00007f8f8f73cd8a: add    %al,(%rax)
  0x00007f8f8f73cd8c: add    %al,(%rax)
  0x00007f8f8f73cd8e: add    %al,(%rax)
  0x00007f8f8f73cd90: add    %al,(%rax)
  0x00007f8f8f73cd92: add    %al,(%rax)
  0x00007f8f8f73cd94: add    %al,(%rax)
  0x00007f8f8f73cd96: add    %al,(%rax)
  0x00007f8f8f73cd98: add    %al,(%rax)
  0x00007f8f8f73cd9a: add    %al,(%rax)
  0x00007f8f8f73cd9c: add    %al,(%rax)
  0x00007f8f8f73cd9e: add    %al,(%rax)

----------------------------------------------------------------------
nofast_putfield  235 nofast_putfield  [0x00007f8f8f73cdc0, 0x00007f8f8f73d120]  864 bytes

  0x00007f8f8f73cdc0: push   %rax
  0x00007f8f8f73cdc1: jmpq   0x00007f8f8f73cdff
  0x00007f8f8f73cdc6: sub    $0x8,%rsp
  0x00007f8f8f73cdca: vmovss %xmm0,(%rsp)
  0x00007f8f8f73cdcf: jmpq   0x00007f8f8f73cdff
  0x00007f8f8f73cdd4: sub    $0x10,%rsp
  0x00007f8f8f73cdd8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73cddd: jmpq   0x00007f8f8f73cdff
  0x00007f8f8f73cde2: sub    $0x10,%rsp
  0x00007f8f8f73cde6: mov    %rax,(%rsp)
  0x00007f8f8f73cdea: movabs $0x0,%r10
  0x00007f8f8f73cdf4: mov    %r10,0x8(%rsp)
  0x00007f8f8f73cdf9: jmpq   0x00007f8f8f73cdff
  0x00007f8f8f73cdfe: push   %rax
  0x00007f8f8f73cdff: movzwl 0x1(%r13),%edx
  0x00007f8f8f73ce04: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73ce08: shl    $0x2,%edx
  0x00007f8f8f73ce0b: mov    0x28(%rcx,%rdx,8),%ebx
  0x00007f8f8f73ce0f: shr    $0x18,%ebx
  0x00007f8f8f73ce12: and    $0xff,%ebx
  0x00007f8f8f73ce18: cmp    $0xb5,%ebx
  0x00007f8f8f73ce1e: je     0x00007f8f8f73ced4
  0x00007f8f8f73ce24: mov    $0xb5,%ebx
  0x00007f8f8f73ce29: callq  0x00007f8f8f73ce33
  0x00007f8f8f73ce2e: jmpq   0x00007f8f8f73cec8
  0x00007f8f8f73ce33: mov    %rbx,%rsi
  0x00007f8f8f73ce36: lea    0x8(%rsp),%rax
  0x00007f8f8f73ce3b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73ce3f: mov    %r15,%rdi
  0x00007f8f8f73ce42: vzeroupper 
  0x00007f8f8f73ce45: mov    %rbp,0x330(%r15)
  0x00007f8f8f73ce4c: mov    %rax,0x320(%r15)
  0x00007f8f8f73ce53: test   $0xf,%esp
  0x00007f8f8f73ce59: je     0x00007f8f8f73ce71
  0x00007f8f8f73ce5f: sub    $0x8,%rsp
  0x00007f8f8f73ce63: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f73ce68: add    $0x8,%rsp
  0x00007f8f8f73ce6c: jmpq   0x00007f8f8f73ce76
  0x00007f8f8f73ce71: callq  0x00007f8fad02e1f0 = InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)
  0x00007f8f8f73ce76: movabs $0x0,%r10
  0x00007f8f8f73ce80: mov    %r10,0x320(%r15)
  0x00007f8f8f73ce87: movabs $0x0,%r10
  0x00007f8f8f73ce91: mov    %r10,0x330(%r15)
  0x00007f8f8f73ce98: movabs $0x0,%r10
  0x00007f8f8f73cea2: mov    %r10,0x328(%r15)
  0x00007f8f8f73cea9: vzeroupper 
  0x00007f8f8f73ceac: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73ceb4: je     0x00007f8f8f73cebf
  0x00007f8f8f73ceba: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73cebf: mov    -0x40(%rbp),%r13
  0x00007f8f8f73cec3: mov    -0x38(%rbp),%r14
  0x00007f8f8f73cec7: retq   
  0x00007f8f8f73cec8: movzwl 0x1(%r13),%edx
  0x00007f8f8f73cecd: mov    -0x30(%rbp),%rcx
  0x00007f8f8f73ced1: shl    $0x2,%edx
  0x00007f8f8f73ced4: mov    0x38(%rcx,%rdx,8),%rbx
  0x00007f8f8f73ced9: mov    0x40(%rcx,%rdx,8),%eax
  0x00007f8f8f73cedd: mov    %eax,%edx
  0x00007f8f8f73cedf: shr    $0x15,%edx
  0x00007f8f8f73cee2: and    $0x1,%edx
  0x00007f8f8f73cee5: shr    $0x1c,%eax
  0x00007f8f8f73cee8: and    $0xf,%eax
  0x00007f8f8f73ceeb: jne    0x00007f8f8f73cf04
  0x00007f8f8f73cef1: mov    (%rsp),%eax
  0x00007f8f8f73cef4: add    $0x8,%rsp
  0x00007f8f8f73cef8: pop    %rcx
  0x00007f8f8f73cef9: cmp    (%rcx),%rax
  0x00007f8f8f73cefc: mov    %al,(%rcx,%rbx,1)
  0x00007f8f8f73ceff: jmpq   0x00007f8f8f73d0f7
  0x00007f8f8f73cf04: cmp    $0x1,%eax
  0x00007f8f8f73cf07: jne    0x00007f8f8f73cf23
  0x00007f8f8f73cf0d: mov    (%rsp),%eax
  0x00007f8f8f73cf10: add    $0x8,%rsp
  0x00007f8f8f73cf14: pop    %rcx
  0x00007f8f8f73cf15: cmp    (%rcx),%rax
  0x00007f8f8f73cf18: and    $0x1,%eax
  0x00007f8f8f73cf1b: mov    %al,(%rcx,%rbx,1)
  0x00007f8f8f73cf1e: jmpq   0x00007f8f8f73d0f7
  0x00007f8f8f73cf23: cmp    $0x8,%eax
  0x00007f8f8f73cf26: jne    0x00007f8f8f73d051
  0x00007f8f8f73cf2c: pop    %rax
  0x00007f8f8f73cf2d: pop    %rcx
  0x00007f8f8f73cf2e: cmp    (%rcx),%rax
  0x00007f8f8f73cf31: lea    (%rcx,%rbx,1),%rdx
  0x00007f8f8f73cf35: cmpb   $0x0,0x30(%r15)
  0x00007f8f8f73cf3a: je     0x00007f8f8f73cfa1
  0x00007f8f8f73cf40: mov    (%rdx),%ebx
  0x00007f8f8f73cf42: shl    $0x3,%rbx
  0x00007f8f8f73cf46: cmp    $0x0,%rbx
  0x00007f8f8f73cf4a: je     0x00007f8f8f73cfa1
  0x00007f8f8f73cf50: mov    0x38(%r15),%r8
  0x00007f8f8f73cf54: cmp    $0x0,%r8
  0x00007f8f8f73cf58: je     0x00007f8f8f73cf72
  0x00007f8f8f73cf5e: sub    $0x8,%r8
  0x00007f8f8f73cf62: mov    %r8,0x38(%r15)
  0x00007f8f8f73cf66: add    0x48(%r15),%r8
  0x00007f8f8f73cf6a: mov    %rbx,(%r8)
  0x00007f8f8f73cf6d: jmpq   0x00007f8f8f73cfa1
  0x00007f8f8f73cf72: push   %rax
  0x00007f8f8f73cf73: push   %rdx
  0x00007f8f8f73cf74: push   %rbx
  0x00007f8f8f73cf75: mov    %r15,%rsi
  0x00007f8f8f73cf78: mov    %rbx,%rdi
  0x00007f8f8f73cf7b: test   $0xf,%esp
  0x00007f8f8f73cf81: je     0x00007f8f8f73cf99
  0x00007f8f8f73cf87: sub    $0x8,%rsp
  0x00007f8f8f73cf8b: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f73cf90: add    $0x8,%rsp
  0x00007f8f8f73cf94: jmpq   0x00007f8f8f73cf9e
  0x00007f8f8f73cf99: callq  0x00007f8facf1ec80 = G1BarrierSetRuntime::write_ref_field_pre_entry(oopDesc*, JavaThread*)
  0x00007f8f8f73cf9e: pop    %rbx
  0x00007f8f8f73cf9f: pop    %rdx
  0x00007f8f8f73cfa0: pop    %rax
  0x00007f8f8f73cfa1: mov    %rax,%rbx
  0x00007f8f8f73cfa4: shr    $0x3,%rax
  0x00007f8f8f73cfa8: mov    %eax,(%rdx)
  0x00007f8f8f73cfaa: mov    %rdx,%r8
  0x00007f8f8f73cfad: xor    %rbx,%r8
  0x00007f8f8f73cfb0: shr    $0x15,%r8
  0x00007f8f8f73cfb4: je     0x00007f8f8f73d04c
  0x00007f8f8f73cfba: cmp    $0x0,%rbx
  0x00007f8f8f73cfbe: je     0x00007f8f8f73d04c
  0x00007f8f8f73cfc4: mov    %rdx,%r8
  0x00007f8f8f73cfc7: shr    $0x9,%r8
  0x00007f8f8f73cfcb: movabs $0x7f8f89e7a000,%rbx
  0x00007f8f8f73cfd5: add    %rbx,%r8
  0x00007f8f8f73cfd8: cmpb   $0x20,(%r8)
  0x00007f8f8f73cfdc: je     0x00007f8f8f73d04c
  0x00007f8f8f73cfe2: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f73cfe8: cmpb   $0x0,(%r8)
  0x00007f8f8f73cfec: je     0x00007f8f8f73d04c
  0x00007f8f8f73cff2: movb   $0x0,(%r8)
  0x00007f8f8f73cff6: cmpl   $0x0,0x70(%r15)
  0x00007f8f8f73cffe: je     0x00007f8f8f73d01f
  0x00007f8f8f73d004: subl   $0x8,0x70(%r15)
  0x00007f8f8f73d009: mov    0x80(%r15),%rbx
  0x00007f8f8f73d010: movslq 0x70(%r15),%r10
  0x00007f8f8f73d014: add    %r10,%rbx
  0x00007f8f8f73d017: mov    %r8,(%rbx)
  0x00007f8f8f73d01a: jmpq   0x00007f8f8f73d04c
  0x00007f8f8f73d01f: push   %rdx
  0x00007f8f8f73d020: push   %rbx
  0x00007f8f8f73d021: mov    %r15,%rsi
  0x00007f8f8f73d024: mov    %r8,%rdi
  0x00007f8f8f73d027: test   $0xf,%esp
  0x00007f8f8f73d02d: je     0x00007f8f8f73d045
  0x00007f8f8f73d033: sub    $0x8,%rsp
  0x00007f8f8f73d037: callq  0x00007f8facf1ecb0 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x00007f8f8f73d03c: add    $0x8,%rsp
  0x00007f8f8f73d040: jmpq   0x00007f8f8f73d04a
  0x00007f8f8f73d045: callq  0x00007f8facf1ecb0 = G1BarrierSetRuntime::write_ref_field_post_entry(void*, JavaThread*)
  0x00007f8f8f73d04a: pop    %rbx
  0x00007f8f8f73d04b: pop    %rdx
  0x00007f8f8f73d04c: jmpq   0x00007f8f8f73d0f7
  0x00007f8f8f73d051: cmp    $0x4,%eax
  0x00007f8f8f73d054: jne    0x00007f8f8f73d06d
  0x00007f8f8f73d05a: mov    (%rsp),%eax
  0x00007f8f8f73d05d: add    $0x8,%rsp
  0x00007f8f8f73d061: pop    %rcx
  0x00007f8f8f73d062: cmp    (%rcx),%rax
  0x00007f8f8f73d065: mov    %eax,(%rcx,%rbx,1)
  0x00007f8f8f73d068: jmpq   0x00007f8f8f73d0f7
  0x00007f8f8f73d06d: cmp    $0x2,%eax
  0x00007f8f8f73d070: jne    0x00007f8f8f73d08a
  0x00007f8f8f73d076: mov    (%rsp),%eax
  0x00007f8f8f73d079: add    $0x8,%rsp
  0x00007f8f8f73d07d: pop    %rcx
  0x00007f8f8f73d07e: cmp    (%rcx),%rax
  0x00007f8f8f73d081: mov    %ax,(%rcx,%rbx,1)
  0x00007f8f8f73d085: jmpq   0x00007f8f8f73d0f7
  0x00007f8f8f73d08a: cmp    $0x3,%eax
  0x00007f8f8f73d08d: jne    0x00007f8f8f73d0a7
  0x00007f8f8f73d093: mov    (%rsp),%eax
  0x00007f8f8f73d096: add    $0x8,%rsp
  0x00007f8f8f73d09a: pop    %rcx
  0x00007f8f8f73d09b: cmp    (%rcx),%rax
  0x00007f8f8f73d09e: mov    %ax,(%rcx,%rbx,1)
  0x00007f8f8f73d0a2: jmpq   0x00007f8f8f73d0f7
  0x00007f8f8f73d0a7: cmp    $0x5,%eax
  0x00007f8f8f73d0aa: jne    0x00007f8f8f73d0c5
  0x00007f8f8f73d0b0: mov    (%rsp),%rax
  0x00007f8f8f73d0b4: add    $0x10,%rsp
  0x00007f8f8f73d0b8: pop    %rcx
  0x00007f8f8f73d0b9: cmp    (%rcx),%rax
  0x00007f8f8f73d0bc: mov    %rax,(%rcx,%rbx,1)
  0x00007f8f8f73d0c0: jmpq   0x00007f8f8f73d0f7
  0x00007f8f8f73d0c5: cmp    $0x6,%eax
  0x00007f8f8f73d0c8: jne    0x00007f8f8f73d0e5
  0x00007f8f8f73d0ce: vmovss (%rsp),%xmm0
  0x00007f8f8f73d0d3: add    $0x8,%rsp
  0x00007f8f8f73d0d7: pop    %rcx
  0x00007f8f8f73d0d8: cmp    (%rcx),%rax
  0x00007f8f8f73d0db: vmovss %xmm0,(%rcx,%rbx,1)
  0x00007f8f8f73d0e0: jmpq   0x00007f8f8f73d0f7
  0x00007f8f8f73d0e5: vmovsd (%rsp),%xmm0
  0x00007f8f8f73d0ea: add    $0x10,%rsp
  0x00007f8f8f73d0ee: pop    %rcx
  0x00007f8f8f73d0ef: cmp    (%rcx),%rax
  0x00007f8f8f73d0f2: vmovsd %xmm0,(%rcx,%rbx,1)
  0x00007f8f8f73d0f7: test   %edx,%edx
  0x00007f8f8f73d0f9: je     0x00007f8f8f73d105
  0x00007f8f8f73d0ff: lock addl $0x0,-0x40(%rsp)
  0x00007f8f8f73d105: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73d10a: add    $0x3,%r13
  0x00007f8f8f73d10e: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73d118: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73d11c: nopl   0x0(%rax)

----------------------------------------------------------------------
nofast_aload_0  236 nofast_aload_0  [0x00007f8f8f73d140, 0x00007f8f8f73d1a0]  96 bytes

  0x00007f8f8f73d140: push   %rax
  0x00007f8f8f73d141: jmpq   0x00007f8f8f73d17f
  0x00007f8f8f73d146: sub    $0x8,%rsp
  0x00007f8f8f73d14a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73d14f: jmpq   0x00007f8f8f73d17f
  0x00007f8f8f73d154: sub    $0x10,%rsp
  0x00007f8f8f73d158: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73d15d: jmpq   0x00007f8f8f73d17f
  0x00007f8f8f73d162: sub    $0x10,%rsp
  0x00007f8f8f73d166: mov    %rax,(%rsp)
  0x00007f8f8f73d16a: movabs $0x0,%r10
  0x00007f8f8f73d174: mov    %r10,0x8(%rsp)
  0x00007f8f8f73d179: jmpq   0x00007f8f8f73d17f
  0x00007f8f8f73d17e: push   %rax
  0x00007f8f8f73d17f: mov    (%r14),%rax
  0x00007f8f8f73d182: movzbl 0x1(%r13),%ebx
  0x00007f8f8f73d187: inc    %r13
  0x00007f8f8f73d18a: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f73d194: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73d198: add    %al,(%rax)
  0x00007f8f8f73d19a: add    %al,(%rax)
  0x00007f8f8f73d19c: add    %al,(%rax)
  0x00007f8f8f73d19e: add    %al,(%rax)

----------------------------------------------------------------------
nofast_iload  237 nofast_iload  [0x00007f8f8f73d1c0, 0x00007f8f8f73d240]  128 bytes

  0x00007f8f8f73d1c0: push   %rax
  0x00007f8f8f73d1c1: jmpq   0x00007f8f8f73d1ff
  0x00007f8f8f73d1c6: sub    $0x8,%rsp
  0x00007f8f8f73d1ca: vmovss %xmm0,(%rsp)
  0x00007f8f8f73d1cf: jmpq   0x00007f8f8f73d1ff
  0x00007f8f8f73d1d4: sub    $0x10,%rsp
  0x00007f8f8f73d1d8: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73d1dd: jmpq   0x00007f8f8f73d1ff
  0x00007f8f8f73d1e2: sub    $0x10,%rsp
  0x00007f8f8f73d1e6: mov    %rax,(%rsp)
  0x00007f8f8f73d1ea: movabs $0x0,%r10
  0x00007f8f8f73d1f4: mov    %r10,0x8(%rsp)
  0x00007f8f8f73d1f9: jmpq   0x00007f8f8f73d1ff
  0x00007f8f8f73d1fe: push   %rax
  0x00007f8f8f73d1ff: movzbl 0x1(%r13),%ebx
  0x00007f8f8f73d204: neg    %rbx
  0x00007f8f8f73d207: mov    (%r14,%rbx,8),%eax
  0x00007f8f8f73d20b: movzbl 0x2(%r13),%ebx
  0x00007f8f8f73d210: add    $0x2,%r13
  0x00007f8f8f73d214: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73d21e: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73d222: nopw   0x0(%rax,%rax,1)
  0x00007f8f8f73d228: add    %al,(%rax)
  0x00007f8f8f73d22a: add    %al,(%rax)
  0x00007f8f8f73d22c: add    %al,(%rax)
  0x00007f8f8f73d22e: add    %al,(%rax)
  0x00007f8f8f73d230: add    %al,(%rax)
  0x00007f8f8f73d232: add    %al,(%rax)
  0x00007f8f8f73d234: add    %al,(%rax)
  0x00007f8f8f73d236: add    %al,(%rax)
  0x00007f8f8f73d238: add    %al,(%rax)
  0x00007f8f8f73d23a: add    %al,(%rax)
  0x00007f8f8f73d23c: add    %al,(%rax)
  0x00007f8f8f73d23e: add    %al,(%rax)

----------------------------------------------------------------------
_shouldnotreachhere  238 _shouldnotreachhere  [0x00007f8f8f73d260, 0x00007f8f8f73d340]  224 bytes

  0x00007f8f8f73d260: push   %rax
  0x00007f8f8f73d261: jmpq   0x00007f8f8f73d29f
  0x00007f8f8f73d266: sub    $0x8,%rsp
  0x00007f8f8f73d26a: vmovss %xmm0,(%rsp)
  0x00007f8f8f73d26f: jmpq   0x00007f8f8f73d29f
  0x00007f8f8f73d274: sub    $0x10,%rsp
  0x00007f8f8f73d278: vmovsd %xmm0,(%rsp)
  0x00007f8f8f73d27d: jmpq   0x00007f8f8f73d29f
  0x00007f8f8f73d282: sub    $0x10,%rsp
  0x00007f8f8f73d286: mov    %rax,(%rsp)
  0x00007f8f8f73d28a: movabs $0x0,%r10
  0x00007f8f8f73d294: mov    %r10,0x8(%rsp)
  0x00007f8f8f73d299: jmpq   0x00007f8f8f73d29f
  0x00007f8f8f73d29e: push   %rax
  0x00007f8f8f73d29f: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73d2a4: sub    $0x80,%rsp
  0x00007f8f8f73d2ab: mov    %rax,0x78(%rsp)
  0x00007f8f8f73d2b0: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73d2b5: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73d2ba: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73d2bf: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73d2c4: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73d2c9: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73d2ce: mov    %r8,0x38(%rsp)
  0x00007f8f8f73d2d3: mov    %r9,0x30(%rsp)
  0x00007f8f8f73d2d8: mov    %r10,0x28(%rsp)
  0x00007f8f8f73d2dd: mov    %r11,0x20(%rsp)
  0x00007f8f8f73d2e2: mov    %r12,0x18(%rsp)
  0x00007f8f8f73d2e7: mov    %r13,0x10(%rsp)
  0x00007f8f8f73d2ec: mov    %r14,0x8(%rsp)
  0x00007f8f8f73d2f1: mov    %r15,(%rsp)
  0x00007f8f8f73d2f5: movabs $0x7f8fad6abccf,%rdi
  0x00007f8f8f73d2ff: movabs $0x7f8f8f73d29f,%rsi
  0x00007f8f8f73d309: mov    %rsp,%rdx
  0x00007f8f8f73d30c: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73d310: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73d315: hlt    
  0x00007f8f8f73d316: movzbl 0x1(%r13),%ebx
  0x00007f8f8f73d31b: inc    %r13
  0x00007f8f8f73d31e: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73d328: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73d32c: nopl   0x0(%rax)
  0x00007f8f8f73d330: add    %al,(%rax)
  0x00007f8f8f73d332: add    %al,(%rax)
  0x00007f8f8f73d334: add    %al,(%rax)
  0x00007f8f8f73d336: add    %al,(%rax)
  0x00007f8f8f73d338: add    %al,(%rax)
  0x00007f8f8f73d33a: add    %al,(%rax)
  0x00007f8f8f73d33c: add    %al,(%rax)
  0x00007f8f8f73d33e: add    %al,(%rax)

----------------------------------------------------------------------
deoptimization entry points  [0x00007f8f8f73d360, 0x00007f8f8f740400]  12448 bytes

  0x00007f8f8f73d360: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73d368: mov    -0x40(%rbp),%r13
  0x00007f8f8f73d36c: mov    -0x38(%rbp),%r14
  0x00007f8f8f73d370: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73d378: je     0x00007f8f8f73d491
  0x00007f8f8f73d37e: callq  0x00007f8f8f73d388
  0x00007f8f8f73d383: jmpq   0x00007f8f8f73d41a
  0x00007f8f8f73d388: lea    0x8(%rsp),%rax
  0x00007f8f8f73d38d: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73d391: mov    %r15,%rdi
  0x00007f8f8f73d394: vzeroupper 
  0x00007f8f8f73d397: mov    %rbp,0x330(%r15)
  0x00007f8f8f73d39e: mov    %rax,0x320(%r15)
  0x00007f8f8f73d3a5: test   $0xf,%esp
  0x00007f8f8f73d3ab: je     0x00007f8f8f73d3c3
  0x00007f8f8f73d3b1: sub    $0x8,%rsp
  0x00007f8f8f73d3b5: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73d3ba: add    $0x8,%rsp
  0x00007f8f8f73d3be: jmpq   0x00007f8f8f73d3c8
  0x00007f8f8f73d3c3: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73d3c8: movabs $0x0,%r10
  0x00007f8f8f73d3d2: mov    %r10,0x320(%r15)
  0x00007f8f8f73d3d9: movabs $0x0,%r10
  0x00007f8f8f73d3e3: mov    %r10,0x330(%r15)
  0x00007f8f8f73d3ea: movabs $0x0,%r10
  0x00007f8f8f73d3f4: mov    %r10,0x328(%r15)
  0x00007f8f8f73d3fb: vzeroupper 
  0x00007f8f8f73d3fe: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73d406: je     0x00007f8f8f73d411
  0x00007f8f8f73d40c: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73d411: mov    -0x40(%rbp),%r13
  0x00007f8f8f73d415: mov    -0x38(%rbp),%r14
  0x00007f8f8f73d419: retq   
  0x00007f8f8f73d41a: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73d41f: sub    $0x80,%rsp
  0x00007f8f8f73d426: mov    %rax,0x78(%rsp)
  0x00007f8f8f73d42b: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73d430: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73d435: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73d43a: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73d43f: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73d444: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73d449: mov    %r8,0x38(%rsp)
  0x00007f8f8f73d44e: mov    %r9,0x30(%rsp)
  0x00007f8f8f73d453: mov    %r10,0x28(%rsp)
  0x00007f8f8f73d458: mov    %r11,0x20(%rsp)
  0x00007f8f8f73d45d: mov    %r12,0x18(%rsp)
  0x00007f8f8f73d462: mov    %r13,0x10(%rsp)
  0x00007f8f8f73d467: mov    %r14,0x8(%rsp)
  0x00007f8f8f73d46c: mov    %r15,(%rsp)
  0x00007f8f8f73d470: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73d47a: movabs $0x7f8f8f73d41a,%rsi
  0x00007f8f8f73d484: mov    %rsp,%rdx
  0x00007f8f8f73d487: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73d48b: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73d490: hlt    
  0x00007f8f8f73d491: movzbl 0x0(%r13),%ebx
  0x00007f8f8f73d496: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73d4a0: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73d4a4: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73d4ac: mov    -0x40(%rbp),%r13
  0x00007f8f8f73d4b0: mov    -0x38(%rbp),%r14
  0x00007f8f8f73d4b4: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73d4bc: je     0x00007f8f8f73d5d5
  0x00007f8f8f73d4c2: callq  0x00007f8f8f73d4cc
  0x00007f8f8f73d4c7: jmpq   0x00007f8f8f73d55e
  0x00007f8f8f73d4cc: lea    0x8(%rsp),%rax
  0x00007f8f8f73d4d1: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73d4d5: mov    %r15,%rdi
  0x00007f8f8f73d4d8: vzeroupper 
  0x00007f8f8f73d4db: mov    %rbp,0x330(%r15)
  0x00007f8f8f73d4e2: mov    %rax,0x320(%r15)
  0x00007f8f8f73d4e9: test   $0xf,%esp
  0x00007f8f8f73d4ef: je     0x00007f8f8f73d507
  0x00007f8f8f73d4f5: sub    $0x8,%rsp
  0x00007f8f8f73d4f9: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73d4fe: add    $0x8,%rsp
  0x00007f8f8f73d502: jmpq   0x00007f8f8f73d50c
  0x00007f8f8f73d507: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73d50c: movabs $0x0,%r10
  0x00007f8f8f73d516: mov    %r10,0x320(%r15)
  0x00007f8f8f73d51d: movabs $0x0,%r10
  0x00007f8f8f73d527: mov    %r10,0x330(%r15)
  0x00007f8f8f73d52e: movabs $0x0,%r10
  0x00007f8f8f73d538: mov    %r10,0x328(%r15)
  0x00007f8f8f73d53f: vzeroupper 
  0x00007f8f8f73d542: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73d54a: je     0x00007f8f8f73d555
  0x00007f8f8f73d550: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73d555: mov    -0x40(%rbp),%r13
  0x00007f8f8f73d559: mov    -0x38(%rbp),%r14
  0x00007f8f8f73d55d: retq   
  0x00007f8f8f73d55e: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73d563: sub    $0x80,%rsp
  0x00007f8f8f73d56a: mov    %rax,0x78(%rsp)
  0x00007f8f8f73d56f: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73d574: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73d579: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73d57e: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73d583: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73d588: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73d58d: mov    %r8,0x38(%rsp)
  0x00007f8f8f73d592: mov    %r9,0x30(%rsp)
  0x00007f8f8f73d597: mov    %r10,0x28(%rsp)
  0x00007f8f8f73d59c: mov    %r11,0x20(%rsp)
  0x00007f8f8f73d5a1: mov    %r12,0x18(%rsp)
  0x00007f8f8f73d5a6: mov    %r13,0x10(%rsp)
  0x00007f8f8f73d5ab: mov    %r14,0x8(%rsp)
  0x00007f8f8f73d5b0: mov    %r15,(%rsp)
  0x00007f8f8f73d5b4: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73d5be: movabs $0x7f8f8f73d55e,%rsi
  0x00007f8f8f73d5c8: mov    %rsp,%rdx
  0x00007f8f8f73d5cb: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73d5cf: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73d5d4: hlt    
  0x00007f8f8f73d5d5: movzbl 0x1(%r13),%ebx
  0x00007f8f8f73d5da: inc    %r13
  0x00007f8f8f73d5dd: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73d5e7: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73d5eb: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73d5f3: mov    -0x40(%rbp),%r13
  0x00007f8f8f73d5f7: mov    -0x38(%rbp),%r14
  0x00007f8f8f73d5fb: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73d603: je     0x00007f8f8f73d71c
  0x00007f8f8f73d609: callq  0x00007f8f8f73d613
  0x00007f8f8f73d60e: jmpq   0x00007f8f8f73d6a5
  0x00007f8f8f73d613: lea    0x8(%rsp),%rax
  0x00007f8f8f73d618: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73d61c: mov    %r15,%rdi
  0x00007f8f8f73d61f: vzeroupper 
  0x00007f8f8f73d622: mov    %rbp,0x330(%r15)
  0x00007f8f8f73d629: mov    %rax,0x320(%r15)
  0x00007f8f8f73d630: test   $0xf,%esp
  0x00007f8f8f73d636: je     0x00007f8f8f73d64e
  0x00007f8f8f73d63c: sub    $0x8,%rsp
  0x00007f8f8f73d640: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73d645: add    $0x8,%rsp
  0x00007f8f8f73d649: jmpq   0x00007f8f8f73d653
  0x00007f8f8f73d64e: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73d653: movabs $0x0,%r10
  0x00007f8f8f73d65d: mov    %r10,0x320(%r15)
  0x00007f8f8f73d664: movabs $0x0,%r10
  0x00007f8f8f73d66e: mov    %r10,0x330(%r15)
  0x00007f8f8f73d675: movabs $0x0,%r10
  0x00007f8f8f73d67f: mov    %r10,0x328(%r15)
  0x00007f8f8f73d686: vzeroupper 
  0x00007f8f8f73d689: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73d691: je     0x00007f8f8f73d69c
  0x00007f8f8f73d697: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73d69c: mov    -0x40(%rbp),%r13
  0x00007f8f8f73d6a0: mov    -0x38(%rbp),%r14
  0x00007f8f8f73d6a4: retq   
  0x00007f8f8f73d6a5: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73d6aa: sub    $0x80,%rsp
  0x00007f8f8f73d6b1: mov    %rax,0x78(%rsp)
  0x00007f8f8f73d6b6: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73d6bb: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73d6c0: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73d6c5: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73d6ca: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73d6cf: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73d6d4: mov    %r8,0x38(%rsp)
  0x00007f8f8f73d6d9: mov    %r9,0x30(%rsp)
  0x00007f8f8f73d6de: mov    %r10,0x28(%rsp)
  0x00007f8f8f73d6e3: mov    %r11,0x20(%rsp)
  0x00007f8f8f73d6e8: mov    %r12,0x18(%rsp)
  0x00007f8f8f73d6ed: mov    %r13,0x10(%rsp)
  0x00007f8f8f73d6f2: mov    %r14,0x8(%rsp)
  0x00007f8f8f73d6f7: mov    %r15,(%rsp)
  0x00007f8f8f73d6fb: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73d705: movabs $0x7f8f8f73d6a5,%rsi
  0x00007f8f8f73d70f: mov    %rsp,%rdx
  0x00007f8f8f73d712: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73d716: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73d71b: hlt    
  0x00007f8f8f73d71c: movzbl 0x1(%r13),%ebx
  0x00007f8f8f73d721: inc    %r13
  0x00007f8f8f73d724: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73d72e: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73d732: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73d73a: mov    -0x40(%rbp),%r13
  0x00007f8f8f73d73e: mov    -0x38(%rbp),%r14
  0x00007f8f8f73d742: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73d74a: je     0x00007f8f8f73d863
  0x00007f8f8f73d750: callq  0x00007f8f8f73d75a
  0x00007f8f8f73d755: jmpq   0x00007f8f8f73d7ec
  0x00007f8f8f73d75a: lea    0x8(%rsp),%rax
  0x00007f8f8f73d75f: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73d763: mov    %r15,%rdi
  0x00007f8f8f73d766: vzeroupper 
  0x00007f8f8f73d769: mov    %rbp,0x330(%r15)
  0x00007f8f8f73d770: mov    %rax,0x320(%r15)
  0x00007f8f8f73d777: test   $0xf,%esp
  0x00007f8f8f73d77d: je     0x00007f8f8f73d795
  0x00007f8f8f73d783: sub    $0x8,%rsp
  0x00007f8f8f73d787: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73d78c: add    $0x8,%rsp
  0x00007f8f8f73d790: jmpq   0x00007f8f8f73d79a
  0x00007f8f8f73d795: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73d79a: movabs $0x0,%r10
  0x00007f8f8f73d7a4: mov    %r10,0x320(%r15)
  0x00007f8f8f73d7ab: movabs $0x0,%r10
  0x00007f8f8f73d7b5: mov    %r10,0x330(%r15)
  0x00007f8f8f73d7bc: movabs $0x0,%r10
  0x00007f8f8f73d7c6: mov    %r10,0x328(%r15)
  0x00007f8f8f73d7cd: vzeroupper 
  0x00007f8f8f73d7d0: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73d7d8: je     0x00007f8f8f73d7e3
  0x00007f8f8f73d7de: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73d7e3: mov    -0x40(%rbp),%r13
  0x00007f8f8f73d7e7: mov    -0x38(%rbp),%r14
  0x00007f8f8f73d7eb: retq   
  0x00007f8f8f73d7ec: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73d7f1: sub    $0x80,%rsp
  0x00007f8f8f73d7f8: mov    %rax,0x78(%rsp)
  0x00007f8f8f73d7fd: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73d802: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73d807: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73d80c: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73d811: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73d816: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73d81b: mov    %r8,0x38(%rsp)
  0x00007f8f8f73d820: mov    %r9,0x30(%rsp)
  0x00007f8f8f73d825: mov    %r10,0x28(%rsp)
  0x00007f8f8f73d82a: mov    %r11,0x20(%rsp)
  0x00007f8f8f73d82f: mov    %r12,0x18(%rsp)
  0x00007f8f8f73d834: mov    %r13,0x10(%rsp)
  0x00007f8f8f73d839: mov    %r14,0x8(%rsp)
  0x00007f8f8f73d83e: mov    %r15,(%rsp)
  0x00007f8f8f73d842: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73d84c: movabs $0x7f8f8f73d7ec,%rsi
  0x00007f8f8f73d856: mov    %rsp,%rdx
  0x00007f8f8f73d859: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73d85d: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73d862: hlt    
  0x00007f8f8f73d863: movzbl 0x1(%r13),%ebx
  0x00007f8f8f73d868: inc    %r13
  0x00007f8f8f73d86b: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f73d875: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73d879: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73d881: mov    -0x40(%rbp),%r13
  0x00007f8f8f73d885: mov    -0x38(%rbp),%r14
  0x00007f8f8f73d889: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73d891: je     0x00007f8f8f73d9aa
  0x00007f8f8f73d897: callq  0x00007f8f8f73d8a1
  0x00007f8f8f73d89c: jmpq   0x00007f8f8f73d933
  0x00007f8f8f73d8a1: lea    0x8(%rsp),%rax
  0x00007f8f8f73d8a6: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73d8aa: mov    %r15,%rdi
  0x00007f8f8f73d8ad: vzeroupper 
  0x00007f8f8f73d8b0: mov    %rbp,0x330(%r15)
  0x00007f8f8f73d8b7: mov    %rax,0x320(%r15)
  0x00007f8f8f73d8be: test   $0xf,%esp
  0x00007f8f8f73d8c4: je     0x00007f8f8f73d8dc
  0x00007f8f8f73d8ca: sub    $0x8,%rsp
  0x00007f8f8f73d8ce: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73d8d3: add    $0x8,%rsp
  0x00007f8f8f73d8d7: jmpq   0x00007f8f8f73d8e1
  0x00007f8f8f73d8dc: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73d8e1: movabs $0x0,%r10
  0x00007f8f8f73d8eb: mov    %r10,0x320(%r15)
  0x00007f8f8f73d8f2: movabs $0x0,%r10
  0x00007f8f8f73d8fc: mov    %r10,0x330(%r15)
  0x00007f8f8f73d903: movabs $0x0,%r10
  0x00007f8f8f73d90d: mov    %r10,0x328(%r15)
  0x00007f8f8f73d914: vzeroupper 
  0x00007f8f8f73d917: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73d91f: je     0x00007f8f8f73d92a
  0x00007f8f8f73d925: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73d92a: mov    -0x40(%rbp),%r13
  0x00007f8f8f73d92e: mov    -0x38(%rbp),%r14
  0x00007f8f8f73d932: retq   
  0x00007f8f8f73d933: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73d938: sub    $0x80,%rsp
  0x00007f8f8f73d93f: mov    %rax,0x78(%rsp)
  0x00007f8f8f73d944: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73d949: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73d94e: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73d953: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73d958: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73d95d: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73d962: mov    %r8,0x38(%rsp)
  0x00007f8f8f73d967: mov    %r9,0x30(%rsp)
  0x00007f8f8f73d96c: mov    %r10,0x28(%rsp)
  0x00007f8f8f73d971: mov    %r11,0x20(%rsp)
  0x00007f8f8f73d976: mov    %r12,0x18(%rsp)
  0x00007f8f8f73d97b: mov    %r13,0x10(%rsp)
  0x00007f8f8f73d980: mov    %r14,0x8(%rsp)
  0x00007f8f8f73d985: mov    %r15,(%rsp)
  0x00007f8f8f73d989: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73d993: movabs $0x7f8f8f73d933,%rsi
  0x00007f8f8f73d99d: mov    %rsp,%rdx
  0x00007f8f8f73d9a0: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73d9a4: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73d9a9: hlt    
  0x00007f8f8f73d9aa: movzbl 0x1(%r13),%ebx
  0x00007f8f8f73d9af: inc    %r13
  0x00007f8f8f73d9b2: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f73d9bc: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73d9c0: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73d9c8: mov    -0x40(%rbp),%r13
  0x00007f8f8f73d9cc: mov    -0x38(%rbp),%r14
  0x00007f8f8f73d9d0: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73d9d8: je     0x00007f8f8f73daf1
  0x00007f8f8f73d9de: callq  0x00007f8f8f73d9e8
  0x00007f8f8f73d9e3: jmpq   0x00007f8f8f73da7a
  0x00007f8f8f73d9e8: lea    0x8(%rsp),%rax
  0x00007f8f8f73d9ed: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73d9f1: mov    %r15,%rdi
  0x00007f8f8f73d9f4: vzeroupper 
  0x00007f8f8f73d9f7: mov    %rbp,0x330(%r15)
  0x00007f8f8f73d9fe: mov    %rax,0x320(%r15)
  0x00007f8f8f73da05: test   $0xf,%esp
  0x00007f8f8f73da0b: je     0x00007f8f8f73da23
  0x00007f8f8f73da11: sub    $0x8,%rsp
  0x00007f8f8f73da15: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73da1a: add    $0x8,%rsp
  0x00007f8f8f73da1e: jmpq   0x00007f8f8f73da28
  0x00007f8f8f73da23: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73da28: movabs $0x0,%r10
  0x00007f8f8f73da32: mov    %r10,0x320(%r15)
  0x00007f8f8f73da39: movabs $0x0,%r10
  0x00007f8f8f73da43: mov    %r10,0x330(%r15)
  0x00007f8f8f73da4a: movabs $0x0,%r10
  0x00007f8f8f73da54: mov    %r10,0x328(%r15)
  0x00007f8f8f73da5b: vzeroupper 
  0x00007f8f8f73da5e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73da66: je     0x00007f8f8f73da71
  0x00007f8f8f73da6c: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73da71: mov    -0x40(%rbp),%r13
  0x00007f8f8f73da75: mov    -0x38(%rbp),%r14
  0x00007f8f8f73da79: retq   
  0x00007f8f8f73da7a: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73da7f: sub    $0x80,%rsp
  0x00007f8f8f73da86: mov    %rax,0x78(%rsp)
  0x00007f8f8f73da8b: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73da90: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73da95: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73da9a: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73da9f: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73daa4: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73daa9: mov    %r8,0x38(%rsp)
  0x00007f8f8f73daae: mov    %r9,0x30(%rsp)
  0x00007f8f8f73dab3: mov    %r10,0x28(%rsp)
  0x00007f8f8f73dab8: mov    %r11,0x20(%rsp)
  0x00007f8f8f73dabd: mov    %r12,0x18(%rsp)
  0x00007f8f8f73dac2: mov    %r13,0x10(%rsp)
  0x00007f8f8f73dac7: mov    %r14,0x8(%rsp)
  0x00007f8f8f73dacc: mov    %r15,(%rsp)
  0x00007f8f8f73dad0: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73dada: movabs $0x7f8f8f73da7a,%rsi
  0x00007f8f8f73dae4: mov    %rsp,%rdx
  0x00007f8f8f73dae7: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73daeb: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73daf0: hlt    
  0x00007f8f8f73daf1: movzbl 0x1(%r13),%ebx
  0x00007f8f8f73daf6: inc    %r13
  0x00007f8f8f73daf9: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f73db03: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73db07: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73db0f: mov    -0x40(%rbp),%r13
  0x00007f8f8f73db13: mov    -0x38(%rbp),%r14
  0x00007f8f8f73db17: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73db1f: je     0x00007f8f8f73dc38
  0x00007f8f8f73db25: callq  0x00007f8f8f73db2f
  0x00007f8f8f73db2a: jmpq   0x00007f8f8f73dbc1
  0x00007f8f8f73db2f: lea    0x8(%rsp),%rax
  0x00007f8f8f73db34: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73db38: mov    %r15,%rdi
  0x00007f8f8f73db3b: vzeroupper 
  0x00007f8f8f73db3e: mov    %rbp,0x330(%r15)
  0x00007f8f8f73db45: mov    %rax,0x320(%r15)
  0x00007f8f8f73db4c: test   $0xf,%esp
  0x00007f8f8f73db52: je     0x00007f8f8f73db6a
  0x00007f8f8f73db58: sub    $0x8,%rsp
  0x00007f8f8f73db5c: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73db61: add    $0x8,%rsp
  0x00007f8f8f73db65: jmpq   0x00007f8f8f73db6f
  0x00007f8f8f73db6a: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73db6f: movabs $0x0,%r10
  0x00007f8f8f73db79: mov    %r10,0x320(%r15)
  0x00007f8f8f73db80: movabs $0x0,%r10
  0x00007f8f8f73db8a: mov    %r10,0x330(%r15)
  0x00007f8f8f73db91: movabs $0x0,%r10
  0x00007f8f8f73db9b: mov    %r10,0x328(%r15)
  0x00007f8f8f73dba2: vzeroupper 
  0x00007f8f8f73dba5: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73dbad: je     0x00007f8f8f73dbb8
  0x00007f8f8f73dbb3: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73dbb8: mov    -0x40(%rbp),%r13
  0x00007f8f8f73dbbc: mov    -0x38(%rbp),%r14
  0x00007f8f8f73dbc0: retq   
  0x00007f8f8f73dbc1: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73dbc6: sub    $0x80,%rsp
  0x00007f8f8f73dbcd: mov    %rax,0x78(%rsp)
  0x00007f8f8f73dbd2: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73dbd7: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73dbdc: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73dbe1: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73dbe6: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73dbeb: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73dbf0: mov    %r8,0x38(%rsp)
  0x00007f8f8f73dbf5: mov    %r9,0x30(%rsp)
  0x00007f8f8f73dbfa: mov    %r10,0x28(%rsp)
  0x00007f8f8f73dbff: mov    %r11,0x20(%rsp)
  0x00007f8f8f73dc04: mov    %r12,0x18(%rsp)
  0x00007f8f8f73dc09: mov    %r13,0x10(%rsp)
  0x00007f8f8f73dc0e: mov    %r14,0x8(%rsp)
  0x00007f8f8f73dc13: mov    %r15,(%rsp)
  0x00007f8f8f73dc17: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73dc21: movabs $0x7f8f8f73dbc1,%rsi
  0x00007f8f8f73dc2b: mov    %rsp,%rdx
  0x00007f8f8f73dc2e: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73dc32: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73dc37: hlt    
  0x00007f8f8f73dc38: movzbl 0x1(%r13),%ebx
  0x00007f8f8f73dc3d: inc    %r13
  0x00007f8f8f73dc40: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f73dc4a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73dc4e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73dc56: mov    -0x40(%rbp),%r13
  0x00007f8f8f73dc5a: mov    -0x38(%rbp),%r14
  0x00007f8f8f73dc5e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73dc66: je     0x00007f8f8f73dd7f
  0x00007f8f8f73dc6c: callq  0x00007f8f8f73dc76
  0x00007f8f8f73dc71: jmpq   0x00007f8f8f73dd08
  0x00007f8f8f73dc76: lea    0x8(%rsp),%rax
  0x00007f8f8f73dc7b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73dc7f: mov    %r15,%rdi
  0x00007f8f8f73dc82: vzeroupper 
  0x00007f8f8f73dc85: mov    %rbp,0x330(%r15)
  0x00007f8f8f73dc8c: mov    %rax,0x320(%r15)
  0x00007f8f8f73dc93: test   $0xf,%esp
  0x00007f8f8f73dc99: je     0x00007f8f8f73dcb1
  0x00007f8f8f73dc9f: sub    $0x8,%rsp
  0x00007f8f8f73dca3: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73dca8: add    $0x8,%rsp
  0x00007f8f8f73dcac: jmpq   0x00007f8f8f73dcb6
  0x00007f8f8f73dcb1: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73dcb6: movabs $0x0,%r10
  0x00007f8f8f73dcc0: mov    %r10,0x320(%r15)
  0x00007f8f8f73dcc7: movabs $0x0,%r10
  0x00007f8f8f73dcd1: mov    %r10,0x330(%r15)
  0x00007f8f8f73dcd8: movabs $0x0,%r10
  0x00007f8f8f73dce2: mov    %r10,0x328(%r15)
  0x00007f8f8f73dce9: vzeroupper 
  0x00007f8f8f73dcec: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73dcf4: je     0x00007f8f8f73dcff
  0x00007f8f8f73dcfa: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73dcff: mov    -0x40(%rbp),%r13
  0x00007f8f8f73dd03: mov    -0x38(%rbp),%r14
  0x00007f8f8f73dd07: retq   
  0x00007f8f8f73dd08: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73dd0d: sub    $0x80,%rsp
  0x00007f8f8f73dd14: mov    %rax,0x78(%rsp)
  0x00007f8f8f73dd19: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73dd1e: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73dd23: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73dd28: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73dd2d: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73dd32: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73dd37: mov    %r8,0x38(%rsp)
  0x00007f8f8f73dd3c: mov    %r9,0x30(%rsp)
  0x00007f8f8f73dd41: mov    %r10,0x28(%rsp)
  0x00007f8f8f73dd46: mov    %r11,0x20(%rsp)
  0x00007f8f8f73dd4b: mov    %r12,0x18(%rsp)
  0x00007f8f8f73dd50: mov    %r13,0x10(%rsp)
  0x00007f8f8f73dd55: mov    %r14,0x8(%rsp)
  0x00007f8f8f73dd5a: mov    %r15,(%rsp)
  0x00007f8f8f73dd5e: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73dd68: movabs $0x7f8f8f73dd08,%rsi
  0x00007f8f8f73dd72: mov    %rsp,%rdx
  0x00007f8f8f73dd75: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73dd79: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73dd7e: hlt    
  0x00007f8f8f73dd7f: movzbl 0x2(%r13),%ebx
  0x00007f8f8f73dd84: add    $0x2,%r13
  0x00007f8f8f73dd88: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73dd92: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73dd96: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73dd9e: mov    -0x40(%rbp),%r13
  0x00007f8f8f73dda2: mov    -0x38(%rbp),%r14
  0x00007f8f8f73dda6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73ddae: je     0x00007f8f8f73dec7
  0x00007f8f8f73ddb4: callq  0x00007f8f8f73ddbe
  0x00007f8f8f73ddb9: jmpq   0x00007f8f8f73de50
  0x00007f8f8f73ddbe: lea    0x8(%rsp),%rax
  0x00007f8f8f73ddc3: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73ddc7: mov    %r15,%rdi
  0x00007f8f8f73ddca: vzeroupper 
  0x00007f8f8f73ddcd: mov    %rbp,0x330(%r15)
  0x00007f8f8f73ddd4: mov    %rax,0x320(%r15)
  0x00007f8f8f73dddb: test   $0xf,%esp
  0x00007f8f8f73dde1: je     0x00007f8f8f73ddf9
  0x00007f8f8f73dde7: sub    $0x8,%rsp
  0x00007f8f8f73ddeb: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73ddf0: add    $0x8,%rsp
  0x00007f8f8f73ddf4: jmpq   0x00007f8f8f73ddfe
  0x00007f8f8f73ddf9: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73ddfe: movabs $0x0,%r10
  0x00007f8f8f73de08: mov    %r10,0x320(%r15)
  0x00007f8f8f73de0f: movabs $0x0,%r10
  0x00007f8f8f73de19: mov    %r10,0x330(%r15)
  0x00007f8f8f73de20: movabs $0x0,%r10
  0x00007f8f8f73de2a: mov    %r10,0x328(%r15)
  0x00007f8f8f73de31: vzeroupper 
  0x00007f8f8f73de34: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73de3c: je     0x00007f8f8f73de47
  0x00007f8f8f73de42: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73de47: mov    -0x40(%rbp),%r13
  0x00007f8f8f73de4b: mov    -0x38(%rbp),%r14
  0x00007f8f8f73de4f: retq   
  0x00007f8f8f73de50: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73de55: sub    $0x80,%rsp
  0x00007f8f8f73de5c: mov    %rax,0x78(%rsp)
  0x00007f8f8f73de61: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73de66: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73de6b: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73de70: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73de75: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73de7a: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73de7f: mov    %r8,0x38(%rsp)
  0x00007f8f8f73de84: mov    %r9,0x30(%rsp)
  0x00007f8f8f73de89: mov    %r10,0x28(%rsp)
  0x00007f8f8f73de8e: mov    %r11,0x20(%rsp)
  0x00007f8f8f73de93: mov    %r12,0x18(%rsp)
  0x00007f8f8f73de98: mov    %r13,0x10(%rsp)
  0x00007f8f8f73de9d: mov    %r14,0x8(%rsp)
  0x00007f8f8f73dea2: mov    %r15,(%rsp)
  0x00007f8f8f73dea6: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73deb0: movabs $0x7f8f8f73de50,%rsi
  0x00007f8f8f73deba: mov    %rsp,%rdx
  0x00007f8f8f73debd: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73dec1: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73dec6: hlt    
  0x00007f8f8f73dec7: movzbl 0x2(%r13),%ebx
  0x00007f8f8f73decc: add    $0x2,%r13
  0x00007f8f8f73ded0: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73deda: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73dede: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73dee6: mov    -0x40(%rbp),%r13
  0x00007f8f8f73deea: mov    -0x38(%rbp),%r14
  0x00007f8f8f73deee: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73def6: je     0x00007f8f8f73e00f
  0x00007f8f8f73defc: callq  0x00007f8f8f73df06
  0x00007f8f8f73df01: jmpq   0x00007f8f8f73df98
  0x00007f8f8f73df06: lea    0x8(%rsp),%rax
  0x00007f8f8f73df0b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73df0f: mov    %r15,%rdi
  0x00007f8f8f73df12: vzeroupper 
  0x00007f8f8f73df15: mov    %rbp,0x330(%r15)
  0x00007f8f8f73df1c: mov    %rax,0x320(%r15)
  0x00007f8f8f73df23: test   $0xf,%esp
  0x00007f8f8f73df29: je     0x00007f8f8f73df41
  0x00007f8f8f73df2f: sub    $0x8,%rsp
  0x00007f8f8f73df33: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73df38: add    $0x8,%rsp
  0x00007f8f8f73df3c: jmpq   0x00007f8f8f73df46
  0x00007f8f8f73df41: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73df46: movabs $0x0,%r10
  0x00007f8f8f73df50: mov    %r10,0x320(%r15)
  0x00007f8f8f73df57: movabs $0x0,%r10
  0x00007f8f8f73df61: mov    %r10,0x330(%r15)
  0x00007f8f8f73df68: movabs $0x0,%r10
  0x00007f8f8f73df72: mov    %r10,0x328(%r15)
  0x00007f8f8f73df79: vzeroupper 
  0x00007f8f8f73df7c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73df84: je     0x00007f8f8f73df8f
  0x00007f8f8f73df8a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73df8f: mov    -0x40(%rbp),%r13
  0x00007f8f8f73df93: mov    -0x38(%rbp),%r14
  0x00007f8f8f73df97: retq   
  0x00007f8f8f73df98: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73df9d: sub    $0x80,%rsp
  0x00007f8f8f73dfa4: mov    %rax,0x78(%rsp)
  0x00007f8f8f73dfa9: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73dfae: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73dfb3: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73dfb8: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73dfbd: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73dfc2: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73dfc7: mov    %r8,0x38(%rsp)
  0x00007f8f8f73dfcc: mov    %r9,0x30(%rsp)
  0x00007f8f8f73dfd1: mov    %r10,0x28(%rsp)
  0x00007f8f8f73dfd6: mov    %r11,0x20(%rsp)
  0x00007f8f8f73dfdb: mov    %r12,0x18(%rsp)
  0x00007f8f8f73dfe0: mov    %r13,0x10(%rsp)
  0x00007f8f8f73dfe5: mov    %r14,0x8(%rsp)
  0x00007f8f8f73dfea: mov    %r15,(%rsp)
  0x00007f8f8f73dfee: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73dff8: movabs $0x7f8f8f73df98,%rsi
  0x00007f8f8f73e002: mov    %rsp,%rdx
  0x00007f8f8f73e005: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73e009: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73e00e: hlt    
  0x00007f8f8f73e00f: movzbl 0x2(%r13),%ebx
  0x00007f8f8f73e014: add    $0x2,%r13
  0x00007f8f8f73e018: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f73e022: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73e026: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73e02e: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e032: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e036: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e03e: je     0x00007f8f8f73e157
  0x00007f8f8f73e044: callq  0x00007f8f8f73e04e
  0x00007f8f8f73e049: jmpq   0x00007f8f8f73e0e0
  0x00007f8f8f73e04e: lea    0x8(%rsp),%rax
  0x00007f8f8f73e053: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73e057: mov    %r15,%rdi
  0x00007f8f8f73e05a: vzeroupper 
  0x00007f8f8f73e05d: mov    %rbp,0x330(%r15)
  0x00007f8f8f73e064: mov    %rax,0x320(%r15)
  0x00007f8f8f73e06b: test   $0xf,%esp
  0x00007f8f8f73e071: je     0x00007f8f8f73e089
  0x00007f8f8f73e077: sub    $0x8,%rsp
  0x00007f8f8f73e07b: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e080: add    $0x8,%rsp
  0x00007f8f8f73e084: jmpq   0x00007f8f8f73e08e
  0x00007f8f8f73e089: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e08e: movabs $0x0,%r10
  0x00007f8f8f73e098: mov    %r10,0x320(%r15)
  0x00007f8f8f73e09f: movabs $0x0,%r10
  0x00007f8f8f73e0a9: mov    %r10,0x330(%r15)
  0x00007f8f8f73e0b0: movabs $0x0,%r10
  0x00007f8f8f73e0ba: mov    %r10,0x328(%r15)
  0x00007f8f8f73e0c1: vzeroupper 
  0x00007f8f8f73e0c4: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e0cc: je     0x00007f8f8f73e0d7
  0x00007f8f8f73e0d2: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73e0d7: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e0db: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e0df: retq   
  0x00007f8f8f73e0e0: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73e0e5: sub    $0x80,%rsp
  0x00007f8f8f73e0ec: mov    %rax,0x78(%rsp)
  0x00007f8f8f73e0f1: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73e0f6: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73e0fb: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73e100: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73e105: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73e10a: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73e10f: mov    %r8,0x38(%rsp)
  0x00007f8f8f73e114: mov    %r9,0x30(%rsp)
  0x00007f8f8f73e119: mov    %r10,0x28(%rsp)
  0x00007f8f8f73e11e: mov    %r11,0x20(%rsp)
  0x00007f8f8f73e123: mov    %r12,0x18(%rsp)
  0x00007f8f8f73e128: mov    %r13,0x10(%rsp)
  0x00007f8f8f73e12d: mov    %r14,0x8(%rsp)
  0x00007f8f8f73e132: mov    %r15,(%rsp)
  0x00007f8f8f73e136: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73e140: movabs $0x7f8f8f73e0e0,%rsi
  0x00007f8f8f73e14a: mov    %rsp,%rdx
  0x00007f8f8f73e14d: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73e151: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73e156: hlt    
  0x00007f8f8f73e157: movzbl 0x2(%r13),%ebx
  0x00007f8f8f73e15c: add    $0x2,%r13
  0x00007f8f8f73e160: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f73e16a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73e16e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73e176: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e17a: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e17e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e186: je     0x00007f8f8f73e29f
  0x00007f8f8f73e18c: callq  0x00007f8f8f73e196
  0x00007f8f8f73e191: jmpq   0x00007f8f8f73e228
  0x00007f8f8f73e196: lea    0x8(%rsp),%rax
  0x00007f8f8f73e19b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73e19f: mov    %r15,%rdi
  0x00007f8f8f73e1a2: vzeroupper 
  0x00007f8f8f73e1a5: mov    %rbp,0x330(%r15)
  0x00007f8f8f73e1ac: mov    %rax,0x320(%r15)
  0x00007f8f8f73e1b3: test   $0xf,%esp
  0x00007f8f8f73e1b9: je     0x00007f8f8f73e1d1
  0x00007f8f8f73e1bf: sub    $0x8,%rsp
  0x00007f8f8f73e1c3: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e1c8: add    $0x8,%rsp
  0x00007f8f8f73e1cc: jmpq   0x00007f8f8f73e1d6
  0x00007f8f8f73e1d1: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e1d6: movabs $0x0,%r10
  0x00007f8f8f73e1e0: mov    %r10,0x320(%r15)
  0x00007f8f8f73e1e7: movabs $0x0,%r10
  0x00007f8f8f73e1f1: mov    %r10,0x330(%r15)
  0x00007f8f8f73e1f8: movabs $0x0,%r10
  0x00007f8f8f73e202: mov    %r10,0x328(%r15)
  0x00007f8f8f73e209: vzeroupper 
  0x00007f8f8f73e20c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e214: je     0x00007f8f8f73e21f
  0x00007f8f8f73e21a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73e21f: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e223: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e227: retq   
  0x00007f8f8f73e228: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73e22d: sub    $0x80,%rsp
  0x00007f8f8f73e234: mov    %rax,0x78(%rsp)
  0x00007f8f8f73e239: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73e23e: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73e243: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73e248: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73e24d: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73e252: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73e257: mov    %r8,0x38(%rsp)
  0x00007f8f8f73e25c: mov    %r9,0x30(%rsp)
  0x00007f8f8f73e261: mov    %r10,0x28(%rsp)
  0x00007f8f8f73e266: mov    %r11,0x20(%rsp)
  0x00007f8f8f73e26b: mov    %r12,0x18(%rsp)
  0x00007f8f8f73e270: mov    %r13,0x10(%rsp)
  0x00007f8f8f73e275: mov    %r14,0x8(%rsp)
  0x00007f8f8f73e27a: mov    %r15,(%rsp)
  0x00007f8f8f73e27e: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73e288: movabs $0x7f8f8f73e228,%rsi
  0x00007f8f8f73e292: mov    %rsp,%rdx
  0x00007f8f8f73e295: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73e299: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73e29e: hlt    
  0x00007f8f8f73e29f: movzbl 0x2(%r13),%ebx
  0x00007f8f8f73e2a4: add    $0x2,%r13
  0x00007f8f8f73e2a8: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f73e2b2: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73e2b6: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73e2be: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e2c2: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e2c6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e2ce: je     0x00007f8f8f73e3e7
  0x00007f8f8f73e2d4: callq  0x00007f8f8f73e2de
  0x00007f8f8f73e2d9: jmpq   0x00007f8f8f73e370
  0x00007f8f8f73e2de: lea    0x8(%rsp),%rax
  0x00007f8f8f73e2e3: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73e2e7: mov    %r15,%rdi
  0x00007f8f8f73e2ea: vzeroupper 
  0x00007f8f8f73e2ed: mov    %rbp,0x330(%r15)
  0x00007f8f8f73e2f4: mov    %rax,0x320(%r15)
  0x00007f8f8f73e2fb: test   $0xf,%esp
  0x00007f8f8f73e301: je     0x00007f8f8f73e319
  0x00007f8f8f73e307: sub    $0x8,%rsp
  0x00007f8f8f73e30b: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e310: add    $0x8,%rsp
  0x00007f8f8f73e314: jmpq   0x00007f8f8f73e31e
  0x00007f8f8f73e319: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e31e: movabs $0x0,%r10
  0x00007f8f8f73e328: mov    %r10,0x320(%r15)
  0x00007f8f8f73e32f: movabs $0x0,%r10
  0x00007f8f8f73e339: mov    %r10,0x330(%r15)
  0x00007f8f8f73e340: movabs $0x0,%r10
  0x00007f8f8f73e34a: mov    %r10,0x328(%r15)
  0x00007f8f8f73e351: vzeroupper 
  0x00007f8f8f73e354: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e35c: je     0x00007f8f8f73e367
  0x00007f8f8f73e362: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73e367: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e36b: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e36f: retq   
  0x00007f8f8f73e370: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73e375: sub    $0x80,%rsp
  0x00007f8f8f73e37c: mov    %rax,0x78(%rsp)
  0x00007f8f8f73e381: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73e386: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73e38b: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73e390: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73e395: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73e39a: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73e39f: mov    %r8,0x38(%rsp)
  0x00007f8f8f73e3a4: mov    %r9,0x30(%rsp)
  0x00007f8f8f73e3a9: mov    %r10,0x28(%rsp)
  0x00007f8f8f73e3ae: mov    %r11,0x20(%rsp)
  0x00007f8f8f73e3b3: mov    %r12,0x18(%rsp)
  0x00007f8f8f73e3b8: mov    %r13,0x10(%rsp)
  0x00007f8f8f73e3bd: mov    %r14,0x8(%rsp)
  0x00007f8f8f73e3c2: mov    %r15,(%rsp)
  0x00007f8f8f73e3c6: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73e3d0: movabs $0x7f8f8f73e370,%rsi
  0x00007f8f8f73e3da: mov    %rsp,%rdx
  0x00007f8f8f73e3dd: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73e3e1: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73e3e6: hlt    
  0x00007f8f8f73e3e7: movzbl 0x2(%r13),%ebx
  0x00007f8f8f73e3ec: add    $0x2,%r13
  0x00007f8f8f73e3f0: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f73e3fa: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73e3fe: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73e406: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e40a: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e40e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e416: je     0x00007f8f8f73e52f
  0x00007f8f8f73e41c: callq  0x00007f8f8f73e426
  0x00007f8f8f73e421: jmpq   0x00007f8f8f73e4b8
  0x00007f8f8f73e426: lea    0x8(%rsp),%rax
  0x00007f8f8f73e42b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73e42f: mov    %r15,%rdi
  0x00007f8f8f73e432: vzeroupper 
  0x00007f8f8f73e435: mov    %rbp,0x330(%r15)
  0x00007f8f8f73e43c: mov    %rax,0x320(%r15)
  0x00007f8f8f73e443: test   $0xf,%esp
  0x00007f8f8f73e449: je     0x00007f8f8f73e461
  0x00007f8f8f73e44f: sub    $0x8,%rsp
  0x00007f8f8f73e453: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e458: add    $0x8,%rsp
  0x00007f8f8f73e45c: jmpq   0x00007f8f8f73e466
  0x00007f8f8f73e461: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e466: movabs $0x0,%r10
  0x00007f8f8f73e470: mov    %r10,0x320(%r15)
  0x00007f8f8f73e477: movabs $0x0,%r10
  0x00007f8f8f73e481: mov    %r10,0x330(%r15)
  0x00007f8f8f73e488: movabs $0x0,%r10
  0x00007f8f8f73e492: mov    %r10,0x328(%r15)
  0x00007f8f8f73e499: vzeroupper 
  0x00007f8f8f73e49c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e4a4: je     0x00007f8f8f73e4af
  0x00007f8f8f73e4aa: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73e4af: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e4b3: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e4b7: retq   
  0x00007f8f8f73e4b8: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73e4bd: sub    $0x80,%rsp
  0x00007f8f8f73e4c4: mov    %rax,0x78(%rsp)
  0x00007f8f8f73e4c9: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73e4ce: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73e4d3: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73e4d8: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73e4dd: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73e4e2: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73e4e7: mov    %r8,0x38(%rsp)
  0x00007f8f8f73e4ec: mov    %r9,0x30(%rsp)
  0x00007f8f8f73e4f1: mov    %r10,0x28(%rsp)
  0x00007f8f8f73e4f6: mov    %r11,0x20(%rsp)
  0x00007f8f8f73e4fb: mov    %r12,0x18(%rsp)
  0x00007f8f8f73e500: mov    %r13,0x10(%rsp)
  0x00007f8f8f73e505: mov    %r14,0x8(%rsp)
  0x00007f8f8f73e50a: mov    %r15,(%rsp)
  0x00007f8f8f73e50e: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73e518: movabs $0x7f8f8f73e4b8,%rsi
  0x00007f8f8f73e522: mov    %rsp,%rdx
  0x00007f8f8f73e525: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73e529: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73e52e: hlt    
  0x00007f8f8f73e52f: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73e534: add    $0x3,%r13
  0x00007f8f8f73e538: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73e542: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73e546: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73e54e: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e552: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e556: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e55e: je     0x00007f8f8f73e677
  0x00007f8f8f73e564: callq  0x00007f8f8f73e56e
  0x00007f8f8f73e569: jmpq   0x00007f8f8f73e600
  0x00007f8f8f73e56e: lea    0x8(%rsp),%rax
  0x00007f8f8f73e573: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73e577: mov    %r15,%rdi
  0x00007f8f8f73e57a: vzeroupper 
  0x00007f8f8f73e57d: mov    %rbp,0x330(%r15)
  0x00007f8f8f73e584: mov    %rax,0x320(%r15)
  0x00007f8f8f73e58b: test   $0xf,%esp
  0x00007f8f8f73e591: je     0x00007f8f8f73e5a9
  0x00007f8f8f73e597: sub    $0x8,%rsp
  0x00007f8f8f73e59b: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e5a0: add    $0x8,%rsp
  0x00007f8f8f73e5a4: jmpq   0x00007f8f8f73e5ae
  0x00007f8f8f73e5a9: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e5ae: movabs $0x0,%r10
  0x00007f8f8f73e5b8: mov    %r10,0x320(%r15)
  0x00007f8f8f73e5bf: movabs $0x0,%r10
  0x00007f8f8f73e5c9: mov    %r10,0x330(%r15)
  0x00007f8f8f73e5d0: movabs $0x0,%r10
  0x00007f8f8f73e5da: mov    %r10,0x328(%r15)
  0x00007f8f8f73e5e1: vzeroupper 
  0x00007f8f8f73e5e4: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e5ec: je     0x00007f8f8f73e5f7
  0x00007f8f8f73e5f2: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73e5f7: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e5fb: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e5ff: retq   
  0x00007f8f8f73e600: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73e605: sub    $0x80,%rsp
  0x00007f8f8f73e60c: mov    %rax,0x78(%rsp)
  0x00007f8f8f73e611: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73e616: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73e61b: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73e620: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73e625: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73e62a: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73e62f: mov    %r8,0x38(%rsp)
  0x00007f8f8f73e634: mov    %r9,0x30(%rsp)
  0x00007f8f8f73e639: mov    %r10,0x28(%rsp)
  0x00007f8f8f73e63e: mov    %r11,0x20(%rsp)
  0x00007f8f8f73e643: mov    %r12,0x18(%rsp)
  0x00007f8f8f73e648: mov    %r13,0x10(%rsp)
  0x00007f8f8f73e64d: mov    %r14,0x8(%rsp)
  0x00007f8f8f73e652: mov    %r15,(%rsp)
  0x00007f8f8f73e656: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73e660: movabs $0x7f8f8f73e600,%rsi
  0x00007f8f8f73e66a: mov    %rsp,%rdx
  0x00007f8f8f73e66d: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73e671: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73e676: hlt    
  0x00007f8f8f73e677: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73e67c: add    $0x3,%r13
  0x00007f8f8f73e680: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73e68a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73e68e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73e696: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e69a: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e69e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e6a6: je     0x00007f8f8f73e7bf
  0x00007f8f8f73e6ac: callq  0x00007f8f8f73e6b6
  0x00007f8f8f73e6b1: jmpq   0x00007f8f8f73e748
  0x00007f8f8f73e6b6: lea    0x8(%rsp),%rax
  0x00007f8f8f73e6bb: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73e6bf: mov    %r15,%rdi
  0x00007f8f8f73e6c2: vzeroupper 
  0x00007f8f8f73e6c5: mov    %rbp,0x330(%r15)
  0x00007f8f8f73e6cc: mov    %rax,0x320(%r15)
  0x00007f8f8f73e6d3: test   $0xf,%esp
  0x00007f8f8f73e6d9: je     0x00007f8f8f73e6f1
  0x00007f8f8f73e6df: sub    $0x8,%rsp
  0x00007f8f8f73e6e3: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e6e8: add    $0x8,%rsp
  0x00007f8f8f73e6ec: jmpq   0x00007f8f8f73e6f6
  0x00007f8f8f73e6f1: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e6f6: movabs $0x0,%r10
  0x00007f8f8f73e700: mov    %r10,0x320(%r15)
  0x00007f8f8f73e707: movabs $0x0,%r10
  0x00007f8f8f73e711: mov    %r10,0x330(%r15)
  0x00007f8f8f73e718: movabs $0x0,%r10
  0x00007f8f8f73e722: mov    %r10,0x328(%r15)
  0x00007f8f8f73e729: vzeroupper 
  0x00007f8f8f73e72c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e734: je     0x00007f8f8f73e73f
  0x00007f8f8f73e73a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73e73f: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e743: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e747: retq   
  0x00007f8f8f73e748: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73e74d: sub    $0x80,%rsp
  0x00007f8f8f73e754: mov    %rax,0x78(%rsp)
  0x00007f8f8f73e759: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73e75e: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73e763: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73e768: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73e76d: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73e772: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73e777: mov    %r8,0x38(%rsp)
  0x00007f8f8f73e77c: mov    %r9,0x30(%rsp)
  0x00007f8f8f73e781: mov    %r10,0x28(%rsp)
  0x00007f8f8f73e786: mov    %r11,0x20(%rsp)
  0x00007f8f8f73e78b: mov    %r12,0x18(%rsp)
  0x00007f8f8f73e790: mov    %r13,0x10(%rsp)
  0x00007f8f8f73e795: mov    %r14,0x8(%rsp)
  0x00007f8f8f73e79a: mov    %r15,(%rsp)
  0x00007f8f8f73e79e: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73e7a8: movabs $0x7f8f8f73e748,%rsi
  0x00007f8f8f73e7b2: mov    %rsp,%rdx
  0x00007f8f8f73e7b5: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73e7b9: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73e7be: hlt    
  0x00007f8f8f73e7bf: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73e7c4: add    $0x3,%r13
  0x00007f8f8f73e7c8: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f73e7d2: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73e7d6: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73e7de: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e7e2: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e7e6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e7ee: je     0x00007f8f8f73e907
  0x00007f8f8f73e7f4: callq  0x00007f8f8f73e7fe
  0x00007f8f8f73e7f9: jmpq   0x00007f8f8f73e890
  0x00007f8f8f73e7fe: lea    0x8(%rsp),%rax
  0x00007f8f8f73e803: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73e807: mov    %r15,%rdi
  0x00007f8f8f73e80a: vzeroupper 
  0x00007f8f8f73e80d: mov    %rbp,0x330(%r15)
  0x00007f8f8f73e814: mov    %rax,0x320(%r15)
  0x00007f8f8f73e81b: test   $0xf,%esp
  0x00007f8f8f73e821: je     0x00007f8f8f73e839
  0x00007f8f8f73e827: sub    $0x8,%rsp
  0x00007f8f8f73e82b: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e830: add    $0x8,%rsp
  0x00007f8f8f73e834: jmpq   0x00007f8f8f73e83e
  0x00007f8f8f73e839: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e83e: movabs $0x0,%r10
  0x00007f8f8f73e848: mov    %r10,0x320(%r15)
  0x00007f8f8f73e84f: movabs $0x0,%r10
  0x00007f8f8f73e859: mov    %r10,0x330(%r15)
  0x00007f8f8f73e860: movabs $0x0,%r10
  0x00007f8f8f73e86a: mov    %r10,0x328(%r15)
  0x00007f8f8f73e871: vzeroupper 
  0x00007f8f8f73e874: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e87c: je     0x00007f8f8f73e887
  0x00007f8f8f73e882: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73e887: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e88b: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e88f: retq   
  0x00007f8f8f73e890: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73e895: sub    $0x80,%rsp
  0x00007f8f8f73e89c: mov    %rax,0x78(%rsp)
  0x00007f8f8f73e8a1: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73e8a6: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73e8ab: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73e8b0: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73e8b5: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73e8ba: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73e8bf: mov    %r8,0x38(%rsp)
  0x00007f8f8f73e8c4: mov    %r9,0x30(%rsp)
  0x00007f8f8f73e8c9: mov    %r10,0x28(%rsp)
  0x00007f8f8f73e8ce: mov    %r11,0x20(%rsp)
  0x00007f8f8f73e8d3: mov    %r12,0x18(%rsp)
  0x00007f8f8f73e8d8: mov    %r13,0x10(%rsp)
  0x00007f8f8f73e8dd: mov    %r14,0x8(%rsp)
  0x00007f8f8f73e8e2: mov    %r15,(%rsp)
  0x00007f8f8f73e8e6: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73e8f0: movabs $0x7f8f8f73e890,%rsi
  0x00007f8f8f73e8fa: mov    %rsp,%rdx
  0x00007f8f8f73e8fd: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73e901: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73e906: hlt    
  0x00007f8f8f73e907: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73e90c: add    $0x3,%r13
  0x00007f8f8f73e910: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f73e91a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73e91e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73e926: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e92a: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e92e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e936: je     0x00007f8f8f73ea4f
  0x00007f8f8f73e93c: callq  0x00007f8f8f73e946
  0x00007f8f8f73e941: jmpq   0x00007f8f8f73e9d8
  0x00007f8f8f73e946: lea    0x8(%rsp),%rax
  0x00007f8f8f73e94b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73e94f: mov    %r15,%rdi
  0x00007f8f8f73e952: vzeroupper 
  0x00007f8f8f73e955: mov    %rbp,0x330(%r15)
  0x00007f8f8f73e95c: mov    %rax,0x320(%r15)
  0x00007f8f8f73e963: test   $0xf,%esp
  0x00007f8f8f73e969: je     0x00007f8f8f73e981
  0x00007f8f8f73e96f: sub    $0x8,%rsp
  0x00007f8f8f73e973: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e978: add    $0x8,%rsp
  0x00007f8f8f73e97c: jmpq   0x00007f8f8f73e986
  0x00007f8f8f73e981: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73e986: movabs $0x0,%r10
  0x00007f8f8f73e990: mov    %r10,0x320(%r15)
  0x00007f8f8f73e997: movabs $0x0,%r10
  0x00007f8f8f73e9a1: mov    %r10,0x330(%r15)
  0x00007f8f8f73e9a8: movabs $0x0,%r10
  0x00007f8f8f73e9b2: mov    %r10,0x328(%r15)
  0x00007f8f8f73e9b9: vzeroupper 
  0x00007f8f8f73e9bc: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73e9c4: je     0x00007f8f8f73e9cf
  0x00007f8f8f73e9ca: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73e9cf: mov    -0x40(%rbp),%r13
  0x00007f8f8f73e9d3: mov    -0x38(%rbp),%r14
  0x00007f8f8f73e9d7: retq   
  0x00007f8f8f73e9d8: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73e9dd: sub    $0x80,%rsp
  0x00007f8f8f73e9e4: mov    %rax,0x78(%rsp)
  0x00007f8f8f73e9e9: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73e9ee: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73e9f3: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73e9f8: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73e9fd: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73ea02: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73ea07: mov    %r8,0x38(%rsp)
  0x00007f8f8f73ea0c: mov    %r9,0x30(%rsp)
  0x00007f8f8f73ea11: mov    %r10,0x28(%rsp)
  0x00007f8f8f73ea16: mov    %r11,0x20(%rsp)
  0x00007f8f8f73ea1b: mov    %r12,0x18(%rsp)
  0x00007f8f8f73ea20: mov    %r13,0x10(%rsp)
  0x00007f8f8f73ea25: mov    %r14,0x8(%rsp)
  0x00007f8f8f73ea2a: mov    %r15,(%rsp)
  0x00007f8f8f73ea2e: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73ea38: movabs $0x7f8f8f73e9d8,%rsi
  0x00007f8f8f73ea42: mov    %rsp,%rdx
  0x00007f8f8f73ea45: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73ea49: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73ea4e: hlt    
  0x00007f8f8f73ea4f: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73ea54: add    $0x3,%r13
  0x00007f8f8f73ea58: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f73ea62: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73ea66: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73ea6e: mov    -0x40(%rbp),%r13
  0x00007f8f8f73ea72: mov    -0x38(%rbp),%r14
  0x00007f8f8f73ea76: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73ea7e: je     0x00007f8f8f73eb97
  0x00007f8f8f73ea84: callq  0x00007f8f8f73ea8e
  0x00007f8f8f73ea89: jmpq   0x00007f8f8f73eb20
  0x00007f8f8f73ea8e: lea    0x8(%rsp),%rax
  0x00007f8f8f73ea93: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73ea97: mov    %r15,%rdi
  0x00007f8f8f73ea9a: vzeroupper 
  0x00007f8f8f73ea9d: mov    %rbp,0x330(%r15)
  0x00007f8f8f73eaa4: mov    %rax,0x320(%r15)
  0x00007f8f8f73eaab: test   $0xf,%esp
  0x00007f8f8f73eab1: je     0x00007f8f8f73eac9
  0x00007f8f8f73eab7: sub    $0x8,%rsp
  0x00007f8f8f73eabb: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73eac0: add    $0x8,%rsp
  0x00007f8f8f73eac4: jmpq   0x00007f8f8f73eace
  0x00007f8f8f73eac9: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73eace: movabs $0x0,%r10
  0x00007f8f8f73ead8: mov    %r10,0x320(%r15)
  0x00007f8f8f73eadf: movabs $0x0,%r10
  0x00007f8f8f73eae9: mov    %r10,0x330(%r15)
  0x00007f8f8f73eaf0: movabs $0x0,%r10
  0x00007f8f8f73eafa: mov    %r10,0x328(%r15)
  0x00007f8f8f73eb01: vzeroupper 
  0x00007f8f8f73eb04: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73eb0c: je     0x00007f8f8f73eb17
  0x00007f8f8f73eb12: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73eb17: mov    -0x40(%rbp),%r13
  0x00007f8f8f73eb1b: mov    -0x38(%rbp),%r14
  0x00007f8f8f73eb1f: retq   
  0x00007f8f8f73eb20: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73eb25: sub    $0x80,%rsp
  0x00007f8f8f73eb2c: mov    %rax,0x78(%rsp)
  0x00007f8f8f73eb31: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73eb36: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73eb3b: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73eb40: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73eb45: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73eb4a: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73eb4f: mov    %r8,0x38(%rsp)
  0x00007f8f8f73eb54: mov    %r9,0x30(%rsp)
  0x00007f8f8f73eb59: mov    %r10,0x28(%rsp)
  0x00007f8f8f73eb5e: mov    %r11,0x20(%rsp)
  0x00007f8f8f73eb63: mov    %r12,0x18(%rsp)
  0x00007f8f8f73eb68: mov    %r13,0x10(%rsp)
  0x00007f8f8f73eb6d: mov    %r14,0x8(%rsp)
  0x00007f8f8f73eb72: mov    %r15,(%rsp)
  0x00007f8f8f73eb76: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73eb80: movabs $0x7f8f8f73eb20,%rsi
  0x00007f8f8f73eb8a: mov    %rsp,%rdx
  0x00007f8f8f73eb8d: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73eb91: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73eb96: hlt    
  0x00007f8f8f73eb97: movzbl 0x3(%r13),%ebx
  0x00007f8f8f73eb9c: add    $0x3,%r13
  0x00007f8f8f73eba0: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f73ebaa: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73ebae: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73ebb6: mov    -0x40(%rbp),%r13
  0x00007f8f8f73ebba: mov    -0x38(%rbp),%r14
  0x00007f8f8f73ebbe: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73ebc6: je     0x00007f8f8f73ecdf
  0x00007f8f8f73ebcc: callq  0x00007f8f8f73ebd6
  0x00007f8f8f73ebd1: jmpq   0x00007f8f8f73ec68
  0x00007f8f8f73ebd6: lea    0x8(%rsp),%rax
  0x00007f8f8f73ebdb: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73ebdf: mov    %r15,%rdi
  0x00007f8f8f73ebe2: vzeroupper 
  0x00007f8f8f73ebe5: mov    %rbp,0x330(%r15)
  0x00007f8f8f73ebec: mov    %rax,0x320(%r15)
  0x00007f8f8f73ebf3: test   $0xf,%esp
  0x00007f8f8f73ebf9: je     0x00007f8f8f73ec11
  0x00007f8f8f73ebff: sub    $0x8,%rsp
  0x00007f8f8f73ec03: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73ec08: add    $0x8,%rsp
  0x00007f8f8f73ec0c: jmpq   0x00007f8f8f73ec16
  0x00007f8f8f73ec11: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73ec16: movabs $0x0,%r10
  0x00007f8f8f73ec20: mov    %r10,0x320(%r15)
  0x00007f8f8f73ec27: movabs $0x0,%r10
  0x00007f8f8f73ec31: mov    %r10,0x330(%r15)
  0x00007f8f8f73ec38: movabs $0x0,%r10
  0x00007f8f8f73ec42: mov    %r10,0x328(%r15)
  0x00007f8f8f73ec49: vzeroupper 
  0x00007f8f8f73ec4c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73ec54: je     0x00007f8f8f73ec5f
  0x00007f8f8f73ec5a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73ec5f: mov    -0x40(%rbp),%r13
  0x00007f8f8f73ec63: mov    -0x38(%rbp),%r14
  0x00007f8f8f73ec67: retq   
  0x00007f8f8f73ec68: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73ec6d: sub    $0x80,%rsp
  0x00007f8f8f73ec74: mov    %rax,0x78(%rsp)
  0x00007f8f8f73ec79: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73ec7e: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73ec83: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73ec88: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73ec8d: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73ec92: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73ec97: mov    %r8,0x38(%rsp)
  0x00007f8f8f73ec9c: mov    %r9,0x30(%rsp)
  0x00007f8f8f73eca1: mov    %r10,0x28(%rsp)
  0x00007f8f8f73eca6: mov    %r11,0x20(%rsp)
  0x00007f8f8f73ecab: mov    %r12,0x18(%rsp)
  0x00007f8f8f73ecb0: mov    %r13,0x10(%rsp)
  0x00007f8f8f73ecb5: mov    %r14,0x8(%rsp)
  0x00007f8f8f73ecba: mov    %r15,(%rsp)
  0x00007f8f8f73ecbe: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73ecc8: movabs $0x7f8f8f73ec68,%rsi
  0x00007f8f8f73ecd2: mov    %rsp,%rdx
  0x00007f8f8f73ecd5: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73ecd9: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73ecde: hlt    
  0x00007f8f8f73ecdf: movzbl 0x4(%r13),%ebx
  0x00007f8f8f73ece4: add    $0x4,%r13
  0x00007f8f8f73ece8: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73ecf2: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73ecf6: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73ecfe: mov    -0x40(%rbp),%r13
  0x00007f8f8f73ed02: mov    -0x38(%rbp),%r14
  0x00007f8f8f73ed06: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73ed0e: je     0x00007f8f8f73ee27
  0x00007f8f8f73ed14: callq  0x00007f8f8f73ed1e
  0x00007f8f8f73ed19: jmpq   0x00007f8f8f73edb0
  0x00007f8f8f73ed1e: lea    0x8(%rsp),%rax
  0x00007f8f8f73ed23: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73ed27: mov    %r15,%rdi
  0x00007f8f8f73ed2a: vzeroupper 
  0x00007f8f8f73ed2d: mov    %rbp,0x330(%r15)
  0x00007f8f8f73ed34: mov    %rax,0x320(%r15)
  0x00007f8f8f73ed3b: test   $0xf,%esp
  0x00007f8f8f73ed41: je     0x00007f8f8f73ed59
  0x00007f8f8f73ed47: sub    $0x8,%rsp
  0x00007f8f8f73ed4b: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73ed50: add    $0x8,%rsp
  0x00007f8f8f73ed54: jmpq   0x00007f8f8f73ed5e
  0x00007f8f8f73ed59: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73ed5e: movabs $0x0,%r10
  0x00007f8f8f73ed68: mov    %r10,0x320(%r15)
  0x00007f8f8f73ed6f: movabs $0x0,%r10
  0x00007f8f8f73ed79: mov    %r10,0x330(%r15)
  0x00007f8f8f73ed80: movabs $0x0,%r10
  0x00007f8f8f73ed8a: mov    %r10,0x328(%r15)
  0x00007f8f8f73ed91: vzeroupper 
  0x00007f8f8f73ed94: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73ed9c: je     0x00007f8f8f73eda7
  0x00007f8f8f73eda2: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73eda7: mov    -0x40(%rbp),%r13
  0x00007f8f8f73edab: mov    -0x38(%rbp),%r14
  0x00007f8f8f73edaf: retq   
  0x00007f8f8f73edb0: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73edb5: sub    $0x80,%rsp
  0x00007f8f8f73edbc: mov    %rax,0x78(%rsp)
  0x00007f8f8f73edc1: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73edc6: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73edcb: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73edd0: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73edd5: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73edda: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73eddf: mov    %r8,0x38(%rsp)
  0x00007f8f8f73ede4: mov    %r9,0x30(%rsp)
  0x00007f8f8f73ede9: mov    %r10,0x28(%rsp)
  0x00007f8f8f73edee: mov    %r11,0x20(%rsp)
  0x00007f8f8f73edf3: mov    %r12,0x18(%rsp)
  0x00007f8f8f73edf8: mov    %r13,0x10(%rsp)
  0x00007f8f8f73edfd: mov    %r14,0x8(%rsp)
  0x00007f8f8f73ee02: mov    %r15,(%rsp)
  0x00007f8f8f73ee06: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73ee10: movabs $0x7f8f8f73edb0,%rsi
  0x00007f8f8f73ee1a: mov    %rsp,%rdx
  0x00007f8f8f73ee1d: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73ee21: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73ee26: hlt    
  0x00007f8f8f73ee27: movzbl 0x4(%r13),%ebx
  0x00007f8f8f73ee2c: add    $0x4,%r13
  0x00007f8f8f73ee30: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73ee3a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73ee3e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73ee46: mov    -0x40(%rbp),%r13
  0x00007f8f8f73ee4a: mov    -0x38(%rbp),%r14
  0x00007f8f8f73ee4e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73ee56: je     0x00007f8f8f73ef6f
  0x00007f8f8f73ee5c: callq  0x00007f8f8f73ee66
  0x00007f8f8f73ee61: jmpq   0x00007f8f8f73eef8
  0x00007f8f8f73ee66: lea    0x8(%rsp),%rax
  0x00007f8f8f73ee6b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73ee6f: mov    %r15,%rdi
  0x00007f8f8f73ee72: vzeroupper 
  0x00007f8f8f73ee75: mov    %rbp,0x330(%r15)
  0x00007f8f8f73ee7c: mov    %rax,0x320(%r15)
  0x00007f8f8f73ee83: test   $0xf,%esp
  0x00007f8f8f73ee89: je     0x00007f8f8f73eea1
  0x00007f8f8f73ee8f: sub    $0x8,%rsp
  0x00007f8f8f73ee93: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73ee98: add    $0x8,%rsp
  0x00007f8f8f73ee9c: jmpq   0x00007f8f8f73eea6
  0x00007f8f8f73eea1: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73eea6: movabs $0x0,%r10
  0x00007f8f8f73eeb0: mov    %r10,0x320(%r15)
  0x00007f8f8f73eeb7: movabs $0x0,%r10
  0x00007f8f8f73eec1: mov    %r10,0x330(%r15)
  0x00007f8f8f73eec8: movabs $0x0,%r10
  0x00007f8f8f73eed2: mov    %r10,0x328(%r15)
  0x00007f8f8f73eed9: vzeroupper 
  0x00007f8f8f73eedc: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73eee4: je     0x00007f8f8f73eeef
  0x00007f8f8f73eeea: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73eeef: mov    -0x40(%rbp),%r13
  0x00007f8f8f73eef3: mov    -0x38(%rbp),%r14
  0x00007f8f8f73eef7: retq   
  0x00007f8f8f73eef8: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73eefd: sub    $0x80,%rsp
  0x00007f8f8f73ef04: mov    %rax,0x78(%rsp)
  0x00007f8f8f73ef09: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73ef0e: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73ef13: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73ef18: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73ef1d: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73ef22: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73ef27: mov    %r8,0x38(%rsp)
  0x00007f8f8f73ef2c: mov    %r9,0x30(%rsp)
  0x00007f8f8f73ef31: mov    %r10,0x28(%rsp)
  0x00007f8f8f73ef36: mov    %r11,0x20(%rsp)
  0x00007f8f8f73ef3b: mov    %r12,0x18(%rsp)
  0x00007f8f8f73ef40: mov    %r13,0x10(%rsp)
  0x00007f8f8f73ef45: mov    %r14,0x8(%rsp)
  0x00007f8f8f73ef4a: mov    %r15,(%rsp)
  0x00007f8f8f73ef4e: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73ef58: movabs $0x7f8f8f73eef8,%rsi
  0x00007f8f8f73ef62: mov    %rsp,%rdx
  0x00007f8f8f73ef65: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73ef69: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73ef6e: hlt    
  0x00007f8f8f73ef6f: movzbl 0x4(%r13),%ebx
  0x00007f8f8f73ef74: add    $0x4,%r13
  0x00007f8f8f73ef78: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f73ef82: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73ef86: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73ef8e: mov    -0x40(%rbp),%r13
  0x00007f8f8f73ef92: mov    -0x38(%rbp),%r14
  0x00007f8f8f73ef96: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73ef9e: je     0x00007f8f8f73f0b7
  0x00007f8f8f73efa4: callq  0x00007f8f8f73efae
  0x00007f8f8f73efa9: jmpq   0x00007f8f8f73f040
  0x00007f8f8f73efae: lea    0x8(%rsp),%rax
  0x00007f8f8f73efb3: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73efb7: mov    %r15,%rdi
  0x00007f8f8f73efba: vzeroupper 
  0x00007f8f8f73efbd: mov    %rbp,0x330(%r15)
  0x00007f8f8f73efc4: mov    %rax,0x320(%r15)
  0x00007f8f8f73efcb: test   $0xf,%esp
  0x00007f8f8f73efd1: je     0x00007f8f8f73efe9
  0x00007f8f8f73efd7: sub    $0x8,%rsp
  0x00007f8f8f73efdb: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73efe0: add    $0x8,%rsp
  0x00007f8f8f73efe4: jmpq   0x00007f8f8f73efee
  0x00007f8f8f73efe9: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73efee: movabs $0x0,%r10
  0x00007f8f8f73eff8: mov    %r10,0x320(%r15)
  0x00007f8f8f73efff: movabs $0x0,%r10
  0x00007f8f8f73f009: mov    %r10,0x330(%r15)
  0x00007f8f8f73f010: movabs $0x0,%r10
  0x00007f8f8f73f01a: mov    %r10,0x328(%r15)
  0x00007f8f8f73f021: vzeroupper 
  0x00007f8f8f73f024: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f02c: je     0x00007f8f8f73f037
  0x00007f8f8f73f032: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73f037: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f03b: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f03f: retq   
  0x00007f8f8f73f040: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73f045: sub    $0x80,%rsp
  0x00007f8f8f73f04c: mov    %rax,0x78(%rsp)
  0x00007f8f8f73f051: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73f056: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73f05b: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73f060: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73f065: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73f06a: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73f06f: mov    %r8,0x38(%rsp)
  0x00007f8f8f73f074: mov    %r9,0x30(%rsp)
  0x00007f8f8f73f079: mov    %r10,0x28(%rsp)
  0x00007f8f8f73f07e: mov    %r11,0x20(%rsp)
  0x00007f8f8f73f083: mov    %r12,0x18(%rsp)
  0x00007f8f8f73f088: mov    %r13,0x10(%rsp)
  0x00007f8f8f73f08d: mov    %r14,0x8(%rsp)
  0x00007f8f8f73f092: mov    %r15,(%rsp)
  0x00007f8f8f73f096: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73f0a0: movabs $0x7f8f8f73f040,%rsi
  0x00007f8f8f73f0aa: mov    %rsp,%rdx
  0x00007f8f8f73f0ad: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73f0b1: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73f0b6: hlt    
  0x00007f8f8f73f0b7: movzbl 0x4(%r13),%ebx
  0x00007f8f8f73f0bc: add    $0x4,%r13
  0x00007f8f8f73f0c0: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f73f0ca: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73f0ce: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73f0d6: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f0da: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f0de: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f0e6: je     0x00007f8f8f73f1ff
  0x00007f8f8f73f0ec: callq  0x00007f8f8f73f0f6
  0x00007f8f8f73f0f1: jmpq   0x00007f8f8f73f188
  0x00007f8f8f73f0f6: lea    0x8(%rsp),%rax
  0x00007f8f8f73f0fb: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73f0ff: mov    %r15,%rdi
  0x00007f8f8f73f102: vzeroupper 
  0x00007f8f8f73f105: mov    %rbp,0x330(%r15)
  0x00007f8f8f73f10c: mov    %rax,0x320(%r15)
  0x00007f8f8f73f113: test   $0xf,%esp
  0x00007f8f8f73f119: je     0x00007f8f8f73f131
  0x00007f8f8f73f11f: sub    $0x8,%rsp
  0x00007f8f8f73f123: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73f128: add    $0x8,%rsp
  0x00007f8f8f73f12c: jmpq   0x00007f8f8f73f136
  0x00007f8f8f73f131: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73f136: movabs $0x0,%r10
  0x00007f8f8f73f140: mov    %r10,0x320(%r15)
  0x00007f8f8f73f147: movabs $0x0,%r10
  0x00007f8f8f73f151: mov    %r10,0x330(%r15)
  0x00007f8f8f73f158: movabs $0x0,%r10
  0x00007f8f8f73f162: mov    %r10,0x328(%r15)
  0x00007f8f8f73f169: vzeroupper 
  0x00007f8f8f73f16c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f174: je     0x00007f8f8f73f17f
  0x00007f8f8f73f17a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73f17f: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f183: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f187: retq   
  0x00007f8f8f73f188: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73f18d: sub    $0x80,%rsp
  0x00007f8f8f73f194: mov    %rax,0x78(%rsp)
  0x00007f8f8f73f199: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73f19e: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73f1a3: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73f1a8: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73f1ad: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73f1b2: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73f1b7: mov    %r8,0x38(%rsp)
  0x00007f8f8f73f1bc: mov    %r9,0x30(%rsp)
  0x00007f8f8f73f1c1: mov    %r10,0x28(%rsp)
  0x00007f8f8f73f1c6: mov    %r11,0x20(%rsp)
  0x00007f8f8f73f1cb: mov    %r12,0x18(%rsp)
  0x00007f8f8f73f1d0: mov    %r13,0x10(%rsp)
  0x00007f8f8f73f1d5: mov    %r14,0x8(%rsp)
  0x00007f8f8f73f1da: mov    %r15,(%rsp)
  0x00007f8f8f73f1de: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73f1e8: movabs $0x7f8f8f73f188,%rsi
  0x00007f8f8f73f1f2: mov    %rsp,%rdx
  0x00007f8f8f73f1f5: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73f1f9: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73f1fe: hlt    
  0x00007f8f8f73f1ff: movzbl 0x4(%r13),%ebx
  0x00007f8f8f73f204: add    $0x4,%r13
  0x00007f8f8f73f208: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f73f212: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73f216: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73f21e: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f222: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f226: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f22e: je     0x00007f8f8f73f347
  0x00007f8f8f73f234: callq  0x00007f8f8f73f23e
  0x00007f8f8f73f239: jmpq   0x00007f8f8f73f2d0
  0x00007f8f8f73f23e: lea    0x8(%rsp),%rax
  0x00007f8f8f73f243: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73f247: mov    %r15,%rdi
  0x00007f8f8f73f24a: vzeroupper 
  0x00007f8f8f73f24d: mov    %rbp,0x330(%r15)
  0x00007f8f8f73f254: mov    %rax,0x320(%r15)
  0x00007f8f8f73f25b: test   $0xf,%esp
  0x00007f8f8f73f261: je     0x00007f8f8f73f279
  0x00007f8f8f73f267: sub    $0x8,%rsp
  0x00007f8f8f73f26b: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73f270: add    $0x8,%rsp
  0x00007f8f8f73f274: jmpq   0x00007f8f8f73f27e
  0x00007f8f8f73f279: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73f27e: movabs $0x0,%r10
  0x00007f8f8f73f288: mov    %r10,0x320(%r15)
  0x00007f8f8f73f28f: movabs $0x0,%r10
  0x00007f8f8f73f299: mov    %r10,0x330(%r15)
  0x00007f8f8f73f2a0: movabs $0x0,%r10
  0x00007f8f8f73f2aa: mov    %r10,0x328(%r15)
  0x00007f8f8f73f2b1: vzeroupper 
  0x00007f8f8f73f2b4: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f2bc: je     0x00007f8f8f73f2c7
  0x00007f8f8f73f2c2: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73f2c7: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f2cb: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f2cf: retq   
  0x00007f8f8f73f2d0: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73f2d5: sub    $0x80,%rsp
  0x00007f8f8f73f2dc: mov    %rax,0x78(%rsp)
  0x00007f8f8f73f2e1: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73f2e6: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73f2eb: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73f2f0: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73f2f5: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73f2fa: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73f2ff: mov    %r8,0x38(%rsp)
  0x00007f8f8f73f304: mov    %r9,0x30(%rsp)
  0x00007f8f8f73f309: mov    %r10,0x28(%rsp)
  0x00007f8f8f73f30e: mov    %r11,0x20(%rsp)
  0x00007f8f8f73f313: mov    %r12,0x18(%rsp)
  0x00007f8f8f73f318: mov    %r13,0x10(%rsp)
  0x00007f8f8f73f31d: mov    %r14,0x8(%rsp)
  0x00007f8f8f73f322: mov    %r15,(%rsp)
  0x00007f8f8f73f326: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73f330: movabs $0x7f8f8f73f2d0,%rsi
  0x00007f8f8f73f33a: mov    %rsp,%rdx
  0x00007f8f8f73f33d: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73f341: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73f346: hlt    
  0x00007f8f8f73f347: movzbl 0x4(%r13),%ebx
  0x00007f8f8f73f34c: add    $0x4,%r13
  0x00007f8f8f73f350: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f73f35a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73f35e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73f366: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f36a: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f36e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f376: je     0x00007f8f8f73f48f
  0x00007f8f8f73f37c: callq  0x00007f8f8f73f386
  0x00007f8f8f73f381: jmpq   0x00007f8f8f73f418
  0x00007f8f8f73f386: lea    0x8(%rsp),%rax
  0x00007f8f8f73f38b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73f38f: mov    %r15,%rdi
  0x00007f8f8f73f392: vzeroupper 
  0x00007f8f8f73f395: mov    %rbp,0x330(%r15)
  0x00007f8f8f73f39c: mov    %rax,0x320(%r15)
  0x00007f8f8f73f3a3: test   $0xf,%esp
  0x00007f8f8f73f3a9: je     0x00007f8f8f73f3c1
  0x00007f8f8f73f3af: sub    $0x8,%rsp
  0x00007f8f8f73f3b3: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73f3b8: add    $0x8,%rsp
  0x00007f8f8f73f3bc: jmpq   0x00007f8f8f73f3c6
  0x00007f8f8f73f3c1: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73f3c6: movabs $0x0,%r10
  0x00007f8f8f73f3d0: mov    %r10,0x320(%r15)
  0x00007f8f8f73f3d7: movabs $0x0,%r10
  0x00007f8f8f73f3e1: mov    %r10,0x330(%r15)
  0x00007f8f8f73f3e8: movabs $0x0,%r10
  0x00007f8f8f73f3f2: mov    %r10,0x328(%r15)
  0x00007f8f8f73f3f9: vzeroupper 
  0x00007f8f8f73f3fc: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f404: je     0x00007f8f8f73f40f
  0x00007f8f8f73f40a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73f40f: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f413: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f417: retq   
  0x00007f8f8f73f418: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73f41d: sub    $0x80,%rsp
  0x00007f8f8f73f424: mov    %rax,0x78(%rsp)
  0x00007f8f8f73f429: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73f42e: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73f433: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73f438: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73f43d: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73f442: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73f447: mov    %r8,0x38(%rsp)
  0x00007f8f8f73f44c: mov    %r9,0x30(%rsp)
  0x00007f8f8f73f451: mov    %r10,0x28(%rsp)
  0x00007f8f8f73f456: mov    %r11,0x20(%rsp)
  0x00007f8f8f73f45b: mov    %r12,0x18(%rsp)
  0x00007f8f8f73f460: mov    %r13,0x10(%rsp)
  0x00007f8f8f73f465: mov    %r14,0x8(%rsp)
  0x00007f8f8f73f46a: mov    %r15,(%rsp)
  0x00007f8f8f73f46e: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73f478: movabs $0x7f8f8f73f418,%rsi
  0x00007f8f8f73f482: mov    %rsp,%rdx
  0x00007f8f8f73f485: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73f489: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73f48e: hlt    
  0x00007f8f8f73f48f: movzbl 0x5(%r13),%ebx
  0x00007f8f8f73f494: add    $0x5,%r13
  0x00007f8f8f73f498: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73f4a2: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73f4a6: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73f4ae: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f4b2: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f4b6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f4be: je     0x00007f8f8f73f5d7
  0x00007f8f8f73f4c4: callq  0x00007f8f8f73f4ce
  0x00007f8f8f73f4c9: jmpq   0x00007f8f8f73f560
  0x00007f8f8f73f4ce: lea    0x8(%rsp),%rax
  0x00007f8f8f73f4d3: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73f4d7: mov    %r15,%rdi
  0x00007f8f8f73f4da: vzeroupper 
  0x00007f8f8f73f4dd: mov    %rbp,0x330(%r15)
  0x00007f8f8f73f4e4: mov    %rax,0x320(%r15)
  0x00007f8f8f73f4eb: test   $0xf,%esp
  0x00007f8f8f73f4f1: je     0x00007f8f8f73f509
  0x00007f8f8f73f4f7: sub    $0x8,%rsp
  0x00007f8f8f73f4fb: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73f500: add    $0x8,%rsp
  0x00007f8f8f73f504: jmpq   0x00007f8f8f73f50e
  0x00007f8f8f73f509: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73f50e: movabs $0x0,%r10
  0x00007f8f8f73f518: mov    %r10,0x320(%r15)
  0x00007f8f8f73f51f: movabs $0x0,%r10
  0x00007f8f8f73f529: mov    %r10,0x330(%r15)
  0x00007f8f8f73f530: movabs $0x0,%r10
  0x00007f8f8f73f53a: mov    %r10,0x328(%r15)
  0x00007f8f8f73f541: vzeroupper 
  0x00007f8f8f73f544: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f54c: je     0x00007f8f8f73f557
  0x00007f8f8f73f552: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73f557: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f55b: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f55f: retq   
  0x00007f8f8f73f560: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73f565: sub    $0x80,%rsp
  0x00007f8f8f73f56c: mov    %rax,0x78(%rsp)
  0x00007f8f8f73f571: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73f576: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73f57b: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73f580: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73f585: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73f58a: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73f58f: mov    %r8,0x38(%rsp)
  0x00007f8f8f73f594: mov    %r9,0x30(%rsp)
  0x00007f8f8f73f599: mov    %r10,0x28(%rsp)
  0x00007f8f8f73f59e: mov    %r11,0x20(%rsp)
  0x00007f8f8f73f5a3: mov    %r12,0x18(%rsp)
  0x00007f8f8f73f5a8: mov    %r13,0x10(%rsp)
  0x00007f8f8f73f5ad: mov    %r14,0x8(%rsp)
  0x00007f8f8f73f5b2: mov    %r15,(%rsp)
  0x00007f8f8f73f5b6: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73f5c0: movabs $0x7f8f8f73f560,%rsi
  0x00007f8f8f73f5ca: mov    %rsp,%rdx
  0x00007f8f8f73f5cd: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73f5d1: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73f5d6: hlt    
  0x00007f8f8f73f5d7: movzbl 0x5(%r13),%ebx
  0x00007f8f8f73f5dc: add    $0x5,%r13
  0x00007f8f8f73f5e0: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73f5ea: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73f5ee: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73f5f6: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f5fa: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f5fe: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f606: je     0x00007f8f8f73f71f
  0x00007f8f8f73f60c: callq  0x00007f8f8f73f616
  0x00007f8f8f73f611: jmpq   0x00007f8f8f73f6a8
  0x00007f8f8f73f616: lea    0x8(%rsp),%rax
  0x00007f8f8f73f61b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73f61f: mov    %r15,%rdi
  0x00007f8f8f73f622: vzeroupper 
  0x00007f8f8f73f625: mov    %rbp,0x330(%r15)
  0x00007f8f8f73f62c: mov    %rax,0x320(%r15)
  0x00007f8f8f73f633: test   $0xf,%esp
  0x00007f8f8f73f639: je     0x00007f8f8f73f651
  0x00007f8f8f73f63f: sub    $0x8,%rsp
  0x00007f8f8f73f643: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73f648: add    $0x8,%rsp
  0x00007f8f8f73f64c: jmpq   0x00007f8f8f73f656
  0x00007f8f8f73f651: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73f656: movabs $0x0,%r10
  0x00007f8f8f73f660: mov    %r10,0x320(%r15)
  0x00007f8f8f73f667: movabs $0x0,%r10
  0x00007f8f8f73f671: mov    %r10,0x330(%r15)
  0x00007f8f8f73f678: movabs $0x0,%r10
  0x00007f8f8f73f682: mov    %r10,0x328(%r15)
  0x00007f8f8f73f689: vzeroupper 
  0x00007f8f8f73f68c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f694: je     0x00007f8f8f73f69f
  0x00007f8f8f73f69a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73f69f: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f6a3: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f6a7: retq   
  0x00007f8f8f73f6a8: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73f6ad: sub    $0x80,%rsp
  0x00007f8f8f73f6b4: mov    %rax,0x78(%rsp)
  0x00007f8f8f73f6b9: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73f6be: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73f6c3: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73f6c8: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73f6cd: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73f6d2: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73f6d7: mov    %r8,0x38(%rsp)
  0x00007f8f8f73f6dc: mov    %r9,0x30(%rsp)
  0x00007f8f8f73f6e1: mov    %r10,0x28(%rsp)
  0x00007f8f8f73f6e6: mov    %r11,0x20(%rsp)
  0x00007f8f8f73f6eb: mov    %r12,0x18(%rsp)
  0x00007f8f8f73f6f0: mov    %r13,0x10(%rsp)
  0x00007f8f8f73f6f5: mov    %r14,0x8(%rsp)
  0x00007f8f8f73f6fa: mov    %r15,(%rsp)
  0x00007f8f8f73f6fe: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73f708: movabs $0x7f8f8f73f6a8,%rsi
  0x00007f8f8f73f712: mov    %rsp,%rdx
  0x00007f8f8f73f715: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73f719: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73f71e: hlt    
  0x00007f8f8f73f71f: movzbl 0x5(%r13),%ebx
  0x00007f8f8f73f724: add    $0x5,%r13
  0x00007f8f8f73f728: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f73f732: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73f736: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73f73e: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f742: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f746: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f74e: je     0x00007f8f8f73f867
  0x00007f8f8f73f754: callq  0x00007f8f8f73f75e
  0x00007f8f8f73f759: jmpq   0x00007f8f8f73f7f0
  0x00007f8f8f73f75e: lea    0x8(%rsp),%rax
  0x00007f8f8f73f763: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73f767: mov    %r15,%rdi
  0x00007f8f8f73f76a: vzeroupper 
  0x00007f8f8f73f76d: mov    %rbp,0x330(%r15)
  0x00007f8f8f73f774: mov    %rax,0x320(%r15)
  0x00007f8f8f73f77b: test   $0xf,%esp
  0x00007f8f8f73f781: je     0x00007f8f8f73f799
  0x00007f8f8f73f787: sub    $0x8,%rsp
  0x00007f8f8f73f78b: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73f790: add    $0x8,%rsp
  0x00007f8f8f73f794: jmpq   0x00007f8f8f73f79e
  0x00007f8f8f73f799: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73f79e: movabs $0x0,%r10
  0x00007f8f8f73f7a8: mov    %r10,0x320(%r15)
  0x00007f8f8f73f7af: movabs $0x0,%r10
  0x00007f8f8f73f7b9: mov    %r10,0x330(%r15)
  0x00007f8f8f73f7c0: movabs $0x0,%r10
  0x00007f8f8f73f7ca: mov    %r10,0x328(%r15)
  0x00007f8f8f73f7d1: vzeroupper 
  0x00007f8f8f73f7d4: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f7dc: je     0x00007f8f8f73f7e7
  0x00007f8f8f73f7e2: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73f7e7: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f7eb: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f7ef: retq   
  0x00007f8f8f73f7f0: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73f7f5: sub    $0x80,%rsp
  0x00007f8f8f73f7fc: mov    %rax,0x78(%rsp)
  0x00007f8f8f73f801: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73f806: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73f80b: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73f810: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73f815: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73f81a: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73f81f: mov    %r8,0x38(%rsp)
  0x00007f8f8f73f824: mov    %r9,0x30(%rsp)
  0x00007f8f8f73f829: mov    %r10,0x28(%rsp)
  0x00007f8f8f73f82e: mov    %r11,0x20(%rsp)
  0x00007f8f8f73f833: mov    %r12,0x18(%rsp)
  0x00007f8f8f73f838: mov    %r13,0x10(%rsp)
  0x00007f8f8f73f83d: mov    %r14,0x8(%rsp)
  0x00007f8f8f73f842: mov    %r15,(%rsp)
  0x00007f8f8f73f846: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73f850: movabs $0x7f8f8f73f7f0,%rsi
  0x00007f8f8f73f85a: mov    %rsp,%rdx
  0x00007f8f8f73f85d: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73f861: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73f866: hlt    
  0x00007f8f8f73f867: movzbl 0x5(%r13),%ebx
  0x00007f8f8f73f86c: add    $0x5,%r13
  0x00007f8f8f73f870: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f73f87a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73f87e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73f886: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f88a: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f88e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f896: je     0x00007f8f8f73f9af
  0x00007f8f8f73f89c: callq  0x00007f8f8f73f8a6
  0x00007f8f8f73f8a1: jmpq   0x00007f8f8f73f938
  0x00007f8f8f73f8a6: lea    0x8(%rsp),%rax
  0x00007f8f8f73f8ab: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73f8af: mov    %r15,%rdi
  0x00007f8f8f73f8b2: vzeroupper 
  0x00007f8f8f73f8b5: mov    %rbp,0x330(%r15)
  0x00007f8f8f73f8bc: mov    %rax,0x320(%r15)
  0x00007f8f8f73f8c3: test   $0xf,%esp
  0x00007f8f8f73f8c9: je     0x00007f8f8f73f8e1
  0x00007f8f8f73f8cf: sub    $0x8,%rsp
  0x00007f8f8f73f8d3: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73f8d8: add    $0x8,%rsp
  0x00007f8f8f73f8dc: jmpq   0x00007f8f8f73f8e6
  0x00007f8f8f73f8e1: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73f8e6: movabs $0x0,%r10
  0x00007f8f8f73f8f0: mov    %r10,0x320(%r15)
  0x00007f8f8f73f8f7: movabs $0x0,%r10
  0x00007f8f8f73f901: mov    %r10,0x330(%r15)
  0x00007f8f8f73f908: movabs $0x0,%r10
  0x00007f8f8f73f912: mov    %r10,0x328(%r15)
  0x00007f8f8f73f919: vzeroupper 
  0x00007f8f8f73f91c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f924: je     0x00007f8f8f73f92f
  0x00007f8f8f73f92a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73f92f: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f933: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f937: retq   
  0x00007f8f8f73f938: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73f93d: sub    $0x80,%rsp
  0x00007f8f8f73f944: mov    %rax,0x78(%rsp)
  0x00007f8f8f73f949: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73f94e: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73f953: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73f958: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73f95d: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73f962: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73f967: mov    %r8,0x38(%rsp)
  0x00007f8f8f73f96c: mov    %r9,0x30(%rsp)
  0x00007f8f8f73f971: mov    %r10,0x28(%rsp)
  0x00007f8f8f73f976: mov    %r11,0x20(%rsp)
  0x00007f8f8f73f97b: mov    %r12,0x18(%rsp)
  0x00007f8f8f73f980: mov    %r13,0x10(%rsp)
  0x00007f8f8f73f985: mov    %r14,0x8(%rsp)
  0x00007f8f8f73f98a: mov    %r15,(%rsp)
  0x00007f8f8f73f98e: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73f998: movabs $0x7f8f8f73f938,%rsi
  0x00007f8f8f73f9a2: mov    %rsp,%rdx
  0x00007f8f8f73f9a5: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73f9a9: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73f9ae: hlt    
  0x00007f8f8f73f9af: movzbl 0x5(%r13),%ebx
  0x00007f8f8f73f9b4: add    $0x5,%r13
  0x00007f8f8f73f9b8: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f73f9c2: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73f9c6: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73f9ce: mov    -0x40(%rbp),%r13
  0x00007f8f8f73f9d2: mov    -0x38(%rbp),%r14
  0x00007f8f8f73f9d6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73f9de: je     0x00007f8f8f73faf7
  0x00007f8f8f73f9e4: callq  0x00007f8f8f73f9ee
  0x00007f8f8f73f9e9: jmpq   0x00007f8f8f73fa80
  0x00007f8f8f73f9ee: lea    0x8(%rsp),%rax
  0x00007f8f8f73f9f3: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73f9f7: mov    %r15,%rdi
  0x00007f8f8f73f9fa: vzeroupper 
  0x00007f8f8f73f9fd: mov    %rbp,0x330(%r15)
  0x00007f8f8f73fa04: mov    %rax,0x320(%r15)
  0x00007f8f8f73fa0b: test   $0xf,%esp
  0x00007f8f8f73fa11: je     0x00007f8f8f73fa29
  0x00007f8f8f73fa17: sub    $0x8,%rsp
  0x00007f8f8f73fa1b: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73fa20: add    $0x8,%rsp
  0x00007f8f8f73fa24: jmpq   0x00007f8f8f73fa2e
  0x00007f8f8f73fa29: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73fa2e: movabs $0x0,%r10
  0x00007f8f8f73fa38: mov    %r10,0x320(%r15)
  0x00007f8f8f73fa3f: movabs $0x0,%r10
  0x00007f8f8f73fa49: mov    %r10,0x330(%r15)
  0x00007f8f8f73fa50: movabs $0x0,%r10
  0x00007f8f8f73fa5a: mov    %r10,0x328(%r15)
  0x00007f8f8f73fa61: vzeroupper 
  0x00007f8f8f73fa64: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73fa6c: je     0x00007f8f8f73fa77
  0x00007f8f8f73fa72: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73fa77: mov    -0x40(%rbp),%r13
  0x00007f8f8f73fa7b: mov    -0x38(%rbp),%r14
  0x00007f8f8f73fa7f: retq   
  0x00007f8f8f73fa80: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73fa85: sub    $0x80,%rsp
  0x00007f8f8f73fa8c: mov    %rax,0x78(%rsp)
  0x00007f8f8f73fa91: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73fa96: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73fa9b: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73faa0: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73faa5: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73faaa: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73faaf: mov    %r8,0x38(%rsp)
  0x00007f8f8f73fab4: mov    %r9,0x30(%rsp)
  0x00007f8f8f73fab9: mov    %r10,0x28(%rsp)
  0x00007f8f8f73fabe: mov    %r11,0x20(%rsp)
  0x00007f8f8f73fac3: mov    %r12,0x18(%rsp)
  0x00007f8f8f73fac8: mov    %r13,0x10(%rsp)
  0x00007f8f8f73facd: mov    %r14,0x8(%rsp)
  0x00007f8f8f73fad2: mov    %r15,(%rsp)
  0x00007f8f8f73fad6: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73fae0: movabs $0x7f8f8f73fa80,%rsi
  0x00007f8f8f73faea: mov    %rsp,%rdx
  0x00007f8f8f73faed: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73faf1: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73faf6: hlt    
  0x00007f8f8f73faf7: movzbl 0x5(%r13),%ebx
  0x00007f8f8f73fafc: add    $0x5,%r13
  0x00007f8f8f73fb00: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f73fb0a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73fb0e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73fb16: mov    -0x40(%rbp),%r13
  0x00007f8f8f73fb1a: mov    -0x38(%rbp),%r14
  0x00007f8f8f73fb1e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73fb26: je     0x00007f8f8f73fc3f
  0x00007f8f8f73fb2c: callq  0x00007f8f8f73fb36
  0x00007f8f8f73fb31: jmpq   0x00007f8f8f73fbc8
  0x00007f8f8f73fb36: lea    0x8(%rsp),%rax
  0x00007f8f8f73fb3b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73fb3f: mov    %r15,%rdi
  0x00007f8f8f73fb42: vzeroupper 
  0x00007f8f8f73fb45: mov    %rbp,0x330(%r15)
  0x00007f8f8f73fb4c: mov    %rax,0x320(%r15)
  0x00007f8f8f73fb53: test   $0xf,%esp
  0x00007f8f8f73fb59: je     0x00007f8f8f73fb71
  0x00007f8f8f73fb5f: sub    $0x8,%rsp
  0x00007f8f8f73fb63: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73fb68: add    $0x8,%rsp
  0x00007f8f8f73fb6c: jmpq   0x00007f8f8f73fb76
  0x00007f8f8f73fb71: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73fb76: movabs $0x0,%r10
  0x00007f8f8f73fb80: mov    %r10,0x320(%r15)
  0x00007f8f8f73fb87: movabs $0x0,%r10
  0x00007f8f8f73fb91: mov    %r10,0x330(%r15)
  0x00007f8f8f73fb98: movabs $0x0,%r10
  0x00007f8f8f73fba2: mov    %r10,0x328(%r15)
  0x00007f8f8f73fba9: vzeroupper 
  0x00007f8f8f73fbac: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73fbb4: je     0x00007f8f8f73fbbf
  0x00007f8f8f73fbba: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73fbbf: mov    -0x40(%rbp),%r13
  0x00007f8f8f73fbc3: mov    -0x38(%rbp),%r14
  0x00007f8f8f73fbc7: retq   
  0x00007f8f8f73fbc8: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73fbcd: sub    $0x80,%rsp
  0x00007f8f8f73fbd4: mov    %rax,0x78(%rsp)
  0x00007f8f8f73fbd9: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73fbde: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73fbe3: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73fbe8: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73fbed: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73fbf2: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73fbf7: mov    %r8,0x38(%rsp)
  0x00007f8f8f73fbfc: mov    %r9,0x30(%rsp)
  0x00007f8f8f73fc01: mov    %r10,0x28(%rsp)
  0x00007f8f8f73fc06: mov    %r11,0x20(%rsp)
  0x00007f8f8f73fc0b: mov    %r12,0x18(%rsp)
  0x00007f8f8f73fc10: mov    %r13,0x10(%rsp)
  0x00007f8f8f73fc15: mov    %r14,0x8(%rsp)
  0x00007f8f8f73fc1a: mov    %r15,(%rsp)
  0x00007f8f8f73fc1e: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73fc28: movabs $0x7f8f8f73fbc8,%rsi
  0x00007f8f8f73fc32: mov    %rsp,%rdx
  0x00007f8f8f73fc35: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73fc39: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73fc3e: hlt    
  0x00007f8f8f73fc3f: movzbl 0x6(%r13),%ebx
  0x00007f8f8f73fc44: add    $0x6,%r13
  0x00007f8f8f73fc48: movabs $0x7f8fadbe4d80,%r10
  0x00007f8f8f73fc52: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73fc56: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73fc5e: mov    -0x40(%rbp),%r13
  0x00007f8f8f73fc62: mov    -0x38(%rbp),%r14
  0x00007f8f8f73fc66: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73fc6e: je     0x00007f8f8f73fd87
  0x00007f8f8f73fc74: callq  0x00007f8f8f73fc7e
  0x00007f8f8f73fc79: jmpq   0x00007f8f8f73fd10
  0x00007f8f8f73fc7e: lea    0x8(%rsp),%rax
  0x00007f8f8f73fc83: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73fc87: mov    %r15,%rdi
  0x00007f8f8f73fc8a: vzeroupper 
  0x00007f8f8f73fc8d: mov    %rbp,0x330(%r15)
  0x00007f8f8f73fc94: mov    %rax,0x320(%r15)
  0x00007f8f8f73fc9b: test   $0xf,%esp
  0x00007f8f8f73fca1: je     0x00007f8f8f73fcb9
  0x00007f8f8f73fca7: sub    $0x8,%rsp
  0x00007f8f8f73fcab: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73fcb0: add    $0x8,%rsp
  0x00007f8f8f73fcb4: jmpq   0x00007f8f8f73fcbe
  0x00007f8f8f73fcb9: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73fcbe: movabs $0x0,%r10
  0x00007f8f8f73fcc8: mov    %r10,0x320(%r15)
  0x00007f8f8f73fccf: movabs $0x0,%r10
  0x00007f8f8f73fcd9: mov    %r10,0x330(%r15)
  0x00007f8f8f73fce0: movabs $0x0,%r10
  0x00007f8f8f73fcea: mov    %r10,0x328(%r15)
  0x00007f8f8f73fcf1: vzeroupper 
  0x00007f8f8f73fcf4: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73fcfc: je     0x00007f8f8f73fd07
  0x00007f8f8f73fd02: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73fd07: mov    -0x40(%rbp),%r13
  0x00007f8f8f73fd0b: mov    -0x38(%rbp),%r14
  0x00007f8f8f73fd0f: retq   
  0x00007f8f8f73fd10: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73fd15: sub    $0x80,%rsp
  0x00007f8f8f73fd1c: mov    %rax,0x78(%rsp)
  0x00007f8f8f73fd21: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73fd26: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73fd2b: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73fd30: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73fd35: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73fd3a: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73fd3f: mov    %r8,0x38(%rsp)
  0x00007f8f8f73fd44: mov    %r9,0x30(%rsp)
  0x00007f8f8f73fd49: mov    %r10,0x28(%rsp)
  0x00007f8f8f73fd4e: mov    %r11,0x20(%rsp)
  0x00007f8f8f73fd53: mov    %r12,0x18(%rsp)
  0x00007f8f8f73fd58: mov    %r13,0x10(%rsp)
  0x00007f8f8f73fd5d: mov    %r14,0x8(%rsp)
  0x00007f8f8f73fd62: mov    %r15,(%rsp)
  0x00007f8f8f73fd66: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73fd70: movabs $0x7f8f8f73fd10,%rsi
  0x00007f8f8f73fd7a: mov    %rsp,%rdx
  0x00007f8f8f73fd7d: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73fd81: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73fd86: hlt    
  0x00007f8f8f73fd87: movzbl 0x6(%r13),%ebx
  0x00007f8f8f73fd8c: add    $0x6,%r13
  0x00007f8f8f73fd90: movabs $0x7f8fadbe7580,%r10
  0x00007f8f8f73fd9a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73fd9e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73fda6: mov    -0x40(%rbp),%r13
  0x00007f8f8f73fdaa: mov    -0x38(%rbp),%r14
  0x00007f8f8f73fdae: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73fdb6: je     0x00007f8f8f73fecf
  0x00007f8f8f73fdbc: callq  0x00007f8f8f73fdc6
  0x00007f8f8f73fdc1: jmpq   0x00007f8f8f73fe58
  0x00007f8f8f73fdc6: lea    0x8(%rsp),%rax
  0x00007f8f8f73fdcb: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73fdcf: mov    %r15,%rdi
  0x00007f8f8f73fdd2: vzeroupper 
  0x00007f8f8f73fdd5: mov    %rbp,0x330(%r15)
  0x00007f8f8f73fddc: mov    %rax,0x320(%r15)
  0x00007f8f8f73fde3: test   $0xf,%esp
  0x00007f8f8f73fde9: je     0x00007f8f8f73fe01
  0x00007f8f8f73fdef: sub    $0x8,%rsp
  0x00007f8f8f73fdf3: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73fdf8: add    $0x8,%rsp
  0x00007f8f8f73fdfc: jmpq   0x00007f8f8f73fe06
  0x00007f8f8f73fe01: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73fe06: movabs $0x0,%r10
  0x00007f8f8f73fe10: mov    %r10,0x320(%r15)
  0x00007f8f8f73fe17: movabs $0x0,%r10
  0x00007f8f8f73fe21: mov    %r10,0x330(%r15)
  0x00007f8f8f73fe28: movabs $0x0,%r10
  0x00007f8f8f73fe32: mov    %r10,0x328(%r15)
  0x00007f8f8f73fe39: vzeroupper 
  0x00007f8f8f73fe3c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73fe44: je     0x00007f8f8f73fe4f
  0x00007f8f8f73fe4a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73fe4f: mov    -0x40(%rbp),%r13
  0x00007f8f8f73fe53: mov    -0x38(%rbp),%r14
  0x00007f8f8f73fe57: retq   
  0x00007f8f8f73fe58: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73fe5d: sub    $0x80,%rsp
  0x00007f8f8f73fe64: mov    %rax,0x78(%rsp)
  0x00007f8f8f73fe69: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73fe6e: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73fe73: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73fe78: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73fe7d: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73fe82: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73fe87: mov    %r8,0x38(%rsp)
  0x00007f8f8f73fe8c: mov    %r9,0x30(%rsp)
  0x00007f8f8f73fe91: mov    %r10,0x28(%rsp)
  0x00007f8f8f73fe96: mov    %r11,0x20(%rsp)
  0x00007f8f8f73fe9b: mov    %r12,0x18(%rsp)
  0x00007f8f8f73fea0: mov    %r13,0x10(%rsp)
  0x00007f8f8f73fea5: mov    %r14,0x8(%rsp)
  0x00007f8f8f73feaa: mov    %r15,(%rsp)
  0x00007f8f8f73feae: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f73feb8: movabs $0x7f8f8f73fe58,%rsi
  0x00007f8f8f73fec2: mov    %rsp,%rdx
  0x00007f8f8f73fec5: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f73fec9: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f73fece: hlt    
  0x00007f8f8f73fecf: movzbl 0x6(%r13),%ebx
  0x00007f8f8f73fed4: add    $0x6,%r13
  0x00007f8f8f73fed8: movabs $0x7f8fadbe6580,%r10
  0x00007f8f8f73fee2: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f73fee6: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f73feee: mov    -0x40(%rbp),%r13
  0x00007f8f8f73fef2: mov    -0x38(%rbp),%r14
  0x00007f8f8f73fef6: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73fefe: je     0x00007f8f8f740017
  0x00007f8f8f73ff04: callq  0x00007f8f8f73ff0e
  0x00007f8f8f73ff09: jmpq   0x00007f8f8f73ffa0
  0x00007f8f8f73ff0e: lea    0x8(%rsp),%rax
  0x00007f8f8f73ff13: mov    %r13,-0x40(%rbp)
  0x00007f8f8f73ff17: mov    %r15,%rdi
  0x00007f8f8f73ff1a: vzeroupper 
  0x00007f8f8f73ff1d: mov    %rbp,0x330(%r15)
  0x00007f8f8f73ff24: mov    %rax,0x320(%r15)
  0x00007f8f8f73ff2b: test   $0xf,%esp
  0x00007f8f8f73ff31: je     0x00007f8f8f73ff49
  0x00007f8f8f73ff37: sub    $0x8,%rsp
  0x00007f8f8f73ff3b: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73ff40: add    $0x8,%rsp
  0x00007f8f8f73ff44: jmpq   0x00007f8f8f73ff4e
  0x00007f8f8f73ff49: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f73ff4e: movabs $0x0,%r10
  0x00007f8f8f73ff58: mov    %r10,0x320(%r15)
  0x00007f8f8f73ff5f: movabs $0x0,%r10
  0x00007f8f8f73ff69: mov    %r10,0x330(%r15)
  0x00007f8f8f73ff70: movabs $0x0,%r10
  0x00007f8f8f73ff7a: mov    %r10,0x328(%r15)
  0x00007f8f8f73ff81: vzeroupper 
  0x00007f8f8f73ff84: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f73ff8c: je     0x00007f8f8f73ff97
  0x00007f8f8f73ff92: jmpq   0x00007f8f8f71a780
  0x00007f8f8f73ff97: mov    -0x40(%rbp),%r13
  0x00007f8f8f73ff9b: mov    -0x38(%rbp),%r14
  0x00007f8f8f73ff9f: retq   
  0x00007f8f8f73ffa0: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f73ffa5: sub    $0x80,%rsp
  0x00007f8f8f73ffac: mov    %rax,0x78(%rsp)
  0x00007f8f8f73ffb1: mov    %rcx,0x70(%rsp)
  0x00007f8f8f73ffb6: mov    %rdx,0x68(%rsp)
  0x00007f8f8f73ffbb: mov    %rbx,0x60(%rsp)
  0x00007f8f8f73ffc0: mov    %rbp,0x50(%rsp)
  0x00007f8f8f73ffc5: mov    %rsi,0x48(%rsp)
  0x00007f8f8f73ffca: mov    %rdi,0x40(%rsp)
  0x00007f8f8f73ffcf: mov    %r8,0x38(%rsp)
  0x00007f8f8f73ffd4: mov    %r9,0x30(%rsp)
  0x00007f8f8f73ffd9: mov    %r10,0x28(%rsp)
  0x00007f8f8f73ffde: mov    %r11,0x20(%rsp)
  0x00007f8f8f73ffe3: mov    %r12,0x18(%rsp)
  0x00007f8f8f73ffe8: mov    %r13,0x10(%rsp)
  0x00007f8f8f73ffed: mov    %r14,0x8(%rsp)
  0x00007f8f8f73fff2: mov    %r15,(%rsp)
  0x00007f8f8f73fff6: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f740000: movabs $0x7f8f8f73ffa0,%rsi
  0x00007f8f8f74000a: mov    %rsp,%rdx
  0x00007f8f8f74000d: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f740011: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f740016: hlt    
  0x00007f8f8f740017: movzbl 0x6(%r13),%ebx
  0x00007f8f8f74001c: add    $0x6,%r13
  0x00007f8f8f740020: movabs $0x7f8fadbe5d80,%r10
  0x00007f8f8f74002a: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f74002e: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f740036: mov    -0x40(%rbp),%r13
  0x00007f8f8f74003a: mov    -0x38(%rbp),%r14
  0x00007f8f8f74003e: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f740046: je     0x00007f8f8f74015f
  0x00007f8f8f74004c: callq  0x00007f8f8f740056
  0x00007f8f8f740051: jmpq   0x00007f8f8f7400e8
  0x00007f8f8f740056: lea    0x8(%rsp),%rax
  0x00007f8f8f74005b: mov    %r13,-0x40(%rbp)
  0x00007f8f8f74005f: mov    %r15,%rdi
  0x00007f8f8f740062: vzeroupper 
  0x00007f8f8f740065: mov    %rbp,0x330(%r15)
  0x00007f8f8f74006c: mov    %rax,0x320(%r15)
  0x00007f8f8f740073: test   $0xf,%esp
  0x00007f8f8f740079: je     0x00007f8f8f740091
  0x00007f8f8f74007f: sub    $0x8,%rsp
  0x00007f8f8f740083: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f740088: add    $0x8,%rsp
  0x00007f8f8f74008c: jmpq   0x00007f8f8f740096
  0x00007f8f8f740091: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f740096: movabs $0x0,%r10
  0x00007f8f8f7400a0: mov    %r10,0x320(%r15)
  0x00007f8f8f7400a7: movabs $0x0,%r10
  0x00007f8f8f7400b1: mov    %r10,0x330(%r15)
  0x00007f8f8f7400b8: movabs $0x0,%r10
  0x00007f8f8f7400c2: mov    %r10,0x328(%r15)
  0x00007f8f8f7400c9: vzeroupper 
  0x00007f8f8f7400cc: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7400d4: je     0x00007f8f8f7400df
  0x00007f8f8f7400da: jmpq   0x00007f8f8f71a780
  0x00007f8f8f7400df: mov    -0x40(%rbp),%r13
  0x00007f8f8f7400e3: mov    -0x38(%rbp),%r14
  0x00007f8f8f7400e7: retq   
  0x00007f8f8f7400e8: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f7400ed: sub    $0x80,%rsp
  0x00007f8f8f7400f4: mov    %rax,0x78(%rsp)
  0x00007f8f8f7400f9: mov    %rcx,0x70(%rsp)
  0x00007f8f8f7400fe: mov    %rdx,0x68(%rsp)
  0x00007f8f8f740103: mov    %rbx,0x60(%rsp)
  0x00007f8f8f740108: mov    %rbp,0x50(%rsp)
  0x00007f8f8f74010d: mov    %rsi,0x48(%rsp)
  0x00007f8f8f740112: mov    %rdi,0x40(%rsp)
  0x00007f8f8f740117: mov    %r8,0x38(%rsp)
  0x00007f8f8f74011c: mov    %r9,0x30(%rsp)
  0x00007f8f8f740121: mov    %r10,0x28(%rsp)
  0x00007f8f8f740126: mov    %r11,0x20(%rsp)
  0x00007f8f8f74012b: mov    %r12,0x18(%rsp)
  0x00007f8f8f740130: mov    %r13,0x10(%rsp)
  0x00007f8f8f740135: mov    %r14,0x8(%rsp)
  0x00007f8f8f74013a: mov    %r15,(%rsp)
  0x00007f8f8f74013e: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f740148: movabs $0x7f8f8f7400e8,%rsi
  0x00007f8f8f740152: mov    %rsp,%rdx
  0x00007f8f8f740155: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f740159: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f74015e: hlt    
  0x00007f8f8f74015f: movzbl 0x6(%r13),%ebx
  0x00007f8f8f740164: add    $0x6,%r13
  0x00007f8f8f740168: movabs $0x7f8fadbe5580,%r10
  0x00007f8f8f740172: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f740176: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f74017e: mov    -0x40(%rbp),%r13
  0x00007f8f8f740182: mov    -0x38(%rbp),%r14
  0x00007f8f8f740186: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f74018e: je     0x00007f8f8f7402a7
  0x00007f8f8f740194: callq  0x00007f8f8f74019e
  0x00007f8f8f740199: jmpq   0x00007f8f8f740230
  0x00007f8f8f74019e: lea    0x8(%rsp),%rax
  0x00007f8f8f7401a3: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7401a7: mov    %r15,%rdi
  0x00007f8f8f7401aa: vzeroupper 
  0x00007f8f8f7401ad: mov    %rbp,0x330(%r15)
  0x00007f8f8f7401b4: mov    %rax,0x320(%r15)
  0x00007f8f8f7401bb: test   $0xf,%esp
  0x00007f8f8f7401c1: je     0x00007f8f8f7401d9
  0x00007f8f8f7401c7: sub    $0x8,%rsp
  0x00007f8f8f7401cb: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f7401d0: add    $0x8,%rsp
  0x00007f8f8f7401d4: jmpq   0x00007f8f8f7401de
  0x00007f8f8f7401d9: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f7401de: movabs $0x0,%r10
  0x00007f8f8f7401e8: mov    %r10,0x320(%r15)
  0x00007f8f8f7401ef: movabs $0x0,%r10
  0x00007f8f8f7401f9: mov    %r10,0x330(%r15)
  0x00007f8f8f740200: movabs $0x0,%r10
  0x00007f8f8f74020a: mov    %r10,0x328(%r15)
  0x00007f8f8f740211: vzeroupper 
  0x00007f8f8f740214: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f74021c: je     0x00007f8f8f740227
  0x00007f8f8f740222: jmpq   0x00007f8f8f71a780
  0x00007f8f8f740227: mov    -0x40(%rbp),%r13
  0x00007f8f8f74022b: mov    -0x38(%rbp),%r14
  0x00007f8f8f74022f: retq   
  0x00007f8f8f740230: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f740235: sub    $0x80,%rsp
  0x00007f8f8f74023c: mov    %rax,0x78(%rsp)
  0x00007f8f8f740241: mov    %rcx,0x70(%rsp)
  0x00007f8f8f740246: mov    %rdx,0x68(%rsp)
  0x00007f8f8f74024b: mov    %rbx,0x60(%rsp)
  0x00007f8f8f740250: mov    %rbp,0x50(%rsp)
  0x00007f8f8f740255: mov    %rsi,0x48(%rsp)
  0x00007f8f8f74025a: mov    %rdi,0x40(%rsp)
  0x00007f8f8f74025f: mov    %r8,0x38(%rsp)
  0x00007f8f8f740264: mov    %r9,0x30(%rsp)
  0x00007f8f8f740269: mov    %r10,0x28(%rsp)
  0x00007f8f8f74026e: mov    %r11,0x20(%rsp)
  0x00007f8f8f740273: mov    %r12,0x18(%rsp)
  0x00007f8f8f740278: mov    %r13,0x10(%rsp)
  0x00007f8f8f74027d: mov    %r14,0x8(%rsp)
  0x00007f8f8f740282: mov    %r15,(%rsp)
  0x00007f8f8f740286: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f740290: movabs $0x7f8f8f740230,%rsi
  0x00007f8f8f74029a: mov    %rsp,%rdx
  0x00007f8f8f74029d: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f7402a1: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f7402a6: hlt    
  0x00007f8f8f7402a7: movzbl 0x6(%r13),%ebx
  0x00007f8f8f7402ac: add    $0x6,%r13
  0x00007f8f8f7402b0: movabs $0x7f8fadbe6d80,%r10
  0x00007f8f8f7402ba: jmpq   *(%r10,%rbx,8)
  0x00007f8f8f7402be: movq   $0x0,-0x10(%rbp)
  0x00007f8f8f7402c6: mov    -0x40(%rbp),%r13
  0x00007f8f8f7402ca: mov    -0x38(%rbp),%r14
  0x00007f8f8f7402ce: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f7402d6: je     0x00007f8f8f7403ef
  0x00007f8f8f7402dc: callq  0x00007f8f8f7402e6
  0x00007f8f8f7402e1: jmpq   0x00007f8f8f740378
  0x00007f8f8f7402e6: lea    0x8(%rsp),%rax
  0x00007f8f8f7402eb: mov    %r13,-0x40(%rbp)
  0x00007f8f8f7402ef: mov    %r15,%rdi
  0x00007f8f8f7402f2: vzeroupper 
  0x00007f8f8f7402f5: mov    %rbp,0x330(%r15)
  0x00007f8f8f7402fc: mov    %rax,0x320(%r15)
  0x00007f8f8f740303: test   $0xf,%esp
  0x00007f8f8f740309: je     0x00007f8f8f740321
  0x00007f8f8f74030f: sub    $0x8,%rsp
  0x00007f8f8f740313: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f740318: add    $0x8,%rsp
  0x00007f8f8f74031c: jmpq   0x00007f8f8f740326
  0x00007f8f8f740321: callq  0x00007f8fad02a990 = InterpreterRuntime::throw_pending_exception(JavaThread*)
  0x00007f8f8f740326: movabs $0x0,%r10
  0x00007f8f8f740330: mov    %r10,0x320(%r15)
  0x00007f8f8f740337: movabs $0x0,%r10
  0x00007f8f8f740341: mov    %r10,0x330(%r15)
  0x00007f8f8f740348: movabs $0x0,%r10
  0x00007f8f8f740352: mov    %r10,0x328(%r15)
  0x00007f8f8f740359: vzeroupper 
  0x00007f8f8f74035c: cmpq   $0x0,0x8(%r15)
  0x00007f8f8f740364: je     0x00007f8f8f74036f
  0x00007f8f8f74036a: jmpq   0x00007f8f8f71a780
  0x00007f8f8f74036f: mov    -0x40(%rbp),%r13
  0x00007f8f8f740373: mov    -0x38(%rbp),%r14
  0x00007f8f8f740377: retq   
  0x00007f8f8f740378: mov    %rsp,-0x28(%rsp)
  0x00007f8f8f74037d: sub    $0x80,%rsp
  0x00007f8f8f740384: mov    %rax,0x78(%rsp)
  0x00007f8f8f740389: mov    %rcx,0x70(%rsp)
  0x00007f8f8f74038e: mov    %rdx,0x68(%rsp)
  0x00007f8f8f740393: mov    %rbx,0x60(%rsp)
  0x00007f8f8f740398: mov    %rbp,0x50(%rsp)
  0x00007f8f8f74039d: mov    %rsi,0x48(%rsp)
  0x00007f8f8f7403a2: mov    %rdi,0x40(%rsp)
  0x00007f8f8f7403a7: mov    %r8,0x38(%rsp)
  0x00007f8f8f7403ac: mov    %r9,0x30(%rsp)
  0x00007f8f8f7403b1: mov    %r10,0x28(%rsp)
  0x00007f8f8f7403b6: mov    %r11,0x20(%rsp)
  0x00007f8f8f7403bb: mov    %r12,0x18(%rsp)
  0x00007f8f8f7403c0: mov    %r13,0x10(%rsp)
  0x00007f8f8f7403c5: mov    %r14,0x8(%rsp)
  0x00007f8f8f7403ca: mov    %r15,(%rsp)
  0x00007f8f8f7403ce: movabs $0x7f8fad64001a,%rdi
  0x00007f8f8f7403d8: movabs $0x7f8f8f740378,%rsi
  0x00007f8f8f7403e2: mov    %rsp,%rdx
  0x00007f8f8f7403e5: and    $0xfffffffffffffff0,%rsp
  0x00007f8f8f7403e9: callq  0x00007f8fad285410 = MacroAssembler::debug64(char*, long, long*)
  0x00007f8f8f7403ee: hlt    
  0x00007f8f8f7403ef: jmpq   0x00007f8f8f73623f
  0x00007f8f8f7403f4: nopl   0x0(%rax)
  0x00007f8f8f7403f8: add    %al,(%rax)
  0x00007f8f8f7403fa: add    %al,(%rax)
  0x00007f8f8f7403fc: add    %al,(%rax)
  0x00007f8f8f7403fe: add    %al,(%rax)
----------------------------------------------------------------------

