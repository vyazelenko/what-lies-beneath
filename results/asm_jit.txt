# JMH version: 1.21
# VM version: JDK 11, OpenJDK 64-Bit Server VM, 11+28
# VM invoker: /home/gezr/dev/jdk-11+28/bin/java
# VM options: <none>
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: wlb.ComputerBenchmark.compute

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 7.282 ns/op
Iteration   1: 6.359 ns/op
Iteration   2: 7.238 ns/op
Iteration   3: 6.504 ns/op
Iteration   4: 6.373 ns/op
Iteration   5: 6.350 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "wlb.ComputerBenchmark.compute":
  6.565 ±(99.9%) 1.469 ns/op [Average]
  (min, avg, max) = (6.350, 6.565, 7.238), stdev = 0.381
  CI (99.9%): [5.096, 8.033] (assumes normal distribution)

Secondary result "wlb.ComputerBenchmark.compute:·asm":
PrintAssembly processed: 134710 total address lines.
Perf output processed (skipped 13.107 seconds):
 Column 1: cycles (50149 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.openjdk.jmh.infra.Blackhole::consume, version 481 (55 bytes) 

            # parm0:    rdx       = int
            #           [sp+0x30]  (sp of caller)
            0x00007f39c720eb20: mov    0x8(%rsi),%r10d
            0x00007f39c720eb24: movabs $0x800000000,%r12
            0x00007f39c720eb2e: add    %r12,%r10
            0x00007f39c720eb31: xor    %r12,%r12
            0x00007f39c720eb34: cmp    %r10,%rax
            0x00007f39c720eb37: jne    0x00007f39bf740c80  ;   {runtime_call ic_miss_stub}
            0x00007f39c720eb3d: data16 xchg %ax,%ax
          [Verified Entry Point]
  3.24%     0x00007f39c720eb40: mov    %eax,-0x14000(%rsp)
  4.39%     0x00007f39c720eb47: push   %rbp
  0.64%     0x00007f39c720eb48: sub    $0x20,%rsp         ;*synchronization entry
                                                          ; - org.openjdk.jmh.infra.Blackhole::consume@-1 (line 378)
  2.79%     0x00007f39c720eb4c: mov    0xb0(%rsi),%r10d   ;*getfield i1 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.openjdk.jmh.infra.Blackhole::consume@1 (line 378)
  4.45%     0x00007f39c720eb53: mov    %edx,%r8d
  0.61%     0x00007f39c720eb56: xor    0xb8(%rsi),%r8d    ;*ixor {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.openjdk.jmh.infra.Blackhole::consume@15 (line 380)
  2.76%     0x00007f39c720eb5d: mov    %edx,%r9d
  0.33%     0x00007f39c720eb60: xor    %r10d,%r9d         ;*ixor {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.openjdk.jmh.infra.Blackhole::consume@12 (line 380)
  4.06%     0x00007f39c720eb63: cmp    %r8d,%r9d
         ╭  0x00007f39c720eb66: je     0x00007f39c720eb78  ;*if_icmpne {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 380)
  0.80%  │  0x00007f39c720eb68: add    $0x20,%rsp
  2.43%  │  0x00007f39c720eb6c: pop    %rbp
  0.75%  │  0x00007f39c720eb6d: mov    0x108(%r15),%r10
  3.68%  │  0x00007f39c720eb74: test   %eax,(%r10)        ;   {poll_return}
  0.84%  │  0x00007f39c720eb77: retq   
         ↘  0x00007f39c720eb78: mov    %rsi,%rbp
            0x00007f39c720eb7b: mov    %edx,(%rsp)
            0x00007f39c720eb7e: mov    %r9d,0x4(%rsp)
            0x00007f39c720eb83: mov    %r8d,0x8(%rsp)
            0x00007f39c720eb88: mov    $0xffffff4d,%esi
            0x00007f39c720eb8d: xchg   %ax,%ax
            0x00007f39c720eb8f: callq  0x00007f39bf742900  ; ImmutableOopMap{rbp=Oop }
                                                          ;*if_icmpne {reexecute=1 rethrow=0 return_oop=0}
                                                          ; - org.openjdk.jmh.infra.Blackhole::consume@16 (line 380)
                                                          ;   {runtime_call UncommonTrapBlob}
....................................................................................................
 31.78%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, wlb.ComputerBenchmark::compute, version 480 (41 bytes) 

            # {method} {0x00007f39a4fec7d0} &apos;compute&apos; &apos;()I&apos; in &apos;wlb/ComputerBenchmark&apos;
            #           [sp+0x20]  (sp of caller)
            0x00007f39c720e820: mov    0x8(%rsi),%r10d
            0x00007f39c720e824: movabs $0x800000000,%r12
            0x00007f39c720e82e: add    %r12,%r10
            0x00007f39c720e831: xor    %r12,%r12
            0x00007f39c720e834: cmp    %r10,%rax
            0x00007f39c720e837: jne    0x00007f39bf740c80  ;   {runtime_call ic_miss_stub}
            0x00007f39c720e83d: data16 xchg %ax,%ax
          [Verified Entry Point]
  3.61%     0x00007f39c720e840: mov    %eax,-0x14000(%rsp)
  3.80%     0x00007f39c720e847: push   %rbp
  3.06%     0x00007f39c720e848: sub    $0x10,%rsp         ;*synchronization entry
                                                          ; - wlb.ComputerBenchmark::compute@-1 (line 24)
  4.13%     0x00007f39c720e84c: mov    0xc(%rsi),%r11d
  0.33%     0x00007f39c720e850: test   %r11d,%r11d
         ╭  0x00007f39c720e853: je     0x00007f39c720e86a
  3.04%  │  0x00007f39c720e855: mov    $0xff,%eax
  0.65%  │  0x00007f39c720e85a: add    $0x10,%rsp
  3.60%  │  0x00007f39c720e85e: pop    %rbp
  0.76%  │  0x00007f39c720e85f: mov    0x108(%r15),%r10
  2.83%  │  0x00007f39c720e866: test   %eax,(%r10)        ;   {poll_return}
  0.74%  │  0x00007f39c720e869: retq   
         ↘  0x00007f39c720e86a: mov    $0xfffffff6,%esi
            0x00007f39c720e86f: callq  0x00007f39bf742900  ; ImmutableOopMap{}
                                                          ;*invokevirtual compute {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - wlb.ComputerBenchmark::compute@6 (line 24)
                                                          ;   {runtime_call UncommonTrapBlob}
            0x00007f39c720e874: ud2                       ;*invokevirtual compute {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - wlb.ComputerBenchmark::compute@6 (line 24)
            0x00007f39c720e876: hlt    
            0x00007f39c720e877: hlt    
            0x00007f39c720e878: hlt    
....................................................................................................
 26.55%  <total for region 2>

....[Hottest Region 3]..............................................................................
c2, level 4, wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub, version 513 (51 bytes) 

             0x00007f39c7212640: mov    0x38(%rsp),%r10
             0x00007f39c7212645: movzbl 0x94(%r10),%r11d   ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub@30 (line 192)
                                                           ; implicit exception: dispatches to 0x00007f39c7212712
             0x00007f39c721264d: mov    $0x1,%ebp
             0x00007f39c7212652: test   %r11d,%r11d
         ╭   0x00007f39c7212655: jne    0x00007f39c7212698  ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub@33 (line 192)
         │   0x00007f39c7212657: nopw   0x0(%rax,%rax,1)   ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub@36 (line 193)
  0.08%  │↗  0x00007f39c7212660: mov    0x40(%rsp),%rsi
  2.51%  ││  0x00007f39c7212665: xchg   %ax,%ax
  0.06%  ││  0x00007f39c7212667: callq  0x00007f39bf740f00  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
         ││                                                ;*invokevirtual compute {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub@17 (line 190)
         ││                                                ;   {optimized virtual_call}
  3.59%  ││  0x00007f39c721266c: mov    (%rsp),%rsi
  1.92%  ││  0x00007f39c7212670: mov    %eax,%edx
  0.05%  ││  0x00007f39c7212672: nop
  2.74%  ││  0x00007f39c7212673: callq  0x00007f39bf740f00  ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
         ││                                                ;*invokevirtual consume {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub@20 (line 190)
         ││                                                ;   {optimized virtual_call}
  5.93%  ││  0x00007f39c7212678: mov    0x38(%rsp),%r10
  2.18%  ││  0x00007f39c721267d: movzbl 0x94(%r10),%r11d   ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub@33 (line 192)
  0.12%  ││  0x00007f39c7212685: mov    0x108(%r15),%r10
  2.41%  ││  0x00007f39c721268c: add    $0x1,%rbp          ; ImmutableOopMap{[48]=Oop [56]=Oop [64]=Oop [0]=Oop }
         ││                                                ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
         ││                                                ; - wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub@33 (line 192)
  0.08%  ││  0x00007f39c7212690: test   %eax,(%r10)        ;   {poll}
  2.14%  ││  0x00007f39c7212693: test   %r11d,%r11d
         │╰  0x00007f39c7212696: je     0x00007f39c7212660  ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub@36 (line 193)
         ↘   0x00007f39c7212698: movabs $0x7f39dd35f930,%r10
             0x00007f39c72126a2: callq  *%r10              ;*invokestatic nanoTime {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub@37 (line 193)
             0x00007f39c72126a5: mov    0x30(%rsp),%r10
             0x00007f39c72126aa: mov    %rbp,0x18(%r10)    ;*putfield measuredOps {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub@52 (line 195)
             0x00007f39c72126ae: mov    %rax,0x30(%r10)    ;*putfield stopTime {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub@40 (line 193)
....................................................................................................
 23.84%  <total for region 3>

....[Hottest Regions]...............................................................................
 31.78%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 481 (55 bytes) 
 26.55%         c2, level 4  wlb.ComputerBenchmark::compute, version 480 (41 bytes) 
 23.84%         c2, level 4  wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub, version 513 (51 bytes) 
  8.01%         c2, level 4  wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub, version 512 (86 bytes) 
  7.08%         c2, level 4  wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub, version 484 (51 bytes) 
  0.52%   [kernel.kallsyms]  native_write_msr (5 bytes) 
  0.16%   [kernel.kallsyms]  __update_load_avg_cfs_rq (166 bytes) 
  0.13%   [kernel.kallsyms]  __update_load_avg_se (147 bytes) 
  0.10%   [kernel.kallsyms]  __calc_delta (102 bytes) 
  0.10%   [kernel.kallsyms]  update_cfs_group (97 bytes) 
  0.06%   [kernel.kallsyms]  update_curr (91 bytes) 
  0.05%   [kernel.kallsyms]  task_tick_fair (80 bytes) 
  0.05%   [kernel.kallsyms]  native_sched_clock (70 bytes) 
  0.04%   [kernel.kallsyms]  cgroup_rstat_updated (63 bytes) 
  0.04%   [kernel.kallsyms]  syscall_return_via_sysret (3 bytes) 
  0.04%   [kernel.kallsyms]  update_irq_load_avg (89 bytes) 
  0.03%   [kernel.kallsyms]  cpuacct_charge (100 bytes) 
  0.03%   [kernel.kallsyms]  _raw_spin_lock (4 bytes) 
  0.03%           libjvm.so  ElfSymbolTable::lookup (47 bytes) 
  0.03%   [kernel.kallsyms]  __accumulate_pelt_segments (73 bytes) 
  1.35%  <...other 320 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 31.78%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consume, version 481 
 26.55%         c2, level 4  wlb.ComputerBenchmark::compute, version 480 
 23.84%         c2, level 4  wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub, version 513 
  8.01%         c2, level 4  wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub, version 512 
  7.08%         c2, level 4  wlb.generated.ComputerBenchmark_compute_jmhTest::compute_avgt_jmhStub, version 484 
  0.52%   [kernel.kallsyms]  native_write_msr 
  0.18%   [kernel.kallsyms]  __update_load_avg_cfs_rq 
  0.17%   [kernel.kallsyms]  __update_load_avg_se 
  0.11%   [kernel.kallsyms]  __calc_delta 
  0.10%   [kernel.kallsyms]  task_tick_fair 
  0.10%   [kernel.kallsyms]  update_cfs_group 
  0.08%   [kernel.kallsyms]  update_irq_load_avg 
  0.07%   [kernel.kallsyms]  update_curr 
  0.05%   [kernel.kallsyms]  native_sched_clock 
  0.05%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.04%   [kernel.kallsyms]  cgroup_rstat_updated 
  0.04%   [kernel.kallsyms]  __entry_trampoline_start 
  0.03%   [kernel.kallsyms]  cpuacct_charge 
  0.03%   [kernel.kallsyms]  _raw_spin_lock 
  0.03%   [kernel.kallsyms]  reweight_entity 
  1.14%  <...other 209 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 97.26%         c2, level 4
  2.41%   [kernel.kallsyms]
  0.16%           libjvm.so
  0.06%        libc-2.27.so
  0.03%         interpreter
  0.02%         c1, level 3
  0.02%           kvm.ko.xz
  0.01%  libpthread-2.27.so
  0.01%      hsdis-amd64.so
  0.00%              [vdso]
  0.00%          ld-2.27.so
....................................................................................................
100.00%  <totals>



# Run complete. Total time: 00:01:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt  Score   Error  Units
ComputerBenchmark.compute       avgt    5  6.565 ± 1.469  ns/op
ComputerBenchmark.compute:·asm  avgt         NaN            ---
